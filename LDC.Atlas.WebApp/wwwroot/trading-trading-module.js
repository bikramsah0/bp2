(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["trading-trading-module"],{

/***/ "./Client/app/shared/entities/allocate-section.entity.ts":
/*!***************************************************************!*\
  !*** ./Client/app/shared/entities/allocate-section.entity.ts ***!
  \***************************************************************/
/*! exports provided: AllocateSection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AllocateSection", function() { return AllocateSection; });
var AllocateSection = /** @class */ (function () {
    function AllocateSection() {
    }
    return AllocateSection;
}());



/***/ }),

/***/ "./Client/app/shared/entities/allocation.entity.ts":
/*!*********************************************************!*\
  !*** ./Client/app/shared/entities/allocation.entity.ts ***!
  \*********************************************************/
/*! exports provided: Allocation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Allocation", function() { return Allocation; });
var Allocation = /** @class */ (function () {
    function Allocation() {
    }
    return Allocation;
}());



/***/ }),

/***/ "./Client/app/shared/entities/bulk-edit-cost.entity.ts":
/*!*************************************************************!*\
  !*** ./Client/app/shared/entities/bulk-edit-cost.entity.ts ***!
  \*************************************************************/
/*! exports provided: BulkCost */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BulkCost", function() { return BulkCost; });
var BulkCost = /** @class */ (function () {
    function BulkCost() {
    }
    return BulkCost;
}());



/***/ }),

/***/ "./Client/app/shared/entities/cost.entity.ts":
/*!***************************************************!*\
  !*** ./Client/app/shared/entities/cost.entity.ts ***!
  \***************************************************/
/*! exports provided: Cost */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Cost", function() { return Cost; });
var Cost = /** @class */ (function () {
    function Cost() {
    }
    return Cost;
}());



/***/ }),

/***/ "./Client/app/shared/entities/fxdeal-detail.entity.ts":
/*!************************************************************!*\
  !*** ./Client/app/shared/entities/fxdeal-detail.entity.ts ***!
  \************************************************************/
/*! exports provided: FxDealDetail */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FxDealDetail", function() { return FxDealDetail; });
var FxDealDetail = /** @class */ (function () {
    function FxDealDetail() {
    }
    return FxDealDetail;
}());



/***/ }),

/***/ "./Client/app/shared/entities/interco-validation.entity.ts":
/*!*****************************************************************!*\
  !*** ./Client/app/shared/entities/interco-validation.entity.ts ***!
  \*****************************************************************/
/*! exports provided: IntercoValidation, IntercoField */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntercoValidation", function() { return IntercoValidation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntercoField", function() { return IntercoField; });
var IntercoValidation = /** @class */ (function () {
    function IntercoValidation() {
    }
    return IntercoValidation;
}());

var IntercoField = /** @class */ (function () {
    function IntercoField() {
    }
    return IntercoField;
}());



/***/ }),

/***/ "./Client/app/shared/entities/invoice-markings.entity.ts":
/*!***************************************************************!*\
  !*** ./Client/app/shared/entities/invoice-markings.entity.ts ***!
  \***************************************************************/
/*! exports provided: InvoiceMarkings, InvoiceMarkingPercentLines */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InvoiceMarkings", function() { return InvoiceMarkings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InvoiceMarkingPercentLines", function() { return InvoiceMarkingPercentLines; });
var InvoiceMarkings = /** @class */ (function () {
    function InvoiceMarkings() {
    }
    return InvoiceMarkings;
}());

var InvoiceMarkingPercentLines = /** @class */ (function () {
    function InvoiceMarkingPercentLines() {
    }
    return InvoiceMarkingPercentLines;
}());



/***/ }),

/***/ "./Client/app/shared/entities/merge-contracts.entity.ts":
/*!**************************************************************!*\
  !*** ./Client/app/shared/entities/merge-contracts.entity.ts ***!
  \**************************************************************/
/*! exports provided: MergeContracts */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MergeContracts", function() { return MergeContracts; });
var MergeContracts = /** @class */ (function () {
    function MergeContracts() {
    }
    return MergeContracts;
}());



/***/ }),

/***/ "./Client/app/shared/entities/physical-trade-bulk-edit.ts":
/*!****************************************************************!*\
  !*** ./Client/app/shared/entities/physical-trade-bulk-edit.ts ***!
  \****************************************************************/
/*! exports provided: PhysicalTradeBulkEdit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PhysicalTradeBulkEdit", function() { return PhysicalTradeBulkEdit; });
var PhysicalTradeBulkEdit = /** @class */ (function () {
    function PhysicalTradeBulkEdit(companyId, physicalContractToUpdate, sectionToUpdate) {
        if (physicalContractToUpdate === void 0) { physicalContractToUpdate = null; }
        if (sectionToUpdate === void 0) { sectionToUpdate = null; }
        this.companyId = companyId;
        this.physicalContractToUpdate = physicalContractToUpdate;
        this.sectionToUpdate = sectionToUpdate;
    }
    return PhysicalTradeBulkEdit;
}());



/***/ }),

/***/ "./Client/app/shared/entities/tag.entity.ts":
/*!**************************************************!*\
  !*** ./Client/app/shared/entities/tag.entity.ts ***!
  \**************************************************/
/*! exports provided: Tag */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tag", function() { return Tag; });
var Tag = /** @class */ (function () {
    function Tag(tagValueId, typeName) {
        this.id = tagValueId;
        this.tagValueId = tagValueId;
        this.typeName = typeName;
    }
    return Tag;
}());



/***/ }),

/***/ "./Client/app/shared/entities/trade-merge-options.entity.ts":
/*!******************************************************************!*\
  !*** ./Client/app/shared/entities/trade-merge-options.entity.ts ***!
  \******************************************************************/
/*! exports provided: TradeMergeOptions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeMergeOptions", function() { return TradeMergeOptions; });
var TradeMergeOptions = /** @class */ (function () {
    function TradeMergeOptions(value, name) {
        this.value = value;
        this.name = name;
    }
    TradeMergeOptions.getTradeMergeOptionsList = function () {
        if (!this.list) {
            this.list =
                [
                    this.contractHeader,
                    this.contractParent,
                    this.firstSelectedSplit,
                ];
        }
        return this.list;
    };
    TradeMergeOptions.getTradeMergeOptionsStringList = function () {
        if (!this.list) {
            this.list =
                [
                    this.contractHeader,
                    this.contractParent,
                    this.firstSelectedSplit,
                ];
        }
        return this.list.map(function (item) { return item.name; });
    };
    TradeMergeOptions.contractHeader = new TradeMergeOptions(1, 'Contract Header(.0000)');
    TradeMergeOptions.contractParent = new TradeMergeOptions(2, 'Contract [Parent]');
    TradeMergeOptions.firstSelectedSplit = new TradeMergeOptions(3, '1st Selected Split');
    return TradeMergeOptions;
}());



/***/ }),

/***/ "./Client/app/shared/enums/add-override.enum.ts":
/*!******************************************************!*\
  !*** ./Client/app/shared/enums/add-override.enum.ts ***!
  \******************************************************/
/*! exports provided: AddOrOverride */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddOrOverride", function() { return AddOrOverride; });
var AddOrOverride;
(function (AddOrOverride) {
    AddOrOverride[AddOrOverride["Add"] = 1] = "Add";
    AddOrOverride[AddOrOverride["Override"] = 2] = "Override";
})(AddOrOverride || (AddOrOverride = {}));


/***/ }),

/***/ "./Client/app/shared/enums/allocate-trade-option-enum.ts":
/*!***************************************************************!*\
  !*** ./Client/app/shared/enums/allocate-trade-option-enum.ts ***!
  \***************************************************************/
/*! exports provided: AllocateTradeOption */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AllocateTradeOption", function() { return AllocateTradeOption; });
var AllocateTradeOption;
(function (AllocateTradeOption) {
    AllocateTradeOption[AllocateTradeOption["NoAction"] = 0] = "NoAction";
    AllocateTradeOption[AllocateTradeOption["AdjustAllocation"] = 1] = "AdjustAllocation";
    AllocateTradeOption[AllocateTradeOption["LeaveStatus"] = 2] = "LeaveStatus";
    AllocateTradeOption[AllocateTradeOption["CreateUnallocatedResidualSplit"] = 3] = "CreateUnallocatedResidualSplit";
})(AllocateTradeOption || (AllocateTradeOption = {}));


/***/ }),

/***/ "./Client/app/shared/enums/allocation-type.enum.ts":
/*!*********************************************************!*\
  !*** ./Client/app/shared/enums/allocation-type.enum.ts ***!
  \*********************************************************/
/*! exports provided: AllocationType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AllocationType", function() { return AllocationType; });
var AllocationType;
(function (AllocationType) {
    AllocationType[AllocationType["SplitWhereNecessary"] = 1] = "SplitWhereNecessary";
    AllocationType[AllocationType["AdjustWhereNecessary"] = 2] = "AdjustWhereNecessary";
})(AllocationType || (AllocationType = {}));


/***/ }),

/***/ "./Client/app/shared/enums/cost-edit-options.enum.ts":
/*!***********************************************************!*\
  !*** ./Client/app/shared/enums/cost-edit-options.enum.ts ***!
  \***********************************************************/
/*! exports provided: CostBulkEditUpdateOptions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CostBulkEditUpdateOptions", function() { return CostBulkEditUpdateOptions; });
var CostBulkEditUpdateOptions;
(function (CostBulkEditUpdateOptions) {
    CostBulkEditUpdateOptions["AddNewCost"] = "Add New Cost";
    CostBulkEditUpdateOptions["OverRideCost"] = "Override Cost";
})(CostBulkEditUpdateOptions || (CostBulkEditUpdateOptions = {}));


/***/ }),

/***/ "./Client/app/shared/enums/costmatrix-action.enum.ts":
/*!***********************************************************!*\
  !*** ./Client/app/shared/enums/costmatrix-action.enum.ts ***!
  \***********************************************************/
/*! exports provided: CostMatrixAction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CostMatrixAction", function() { return CostMatrixAction; });
var CostMatrixAction;
(function (CostMatrixAction) {
    CostMatrixAction["Create"] = "Create";
    CostMatrixAction["Edit"] = "Edit";
    CostMatrixAction["Image"] = "Image";
})(CostMatrixAction || (CostMatrixAction = {}));


/***/ }),

/***/ "./Client/app/shared/enums/currency-codes.enum.ts":
/*!********************************************************!*\
  !*** ./Client/app/shared/enums/currency-codes.enum.ts ***!
  \********************************************************/
/*! exports provided: CurrencyCodes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CurrencyCodes", function() { return CurrencyCodes; });
var CurrencyCodes;
(function (CurrencyCodes) {
    CurrencyCodes["USD"] = "USD";
})(CurrencyCodes || (CurrencyCodes = {}));


/***/ }),

/***/ "./Client/app/shared/enums/current-trade-option-enum.ts":
/*!**************************************************************!*\
  !*** ./Client/app/shared/enums/current-trade-option-enum.ts ***!
  \**************************************************************/
/*! exports provided: CurrentTradeOption */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CurrentTradeOption", function() { return CurrentTradeOption; });
var CurrentTradeOption;
(function (CurrentTradeOption) {
    CurrentTradeOption[CurrentTradeOption["NoAction"] = 0] = "NoAction";
    CurrentTradeOption[CurrentTradeOption["AdjustContract"] = 1] = "AdjustContract";
    CurrentTradeOption[CurrentTradeOption["CreateAllocatedResidualSplit"] = 2] = "CreateAllocatedResidualSplit";
    CurrentTradeOption[CurrentTradeOption["CreateUnallocatedResidualSplit"] = 3] = "CreateUnallocatedResidualSplit";
})(CurrentTradeOption || (CurrentTradeOption = {}));


/***/ }),

/***/ "./Client/app/shared/enums/fx-deals-direction.enum.ts":
/*!************************************************************!*\
  !*** ./Client/app/shared/enums/fx-deals-direction.enum.ts ***!
  \************************************************************/
/*! exports provided: FxDealDirection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FxDealDirection", function() { return FxDealDirection; });
var FxDealDirection;
(function (FxDealDirection) {
    FxDealDirection[FxDealDirection["Buy"] = 1] = "Buy";
    FxDealDirection[FxDealDirection["Sell"] = 2] = "Sell";
})(FxDealDirection || (FxDealDirection = {}));


/***/ }),

/***/ "./Client/app/shared/enums/fx-deals-status.enum.ts":
/*!*********************************************************!*\
  !*** ./Client/app/shared/enums/fx-deals-status.enum.ts ***!
  \*********************************************************/
/*! exports provided: FxDealStatus */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FxDealStatus", function() { return FxDealStatus; });
var FxDealStatus;
(function (FxDealStatus) {
    FxDealStatus[FxDealStatus["Open"] = 1] = "Open";
    FxDealStatus[FxDealStatus["Linked"] = 2] = "Linked";
    FxDealStatus[FxDealStatus["Settled"] = 3] = "Settled";
    FxDealStatus[FxDealStatus["Deleted"] = 4] = "Deleted";
})(FxDealStatus || (FxDealStatus = {}));


/***/ }),

/***/ "./Client/app/shared/enums/gaps.enum.ts":
/*!**********************************************!*\
  !*** ./Client/app/shared/enums/gaps.enum.ts ***!
  \**********************************************/
/*! exports provided: Gaps */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Gaps", function() { return Gaps; });
var Gaps;
(function (Gaps) {
    Gaps["gap003"] = "gap003";
    Gaps["noGap003"] = "!gap003";
})(Gaps || (Gaps = {}));


/***/ }),

/***/ "./Client/app/shared/enums/position-month-type.enum.ts":
/*!*************************************************************!*\
  !*** ./Client/app/shared/enums/position-month-type.enum.ts ***!
  \*************************************************************/
/*! exports provided: PositionMonthTypes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PositionMonthTypes", function() { return PositionMonthTypes; });
var PositionMonthTypes;
(function (PositionMonthTypes) {
    PositionMonthTypes[PositionMonthTypes["Start"] = 0] = "Start";
    PositionMonthTypes[PositionMonthTypes["End"] = 1] = "End";
    PositionMonthTypes[PositionMonthTypes["Prorata"] = 2] = "Prorata";
})(PositionMonthTypes || (PositionMonthTypes = {}));


/***/ }),

/***/ "./Client/app/shared/enums/spot-roe-type.enum.ts":
/*!*******************************************************!*\
  !*** ./Client/app/shared/enums/spot-roe-type.enum.ts ***!
  \*******************************************************/
/*! exports provided: SpotRoeType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpotRoeType", function() { return SpotRoeType; });
var SpotRoeType;
(function (SpotRoeType) {
    SpotRoeType["Multiplication"] = "M";
    SpotRoeType["Division"] = "D";
})(SpotRoeType || (SpotRoeType = {}));


/***/ }),

/***/ "./Client/app/shared/enums/trade-approval-status.enum.ts":
/*!***************************************************************!*\
  !*** ./Client/app/shared/enums/trade-approval-status.enum.ts ***!
  \***************************************************************/
/*! exports provided: TradeApprovalStatus */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeApprovalStatus", function() { return TradeApprovalStatus; });
var TradeApprovalStatus;
(function (TradeApprovalStatus) {
    TradeApprovalStatus["Approved"] = "Approved";
    TradeApprovalStatus["Unapproved"] = "Unapproved";
    TradeApprovalStatus[TradeApprovalStatus["ApprovedStatus"] = 1] = "ApprovedStatus";
})(TradeApprovalStatus || (TradeApprovalStatus = {}));


/***/ }),

/***/ "./Client/app/shared/enums/trade-bulk-edit-fields.enum.ts":
/*!****************************************************************!*\
  !*** ./Client/app/shared/enums/trade-bulk-edit-fields.enum.ts ***!
  \****************************************************************/
/*! exports provided: TradeBulkEditFields */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeBulkEditFields", function() { return TradeBulkEditFields; });
var TradeBulkEditFields;
(function (TradeBulkEditFields) {
    TradeBulkEditFields["ArbitrationId"] = "arbitrationId";
    TradeBulkEditFields["BLDate"] = "blDate";
    TradeBulkEditFields["BLReference"] = "blReference";
    TradeBulkEditFields["BuyerId"] = "buyerCounterpartyId";
    TradeBulkEditFields["CommodityId"] = "commodityId";
    TradeBulkEditFields["ContractDate"] = "contractDate";
    TradeBulkEditFields["ContractedValue"] = "contractValue";
    TradeBulkEditFields["ContractTermId"] = "contractTermId";
    TradeBulkEditFields["ContractTermLocationId"] = "portTermId";
    TradeBulkEditFields["CounterpartyRef"] = "counterpartyReference";
    TradeBulkEditFields["CropYear"] = "cropYear";
    TradeBulkEditFields["CurrencyCode"] = "currencyCode";
    TradeBulkEditFields["DeliveryPeriodEnd"] = "deliveryPeriodEnd";
    TradeBulkEditFields["PositionMonth"] = "positionMonthValue";
    TradeBulkEditFields["DeliveryPeriodStart"] = "deliveryPeriodStart";
    TradeBulkEditFields["DepartmentId"] = "departmentId";
    TradeBulkEditFields["MarketSectorId"] = "businessSectorId";
    TradeBulkEditFields["Memorandum"] = "memorandum";
    TradeBulkEditFields["PaymentTermId"] = "paymentTermsId";
    TradeBulkEditFields["PeriodTypeId"] = "periodTypeId";
    TradeBulkEditFields["PortDestinationId"] = "portDestinationId";
    TradeBulkEditFields["PortOriginId"] = "portOriginId";
    TradeBulkEditFields["PremiumDiscountBasis"] = "premiumDiscountBasis";
    TradeBulkEditFields["PremiumDiscountCurrency"] = "premiumDiscountCurrency";
    TradeBulkEditFields["PremiumDiscountValue"] = "premiumDiscountValue";
    TradeBulkEditFields["PremiumDiscountTypeId"] = "premiumDiscountTypeId";
    TradeBulkEditFields["Price"] = "contractPrice";
    TradeBulkEditFields["PriceUnitId"] = "priceUnitId";
    TradeBulkEditFields["SellerId"] = "sellerCounterpartyId";
    TradeBulkEditFields["TraderId"] = "userId";
    TradeBulkEditFields["VesselId"] = "vesselId";
    TradeBulkEditFields["ContractReturnedDate"] = "contractReturnedDate";
    TradeBulkEditFields["ContractSentDate"] = "contractSentDate";
    TradeBulkEditFields["LastDocumentIssuedDate"] = "contractIssuedDate";
    TradeBulkEditFields["LastEmailReceivedDate"] = "lastEmailReceivedDate";
    TradeBulkEditFields["ApprovalStatus"] = "unapproval";
    TradeBulkEditFields["PositionMonthType"] = "positionMonthValue";
    TradeBulkEditFields["InvoicingStatusId"] = "invoicingStatus";
    TradeBulkEditFields["OtherReference"] = "otherReference";
    TradeBulkEditFields["EstimatedMaturityDate"] = "maturityDate";
})(TradeBulkEditFields || (TradeBulkEditFields = {}));


/***/ }),

/***/ "./Client/app/shared/enums/trade-field-header-bulk-edit.enum.ts":
/*!**********************************************************************!*\
  !*** ./Client/app/shared/enums/trade-field-header-bulk-edit.enum.ts ***!
  \**********************************************************************/
/*! exports provided: TradeFieldHeader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeFieldHeader", function() { return TradeFieldHeader; });
var TradeFieldHeader;
(function (TradeFieldHeader) {
    TradeFieldHeader[TradeFieldHeader["Header"] = 1] = "Header";
    TradeFieldHeader[TradeFieldHeader["Counterparty"] = 2] = "Counterparty";
    TradeFieldHeader[TradeFieldHeader["Commodity"] = 3] = "Commodity";
    TradeFieldHeader[TradeFieldHeader["Terms"] = 4] = "Terms";
    TradeFieldHeader[TradeFieldHeader["ShipmentPeriod"] = 5] = "ShipmentPeriod";
    TradeFieldHeader[TradeFieldHeader["Location"] = 6] = "Location";
    TradeFieldHeader[TradeFieldHeader["ShipmentInformation"] = 7] = "ShipmentInformation";
    TradeFieldHeader[TradeFieldHeader["BLInformation"] = 8] = "BLInformation";
    TradeFieldHeader[TradeFieldHeader["InvoicingStatus"] = 9] = "InvoicingStatus";
    TradeFieldHeader[TradeFieldHeader["InternalMemorandum"] = 10] = "InternalMemorandum";
    TradeFieldHeader[TradeFieldHeader["Price"] = 11] = "Price";
    TradeFieldHeader[TradeFieldHeader["ContractandDocumentStatus"] = 12] = "ContractandDocumentStatus";
})(TradeFieldHeader || (TradeFieldHeader = {}));


/***/ }),

/***/ "./Client/app/shared/enums/trade-merge-options.enum.ts":
/*!*************************************************************!*\
  !*** ./Client/app/shared/enums/trade-merge-options.enum.ts ***!
  \*************************************************************/
/*! exports provided: ContractMergeOptions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContractMergeOptions", function() { return ContractMergeOptions; });
var ContractMergeOptions;
(function (ContractMergeOptions) {
    ContractMergeOptions[ContractMergeOptions["ContractHeader"] = 1] = "ContractHeader";
    ContractMergeOptions[ContractMergeOptions["ContractParent"] = 2] = "ContractParent";
    ContractMergeOptions[ContractMergeOptions["FirstSelectedSplit"] = 3] = "FirstSelectedSplit";
})(ContractMergeOptions || (ContractMergeOptions = {}));


/***/ }),

/***/ "./Client/app/shared/enums/view-document-type.enum.ts":
/*!************************************************************!*\
  !*** ./Client/app/shared/enums/view-document-type.enum.ts ***!
  \************************************************************/
/*! exports provided: ViewDocumentType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewDocumentType", function() { return ViewDocumentType; });
var ViewDocumentType;
(function (ViewDocumentType) {
    ViewDocumentType["Commercial"] = "Commercial";
    ViewDocumentType["Reversal"] = "Reversal";
    ViewDocumentType["Washout"] = "Washout";
    ViewDocumentType["All"] = "All";
})(ViewDocumentType || (ViewDocumentType = {}));
// Used in invoice-view-mode component


/***/ }),

/***/ "./Client/app/shared/enums/view-mode-behaviour.enum.ts":
/*!*************************************************************!*\
  !*** ./Client/app/shared/enums/view-mode-behaviour.enum.ts ***!
  \*************************************************************/
/*! exports provided: ViewModeBehaviour */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewModeBehaviour", function() { return ViewModeBehaviour; });
var ViewModeBehaviour;
(function (ViewModeBehaviour) {
    ViewModeBehaviour[ViewModeBehaviour["Details for this trade"] = 0] = "Details for this trade";
    ViewModeBehaviour[ViewModeBehaviour["Show Details for whole trade"] = 1] = "Show Details for whole trade";
    ViewModeBehaviour[ViewModeBehaviour["Show Details for all trades"] = 2] = "Show Details for all trades";
    ViewModeBehaviour[ViewModeBehaviour["Show Details for tranches"] = 3] = "Show Details for tranches";
})(ViewModeBehaviour || (ViewModeBehaviour = {}));


/***/ }),

/***/ "./Client/app/shared/enums/view-mode.enum.ts":
/*!***************************************************!*\
  !*** ./Client/app/shared/enums/view-mode.enum.ts ***!
  \***************************************************/
/*! exports provided: ViewMode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewMode", function() { return ViewMode; });
var ViewMode;
(function (ViewMode) {
    ViewMode["WholeTrade"] = "Show Details for whole trade";
    ViewMode["ThisTrade"] = "Details for this trade";
    ViewMode["AllTrade"] = "Show Details for all trades";
    ViewMode["Tranches"] = "Show Details for tranches";
})(ViewMode || (ViewMode = {}));
// Used in invoice-view-mode component


/***/ }),

/***/ "./Client/app/shared/enums/yes-no-confirmation.enum.ts":
/*!*************************************************************!*\
  !*** ./Client/app/shared/enums/yes-no-confirmation.enum.ts ***!
  \*************************************************************/
/*! exports provided: YesNoConfirmation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "YesNoConfirmation", function() { return YesNoConfirmation; });
var YesNoConfirmation;
(function (YesNoConfirmation) {
    YesNoConfirmation[YesNoConfirmation["Yes"] = 1] = "Yes";
    YesNoConfirmation[YesNoConfirmation["No"] = 0] = "No";
})(YesNoConfirmation || (YesNoConfirmation = {}));


/***/ }),

/***/ "./Client/app/shared/models/section-complete-display-view.ts":
/*!*******************************************************************!*\
  !*** ./Client/app/shared/models/section-complete-display-view.ts ***!
  \*******************************************************************/
/*! exports provided: SectionCompleteDisplayView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SectionCompleteDisplayView", function() { return SectionCompleteDisplayView; });
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums/contract-status.enum */ "./Client/app/shared/enums/contract-status.enum.ts");
/* harmony import */ var _enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../enums/contract-type.enum */ "./Client/app/shared/enums/contract-type.enum.ts");
/* harmony import */ var _enums_position_month_type_enum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../enums/position-month-type.enum */ "./Client/app/shared/enums/position-month-type.enum.ts");
/* harmony import */ var _enums_pricing_method_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../enums/pricing-method.enum */ "./Client/app/shared/enums/pricing-method.enum.ts");





var moment = moment__WEBPACK_IMPORTED_MODULE_0__;
var SectionCompleteDisplayView = /** @class */ (function () {
    function SectionCompleteDisplayView(section) {
        if (section) {
            // -- General Information
            this.reference = section.contractLabel;
            if (section.header) {
                this.type = _enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_2__["ContractTypes"][section.header.type];
                this.contractDate = section.header.contractDate;
                this.traderId = section.header.traderId;
            }
            else {
                this.type = _enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_2__["ContractTypes"][section.contractType];
                this.traderId = section.traderId;
            }
            this.departmentId = section.departmentId;
            this.sectionId = section.sectionId;
            // -- Counterparty
            this.buyerCode = section.buyerCode;
            this.sellerCode = section.sellerCode;
            this.counterpartyReference = section.counterpartyReference;
            // -- Product
            this.commodityId = section.commodityId;
            this.quantity = section.quantity;
            this.weightUnitId = section.weightUnitId;
            this.cropYear = section.cropYear;
            this.cropYearTo = section.cropYearTo;
            this.originalQuantity = section.originalQuantity;
            // -- Terms & Period &Memorandum
            this.deliveryPeriodStart = section.deliveryPeriodStartDate;
            this.deliveryPeriodEnd = section.deliveryPeriodEndDate;
            this.contractTerms = section.contractTerms;
            this.contractTermsLocation = section.contractTermsLocation;
            this.contractedValue = section.contractedValue.toString();
            this.portOfOrigin = section.portOfOrigin;
            this.portOfDestination = section.portOfDestination;
            this.memorandum = section.memorandum;
            this.shippingPeriod = section.shippingPeriod;
            this.periodTypeCode = section.periodTypeCode;
            this.positionMonthType = _enums_position_month_type_enum__WEBPACK_IMPORTED_MODULE_3__["PositionMonthTypes"][section.positionMonthType];
            this.positionMonthIndex = section.positionMonthIndex;
            this.positionMonth = section.positionMonth;
            this.arbitration = section.arbitration;
            this.marketSectorId = section.marketSectorId;
            this.blDate = section.blDate;
            this.allocatedTo = (section.allocatedTo) ? section.allocatedTo.contractLabel : null;
            this.allocationDate = (section.allocationDate == null) ? null : moment(new Date(section.allocationDate))
                .format('DD MMM YYYY').toString();
            // -- Pricing
            this.pricingMethod = section.pricingMethod;
            this.pricingMethodAsString = _enums_pricing_method_enum__WEBPACK_IMPORTED_MODULE_4__["PricingMethods"][section.pricingMethod];
            this.paymentTerms = section.paymentTerms;
            this.currency = section.currencyCode;
            this.priceUnitId = section.priceUnitId;
            this.price = section.price;
            // -- Split
            this.sectionOriginId = (section.sectionOriginId == null) ? null : section.sectionOriginId;
            this.contractLabelOrigin = section.contractLabelOrigin;
            // -- Status
            this.status = _enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_1__["ContractStatus"][section.status];
            this.createdBy = section.createdBy;
            this.creationDate = section.creationDate;
            this.lastModifiedBy = section.lastModifiedBy;
            this.lastModifiedDate = section.lastModifiedDate;
            this.firstApprovalDateTime = section.firstApprovalDateTime;
            this.lastDocumentIssuedDate = section.lastDocumentIssuedDate;
            this.contractSentDate = section.contractSentDate;
            this.lastEmailReceivedDate = section.lastEmailReceivedDate;
            this.contractReturnedDate = section.contractReturnedDate;
            this.otherReference = section.otherReference;
            this.isClosed = section.isClosed;
            this.isCancelled = section.isCancelled;
            // -- Costs
            this.costs = section.costs;
            // charters
            this.charterAssignmentDate = section.charterAssignmentDate;
            this.assignedCharter = section.assignedCharterReference;
            // -- Futures and Options
            this.premiumDiscountTypeId = section.premiumDiscountTypeId;
            this.premiumDiscountValue = section.premiumDiscountValue;
            this.premiumDiscountCurrency = section.premiumDiscountCurrency;
            this.premiumDiscountBasis = section.premiumDiscountBasis;
            // -- Traffic
            this.invoiceReference = section.invoiceReference;
            this.invoicingStatusId = section.invoicingStatusId;
            this.invoiceDate = section.invoiceDate;
            if (section.allocatedTo) {
                this.allocatedToInvoicingStatusId = section.allocatedTo.invoicingStatusId;
            }
            this.estimatedMaturityDate = section.estimatedMaturityDate;
        }
    }
    return SectionCompleteDisplayView;
}());



/***/ }),

/***/ "./Client/app/shared/services/execution/dtos/bulk-deallocation-section-command.ts":
/*!****************************************************************************************!*\
  !*** ./Client/app/shared/services/execution/dtos/bulk-deallocation-section-command.ts ***!
  \****************************************************************************************/
/*! exports provided: BulkDeallocateSectionCommand */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BulkDeallocateSectionCommand", function() { return BulkDeallocateSectionCommand; });
var BulkDeallocateSectionCommand = /** @class */ (function () {
    function BulkDeallocateSectionCommand() {
    }
    return BulkDeallocateSectionCommand;
}());



/***/ }),

/***/ "./Client/app/shared/services/execution/dtos/child-sections-to-split.ts":
/*!******************************************************************************!*\
  !*** ./Client/app/shared/services/execution/dtos/child-sections-to-split.ts ***!
  \******************************************************************************/
/*! exports provided: ChildSectionsToSplit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChildSectionsToSplit", function() { return ChildSectionsToSplit; });
var ChildSectionsToSplit = /** @class */ (function () {
    function ChildSectionsToSplit(childSectionId, splitQuantity) {
        this.childSectionId = childSectionId;
        this.splitQuantity = splitQuantity;
    }
    return ChildSectionsToSplit;
}());



/***/ }),

/***/ "./Client/app/shared/services/execution/dtos/deallocate-bulk-sections.ts":
/*!*******************************************************************************!*\
  !*** ./Client/app/shared/services/execution/dtos/deallocate-bulk-sections.ts ***!
  \*******************************************************************************/
/*! exports provided: DeallocateBulkSections */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeallocateBulkSections", function() { return DeallocateBulkSections; });
var DeallocateBulkSections = /** @class */ (function () {
    function DeallocateBulkSections() {
    }
    return DeallocateBulkSections;
}());



/***/ }),

/***/ "./Client/app/shared/services/list-and-search/childSections-data-loader.ts":
/*!*********************************************************************************!*\
  !*** ./Client/app/shared/services/list-and-search/childSections-data-loader.ts ***!
  \*********************************************************************************/
/*! exports provided: ChildSectionsDataLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChildSectionsDataLoader", function() { return ChildSectionsDataLoader; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _dtos_list_and_search_list_and_search_filter_dto_dto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../dtos/list-and-search/list-and-search-filter-dto.dto */ "./Client/app/shared/dtos/list-and-search/list-and-search-filter-dto.dto.ts");
/* harmony import */ var _http_services_trading_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var ChildSectionsDataLoader = /** @class */ (function () {
    function ChildSectionsDataLoader(childSectionsService) {
        this.childSectionsService = childSectionsService;
    }
    ChildSectionsDataLoader.prototype.getData = function (filters, offset, limit) {
        var filtersForColumns = filters.map(function (filter) {
            return new _dtos_list_and_search_list_and_search_filter_dto_dto__WEBPACK_IMPORTED_MODULE_2__["ListAndSearchFilterDto"](filter);
        });
        var request = {
            clauses: { clauses: filtersForColumns },
            offset: offset,
            limit: limit,
        };
        var list = this.childSectionsService.getTradeChildSections(request)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (data) {
            return data;
        }));
        return list;
    };
    ChildSectionsDataLoader = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [_http_services_trading_service__WEBPACK_IMPORTED_MODULE_3__["TradingService"]])
    ], ChildSectionsDataLoader);
    return ChildSectionsDataLoader;
}());



/***/ }),

/***/ "./Client/app/shared/services/list-and-search/export/list-and-search-export-adapter.ts":
/*!*********************************************************************************************!*\
  !*** ./Client/app/shared/services/list-and-search/export/list-and-search-export-adapter.ts ***!
  \*********************************************************************************************/
/*! exports provided: ListAndSearchExportAdapter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListAndSearchExportAdapter", function() { return ListAndSearchExportAdapter; });
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../environments/environment */ "./Client/environments/environment.ts");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _dtos_list_and_search_list_and_search_filter_dto_dto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../dtos/list-and-search/list-and-search-filter-dto.dto */ "./Client/app/shared/dtos/list-and-search/list-and-search-filter-dto.dto.ts");
/* harmony import */ var _entities_http_services_http_request_options_entity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../entities/http-services/http-request-options.entity */ "./Client/app/shared/entities/http-services/http-request-options.entity.ts");
/* harmony import */ var _entities_window_injection_token__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../entities/window-injection-token */ "./Client/app/shared/entities/window-injection-token.ts");
/* harmony import */ var _util_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _list_and_search_export_base__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./list-and-search-export-base */ "./Client/app/shared/services/list-and-search/export/list-and-search-export-base.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};









var ListAndSearchExportAdapter = /** @class */ (function (_super) {
    __extends(ListAndSearchExportAdapter, _super);
    function ListAndSearchExportAdapter(httpClient, utilService, window, companyManager) {
        var _this = _super.call(this, httpClient, utilService, window) || this;
        _this.httpClient = httpClient;
        _this.utilService = utilService;
        _this.window = window;
        _this.companyManager = companyManager;
        _this.sectionsControllerUrl = 'sections';
        _this.companyToken = '__COMPANY__';
        _this.initializeGridMap();
        return _this;
    }
    ListAndSearchExportAdapter.prototype.sendExportRequest = function (gridCode, filters, dataVersionId, gridViewId) {
        var filtersForColumns = filters.map(function (filter) {
            return new _dtos_list_and_search_list_and_search_filter_dto_dto__WEBPACK_IMPORTED_MODULE_4__["ListAndSearchFilterDto"](filter);
        });
        var request = {
            clauses: { clauses: filtersForColumns },
            dataVersionId: dataVersionId,
            gridViewId: gridViewId,
        };
        var options = new _entities_http_services_http_request_options_entity__WEBPACK_IMPORTED_MODULE_5__["HttpRequestOptions"]();
        options.responseType = 'blob';
        options.observe = 'response';
        return this.post(this.getUrlByGridCode(gridCode), request, options);
    };
    ListAndSearchExportAdapter.prototype.getUrlByGridCode = function (gridCode) {
        var companyId = this.companyManager.getCurrentCompanyId();
        var url = this.gridUrls.get(gridCode);
        return url.replace(this.companyToken, companyId);
    };
    ListAndSearchExportAdapter.prototype.initializeGridMap = function () {
        this.gridUrls = new Map([
            ['tradeList',
                _environments_environment__WEBPACK_IMPORTED_MODULE_2__["environment"].tradeServiceLink + "/" + this.companyToken + "/" + this.sectionsControllerUrl + "/search/export"],
        ]);
    };
    ListAndSearchExportAdapter = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root',
        }),
        __param(2, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_entities_window_injection_token__WEBPACK_IMPORTED_MODULE_6__["WINDOW"])),
        __metadata("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_0__["HttpClient"],
            _util_service__WEBPACK_IMPORTED_MODULE_7__["UtilService"],
            Window,
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_3__["CompanyManagerService"]])
    ], ListAndSearchExportAdapter);
    return ListAndSearchExportAdapter;
}(_list_and_search_export_base__WEBPACK_IMPORTED_MODULE_8__["ListAndSearchExportBase"]));



/***/ }),

/***/ "./Client/app/shared/services/list-and-search/tradeAllocation-data-loader.ts":
/*!***********************************************************************************!*\
  !*** ./Client/app/shared/services/list-and-search/tradeAllocation-data-loader.ts ***!
  \***********************************************************************************/
/*! exports provided: TradeAllocationDataLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeAllocationDataLoader", function() { return TradeAllocationDataLoader; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _dtos_list_and_search_list_and_search_filter_dto_dto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../dtos/list-and-search/list-and-search-filter-dto.dto */ "./Client/app/shared/dtos/list-and-search/list-and-search-filter-dto.dto.ts");
/* harmony import */ var _http_services_trading_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var TradeAllocationDataLoader = /** @class */ (function () {
    function TradeAllocationDataLoader(tradingService) {
        this.tradingService = tradingService;
    }
    TradeAllocationDataLoader.prototype.getData = function (filters, dataVersionId, offset, limit) {
        var filtersForColumns = filters.map(function (filter) {
            return new _dtos_list_and_search_list_and_search_filter_dto_dto__WEBPACK_IMPORTED_MODULE_2__["ListAndSearchFilterDto"](filter);
        });
        var request = {
            clauses: { clauses: filtersForColumns },
            offset: offset,
            limit: limit,
            dataVersionId: dataVersionId,
        };
        var list = this.tradingService.getTradesForAllocation(request)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (data) {
            return data.value;
        }));
        return list;
    };
    TradeAllocationDataLoader = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [_http_services_trading_service__WEBPACK_IMPORTED_MODULE_3__["TradingService"]])
    ], TradeAllocationDataLoader);
    return TradeAllocationDataLoader;
}());



/***/ }),

/***/ "./Client/app/shared/services/masterdata/paymentTerms-data-loader.ts":
/*!***************************************************************************!*\
  !*** ./Client/app/shared/services/masterdata/paymentTerms-data-loader.ts ***!
  \***************************************************************************/
/*! exports provided: PaymentTermsDataLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaymentTermsDataLoader", function() { return PaymentTermsDataLoader; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var PaymentTermsDataLoader = /** @class */ (function () {
    function PaymentTermsDataLoader(masterDataService) {
        this.masterDataService = masterDataService;
    }
    PaymentTermsDataLoader.prototype.getData = function (searchTerm, pagingOptions) {
        var list = this.masterDataService.getPaymentTerms(searchTerm, pagingOptions)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (data) {
            return data.value;
        }));
        return list;
    };
    PaymentTermsDataLoader = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_2__["MasterdataService"]])
    ], PaymentTermsDataLoader);
    return PaymentTermsDataLoader;
}());



/***/ }),

/***/ "./Client/app/shared/services/masterdata/ports-data-loader.ts":
/*!********************************************************************!*\
  !*** ./Client/app/shared/services/masterdata/ports-data-loader.ts ***!
  \********************************************************************/
/*! exports provided: PortsDataLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PortsDataLoader", function() { return PortsDataLoader; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var PortsDataLoader = /** @class */ (function () {
    function PortsDataLoader(masterDataService) {
        this.masterDataService = masterDataService;
    }
    PortsDataLoader.prototype.getData = function (searchTerm, pagingOptions) {
        var list = this.masterDataService.getPorts(searchTerm, pagingOptions)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (data) {
            return data.value;
        }));
        return list;
    };
    PortsDataLoader = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_2__["MasterdataService"]])
    ], PortsDataLoader);
    return PortsDataLoader;
}());



/***/ }),

/***/ "./Client/app/shared/services/trading/dtos/costmatrix.ts":
/*!***************************************************************!*\
  !*** ./Client/app/shared/services/trading/dtos/costmatrix.ts ***!
  \***************************************************************/
/*! exports provided: Costmatrix */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Costmatrix", function() { return Costmatrix; });
var Costmatrix = /** @class */ (function () {
    function Costmatrix() {
    }
    return Costmatrix;
}());



/***/ }),

/***/ "./Client/app/shared/services/trading/dtos/costmatrixLine.ts":
/*!*******************************************************************!*\
  !*** ./Client/app/shared/services/trading/dtos/costmatrixLine.ts ***!
  \*******************************************************************/
/*! exports provided: CostmatrixLine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CostmatrixLine", function() { return CostmatrixLine; });
var CostmatrixLine = /** @class */ (function () {
    function CostmatrixLine() {
    }
    return CostmatrixLine;
}());



/***/ }),

/***/ "./Client/app/shared/services/trading/trader-contextual-data-loader.ts":
/*!*****************************************************************************!*\
  !*** ./Client/app/shared/services/trading/trader-contextual-data-loader.ts ***!
  \*****************************************************************************/
/*! exports provided: TradeContextualDataLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeContextualDataLoader", function() { return TradeContextualDataLoader; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _http_services_trading_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var TradeContextualDataLoader = /** @class */ (function () {
    function TradeContextualDataLoader(tradingService) {
        this.tradingService = tradingService;
    }
    TradeContextualDataLoader.prototype.getData = function () {
        var list = this.tradingService.getAllTraders()
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (data) {
            return data.value;
        }));
        return list;
    };
    TradeContextualDataLoader = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [_http_services_trading_service__WEBPACK_IMPORTED_MODULE_2__["TradingService"]])
    ], TradeContextualDataLoader);
    return TradeContextualDataLoader;
}());



/***/ }),

/***/ "./Client/app/shared/validators/crop-year-validator.validator.ts":
/*!***********************************************************************!*\
  !*** ./Client/app/shared/validators/crop-year-validator.validator.ts ***!
  \***********************************************************************/
/*! exports provided: isCropYearValid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isCropYearValid", function() { return isCropYearValid; });
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _trading_Library_trading_businessrules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../trading/Library/trading-businessrules */ "./Client/app/trading/Library/trading-businessrules.ts");


var moment = moment__WEBPACK_IMPORTED_MODULE_0__;
function isCropYearValid(contractDate) {
    return function (control) {
        var error = null;
        var result = 1;
        if (control.value && contractDate && control.valid) {
            var reg = new RegExp(/[0-9]{4}/g);
            var years = String(control.value).match(reg);
            result = Object(_trading_Library_trading_businessrules__WEBPACK_IMPORTED_MODULE_1__["cropYearValidation"])(years, contractDate);
        }
        if (result < 1) {
            switch (result) {
                case 0:
                    error = { isFirstYearGreater: true };
                    break;
                case -1:
                    error = { isYearOutOfRange: true };
                    break;
            }
        }
        return error;
    };
}


/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/cancel-trade-dialog/cancel-trade-dialog.component.html":
/*!************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/cancel-trade-dialog/cancel-trade-dialog.component.html ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card>\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n\r\n            <h3><b>Cancellation at Settlement Price\r\n                    [<label>{{contractLabel}}\r\n                    </label>]\r\n                </b></h3>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n\r\n    <mat-card-content>\r\n        <div class='mat-toggle-height'>\r\n            <mat-slide-toggle mat-raised-button\r\n                              [checked]=\"isSectionClosed\"\r\n                              [fieldControl]=\"isSectionClosedCtrl\"\r\n                              (change)=\"onToggleClosedTrade($event.checked)\">\r\n                Close Contract\r\n            </mat-slide-toggle>\r\n        </div>\r\n        <div fixLayout=\"row\"\r\n             fixLayoutGap=\"5%\">\r\n            <div fxLayout=\"column\"\r\n                 fxLayoutAlign=\"start left\"\r\n                 fxLayoutGap=\"2%\">\r\n                <div fxFlex=\"140%\">\r\n                    <atlas-form-input fxFlex=\"20%\"\r\n                                      fxLayoutGap=\"4%\"\r\n                                      [fieldControl]=\"counterPartyCtrl\"\r\n                                      [isEditable]=\"true\"\r\n                                      label=\"Counterparty Code\">\r\n                    </atlas-form-input>\r\n                    <div class=\"custom-form\"\r\n                         fxLayoutGap=\"4%\"\r\n                         fxFlex=\"20%\"\r\n                         [class.isEmpty]=\"!cancellationDateCtrl.value\"\r\n                         [class.required-field]=\"cancellationDateCtrl.isRequired\">\r\n                        <mat-form-field>\r\n                            <input matInput\r\n                                   [max]=\"filterDate\"\r\n                                   [required]=\"cancellationDateCtrl.isRequired\"\r\n                                   [matDatepicker]=\"cancelPicker\"\r\n                                   placeholder=\"Cancellation date\"\r\n                                   (blur)=\"onValueChange()\"\r\n                                   autocomplete=\"off\"\r\n                                   [formControl]='cancellationDateCtrl'>\r\n                            <mat-datepicker-toggle matSuffix\r\n                                                   [for]=\"cancelPicker\"></mat-datepicker-toggle>\r\n                            <mat-datepicker #cancelPicker></mat-datepicker>\r\n                            <mat-error *ngIf=\"cancellationDateCtrl.hasError('required')\">\r\n                                This field is required\r\n                            </mat-error>\r\n                            <mat-hint *ngIf=\"cancellationDateCtrl.isRequired\">\r\n                                Required *\r\n                            </mat-hint>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div class=\"custom-form\"\r\n                         fxFlex=\"20%\"\r\n                         [class.isEmpty]=\"!dueDateCtrl.value\"\r\n                         [class.required-field]=\"dueDateCtrl.isRequired\">\r\n                        <mat-form-field>\r\n                            <input matInput\r\n                                   [required]=\"dueDateCtrl.isRequired\"\r\n                                   [matDatepicker]=\"valuePicker\"\r\n                                   placeholder=\"Due Date\"\r\n                                   (blur)=\"onValueChange()\"\r\n                                   autocomplete=\"off\"\r\n                                   [formControl]='dueDateCtrl'>\r\n                            <mat-datepicker-toggle matSuffix\r\n                                                   [for]=\"valuePicker\"></mat-datepicker-toggle>\r\n                            <mat-datepicker #valuePicker></mat-datepicker>\r\n                            <mat-error *ngIf=\"dueDateCtrl.hasError('required')\">\r\n                                This field is required\r\n                            </mat-error>\r\n                            <mat-hint *ngIf=\"dueDateCtrl.isRequired\">\r\n                                Required *\r\n                            </mat-hint>\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n                <div fxFlex=\"140%\"\r\n                     fxLayout=\"row\">\r\n                    <atlas-form-input fxFlex=\"20%\"\r\n                                      [fieldControl]=\"contractPriceCtrl\"\r\n                                      [isEditable]=\"true\"\r\n                                      label=\"Contract Price\">\r\n                    </atlas-form-input>\r\n                    <atlas-form-input fxFlex=\"20%\"\r\n                                      [fieldControl]=\"currencyCtrl\"\r\n                                      [isEditable]=\"true\"\r\n                                      label=\"Currency\">\r\n                    </atlas-form-input>\r\n                    <atlas-form-input fxFlex=\"20%\"\r\n                                      [fieldControl]=\"priceCodeCtrl\"\r\n                                      [isEditable]=\"true\"\r\n                                      label=\"Price Code\">\r\n                    </atlas-form-input>\r\n                    <atlas-form-input fxFlex=\"20%\"\r\n                                      [fieldControl]=\"settlementPriceCtrl\"\r\n                                      [isEditable]=\"true\"\r\n                                      label=\"Settlement Price\"\r\n                                      (blur)=\"onValueChange()\"\r\n                                      [required]=\"settlementPriceCtrl.isRequired\"\r\n                                      [errorMap]=\"settlementPriceErrorMap\">\r\n                    </atlas-form-input>\r\n                    <atlas-form-input fxFlex=\"20%\"\r\n                                      [fieldControl]=\"settlementValueCtrl\"\r\n                                      [isEditable]=\"true\"\r\n                                      [title]=\"settlementValueToolTip\"\r\n                                      label=\"Settlement Value\">\r\n                    </atlas-form-input>\r\n                </div>\r\n                <div fxFlex=\"140%\"\r\n                     fxLayout=\"row\">\r\n                    <atlas-form-input fxFlex=\"20%\"\r\n                                      [fieldControl]=\"quantityCtrl\"\r\n                                      [isEditable]=\"true\"\r\n                                      label=\"Quantity\">\r\n                    </atlas-form-input>\r\n                    <atlas-form-input fxFlex=\"20%\"\r\n                                      [fieldControl]=\"quantityCodeCtrl\"\r\n                                      [isEditable]=\"true\"\r\n                                      label=\"Quantity code\">\r\n                    </atlas-form-input>\r\n                </div>\r\n                <div fxFlex=\"140%\"\r\n                     fxLayout=\"row\">\r\n                    <atlas-form-input fxFlex=\"20%\"\r\n                                      [fieldControl]=\"nominalAccountCtrl\"\r\n                                      [isEditable]=\"true\"\r\n                                      label=\"Nominal account\">\r\n                    </atlas-form-input>\r\n                    <atlas-form-input fxFlex=\"20%\"\r\n                                      [fieldControl]=\"costTypeCtrl\"\r\n                                      [isEditable]=\"true\"\r\n                                      label=\"Cost Type\">\r\n                    </atlas-form-input>\r\n                    <atlas-form-input fxFlex=\"20%\"\r\n                                      [fieldControl]=\"narrativeCtrl\"\r\n                                      [isEditable]=\"true\"\r\n                                      label=\"Narrative\">\r\n                    </atlas-form-input>\r\n                </div>\r\n                <div fxFlex=\"140%\"\r\n                     fxLayout=\"row\">\r\n                    <mat-form-field fxFlex=\"19.5%\">\r\n                        <mat-select [required]=\"externalInternalCtrl.isRequired\"\r\n                                    [panelWidth]=\"panelSize\"\r\n                                    placeholder=\"External/InHouse\"\r\n                                    (blur)=\"onValueChange()\"\r\n                                    [formControl]=\"externalInternalCtrl\"\r\n                                    [matTooltip]=\"'External/InHouse'\">\r\n\r\n                            <mat-option *ngFor=\"let info of invoiceSourceType\"\r\n                                        [value]=\"info.viewValue\">\r\n                                {{info.viewValue}}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                        <mat-error *ngIf=\"externalInternalCtrl.hasError('required')\">\r\n                            This field is required\r\n                        </mat-error>\r\n                        <mat-hint *ngIf=\"externalInternalCtrl.isRequired\">\r\n                            Required *\r\n                        </mat-hint>\r\n                    </mat-form-field>\r\n                    <mat-form-field fxFlex=\"19.5%\">\r\n                        <mat-select [panelWidth]=\"panelSize\"\r\n                                    placeholder=\"Template\"\r\n                                    [formControl]=\"templateCtrl\"\r\n                                    (blur)=\"onValueChange()\"\r\n                                    matTooltip=\"Template\">\r\n                            <mat-option></mat-option>\r\n                            <mat-option *ngFor=\"let template of filteredTemplates\"\r\n                                        [value]=\"template\">\r\n                                {{template.name}}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                        <mat-error *ngIf=\"isTemplateRequired\">\r\n                            This field is required\r\n                        </mat-error>\r\n                        <mat-hint *ngIf=\"isTemplateRequired\">\r\n                            Required *\r\n                        </mat-hint>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div fxLayout=\"row\"\r\n                     fxLayoutAlign=\"space-between center\">\r\n                    <button mat-button\r\n                            type=\"button\"\r\n                            (click)=\"onDiscardButtonClicked()\"\r\n                            class=\"btn-primary\">\r\n                        Discard\r\n                    </button>\r\n                    <button mat-button\r\n                            type=\"button\"\r\n                            (click)=\"onConfirmButtonClicked()\"\r\n                            class=\"btn-primary\"\r\n                            [disabled]=\"!isConfirmCancellationEdit\">\r\n                        Confirm Cancellation\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/cancel-trade-dialog/cancel-trade-dialog.component.scss":
/*!************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/cancel-trade-dialog/cancel-trade-dialog.component.scss ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".btn-primary.mat-button {\n  margin-left: 0px !important; }\n\ndiv.mat-toggle-height {\n  height: 50px; }\n\n:host ::ng-deep .mat-form-field {\n  padding-right: 10px !important; }\n\n.mat-form-field-appearance-legacy .mat-hint {\n  color: #00a9c6 !important; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/cancel-trade-dialog/cancel-trade-dialog.component.ts":
/*!**********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/cancel-trade-dialog/cancel-trade-dialog.component.ts ***!
  \**********************************************************************************************************************/
/*! exports provided: CancelTradeDialogComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CancelTradeDialogComponent", function() { return CancelTradeDialogComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../shared/entities/masterdata-props.entity */ "./Client/app/shared/entities/masterdata-props.entity.ts");
/* harmony import */ var _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../shared/enums/contract-type.enum */ "./Client/app/shared/enums/contract-type.enum.ts");
/* harmony import */ var _shared_enums_document_type_enum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../shared/enums/document-type.enum */ "./Client/app/shared/enums/document-type.enum.ts");
/* harmony import */ var _shared_enums_invoice_source_type_enum__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../shared/enums/invoice-source-type.enum */ "./Client/app/shared/enums/invoice-source-type.enum.ts");
/* harmony import */ var _shared_services_configuration_dtos_company_configuration_record__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../shared/services/configuration/dtos/company-configuration-record */ "./Client/app/shared/services/configuration/dtos/company-configuration-record.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_configuration_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../shared/services/http-services/configuration.service */ "./Client/app/shared/services/http-services/configuration.service.ts");
/* harmony import */ var _shared_services_http_services_document_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../shared/services/http-services/document.service */ "./Client/app/shared/services/http-services/document.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _entities_cancel_trade_entity__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../entities/cancel-trade.entity */ "./Client/app/trading/entities/cancel-trade.entity.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};



















var CancelTradeDialogComponent = /** @class */ (function (_super) {
    __extends(CancelTradeDialogComponent, _super);
    function CancelTradeDialogComponent(thisDialogRef, data, formConfigurationProvider, formBuilder, masterdataService, snackbarService, companyManager, documentService, configurationService, utilService, route) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.thisDialogRef = thisDialogRef;
        _this.data = data;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.formBuilder = formBuilder;
        _this.masterdataService = masterdataService;
        _this.snackbarService = snackbarService;
        _this.companyManager = companyManager;
        _this.documentService = documentService;
        _this.configurationService = configurationService;
        _this.utilService = utilService;
        _this.route = route;
        _this.isSectionClosed = true;
        _this.isConfirmCancellationEdit = false;
        _this.counterPartyCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('CounterParty');
        _this.cancellationDateCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('CancellationDate');
        _this.dueDateCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('DueDate');
        _this.contractPriceCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('ContractPrice');
        _this.currencyCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('Currency');
        _this.priceCodeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('PriceCode');
        _this.settlementPriceCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('SettlementPrice');
        _this.settlementValueCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('SettlementValue');
        _this.quantityCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('Quantity');
        _this.quantityCodeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('QuantityCode');
        _this.nominalAccountCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('NominalAccount');
        _this.costTypeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('CostType');
        _this.narrativeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('Narrative');
        _this.externalInternalCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('ExternalInternal');
        _this.templateCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('Template');
        _this.isSectionClosedCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('ToggleClosedTrade');
        _this.contractReferenceCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('ContractReference');
        _this.masterdataList = [
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__["MasterDataProps"].PriceUnits,
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__["MasterDataProps"].WeightUnits,
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__["MasterDataProps"].CostTypes,
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__["MasterDataProps"].NominalAccounts,
        ];
        _this.settlementPriceErrorMap = new Map()
            .set('min', 'Negative Value Not allowed');
        _this.filteredTemplates = [];
        _this.isTemplateRequired = false;
        _this.settlementValueToolTip = '';
        _this.filterDate = _this.companyManager.getCurrentCompanyDate().toDate();
        _this.companyId = _this.companyManager.getCurrentCompany().companyId;
        thisDialogRef.disableClose = true;
        _this.cancelTradeData = data.sectionModel;
        _this.now = _this.companyManager.getCurrentCompanyDate();
        return _this;
    }
    CancelTradeDialogComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.getFormGroup();
        this.contractLabel = this.cancelTradeData.contractLabel;
        this.masterdataService
            .getMasterData(this.masterdataList)
            .subscribe(function (data) {
            _this.masterdata = data;
            _this.filteredPriceCodeList = _this.masterdata.priceUnits;
            _this.filteredQuantityCode = _this.masterdata.weightUnits;
            _this.filteredCostType = _this.masterdata.costTypes;
            _this.filteredNominalAccount = _this.masterdata.nominalAccounts;
            _this.onDisablingFields();
            _this.setDefaultValues();
            _this.setValidators();
            _this.settlementPriceCtrl.valueChanges.subscribe(function (v) {
                return _this.setSettlementValue();
            });
        });
        this.invoiceSourceType = this.getInvoiceSourceTypeEnum();
        this.subscriptions.push(this.documentService.getTemplates(_shared_enums_document_type_enum__WEBPACK_IMPORTED_MODULE_9__["DocumentTypes"].InvoiceCancellation).subscribe(function (templates) {
            _this.filteredTemplates = templates.value;
        }));
        this.companyConfigurationRecord = new _shared_services_configuration_dtos_company_configuration_record__WEBPACK_IMPORTED_MODULE_11__["CompanyConfigurationRecord"]();
        this.subscriptions.push(this.configurationService.getCompanyConfigurationDetails(this.companyId, this.now.year())
            .subscribe(function (companyConfigurationRecord) {
            if (companyConfigurationRecord) {
                _this.companyConfigurationRecord = companyConfigurationRecord;
                _this.defaultAccountingSetup = _this.companyConfigurationRecord.defaultAccountingSetup;
            }
        }));
    };
    CancelTradeDialogComponent.prototype.onToggleClosedTrade = function (isCloseTrade) {
        this.isSectionClosed = isCloseTrade;
        this.cancelTradeFormGroup.controls['isSectionClosedCtrl'].patchValue(isCloseTrade);
    };
    CancelTradeDialogComponent.prototype.getFormGroup = function () {
        this.cancelTradeFormGroup = this.formBuilder.group({
            counterPartyCtrl: this.counterPartyCtrl,
            cancellationDateCtrl: this.cancellationDateCtrl,
            dueDateCtrl: this.dueDateCtrl,
            contractPriceCtrl: this.contractPriceCtrl,
            currencyCtrl: this.currencyCtrl,
            priceCodeCtrl: this.priceCodeCtrl,
            settlementPriceCtrl: this.settlementPriceCtrl,
            settlementValueCtrl: this.settlementValueCtrl,
            quantityCtrl: this.quantityCtrl,
            quantityCodeCtrl: this.quantityCodeCtrl,
            nominalAccountCtrl: this.nominalAccountCtrl,
            costTypeCtrl: this.costTypeCtrl,
            narrativeCtrl: this.narrativeCtrl,
            externalInternalCtrl: this.externalInternalCtrl,
            templateCtrl: this.templateCtrl,
            isSectionClosedCtrl: this.isSectionClosedCtrl,
            contractReferenceCtrl: this.contractReferenceCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    CancelTradeDialogComponent.prototype.onDiscardButtonClicked = function () {
        this.thisDialogRef.close();
    };
    CancelTradeDialogComponent.prototype.onConfirmButtonClicked = function () {
        if (this.cancelTradeFormGroup.valid) {
            this.thisDialogRef.close(this.getCancelTradeEntity(this.cancelTradeFormGroup));
        }
        else {
            this.snackbarService.throwErrorSnackBar('Form is invalid. Please resolve the errors.');
            return;
        }
    };
    CancelTradeDialogComponent.prototype.getCancelTradeEntity = function (cancelTradeFormGroup) {
        var cancelTradeModel = new _entities_cancel_trade_entity__WEBPACK_IMPORTED_MODULE_18__["CancelTrade"]();
        cancelTradeModel.counterParty = this.counterPartyCtrl.value;
        cancelTradeModel.cancellationDate = this.cancellationDateCtrl.value;
        cancelTradeModel.dueDate = this.dueDateCtrl.value;
        cancelTradeModel.contractPrice = this.contractPriceCtrl.value;
        cancelTradeModel.currency = this.currencyCtrl.value;
        cancelTradeModel.priceCode = this.priceCodeCtrl.value;
        cancelTradeModel.settlementPrice = this.settlementPriceCtrl.value;
        cancelTradeModel.settlementValue = this.settlementValueCtrl.value;
        cancelTradeModel.quantity = this.quantityCtrl.value;
        cancelTradeModel.quantityCode = this.quantityCodeCtrl.value;
        cancelTradeModel.nominalAccount = this.nominalAccountCtrl.value;
        cancelTradeModel.costType = this.costTypeCtrl.value;
        cancelTradeModel.narrative = this.narrativeCtrl.value;
        cancelTradeModel.externalInternal = this.externalInternalCtrl.value;
        cancelTradeModel.template = this.templateCtrl.value ?
            this.templateCtrl.value.path : null;
        cancelTradeModel.isSectionClosed = this.isSectionClosedCtrl.value;
        cancelTradeModel.contractLabel = this.contractReferenceCtrl.value;
        cancelTradeModel.costTypeForCancellationLoss = this.defaultAccountingSetup.cancellationLoss;
        return cancelTradeModel;
    };
    CancelTradeDialogComponent.prototype.onDisablingFields = function () {
        this.counterPartyCtrl.disable();
        this.contractPriceCtrl.disable();
        this.currencyCtrl.disable();
        this.priceCodeCtrl.disable();
        this.settlementValueCtrl.disable();
        this.quantityCtrl.disable();
        this.quantityCodeCtrl.disable();
        this.costTypeCtrl.disable();
        this.nominalAccountCtrl.disable();
    };
    CancelTradeDialogComponent.prototype.numberFormatter = function (params, isPrice) {
        if (isPrice) {
            return new Intl.NumberFormat('en-US', { minimumFractionDigits: 4, maximumFractionDigits: 4 }).format(params);
        }
        else if (params) {
            return new Intl.NumberFormat('en-US', { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(params);
        }
    };
    CancelTradeDialogComponent.prototype.setDefaultValues = function () {
        var _this = this;
        if (this.cancelTradeData.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_8__["ContractTypes"].Purchase) {
            this.counterPartyCtrl.patchValue(this.cancelTradeData.sellerCode);
        }
        if (this.cancelTradeData.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_8__["ContractTypes"].Sale) {
            this.counterPartyCtrl.patchValue(this.cancelTradeData.buyerCode);
        }
        this.contractPriceCtrl.patchValue(this.numberFormatter(this.cancelTradeData.price, true));
        this.currencyCtrl.patchValue(this.cancelTradeData.currencyCode);
        this.quantityCtrl.patchValue(this.numberFormatter(this.cancelTradeData.quantity, false));
        if (this.cancelTradeData.priceUnitId) {
            this.priceCodeCtrl.patchValue((this.filteredPriceCodeList.find(function (x) {
                return x.priceUnitId === _this.cancelTradeData.priceUnitId;
            }).priceCode));
        }
        if (this.cancelTradeData.weightUnitId) {
            this.quantityCodeCtrl.patchValue((this.filteredQuantityCode.find(function (x) {
                return x.weightUnitId === _this.cancelTradeData.weightUnitId;
            }).weightCode));
        }
        this.narrativeCtrl.patchValue('Cancellation');
        this.cancelTradeFormGroup.controls['isSectionClosedCtrl'].patchValue(this.isSectionClosed);
        this.cancelTradeFormGroup.controls['externalInternalCtrl'].patchValue(_shared_enums_invoice_source_type_enum__WEBPACK_IMPORTED_MODULE_10__["InvoiceSourceType"][_shared_enums_invoice_source_type_enum__WEBPACK_IMPORTED_MODULE_10__["InvoiceSourceType"].External].toString());
        this.contractReferenceCtrl.patchValue(this.cancelTradeData.contractLabel);
        this.cancellationDateCtrl.setValue(this.companyManager.getCurrentCompanyDate());
        this.dueDateCtrl.setValue(this.companyManager.getCurrentCompanyDate());
    };
    CancelTradeDialogComponent.prototype.setSettlementValue = function () {
        this.settlementValueCtrl.setValue('');
        if (this.settlementPriceCtrl.valid && this.settlementPriceCtrl.value >= 0) {
            this.settlementValue = (Number(this.contractPriceCtrl.value) - Number(this.settlementPriceCtrl.value)) * Number(this.cancelTradeData.quantity);
            this.settlementValueCtrl.setValue(Math.abs(this.settlementValue).toFixed(2));
            if (this.settlementValue.toString() > this.settlementValue.toFixed(2)) {
                this.settlementValueToolTip = Math.abs(this.settlementValue);
            }
        }
        this.setCostType(this.settlementValue);
    };
    CancelTradeDialogComponent.prototype.setValidators = function () {
        var _this = this;
        this.cancellationDateCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required]));
        this.dueDateCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required]));
        this.settlementPriceCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].min(0)]));
        this.externalInternalCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required]));
        this.cancelTradeFormGroup.updateValueAndValidity();
        this.cancelTradeFormGroup.get('externalInternalCtrl').valueChanges.subscribe(function (externalInternal) {
            if (externalInternal === _shared_enums_invoice_source_type_enum__WEBPACK_IMPORTED_MODULE_10__["InvoiceSourceType"][_shared_enums_invoice_source_type_enum__WEBPACK_IMPORTED_MODULE_10__["InvoiceSourceType"].Inhouse].toString()) {
                _this.templateCtrl.setValidators([_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required]);
                _this.isTemplateRequired = true;
            }
            else {
                _this.cancelTradeFormGroup.get('templateCtrl').reset();
                _this.isTemplateRequired = false;
                _this.templateCtrl.setValidators(null);
            }
            _this.templateCtrl.updateValueAndValidity();
        });
    };
    CancelTradeDialogComponent.prototype.setCostType = function (settlementValue) {
        var _this = this;
        this.costTypeCtrl.setValue('');
        this.nominalAccountCtrl.setValue('');
        this.costType = {};
        if (this.cancelTradeData.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_8__["ContractTypes"].Purchase) {
            if (settlementValue < 0 || settlementValue === 0) {
                if (this.defaultAccountingSetup) {
                    this.costType = this.filteredCostType.find(function (costType) {
                        return costType.costTypeCode === _this.defaultAccountingSetup.cancellationGain;
                    });
                }
            }
            if (settlementValue > 0) {
                if (this.defaultAccountingSetup) {
                    this.costType = this.filteredCostType.find(function (costType) {
                        return costType.costTypeCode === _this.defaultAccountingSetup.cancellationLoss;
                    });
                }
            }
        }
        if (this.cancelTradeData.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_8__["ContractTypes"].Sale) {
            if (settlementValue < 0) {
                this.costType = this.filteredCostType.find(function (costType) {
                    return costType.costTypeCode === _this.defaultAccountingSetup.cancellationLoss;
                });
            }
            if (settlementValue > 0 || settlementValue === 0) {
                this.costType = this.filteredCostType.find(function (costType) {
                    return costType.costTypeCode === _this.defaultAccountingSetup.cancellationGain;
                });
            }
        }
        if (this.costType) {
            if (this.costType.costTypeCode) {
                this.costTypeCtrl.setValue(this.costType.costTypeCode);
                this.setNominalAccount(this.costType);
            }
        }
    };
    CancelTradeDialogComponent.prototype.setNominalAccount = function (costType) {
        if (costType) {
            this.nominalAccount = this.filteredNominalAccount.find(function (nomaccount) {
                return nomaccount.accountNumber === costType.nominalAccountCode;
            });
        }
        this.nominalAccountCtrl.setValue(this.nominalAccount.accountNumber);
    };
    CancelTradeDialogComponent.prototype.getInvoiceSourceTypeEnum = function () {
        var myEnum = [];
        var objectEnum = Object.keys(_shared_enums_invoice_source_type_enum__WEBPACK_IMPORTED_MODULE_10__["InvoiceSourceType"]);
        var values = objectEnum.slice(0, objectEnum.length / 2);
        var keys = objectEnum.slice(objectEnum.length / 2);
        for (var i = 0; i < objectEnum.length / 2; i++) {
            myEnum.push({ viewValue: keys[i], value: values[i] });
        }
        return myEnum;
    };
    CancelTradeDialogComponent.prototype.onValueChange = function () {
        if (this.cancelTradeFormGroup.valid) {
            this.isConfirmCancellationEdit = true;
        }
        else {
            this.isConfirmCancellationEdit = false;
        }
    };
    CancelTradeDialogComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-cancel-trade-dialog',
            template: __webpack_require__(/*! ./cancel-trade-dialog.component.html */ "./Client/app/trading/components/contract-physical-capture/cancel-trade-dialog/cancel-trade-dialog.component.html"),
            styles: [__webpack_require__(/*! ./cancel-trade-dialog.component.scss */ "./Client/app/trading/components/contract-physical-capture/cancel-trade-dialog/cancel-trade-dialog.component.scss")],
        }),
        __param(1, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_2__["MAT_DIALOG_DATA"])),
        __metadata("design:paramtypes", [_angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialogRef"], Object, _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_12__["FormConfigurationProviderService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_15__["MasterdataService"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_16__["SnackbarService"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_4__["CompanyManagerService"],
            _shared_services_http_services_document_service__WEBPACK_IMPORTED_MODULE_14__["DocumentService"],
            _shared_services_http_services_configuration_service__WEBPACK_IMPORTED_MODULE_13__["ConfigurationService"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_17__["UtilService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"]])
    ], CancelTradeDialogComponent);
    return CancelTradeDialogComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/add-cost-confirmation-dialog/add-cost-confirmation-dialog.component.html":
/*!****************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/add-cost-confirmation-dialog/add-cost-confirmation-dialog.component.html ***!
  \****************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h2 mat-dialog-title>Use a new cost matrix</h2>\r\n<p>Do you want to keep all the costs ? or keep only actualized cost?</p>\r\n<div fxLayout=\"row\"\r\n     mat-dialog-actions>\r\n    <button mat-button\r\n            mat-dialog-close>discard</button>\r\n    <span class=\"fill-space\"></span>\r\n    <button mat-button\r\n            (click)=\"onAllCostsButtonClicked()\">Keep All</button>\r\n\r\n    <button mat-button\r\n            (click)=\"onActualizedCostsButtonClicked()\">Keep Actualized</button>\r\n</div>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/add-cost-confirmation-dialog/add-cost-confirmation-dialog.component.scss":
/*!****************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/add-cost-confirmation-dialog/add-cost-confirmation-dialog.component.scss ***!
  \****************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "button {\n  margin: 0; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/add-cost-confirmation-dialog/add-cost-confirmation-dialog.component.ts":
/*!**************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/add-cost-confirmation-dialog/add-cost-confirmation-dialog.component.ts ***!
  \**************************************************************************************************************************************************/
/*! exports provided: AddCostConfirmationDialogComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddCostConfirmationDialogComponent", function() { return AddCostConfirmationDialogComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var AddCostConfirmationDialogComponent = /** @class */ (function (_super) {
    __extends(AddCostConfirmationDialogComponent, _super);
    function AddCostConfirmationDialogComponent(thisDialogRef, 
    //   @Inject(MAT_DIALOG_DATA) public data: { matrixData: Costmatrix[] },
    dialog, formConfigurationProvider) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.thisDialogRef = thisDialogRef;
        _this.dialog = dialog;
        _this.formConfigurationProvider = formConfigurationProvider;
        return _this;
    }
    AddCostConfirmationDialogComponent.prototype.ngOnInit = function () {
    };
    AddCostConfirmationDialogComponent.prototype.onAllCostsButtonClicked = function () {
        this.costConfirmation = true;
        this.thisDialogRef.close(this.costConfirmation);
    };
    AddCostConfirmationDialogComponent.prototype.onActualizedCostsButtonClicked = function () {
        this.costConfirmation = false;
        this.thisDialogRef.close(this.costConfirmation);
    };
    AddCostConfirmationDialogComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-add-cost-confirmation-dialog',
            template: __webpack_require__(/*! ./add-cost-confirmation-dialog.component.html */ "./Client/app/trading/components/contract-physical-capture/costs-tab/add-cost-confirmation-dialog/add-cost-confirmation-dialog.component.html"),
            styles: [__webpack_require__(/*! ./add-cost-confirmation-dialog.component.scss */ "./Client/app/trading/components/contract-physical-capture/costs-tab/add-cost-confirmation-dialog/add-cost-confirmation-dialog.component.scss")]
        }),
        __metadata("design:paramtypes", [_angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialogRef"],
            _angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialog"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_2__["FormConfigurationProviderService"]])
    ], AddCostConfirmationDialogComponent);
    return AddCostConfirmationDialogComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/cost-invoice-marking-dialog/cost-invoice-marking-dialog.component.html":
/*!**************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/cost-invoice-marking-dialog/cost-invoice-marking-dialog.component.html ***!
  \**************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div fxLayoutAlign=\"space-between center\">\r\n    <h1>COST INVOICE MARKING</h1>\r\n    <button mat-button>\r\n        <mat-icon (click)=\"onCloseButtonClicked()\">close</mat-icon>\r\n    </button>\r\n</div>\r\n<mat-dialog-content>\r\n    <div fxLayout=\"row\">\r\n        <div class=\"costToggle\">\r\n            <mat-slide-toggle (change)=\"onChange($event)\"\r\n                              [disabled]=\"!editPrivileges.buttonEditable\">\r\n                Edit mode is {{toggleText}}\r\n            </mat-slide-toggle>\r\n        </div>\r\n    </div>\r\n    <div ag-grid=\"invoiceMarkingGridOptions\"\r\n         class=\"ag-theme-material pointer-cursor\">\r\n        <ag-grid-angular class=\"ag-theme-material\"\r\n                         [gridOptions]=\"invoiceMarkingGridOptions\"\r\n                         [rowData]=\"invoiceMarkingGridRows\"\r\n                         [columnDefs]=\"invoicemarkingcolumnDefs\"\r\n                         domLayout=autoHeight\r\n                         [pagination]=\"true\"\r\n                         (gridReady)=\"onGridReady($event)\"\r\n                         (cellValueChanged)=\"onCellValueChanged($event)\"\r\n                         [paginationPageSize]=\"10\"\r\n                         [enableSorting]=\"true\"\r\n                         [enableFilter]=\"true\"\r\n                         [enableColResize]=\"false\"\r\n                         [frameworkComponents]=\"gridComponents\"\r\n                         (rowClicked)=\"onCostInvoiceMarkingRowClicked($event)\"\r\n                         [rowHeight]=atlasAgGridParam.rowHeight>\r\n        </ag-grid-angular>\r\n    </div>\r\n\r\n    <button mat-raised-button\r\n            type=\"button\"\r\n            (click)=\"onSaveAsInvoieMarkingDialogButtonClicked()\"\r\n            [disabled]=\"saveDisable\">\r\n        SAVE\r\n    </button>\r\n\r\n</mat-dialog-content>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/cost-invoice-marking-dialog/cost-invoice-marking-dialog.component.scss":
/*!**************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/cost-invoice-marking-dialog/cost-invoice-marking-dialog.component.scss ***!
  \**************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "mat-dialog-actions {\n  margin-top: 20px;\n  text-align: right;\n  display: block; }\n\ninvoiceMarkingGrid {\n  width: 100%;\n  height: 100%; }\n\n.mat-dialog-content {\n  overflow: inherit; }\n\n.costToggle {\n  margin-top: 19px; }\n\n.costButtons {\n  margin-bottom: 20px;\n  margin-left: auto; }\n\nbutton.mat-raised-button {\n  float: right; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/cost-invoice-marking-dialog/cost-invoice-marking-dialog.component.ts":
/*!************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/cost-invoice-marking-dialog/cost-invoice-marking-dialog.component.ts ***!
  \************************************************************************************************************************************************/
/*! exports provided: CostInvoiceMarkingDialogComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CostInvoiceMarkingDialogComponent", function() { return CostInvoiceMarkingDialogComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_components_ag_contextual_menu_ag_contextual_menu_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component */ "./Client/app/shared/components/ag-contextual-menu/ag-contextual-menu.component.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_components_cell_editor_date_picker_cell_editor_date_picker_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/components/cell-editor-date-picker/cell-editor-date-picker.component */ "./Client/app/shared/components/cell-editor-date-picker/cell-editor-date-picker.component.ts");
/* harmony import */ var _shared_components_cell_editor_numeric_cell_editor_numeric_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component */ "./Client/app/shared/components/cell-editor-numeric/cell-editor-numeric.component.ts");
/* harmony import */ var _shared_components_cell_editor_select_cell_editor_select_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/components/cell-editor-select/cell-editor-select.component */ "./Client/app/shared/components/cell-editor-select/cell-editor-select.component.ts");
/* harmony import */ var _shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/components/confirmation-dialog/confirmation-dialog.component */ "./Client/app/shared/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony import */ var _shared_entities_invoice_markings_entity__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/entities/invoice-markings.entity */ "./Client/app/shared/entities/invoice-markings.entity.ts");
/* harmony import */ var _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/enums/permission-level.enum */ "./Client/app/shared/enums/permission-level.enum.ts");
/* harmony import */ var _shared_enums_posting_status_enum__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/enums/posting-status.enum */ "./Client/app/shared/enums/posting-status.enum.ts");
/* harmony import */ var _shared_numberMask__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/numberMask */ "./Client/app/shared/numberMask.ts");
/* harmony import */ var _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../shared/services/ag-grid.service */ "./Client/app/shared/services/ag-grid.service.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../../shared/services/http-services/execution.service */ "./Client/app/shared/services/http-services/execution.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../../shared/services/ui.service */ "./Client/app/shared/services/ui.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __values = (undefined && undefined.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};




















var CostInvoiceMarkingDialogComponent = /** @class */ (function (_super) {
    __extends(CostInvoiceMarkingDialogComponent, _super);
    function CostInvoiceMarkingDialogComponent(thisDialogRef, data, utilService, executionService, authorizationService, formConfigurationProvider, uiService, dialog, snackbarService, router, gridService, route) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.thisDialogRef = thisDialogRef;
        _this.data = data;
        _this.utilService = utilService;
        _this.executionService = executionService;
        _this.authorizationService = authorizationService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.uiService = uiService;
        _this.dialog = dialog;
        _this.snackbarService = snackbarService;
        _this.router = router;
        _this.gridService = gridService;
        _this.route = route;
        _this.invoiceMarkingGridOptions = {};
        _this.isEditable = false;
        _this.toggleText = 'Inactive';
        _this.defaultDate = 'Mon Jan 01 0001';
        _this.deleted = 'Deleted';
        _this.saveInProgress = false;
        _this.count = 0;
        _this.saveDisable = true;
        _this.gridComponents = {
            atlasSelect: _shared_components_cell_editor_select_cell_editor_select_component__WEBPACK_IMPORTED_MODULE_8__["CellEditorSelectComponent"],
            atlasNumeric: _shared_components_cell_editor_numeric_cell_editor_numeric_component__WEBPACK_IMPORTED_MODULE_7__["CellEditorNumericComponent"],
            atrDate: _shared_components_cell_editor_date_picker_cell_editor_date_picker_component__WEBPACK_IMPORTED_MODULE_6__["CellEditorDatePickerComponent"],
        };
        _this.invoiceMarkingCostMenuActions = {
            deleteinvoiceMarkingCost: 'delete',
        };
        _this.gridContext = {
            gridEditable: false,
        };
        _this.editPrivileges = {
            buttonEditable: true,
        };
        _this.editEstimatedColumnsPrivilege = {
            profileId: null,
            privilegeName: 'InvoiceMarkingGridEdit',
            permission: _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_11__["PermissionLevels"].ReadWrite,
            privilegeParentLevelOne: 'Physicals',
            privilegeParentLevelTwo: 'Trades',
        };
        _this.dialogData = data;
        _this.atlasAgGridParam = _this.gridService.getAgGridParam();
        _this.isLoading = true;
        thisDialogRef.disableClose = true;
        return _this;
    }
    CostInvoiceMarkingDialogComponent.prototype.onGridReady = function (params) {
        this.gridApi = params.api;
        this.gridColumnApi = params.columnApi;
    };
    CostInvoiceMarkingDialogComponent.prototype.ngOnInit = function () {
        this.initializeGridColumns();
        this.getInvoiceMarkingsForCost();
        this.gridContext.gridEditable = false;
        this.dataVersionId = this.route.snapshot.paramMap.get('dataVersionId') ?
            Number(this.route.snapshot.paramMap.get('dataVersionId')) : null;
        this.editPrivileges.buttonEditable = this.checkIfUserHasRequiredPrivileges(this.editEstimatedColumnsPrivilege);
        this.init();
    };
    CostInvoiceMarkingDialogComponent.prototype.init = function () {
        this.invoiceMarkingCostGridContextualMenuActions = [
            {
                icon: 'delete',
                text: 'Delete',
                action: this.invoiceMarkingCostMenuActions.deleteinvoiceMarkingCost,
                disabled: this.isDeleteDisabled.bind(this),
            },
        ];
    };
    CostInvoiceMarkingDialogComponent.prototype.isDeleteDisabled = function (params) {
        if (this.authorizationService.isUserAllowedForCompany(this.dialogData.company)) {
            var userPermissionLevel = this.authorizationService.getPermissionLevel(this.dialogData.company, 'DeleteCostInvoiceMarking', 'InvoiceCreation', 'Invoices');
            if (userPermissionLevel >= _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_11__["PermissionLevels"].Read) {
                return false;
            }
        }
        return true;
    };
    CostInvoiceMarkingDialogComponent.prototype.unloadNotification = function ($event) {
        if (this.formGroup.dirty) {
            $event.returnValue = true;
        }
    };
    CostInvoiceMarkingDialogComponent.prototype.onAddRowButtonClicked = function () {
        var newItem = this.createNewRowData();
        this.gridApi.updateRowData({ add: [newItem], addIndex: 0 });
    };
    CostInvoiceMarkingDialogComponent.prototype.createNewRowData = function () {
        var newData = new _shared_entities_invoice_markings_entity__WEBPACK_IMPORTED_MODULE_10__["InvoiceMarkings"]();
        newData.contractReference = this.dialogData.model.reference;
        newData.invoicePercent = 100;
        return newData;
    };
    CostInvoiceMarkingDialogComponent.prototype.getGridData = function () {
        var _this = this;
        var invoices = new Array();
        this.gridApi.forEachNode(function (rowData) {
            if (rowData.data.isDirty) {
                rowData.data.sectionId = _this.dialogData.model.sectionId;
                rowData.data.costId = _this.dialogData.costId;
                invoices.push(rowData.data);
            }
        });
        return invoices;
    };
    CostInvoiceMarkingDialogComponent.prototype.getInvoiceMarkingsForCost = function () {
        var _this = this;
        this.subscriptions.push(this.executionService.getInvoiceMarkingsForCost(this.dialogData.costId, this.dialogData.dataVersionId)
            .subscribe(function (data) {
            var e_1, _a;
            _this.invoiceMarkingGridRows = data.value;
            try {
                for (var _b = __values(_this.invoiceMarkingGridRows), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var rows = _c.value;
                    var invoiceMarkingCostGridRows = [];
                    invoiceMarkingCostGridRows = data.value;
                    _this.getTotalInvoicePercentValue(invoiceMarkingCostGridRows);
                    if (rows.cashMatchDate) {
                        rows.cashMatchDate = (rows.cashMatchDate.toDateString() === _this.defaultDate) ? null : rows.cashMatchDate;
                    }
                    if (rows.dueDate) {
                        rows.dueDate = (rows.dueDate.toDateString() === _this.defaultDate) ? null : rows.dueDate;
                    }
                    rows.invoiceDate = (rows.invoiceDate.toDateString() === _this.defaultDate) ? null : rows.invoiceDate;
                    rows.invoiceReference = rows.isDeleted ? _this.deleted : rows.invoiceReference;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            _this.initializeGridColumns();
            _this.isLoading = false;
        }));
    };
    CostInvoiceMarkingDialogComponent.prototype.getTotalInvoicePercentValue = function (invoiceMarkingCostGridRows) {
        var _this = this;
        this.totalInvoicePercent = 0;
        if (invoiceMarkingCostGridRows) {
            invoiceMarkingCostGridRows.forEach(function (invoiceMarking) {
                _this.totalInvoicePercent += invoiceMarking.invoicePercent;
            });
        }
    };
    CostInvoiceMarkingDialogComponent.prototype.initializeGridColumns = function () {
        this.invoiceMarkingGridOptions = {
            context: this.gridContext,
            rowSelection: 'multiple',
        };
        this.invoicemarkingcolumnDefs = [
            {
                colId: 'invoiceMarkingId',
                field: 'invoiceMarkingId',
                hide: true,
            },
            {
                headerName: 'Contract Reference',
                colId: 'contractReference',
                field: 'contractReference',
            },
            {
                headerName: 'Cost Type',
                colId: 'costType',
                field: 'costType',
                cellEditor: 'agRichSelectCellEditor',
                cellEditorParams: {
                    values: this.dialogData.masterdata.costTypes.map(function (costTypes) { return costTypes.costTypeCode; }),
                },
            },
            {
                headerName: 'Invoice Reference',
                colId: 'invoiceReference',
                field: 'invoiceReference',
            },
            {
                headerName: 'Invoice Date',
                colId: 'invoiceDate',
                field: 'invoiceDate',
                valueFormatter: this.uiService.dateFormatter,
                cellEditor: 'atrDate',
            },
            {
                headerName: 'Currency',
                colId: 'currencyCode',
                field: 'currencyCode',
                cellEditor: 'agRichSelectCellEditor',
                cellEditorParams: {
                    values: this.dialogData.masterdata.currencies.map(function (currencies) { return currencies.currencyCode; }),
                },
            },
            {
                headerName: 'Value',
                colId: 'invoiceAmount',
                field: 'invoiceAmount',
                cellEditor: 'atlasNumeric',
                cellEditorParams: {
                    displayMask: Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_13__["CustomNumberMask"])(12, 10, false),
                    isRightAligned: false
                },
            },
            {
                headerName: 'Percentage Invoiced',
                colId: 'invoicePercent',
                field: 'invoicePercent',
                cellEditor: 'atlasNumeric',
                editable: this.isPercentageInvoiceEditable.bind(this),
                type: 'numberColumn',
                onCellValueChanged: this.onPercentageInvoiceChange.bind(this),
                cellEditorParams: {
                    displayMask: Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_13__["CustomNumberMask"])(12, 10, false),
                    isRightAligned: false,
                },
                tooltip: function () {
                    return 'Percentage Invoiced should not be more than 100';
                },
            },
            {
                headerName: 'Paid Percentage',
                colId: 'paidPercentage',
                field: 'paidPercentage',
                type: 'numericColumn',
            },
            {
                headerName: 'Cash Match Date',
                colId: 'cashMatchDate',
                field: 'cashMatchDate',
                valueFormatter: this.uiService.dateFormatter,
            },
            {
                headerName: 'Posting Status',
                colId: 'postingStatusId',
                field: 'postingStatusId',
                valueFormatter: this.postingStatusFormatter.bind(this),
            },
            {
                headerName: '',
                cellRendererFramework: _shared_components_ag_contextual_menu_ag_contextual_menu_component__WEBPACK_IMPORTED_MODULE_4__["AgContextualMenuComponent"],
                cellRendererParams: {
                    context: {
                        componentParent: this,
                        actionContext: this.gridContext,
                    },
                    menuActions: this.invoiceMarkingCostGridContextualMenuActions,
                },
                cellClass: 'ag-contextual-menu',
                maxWidth: 80,
            },
        ];
    };
    CostInvoiceMarkingDialogComponent.prototype.isGridEditable = function (params) {
        return params.context.gridEditable;
    };
    CostInvoiceMarkingDialogComponent.prototype.onPercentageInvoiceChange = function (params) {
        if (this.count == 0) {
            this.totalInvoiceTemp = this.totalInvoicePercent;
            this.count++;
        }
        var totalInvoicevalue = this.totalInvoiceTemp + params.newValue - params.oldValue;
        if (this.totalInvoicePercent == totalInvoicevalue) {
            this.saveDisable = false;
        }
        else {
            this.saveDisable = true;
            this.totalInvoiceTemp = totalInvoicevalue;
            this.snackbarService.informationSnackBar('The total sum of Invoice percentage does not matches with actual invoice percentage');
        }
    };
    CostInvoiceMarkingDialogComponent.prototype.onSaveAsInvoieMarkingDialogButtonClicked = function () {
        var _this = this;
        var invoiceMarkingPercentLines = this.getInvoiceMarkingPercentLines();
        this.subscriptions.push(this.executionService.updateInvoiceMarkingLines(invoiceMarkingPercentLines, this.dataVersionId)
            .subscribe(function () {
            _this.thisDialogRef.close(true);
            _this.snackbarService.informationSnackBar('Cost invoice marking Percent updated successfully');
        }));
    };
    CostInvoiceMarkingDialogComponent.prototype.getInvoiceMarkingPercentLines = function () {
        var invoicePercentLines = [];
        this.invoiceMarkingGridRows.map(function (data) {
            if (data) {
                var invoicePercentLine = new _shared_entities_invoice_markings_entity__WEBPACK_IMPORTED_MODULE_10__["InvoiceMarkingPercentLines"]();
                invoicePercentLine.invoicePercent = data.invoicePercent;
                invoicePercentLine.invoiceLineId = data.invoiceLineId;
                invoicePercentLines.push(invoicePercentLine);
            }
        });
        return invoicePercentLines;
    };
    CostInvoiceMarkingDialogComponent.prototype.postingStatusFormatter = function (params) {
        if (params.value) {
            return _shared_enums_posting_status_enum__WEBPACK_IMPORTED_MODULE_12__["PostingStatus"][params.value].toString();
        }
        return '';
    };
    CostInvoiceMarkingDialogComponent.prototype.isPercentageInvoiceEditable = function (params) {
        if (this.isEditable) {
            return params.context.gridEditable;
        }
        else {
            return !(params.context.gridEditable);
        }
    };
    CostInvoiceMarkingDialogComponent.prototype.onCellValueChanged = function (params) {
        if (params.oldValue !== params.newValue) {
            params.node.data.isDirty = true;
        }
        if (params.node.data.invoicePercent > 100) {
            params.node.setDataValue('invoicePercent', null);
        }
    };
    CostInvoiceMarkingDialogComponent.prototype.onChange = function (value) {
        if (value.checked) {
            this.toggleText = 'Active';
            this.isEditable = true;
            this.gridContext.gridEditable = true;
        }
        else {
            this.toggleText = 'InActive';
            this.isEditable = false;
            this.gridContext.gridEditable = false;
        }
        this.initializeGridColumns();
    };
    CostInvoiceMarkingDialogComponent.prototype.onCloseButtonClicked = function () {
        this.thisDialogRef.close(true);
    };
    CostInvoiceMarkingDialogComponent.prototype.checkIfUserHasRequiredPrivileges = function (userCompanyPrivilege) {
        var userPermissionLevel = this.authorizationService.getPermissionLevel(this.dialogData.company, userCompanyPrivilege.privilegeName, userCompanyPrivilege.privilegeParentLevelOne, userCompanyPrivilege.privilegeParentLevelTwo);
        if (userPermissionLevel >= userCompanyPrivilege.permission) {
            return true;
        }
    };
    CostInvoiceMarkingDialogComponent.prototype.handleAction = function (action, invoiceMarkings) {
        switch (action) {
            case this.invoiceMarkingCostMenuActions.deleteinvoiceMarkingCost:
                this.onRemoveSelectedButtonClicked(invoiceMarkings);
                break;
            default:
                break;
        }
    };
    CostInvoiceMarkingDialogComponent.prototype.onRemoveSelectedButtonClicked = function (invoiceMarkings) {
        var _this = this;
        if (invoiceMarkings.invoiceMarkingId) {
            var confirmDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_9__["ConfirmationDialogComponent"], {
                data: {
                    title: 'Invoice Marking Cost Deletion',
                    text: 'Deleting a Invoice Marking Cost row is permanent. Do you wish to proceed?',
                    okButton: 'Delete anyway',
                    cancelButton: 'Cancel',
                },
            });
            confirmDialog.afterClosed().subscribe(function (answer) {
                if (answer) {
                    if (invoiceMarkings.invoiceMarkingId) {
                        _this.subscriptions.push(_this.executionService.deleteInvoiceMarking(invoiceMarkings.invoiceMarkingId).subscribe(function () {
                            _this.snackbarService.informationSnackBar('Invoice Marking Cost Deleted');
                            _this.gridApi.updateRowData({ remove: [invoiceMarkings] });
                        }));
                    }
                    else {
                        _this.gridApi.updateRowData({ remove: [invoiceMarkings] });
                    }
                }
            });
        }
        else {
            this.snackbarService.informationSnackBar('Please select a row to delete');
        }
    };
    CostInvoiceMarkingDialogComponent.prototype.onCostInvoiceMarkingRowClicked = function (event) {
        if (!this.isEditable) {
            this.thisDialogRef.close(true);
            this.router.navigate(['/' + this.dialogData.company +
                    '/financial/accounting/entries/' + encodeURIComponent(event.data.invoiceReference)]);
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"])('window:beforeunload', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], CostInvoiceMarkingDialogComponent.prototype, "unloadNotification", null);
    CostInvoiceMarkingDialogComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-cost-invoice-marking-dialog',
            template: __webpack_require__(/*! ./cost-invoice-marking-dialog.component.html */ "./Client/app/trading/components/contract-physical-capture/costs-tab/cost-invoice-marking-dialog/cost-invoice-marking-dialog.component.html"),
            styles: [__webpack_require__(/*! ./cost-invoice-marking-dialog.component.scss */ "./Client/app/trading/components/contract-physical-capture/costs-tab/cost-invoice-marking-dialog/cost-invoice-marking-dialog.component.scss")],
        }),
        __param(1, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_1__["MAT_DIALOG_DATA"])),
        __metadata("design:paramtypes", [_angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialogRef"], Object, _shared_services_util_service__WEBPACK_IMPORTED_MODULE_19__["UtilService"],
            _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_16__["ExecutionService"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__["AuthorizationService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_15__["FormConfigurationProviderService"],
            _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_18__["UiService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialog"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_17__["SnackbarService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_14__["AgGridService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"]])
    ], CostInvoiceMarkingDialogComponent);
    return CostInvoiceMarkingDialogComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/cost-matrix-dialog/cost-matrix-dialog.component.html":
/*!********************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/cost-matrix-dialog/cost-matrix-dialog.component.html ***!
  \********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h1 class=\"no-margin\">Use Cost Matrix </h1>\r\n<div ag-grid=\"invoiceMarkingGridOptions\"\r\n     class=\"ag-theme-material pointer-cursor\">\r\n    <ag-grid-angular *ngIf=\"costMatrixGridColumnDefs\"\r\n                     [rowData]=\"costMatrixGridRows\"\r\n                     [columnDefs]=\"costMatrixGridColumnDefs\"\r\n                     domLayout=\"autoHeight\"\r\n                     (gridReady)=\"onGridReady($event)\"\r\n                     (rowSelected)=\"onSelectionChanged($event)\"\r\n                     rowSelection=\"single\"\r\n                     [pagination]=\"true\"\r\n                     [paginationPageSize]=\"10\"\r\n                     [enableSorting]=\"true\"\r\n                     [enableFilter]=\"true\"\r\n                     [enableColResize]=\"false\"\r\n                     [rowHeight]=atlasAgGridParam.rowHeight>\r\n    </ag-grid-angular>\r\n</div>\r\n<mat-dialog-actions>\r\n    <button mat-button\r\n            (click)=\"onCancelButtonClicked()\">\r\n        Discard\r\n    </button>\r\n    <span class=\"fill-space\"></span>\r\n    <button mat-button\r\n            (click)=\"onAddButtonClicked()\">\r\n        Add\r\n    </button>\r\n</mat-dialog-actions>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/cost-matrix-dialog/cost-matrix-dialog.component.scss":
/*!********************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/cost-matrix-dialog/cost-matrix-dialog.component.scss ***!
  \********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/cost-matrix-dialog/cost-matrix-dialog.component.ts":
/*!******************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/cost-matrix-dialog/cost-matrix-dialog.component.ts ***!
  \******************************************************************************************************************************/
/*! exports provided: CostMatrixDialogComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CostMatrixDialogComponent", function() { return CostMatrixDialogComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_enums_gaps_enum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../shared/enums/gaps.enum */ "./Client/app/shared/enums/gaps.enum.ts");
/* harmony import */ var _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/services/ag-grid.service */ "./Client/app/shared/services/ag-grid.service.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_feature_flag_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/services/http-services/feature-flag.service */ "./Client/app/shared/services/http-services/feature-flag.service.ts");
/* harmony import */ var _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/services/ui.service */ "./Client/app/shared/services/ui.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};








var CostMatrixDialogComponent = /** @class */ (function (_super) {
    __extends(CostMatrixDialogComponent, _super);
    function CostMatrixDialogComponent(thisDialogRef, data, dialog, formConfigurationProvider, uiService, gridService, featureFlagService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.thisDialogRef = thisDialogRef;
        _this.data = data;
        _this.dialog = dialog;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.uiService = uiService;
        _this.gridService = gridService;
        _this.featureFlagService = featureFlagService;
        _this.costMatrixGridOptions = {};
        _this.gaps = _shared_enums_gaps_enum__WEBPACK_IMPORTED_MODULE_3__["Gaps"];
        _this.atlasAgGridParam = _this.gridService.getAgGridParam();
        _this.dialogData = data;
        return _this;
    }
    CostMatrixDialogComponent.prototype.ngOnInit = function () {
        this.initializeGridColumns();
        this.costMatrixGridRows = this.dialogData.matrixData;
    };
    CostMatrixDialogComponent.prototype.initializeGridColumns = function () {
        var _this = this;
        this.featureFlagService.getFlagInfo(_shared_enums_gaps_enum__WEBPACK_IMPORTED_MODULE_3__["Gaps"].gap003).subscribe(function (flagAuth) {
            if (flagAuth.active === true) {
                _this.costMatrixGridColumnDefs = [
                    {
                        headerName: ' ',
                        hide: false,
                        headerCheckboxSelection: false,
                        checkboxSelection: true,
                        width: 70,
                    },
                    {
                        headerName: 'Best Match',
                        colId: 'bestMatch',
                        field: 'bestMatch',
                        hide: false,
                        cellRenderer: function (params) {
                            if (params.value > 0) {
                                return '<mat-chip-list><mat-chip class="status-flag-chip-bm">BM</mat-chip></mat-chip-list>';
                            }
                            return '';
                        },
                    },
                    {
                        headerName: ' Cost Matrix Name',
                        colId: 'name',
                        field: 'name',
                        hide: false,
                    },
                    {
                        headerName: 'Description',
                        colId: 'description',
                        field: 'description',
                        hide: false,
                    },
                    {
                        headerName: 'Parameters',
                        colId: 'paramters',
                        field: 'tagsFormatted',
                        hide: false,
                    },
                ];
            }
            else {
                _this.costMatrixGridColumnDefs = [
                    {
                        headerName: ' ',
                        hide: false,
                        headerCheckboxSelection: false,
                        checkboxSelection: true,
                        width: 70,
                    },
                    {
                        headerName: ' Cost Matrix Name',
                        colId: 'name',
                        field: 'name',
                        hide: false,
                    },
                    {
                        headerName: 'Description',
                        colId: 'description',
                        field: 'description',
                        hide: false,
                    },
                ];
            }
        });
    };
    CostMatrixDialogComponent.prototype.onGridReady = function (params) {
        var _this = this;
        params.columnDefs = this.costMatrixGridColumnDefs;
        this.costMatrixGridOptions = params;
        this.gridColumnApi = params.columnApi;
        this.gridApi = params.api;
        this.gridApi.sizeColumnsToFit();
        window.onresize = function () {
            _this.gridColumnApi.autoSizeAllColumns();
        };
    };
    CostMatrixDialogComponent.prototype.onSelectionChanged = function (event) {
        var _this = this;
        var selectedRows = this.gridApi.getSelectedRows();
        selectedRows.forEach(function (costs) {
            _this.selectedCostId = costs.costMatrixId;
        });
    };
    CostMatrixDialogComponent.prototype.onCancelButtonClicked = function () {
        this.thisDialogRef.close(true);
    };
    CostMatrixDialogComponent.prototype.onAddButtonClicked = function () {
        this.thisDialogRef.close(this.selectedCostId);
    };
    CostMatrixDialogComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-cost-matrix-dialog',
            template: __webpack_require__(/*! ./cost-matrix-dialog.component.html */ "./Client/app/trading/components/contract-physical-capture/costs-tab/cost-matrix-dialog/cost-matrix-dialog.component.html"),
            styles: [__webpack_require__(/*! ./cost-matrix-dialog.component.scss */ "./Client/app/trading/components/contract-physical-capture/costs-tab/cost-matrix-dialog/cost-matrix-dialog.component.scss")],
        }),
        __param(1, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_1__["MAT_DIALOG_DATA"])),
        __metadata("design:paramtypes", [_angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialogRef"], Object, _angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialog"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_5__["FormConfigurationProviderService"],
            _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_7__["UiService"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_4__["AgGridService"],
            _shared_services_http_services_feature_flag_service__WEBPACK_IMPORTED_MODULE_6__["FeatureFlagService"]])
    ], CostMatrixDialogComponent);
    return CostMatrixDialogComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_2__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-ag-grid-row.ts":
/*!************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/costs-ag-grid-row.ts ***!
  \************************************************************************************************/
/*! exports provided: CostListDisplayView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CostListDisplayView", function() { return CostListDisplayView; });
/* harmony import */ var _shared_entities_cost_entity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../shared/entities/cost.entity */ "./Client/app/shared/entities/cost.entity.ts");
/* harmony import */ var _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../shared/enums/rate-type.enum */ "./Client/app/shared/enums/rate-type.enum.ts");


var CostListDisplayView = /** @class */ (function () {
    function CostListDisplayView(cost, masterdata, costDirections) {
        if (cost) {
            this.costId = cost.costId;
            this.rowStatus = cost.rowStatus;
            this.bestMatch = cost.bestMatch;
            this.sectionId = cost.sectionId;
            this.costTypeCode = cost.costTypeCode;
            this.description = this.getCostTypeDescriptionFromCode(cost.costTypeCode, masterdata);
            this.supplierCode = cost.supplierCode;
            this.costDirection = this.getCostDirectionCodeFromId(cost.costDirectionId, costDirections);
            this.currencyCode = cost.currencyCode;
            this.rateTypeCode = this.getRateCodeFromId(cost.rateTypeId, masterdata);
            this.priceCode = cost.priceUnitId && cost.priceUnitId !== 0 ? this.getPriceCodeFromId(cost.priceUnitId, masterdata) : '';
            this.rate = cost.rate;
            this.inPL = cost.inPL;
            this.noAction = cost.noAction;
            this.invoiceStatus = cost.invoiceStatus;
            this.narrative = cost.narrative;
            this.costMatrixLineId = cost.costMatrixLineId;
            this.originalEstimatedPMTValue = cost.originalEstimatedPMTValue;
            this.originalEstRateTypeCode = this.getRateCodeFromId(cost.originalEstRateTypeId, masterdata);
            this.originalEstPriceCode = cost.originalEstPriceUnitId && cost.originalEstPriceUnitId !== 0 ?
                this.getPriceCodeFromId(cost.originalEstPriceUnitId, masterdata) : '';
            this.originalEstCurrencyCode = cost.originalEstCurrencyCode;
            this.originalEstRate = cost.originalEstRate;
            this.companyId = cost.companyId;
            this.createdDateTime = cost.createdDateTime;
            this.createdBy = cost.createdBy;
            this.modifiedDateTime = cost.modifiedDateTime;
            this.modifiedBy = cost.modifiedBy;
            this.contextInformation = cost.contextInformation;
            this.documentReference = cost.documentReference;
            this.documentDate = cost.documentDate;
            this.invoicePercent = cost.invoicePercent;
            this.costMatrixName = cost.costMatrixName;
        }
    }
    CostListDisplayView.prototype.getCostTypeDescriptionFromCode = function (code, masterdata) {
        var costType = masterdata.costTypes.find(function (e) { return e.costTypeCode === code; });
        return costType ? costType.name : '';
    };
    CostListDisplayView.prototype.getRateCodeFromId = function (id, masterdata) {
        var rateCode = _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_1__["RateTypes"][id];
        return rateCode;
    };
    CostListDisplayView.prototype.getPriceCodeFromId = function (id, masterdata) {
        var priceCode = masterdata.priceUnits.find(function (e) { return e.priceUnitId === id; });
        return priceCode ? priceCode.priceCode : '';
    };
    CostListDisplayView.prototype.getCostDirectionCodeFromId = function (id, costDirections) {
        var costDirection = costDirections.find(function (e) { return e.costDirectionId === id; });
        return costDirection ? costDirection.costDirection : '';
    };
    CostListDisplayView.prototype.getCost = function (masterdata, costDirections) {
        var cost = new _shared_entities_cost_entity__WEBPACK_IMPORTED_MODULE_0__["Cost"]();
        cost.costId = this.costId;
        cost.sectionId = this.sectionId;
        cost.costTypeCode = this.costTypeCode;
        cost.description = this.description;
        cost.supplierCode = this.supplierCode;
        cost.costDirectionId = this.getCostDirectionIdFromCode(this.costDirection, costDirections);
        cost.currencyCode = this.currencyCode;
        cost.rateTypeId = this.getRateTypeIdFromCode(this.rateTypeCode, masterdata);
        if (this.priceCode) {
            cost.priceUnitId = this.getPriceUnitIdFromCode(this.priceCode, masterdata);
        }
        cost.rate = this.rate;
        cost.inPL = this.inPL;
        cost.noAction = this.noAction;
        cost.invoiceStatus = this.invoiceStatus;
        cost.narrative = this.narrative;
        cost.costMatrixLineId = this.costMatrixLineId;
        cost.originalEstimatedPMTValue = this.originalEstimatedPMTValue;
        cost.originalEstRateTypeId = this.getRateTypeIdFromCode(this.originalEstRateTypeCode, masterdata);
        if (this.originalEstPriceCode) {
            cost.originalEstPriceUnitId = this.getPriceUnitIdFromCode(this.originalEstPriceCode, masterdata);
        }
        cost.originalEstCurrencyCode = this.originalEstCurrencyCode;
        cost.originalEstRate = this.originalEstRate;
        cost.companyId = this.companyId;
        cost.createdDateTime = this.createdDateTime;
        cost.createdBy = this.createdBy;
        cost.modifiedDateTime = this.modifiedDateTime;
        cost.modifiedBy = this.modifiedBy;
        cost.contextInformation = this.contextInformation;
        cost.documentReference = this.documentReference;
        cost.documentDate = this.documentDate;
        cost.invoicePercent = this.invoicePercent;
        cost.costMatrixName = this.costMatrixName;
        return cost;
    };
    CostListDisplayView.prototype.getRateTypeIdFromCode = function (code, masterdata) {
        var rateTypeId = _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_1__["RateTypes"][code];
        return rateTypeId;
    };
    CostListDisplayView.prototype.getPriceUnitIdFromCode = function (code, masterdata) {
        var priceUnit = masterdata.priceUnits.find(function (e) { return e.priceCode === code; });
        return priceUnit ? priceUnit.priceUnitId : null;
    };
    CostListDisplayView.prototype.getCostDirectionIdFromCode = function (code, costDirections) {
        var costDirection = costDirections.find(function (e) { return e.costDirection === code; });
        return costDirection ? costDirection.costDirectionId : null;
    };
    return CostListDisplayView;
}());



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/children-costs/children-costs.component.html":
/*!***************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/children-costs/children-costs.component.html ***!
  \***************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"center center\"\r\n             fxLayoutWrap\r\n             *ngIf=\"isLoading\"\r\n             class=\"loading\">\r\n            <mat-spinner color=\"accent\"></mat-spinner>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayout.xs=\"column\"\r\n             fxLayoutAlign=\"space-between left\"\r\n             fxLayoutWrap\r\n             fxLayoutGap=\"20px\"\r\n             class=\"atlas-grid-card-header\">\r\n            <h2 class=\"atlas-grid-card-title\">Children Costs</h2>\r\n        </div>\r\n        <div ag-grid=\"transferCostChildrenGridOptions\"\r\n             style=\"width: 100%; height:100%\">\r\n            <ag-grid-angular style=\" height:100%;\"\r\n                             class=\"ag-theme-material\"\r\n                             [rowData]=\"childCostsGridRows\"\r\n                             [gridOptions]=\"transferCostChildrenGridOptions\"\r\n                             [columnDefs]=\"transferCostChildrenGridColumns\"\r\n                             domLayout=\"autoHeight\"\r\n                             (gridReady)=\"onGridReady($event)\"\r\n                             [pagination]=\"true\"\r\n                             [paginationPageSize]=\"30\"\r\n                             [enableSorting]=\"true\"\r\n                             [enableColResize]=\"true\"\r\n                             enableFilter\r\n                             [rowHeight]=atlasAgGridParam.rowHeight\r\n                             [singleClickEdit]=true\r\n                             [frameworkComponents]=\"gridComponents\"\r\n                             rowSelection=\"multiple\"\r\n                             rowMultiSelectWithClick=true>\r\n            </ag-grid-angular>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/children-costs/children-costs.component.scss":
/*!***************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/children-costs/children-costs.component.scss ***!
  \***************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/children-costs/children-costs.component.ts":
/*!*************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/children-costs/children-costs.component.ts ***!
  \*************************************************************************************************************************************************/
/*! exports provided: ChildrenCostsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChildrenCostsComponent", function() { return ChildrenCostsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_ag_grid_checkbox_ag_grid_checkbox_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component */ "./Client/app/shared/components/ag-grid-checkbox/ag-grid-checkbox.component.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_entities_bulk_edit_cost_entity__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../../../shared/entities/bulk-edit-cost.entity */ "./Client/app/shared/entities/bulk-edit-cost.entity.ts");
/* harmony import */ var _shared_enums_add_override_enum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../../../shared/enums/add-override.enum */ "./Client/app/shared/enums/add-override.enum.ts");
/* harmony import */ var _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../../../shared/enums/cost-direction.enum */ "./Client/app/shared/enums/cost-direction.enum.ts");
/* harmony import */ var _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../../../shared/enums/invoicing-status.enum */ "./Client/app/shared/enums/invoicing-status.enum.ts");
/* harmony import */ var _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../../../shared/enums/rate-type.enum */ "./Client/app/shared/enums/rate-type.enum.ts");
/* harmony import */ var _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../../../shared/services/ag-grid.service */ "./Client/app/shared/services/ag-grid.service.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _override_costs_dialog_override_costs_dialog_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../override-costs-dialog/override-costs-dialog.component */ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/override-costs-dialog/override-costs-dialog.component.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
















var ChildrenCostsComponent = /** @class */ (function (_super) {
    __extends(ChildrenCostsComponent, _super);
    function ChildrenCostsComponent(formConfigurationProvider, formBuilder, route, tradingService, gridService, snackbarService, dialog, router) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.formBuilder = formBuilder;
        _this.route = route;
        _this.tradingService = tradingService;
        _this.gridService = gridService;
        _this.snackbarService = snackbarService;
        _this.dialog = dialog;
        _this.router = router;
        _this.gridContext = {
            gridEditable: true,
            componentParent: _this,
            editPrivileges: true,
        };
        _this.gridComponents = {
            atlasCheckbox: _shared_components_ag_grid_checkbox_ag_grid_checkbox_component__WEBPACK_IMPORTED_MODULE_4__["AgGridCheckboxComponent"],
        };
        _this.transferCostChildrenGridOptions = {};
        _this.componentId = 'ChildrenCostsGrid';
        _this.hasGridSharing = false;
        _this.childrenCostTypeList = [];
        _this.childrenCosts = [];
        _this.costDynamicColumns = [];
        _this.parentCosts = [];
        _this.selectedChildCosts = [];
        _this.childCostsToOverride = [];
        _this.costTypeCodesToOverride = [];
        _this.parentCostsForOverrirde = [];
        _this.childSectiodIdsForNewCosts = [];
        _this.childrenCostWithoutDuplicate = [];
        _this.totalQuantity = 0;
        _this.allChildCosts = [];
        return _this;
    }
    ChildrenCostsComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
        this.masterdata = this.route.snapshot.data.masterdata;
        this.sectionId = this.route.snapshot.params.sectionId;
        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;
        this.atlasAgGridParam = this.gridService.getAgGridParam();
        this.rateTypes = [
            {
                code: _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_10__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_10__["RateTypes"].Rate],
                description: '',
            },
            {
                code: _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_10__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_10__["RateTypes"].Amount],
                description: '',
            },
            {
                code: _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_10__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_10__["RateTypes"].Percent],
                description: '',
            },
        ];
        this.costDirections = [
            {
                costDirectionId: _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_8__["CostDirections"].Payable,
                costDirection: 'Pay',
            },
            {
                costDirectionId: _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_8__["CostDirections"].Receivable,
                costDirection: 'Receive',
            },
        ];
    };
    ChildrenCostsComponent.prototype.onGridReady = function (params) {
        var _this = this;
        this.gridApi = params.api;
        params.columnDefs = this.transferCostChildrenGridColumns;
        this.transferCostChildrenGridOptions = params;
        this.gridColumnApi = params.columnApi;
        this.gridColumnApi.autoSizeAllColumns();
        window.onresize = function () {
            _this.gridColumnApi.autoSizeAllColumns();
        };
        this.gridApi.showNoRowsOverlay();
        this.autoSizeContractsGrid();
    };
    ChildrenCostsComponent.prototype.autoSizeContractsGrid = function () {
        if (this.gridColumnApi !== undefined) {
            var allColumnIds_1 = [];
            if (this.transferCostChildrenGridColumns) {
                this.transferCostChildrenGridColumns.forEach(function (columnDefs) {
                    allColumnIds_1.push(columnDefs.field);
                });
            }
            this.gridColumnApi.autoSizeColumns(allColumnIds_1);
        }
    };
    ChildrenCostsComponent.prototype.setCostsAsColumnsToChildGrid = function (costTypes) {
        var _this = this;
        this.costTypesLengthOfParentCosts = costTypes.length;
        var getChildCostsSubscription = this.tradingService.getChildSectionsCostsToAdjust(this.sectionId, this.dataVersionId).subscribe(function (data) {
            if (data.value) {
                _this.allChildCosts = data.value;
                data.value.forEach(function (cost) {
                    var existItem = _this.childrenCostWithoutDuplicate.find(function (x) {
                        return ((x.costTypeCode === cost.costTypeCode) && x.sectionId === cost.sectionId);
                    });
                    if (!existItem) {
                        _this.childrenCostWithoutDuplicate.push(cost);
                    }
                });
                _this.childrenCosts = Array.from(new Set(_this.childrenCostWithoutDuplicate.map(function (cost) { return cost.costTypeCode; })));
                if (_this.costTypesLengthOfParentCosts > 0) {
                    _this.initializeGridColumnsForCostTypes(costTypes);
                }
                _this.getGridData(costTypes);
            }
        });
        this.subscriptions.push(getChildCostsSubscription);
    };
    ChildrenCostsComponent.prototype.getGridData = function (costTypeCodes) {
        var _this = this;
        var costs = [];
        costTypeCodes.forEach(function (costType) {
            _this.childrenCostWithoutDuplicate.forEach(function (rowData) {
                if (rowData.costTypeCode === costType) {
                    rowData[costType] = true;
                    rowData.costIds = [];
                    var existingRefNo = costs.findIndex(function (x) { return x.contractReference === rowData.contractReference; });
                    if (existingRefNo !== -1) {
                        costs[existingRefNo][costType] = true;
                        costs[existingRefNo].costIds.push(rowData.costId);
                    }
                    else {
                        rowData.costIds.push(rowData.costId);
                        costs.push(rowData);
                    }
                }
                else if (rowData.costTypeCode === null) {
                    var existRefNo = costs.find(function (cost) { return cost.contractReference === rowData.contractReference; });
                    if (!existRefNo) {
                        costs.push(rowData);
                    }
                }
                else {
                    rowData[costType] = false;
                }
            });
        });
        this.childCostsGridRows = costs;
    };
    ChildrenCostsComponent.prototype.initializeGridColumnsForCostTypes = function (costTypes) {
        var _this = this;
        this.transferCostChildrenGridOptions = {
            context: this.gridContext,
        };
        this.transferCostChildrenGridColumns = [
            {
                headerCheckboxSelection: true,
                checkboxSelection: true,
            },
            {
                headerName: 'contract Reference',
                field: 'contractReference',
                colId: 'contractReference',
                hide: false,
                editable: false,
                width: 150,
            },
            {
                headerName: 'Quantity',
                colId: 'quantity',
                field: 'quantity',
                type: 'numericColumn',
                width: 120,
            },
            {
                headerName: 'Quantity Code',
                colId: 'quantityCode',
                field: 'quantityCode',
                width: 120,
            },
        ];
        costTypes.forEach(function (costType) {
            var mappedColumn = {
                headerName: costType,
                colId: costType,
                field: costType,
                cellRenderer: 'atlasCheckbox',
                cellRendererParams: function (params) {
                    return {
                        disabled: true,
                        params: _this.gridContext,
                    };
                },
            };
            _this.transferCostChildrenGridColumns.push(mappedColumn);
        });
        if (this.transferCostChildrenGridOptions) {
            this.transferCostChildrenGridOptions.columnDefs = this.transferCostChildrenGridColumns;
            if (this.transferCostChildrenGridOptions.api) {
                this.transferCostChildrenGridOptions.api.setColumnDefs(this.transferCostChildrenGridColumns);
            }
        }
    };
    ChildrenCostsComponent.prototype.getFormGroup = function () {
        return _super.prototype.getFormGroup.call(this);
    };
    ChildrenCostsComponent.prototype.addUpateCosts = function () {
        var _this = this;
        var selectedCosts = [];
        var childSectionIds = [];
        this.totalQuantity = 0;
        var selectedRows = this.gridApi.getSelectedRows();
        if (selectedRows && selectedRows.length > 0) {
            selectedRows.forEach(function (childCost) {
                var costIds = childCost.costIds;
                if (costIds && costIds.length > 0) {
                    costIds.forEach(function (costId) {
                        _this.selectedChildCosts.push(_this.allChildCosts.find(function (cost) { return cost.costId === costId; }));
                    });
                }
            });
            childSectionIds = this.selectedChildCosts && this.selectedChildCosts.length > 0 ?
                Array.from(new Set(this.selectedChildCosts.map(function (cost) { return cost.sectionId; }))) :
                selectedRows.map(function (cost) { return cost.sectionId; });
            // calculating the total quantity of all the splits/tranches for a section
            if (childSectionIds && childSectionIds.length > 0) {
                childSectionIds.forEach(function (sectionId) {
                    _this.totalQuantity += _this.getQuantityBySectionId(sectionId);
                });
            }
            if (this.selectedChildCosts && this.selectedChildCosts.length > 0 && this.parentCosts && this.parentCosts.length > 0) {
                this.selectedChildCosts.forEach(function (childCost) {
                    _this.parentCosts.forEach(function (parentCost) {
                        if (childCost.costTypeCode === parentCost.costTypeCode &&
                            childCost.costDirectionId === parentCost.costDirectionId) {
                            _this.costTypeCodesToOverride.push(childCost.costTypeCode);
                            _this.childCostsToOverride.push(childCost);
                            _this.parentCostsForOverrirde.push(parentCost);
                        }
                    });
                });
                if (this.childCostsToOverride && this.childCostsToOverride.length > 0 &&
                    this.costTypeCodesToOverride && this.costTypeCodesToOverride.length > 0) {
                    var overrideDialog = this.dialog.open(_override_costs_dialog_override_costs_dialog_component__WEBPACK_IMPORTED_MODULE_15__["OverrideCostsDialogComponent"], {
                        width: '40%',
                        height: '40%',
                        data: {
                            confirmationMessage: 'Costs ' + this.costTypeCodesToOverride.toString() +
                                ' already exists. What do you want to do?',
                        },
                    });
                    overrideDialog.afterClosed().subscribe(function (result) {
                        if (result === _shared_enums_add_override_enum__WEBPACK_IMPORTED_MODULE_7__["AddOrOverride"].Add) {
                            _this.getDataForNewCosts(childSectionIds, selectedCosts);
                        }
                        else if (result === _shared_enums_add_override_enum__WEBPACK_IMPORTED_MODULE_7__["AddOrOverride"].Override) {
                            _this.getDataForOverrideCosts(selectedCosts);
                            if (_this.childSectiodIdsForNewCosts && _this.childSectiodIdsForNewCosts.length > 0) {
                                // Removing duplicates section ids
                                _this.childSectiodIdsForNewCosts = Array.from(new Set(_this.childSectiodIdsForNewCosts));
                                _this.getDataForNewCosts(_this.childSectiodIdsForNewCosts, selectedCosts);
                            }
                            _this.getDataForParentCostsProrated(selectedCosts, _this.parentCostsForOverrirde);
                        }
                        else {
                            return;
                        }
                        _this.saveCosts(selectedCosts);
                    });
                }
                else {
                    this.getDataForNewCosts(childSectionIds, selectedCosts);
                    this.getDataForParentCostsProrated(selectedCosts, this.parentCosts);
                    this.saveCosts(selectedCosts);
                }
            }
            else {
                this.getDataForNewCosts(childSectionIds, selectedCosts);
                this.getDataForParentCostsProrated(selectedCosts, this.parentCosts);
                this.saveCosts(selectedCosts);
            }
        }
        else {
            this.snackbarService.informationSnackBar('Please select a split/tranch to transfer costs.');
        }
    };
    ChildrenCostsComponent.prototype.getDataForOverrideCosts = function (selectedCosts) {
        var _this = this;
        this.childCostsToOverride.forEach(function (childCost) {
            _this.parentCostsForOverrirde.forEach(function (parentCost) {
                if (childCost.invoicePercent > 0) {
                    _this.childSectiodIdsForNewCosts.push(childCost.sectionId);
                }
                else {
                    if (childCost.costTypeCode === parentCost.costTypeCode &&
                        childCost.costDirectionId === parentCost.costDirectionId) {
                        var costToSave = new _shared_entities_bulk_edit_cost_entity__WEBPACK_IMPORTED_MODULE_6__["BulkCost"]();
                        costToSave.sectionId = childCost.sectionId;
                        costToSave.rowStatus = 'A';
                        costToSave.costId = childCost.costId;
                        costToSave.costTypeCode = childCost.costTypeCode;
                        costToSave.description = _this.getCostTypeDescriptionFromId(childCost.costTypeCode);
                        costToSave.supplierCode = parentCost.supplierCode;
                        costToSave.currencyCode = parentCost.currencyCode;
                        costToSave.rateTypeId = _this.getRateTypeIdFromCode(parentCost.rateTypeCode);
                        costToSave.priceUnitId = parentCost.priceUnitId ? parentCost.priceUnitId : (parentCost.priceCode ?
                            _this.masterdata.priceUnits.find(function (priceUnit) {
                                return priceUnit.priceCode === parentCost.priceCode;
                            }).priceUnitId : null);
                        costToSave.rate = parentCost.isProRated ?
                            ((childCost.quantity * parentCost.rate) / (_this.totalQuantity + parentCost.quantity)) :
                            parentCost.rate;
                        costToSave.invoicingStatusId = childCost.invoicingStatusId;
                        costToSave.costDirectionId = parentCost.costDirection ?
                            _this.costDirections.find(function (costDirection) {
                                return costDirection.costDirection === parentCost.costDirection;
                            }).costDirectionId : null;
                        if (costToSave.rowStatus) {
                            selectedCosts.push(costToSave);
                        }
                    }
                }
            });
        });
    };
    ChildrenCostsComponent.prototype.getDataForNewCosts = function (childSectionIds, selectedCosts) {
        var _this = this;
        childSectionIds.forEach(function (sectionId) {
            _this.parentCosts.forEach(function (cost) {
                var costToSave = new _shared_entities_bulk_edit_cost_entity__WEBPACK_IMPORTED_MODULE_6__["BulkCost"]();
                costToSave.sectionId = sectionId;
                costToSave.rowStatus = 'N';
                costToSave.costTypeCode = cost.costTypeCode;
                costToSave.description = _this.getCostTypeDescriptionFromId(cost.costTypeCode);
                costToSave.supplierCode = cost.supplierCode;
                costToSave.currencyCode = cost.currencyCode;
                costToSave.rateTypeId = _this.getRateTypeIdFromCode(cost.rateTypeCode);
                costToSave.priceUnitId = cost.priceUnitId ? cost.priceUnitId : (cost.priceCode ?
                    _this.masterdata.priceUnits.find(function (priceUnit) { return priceUnit.priceCode === cost.priceCode; }).priceUnitId : null);
                costToSave.rate = cost.isProRated ? _this.calculateProratedRate(sectionId, cost.rate, cost.quantity) : cost.rate;
                costToSave.invoicingStatusId = _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_9__["InvoicingStatus"].Uninvoiced;
                costToSave.costDirectionId = cost.costDirection ?
                    _this.costDirections.find(function (costDirection) { return costDirection.costDirection === cost.costDirection; }).costDirectionId : null;
                if (costToSave.rowStatus) {
                    selectedCosts.push(costToSave);
                }
            });
        });
    };
    ChildrenCostsComponent.prototype.setParentData = function (parentCosts) {
        if (parentCosts && parentCosts.length > 0) {
            this.parentCosts = parentCosts;
        }
    };
    ChildrenCostsComponent.prototype.getRateTypeIdFromCode = function (code) {
        var rateTypeId = _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_10__["RateTypes"][code];
        return rateTypeId;
    };
    ChildrenCostsComponent.prototype.getCostTypeDescriptionFromId = function (code) {
        var descrption = this.masterdata.costTypes.find(function (e) { return e.costTypeCode === code; });
        return descrption ? descrption.name : null;
    };
    ChildrenCostsComponent.prototype.saveCosts = function (costs) {
        var _this = this;
        var costTadIndex = '1';
        this.subscriptions.push(this.tradingService
            .saveBulkCost(costs)
            .subscribe(function (data) {
            _this.router.navigate(['/' + _this.company + '/trades/display/' +
                    encodeURIComponent(String(_this.sectionId)) + '/' + encodeURIComponent(costTadIndex)]);
            _this.snackbarService.informationSnackBar('Costs updated successfully.');
        }));
    };
    ChildrenCostsComponent.prototype.calculateProratedRate = function (sectionId, rate, parentQuantity) {
        var selectedCost = this.selectedChildCosts.find(function (cost) { return cost.sectionId === sectionId; });
        // if existing cost is getting prorated
        if (selectedCost) {
            var quantity = selectedCost.quantity;
            return (rate * quantity) / (this.totalQuantity + parentQuantity);
        }
        else {
            // if there is no cost in child trade, get the quantity of split using the section id for calculation
            var childSectionQuantity = this.allChildCosts.find(function (cost) { return cost.sectionId === sectionId; }).quantity;
            if (childSectionQuantity) {
                return (rate * childSectionQuantity) / (this.totalQuantity + parentQuantity);
            }
        }
    };
    ChildrenCostsComponent.prototype.getDataForParentCostsProrated = function (selectedCosts, parentCostsForProrata) {
        var _this = this;
        if (parentCostsForProrata && parentCostsForProrata.length > 0) {
            parentCostsForProrata.forEach(function (parentCost) {
                var costToSave = new _shared_entities_bulk_edit_cost_entity__WEBPACK_IMPORTED_MODULE_6__["BulkCost"]();
                costToSave.sectionId = parentCost.sectionId;
                costToSave.rowStatus = 'A';
                costToSave.costId = parentCost.costId;
                costToSave.costTypeCode = parentCost.costTypeCode;
                costToSave.description = _this.getCostTypeDescriptionFromId(parentCost.costTypeCode);
                costToSave.supplierCode = parentCost.supplierCode;
                costToSave.currencyCode = parentCost.currencyCode;
                costToSave.rateTypeId = _this.getRateTypeIdFromCode(parentCost.rateTypeCode);
                costToSave.priceUnitId = parentCost.priceUnitId ? parentCost.priceUnitId : (parentCost.priceCode ?
                    _this.masterdata.priceUnits.find(function (priceUnit) {
                        return priceUnit.priceCode === parentCost.priceCode;
                    }).priceUnitId : null);
                costToSave.rate = parentCost.isProRated ?
                    ((parentCost.quantity * parentCost.rate) / (_this.totalQuantity + parentCost.quantity)) :
                    parentCost.rate;
                costToSave.invoicingStatusId = parentCost.invoicingStatusId;
                costToSave.costDirectionId = parentCost.costDirection ?
                    _this.costDirections.find(function (costDirection) {
                        return costDirection.costDirection === parentCost.costDirection;
                    }).costDirectionId : null;
                if (costToSave.rowStatus) {
                    selectedCosts.push(costToSave);
                }
            });
        }
    };
    ChildrenCostsComponent.prototype.getQuantityBySectionId = function (sectionId) {
        if (this.allChildCosts && this.allChildCosts.length > 0) {
            var section = this.allChildCosts.find(function (cost) { return cost.sectionId === sectionId; });
            if (section) {
                return section.quantity;
            }
        }
    };
    ChildrenCostsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-children-costs',
            template: __webpack_require__(/*! ./children-costs.component.html */ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/children-costs/children-costs.component.html"),
            styles: [__webpack_require__(/*! ./children-costs.component.scss */ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/children-costs/children-costs.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_12__["FormConfigurationProviderService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_13__["TradingService"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_11__["AgGridService"], _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_14__["SnackbarService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialog"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"]])
    ], ChildrenCostsComponent);
    return ChildrenCostsComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/override-costs-dialog/override-costs-dialog.component.html":
/*!*****************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/override-costs-dialog/override-costs-dialog.component.html ***!
  \*****************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div fxLayoutAlign=\"end\">\r\n    <button mat-button>\r\n        <mat-icon (click)=\"onCloseButtonClicked()\">close</mat-icon>\r\n    </button>\r\n</div>\r\n<mat-dialog-content>\r\n    <div fxLayout=\"row\"\r\n         fxLayoutAlign=\"center center\">\r\n        <p>{{dialogText}}</p>\r\n    </div>\r\n\r\n</mat-dialog-content>\r\n<mat-dialog-actions>\r\n    <div fxFlex=\"50\"\r\n         fxLayout=\"row\"\r\n         fxAlignLayout=\"start start\">\r\n        <button mat-button\r\n                (click)=\"onDiscardButtonClicked()\">DISCARD</button>\r\n    </div>\r\n    <div fxFlex=\"50\"\r\n         fxLayout=\"row\"\r\n         fxAlignLayout=\"start end\">\r\n        <span class=\"fill-space\"></span>\r\n        <button mat-button\r\n                (click)=\"onAddCostsButtonClicked()\">ADD COSTS</button>\r\n        <button mat-button\r\n                (click)=\"onOverrideButtonClicked()\">OVERRIDE</button>\r\n    </div>\r\n</mat-dialog-actions>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/override-costs-dialog/override-costs-dialog.component.scss":
/*!*****************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/override-costs-dialog/override-costs-dialog.component.scss ***!
  \*****************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/override-costs-dialog/override-costs-dialog.component.ts":
/*!***************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/override-costs-dialog/override-costs-dialog.component.ts ***!
  \***************************************************************************************************************************************************************/
/*! exports provided: OverrideCostsDialogComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OverrideCostsDialogComponent", function() { return OverrideCostsDialogComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _shared_enums_add_override_enum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../../shared/enums/add-override.enum */ "./Client/app/shared/enums/add-override.enum.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};



var OverrideCostsDialogComponent = /** @class */ (function () {
    function OverrideCostsDialogComponent(thisDialogRef, data) {
        this.thisDialogRef = thisDialogRef;
        this.data = data;
        this.dialogText = '';
        this.dialogData = data;
        this.dialogText = this.dialogData.confirmationMessage;
    }
    OverrideCostsDialogComponent.prototype.ngOnInit = function () {
    };
    OverrideCostsDialogComponent.prototype.onCloseButtonClicked = function () {
        this.thisDialogRef.close();
    };
    OverrideCostsDialogComponent.prototype.onAddCostsButtonClicked = function () {
        this.thisDialogRef.close(_shared_enums_add_override_enum__WEBPACK_IMPORTED_MODULE_2__["AddOrOverride"].Add);
    };
    OverrideCostsDialogComponent.prototype.onOverrideButtonClicked = function () {
        this.thisDialogRef.close(_shared_enums_add_override_enum__WEBPACK_IMPORTED_MODULE_2__["AddOrOverride"].Override);
    };
    OverrideCostsDialogComponent.prototype.onDiscardButtonClicked = function () {
        this.thisDialogRef.close();
    };
    OverrideCostsDialogComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-override-costs-dialog',
            template: __webpack_require__(/*! ./override-costs-dialog.component.html */ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/override-costs-dialog/override-costs-dialog.component.html"),
            styles: [__webpack_require__(/*! ./override-costs-dialog.component.scss */ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/override-costs-dialog/override-costs-dialog.component.scss")],
        }),
        __param(1, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_1__["MAT_DIALOG_DATA"])),
        __metadata("design:paramtypes", [_angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialogRef"], Object])
    ], OverrideCostsDialogComponent);
    return OverrideCostsDialogComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/parent-costs/parent-costs.component.html":
/*!***********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/parent-costs/parent-costs.component.html ***!
  \***********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"center center\"\r\n             fxLayoutWrap\r\n             *ngIf=\"isLoading\"\r\n             class=\"loading\">\r\n            <mat-spinner color=\"accent\"></mat-spinner>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayout.xs=\"column\"\r\n             fxLayoutAlign=\"space-between left\"\r\n             fxLayoutWrap\r\n             fxLayoutGap=\"20px\"\r\n             class=\"atlas-grid-card-header\">\r\n            <h2 class=\"atlas-grid-card-title\">Parent Costs</h2>\r\n        </div>\r\n        <div ag-grid=\"transferCostGridOptions\"\r\n             style=\"width: 100%; height:100%\">\r\n            <ag-grid-angular style=\" height:100%;\"\r\n                             class=\"ag-theme-material\"\r\n                             [rowData]=\"parentCostsGridRows\"\r\n                             [gridOptions]=\"transferCostGridOptions\"\r\n                             [columnDefs]=\"transferCostGridColumns\"\r\n                             domLayout=\"autoHeight\"\r\n                             (gridReady)=\"onGridReady($event)\"\r\n                             [pagination]=\"true\"\r\n                             [paginationPageSize]=\"10\"\r\n                             [enableSorting]=\"true\"\r\n                             [enableColResize]=\"true\"\r\n                             enableFilter\r\n                             [rowHeight]=atlasAgGridParam.rowHeight\r\n                             [frameworkComponents]=\"gridComponents\"\r\n                             rowSelection=\"multiple\"\r\n                             rowMultiSelectWithClick=true\r\n                             suppressRowClickSelection=true>\r\n            </ag-grid-angular>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/parent-costs/parent-costs.component.scss":
/*!***********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/parent-costs/parent-costs.component.scss ***!
  \***********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/parent-costs/parent-costs.component.ts":
/*!*********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/parent-costs/parent-costs.component.ts ***!
  \*********************************************************************************************************************************************/
/*! exports provided: ParentCostsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParentCostsComponent", function() { return ParentCostsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_ag_grid_checkbox_ag_grid_checkbox_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component */ "./Client/app/shared/components/ag-grid-checkbox/ag-grid-checkbox.component.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../../../shared/enums/cost-direction.enum */ "./Client/app/shared/enums/cost-direction.enum.ts");
/* harmony import */ var _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../../../shared/enums/rate-type.enum */ "./Client/app/shared/enums/rate-type.enum.ts");
/* harmony import */ var _shared_enums_yes_no_confirmation_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../../../shared/enums/yes-no-confirmation.enum */ "./Client/app/shared/enums/yes-no-confirmation.enum.ts");
/* harmony import */ var _shared_numberMask__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../../../shared/numberMask */ "./Client/app/shared/numberMask.ts");
/* harmony import */ var _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../../../shared/services/ag-grid.service */ "./Client/app/shared/services/ag-grid.service.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











var ParentCostsComponent = /** @class */ (function (_super) {
    __extends(ParentCostsComponent, _super);
    function ParentCostsComponent(formConfigurationProvider, route, gridService, tradingService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.route = route;
        _this.gridService = gridService;
        _this.tradingService = tradingService;
        _this.listOfCostTypes = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.gridContext = {
            gridEditable: true,
            componentParent: _this,
            editPrivileges: true,
        };
        _this.gridComponents = {
            atlasCheckbox: _shared_components_ag_grid_checkbox_ag_grid_checkbox_component__WEBPACK_IMPORTED_MODULE_2__["AgGridCheckboxComponent"],
        };
        _this.transferCostGridOptions = {};
        _this.componentId = 'ParentCostsGrid';
        _this.hasGridSharing = false;
        _this.isProRata = false;
        _this.costTypesList = [];
        return _this;
    }
    ParentCostsComponent.prototype.ngOnInit = function () {
        this.masterdata = this.route.snapshot.data.masterdata;
        this.atlasAgGridParam = this.gridService.getAgGridParam();
        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;
        this.sectionId = this.route.snapshot.params.sectionId;
        this.getCosts(this.sectionId);
        this.initializeGridColumns();
        this.rateTypes = [
            {
                code: _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_5__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_5__["RateTypes"].Rate],
                description: '',
            },
            {
                code: _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_5__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_5__["RateTypes"].Amount],
                description: '',
            },
            {
                code: _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_5__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_5__["RateTypes"].Percent],
                description: '',
            },
        ];
        this.costDirections = [
            {
                costDirectionId: _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_4__["CostDirections"].Payable,
                costDirection: 'Pay',
            },
            {
                costDirectionId: _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_4__["CostDirections"].Receivable,
                costDirection: 'Receive',
            },
        ];
        this.confirmationOptions = [
            {
                option: _shared_enums_yes_no_confirmation_enum__WEBPACK_IMPORTED_MODULE_6__["YesNoConfirmation"][_shared_enums_yes_no_confirmation_enum__WEBPACK_IMPORTED_MODULE_6__["YesNoConfirmation"].Yes],
            },
            {
                option: _shared_enums_yes_no_confirmation_enum__WEBPACK_IMPORTED_MODULE_6__["YesNoConfirmation"][_shared_enums_yes_no_confirmation_enum__WEBPACK_IMPORTED_MODULE_6__["YesNoConfirmation"].No],
            },
        ];
    };
    ParentCostsComponent.prototype.isGridEditable = function (params) {
        return params.context.gridEditable;
    };
    ParentCostsComponent.prototype.onGridReady = function (params) {
        var _this = this;
        this.gridApi = params.api;
        params.columnDefs = this.transferCostGridColumns;
        this.transferCostGridOptions = params;
        this.gridColumnApi = params.columnApi;
        this.gridColumnApi.autoSizeAllColumns();
        window.onresize = function () {
            _this.gridColumnApi.autoSizeAllColumns();
        };
        this.gridApi.showNoRowsOverlay();
        this.autoSizeContractsGrid();
    };
    ParentCostsComponent.prototype.autoSizeContractsGrid = function () {
        if (this.gridColumnApi !== undefined) {
            var allColumnIds_1 = [];
            if (this.transferCostGridColumns) {
                this.transferCostGridColumns.forEach(function (columnDefs) {
                    allColumnIds_1.push(columnDefs.field);
                });
            }
            this.gridColumnApi.autoSizeColumns(allColumnIds_1);
        }
    };
    ParentCostsComponent.prototype.initializeGridColumns = function () {
        var _this = this;
        this.transferCostGridOptions = {
            context: this.gridContext,
        };
        this.transferCostGridColumns = [
            {
                headerCheckboxSelection: true,
                checkboxSelection: true,
            },
            {
                headerName: 'Cost Code*',
                field: 'costTypeCode',
                colId: 'costTypeCode',
            },
            {
                headerName: 'Supplier',
                field: 'supplierCode',
                width: 120,
            },
            {
                headerName: 'CCY*',
                field: 'currencyCode',
                colId: 'currencyCode',
                width: 120,
            },
            {
                headerName: 'Rate Type*',
                field: 'rateTypeCode',
                width: 120,
            },
            {
                headerName: 'Price Code',
                field: 'priceCode',
                colId: 'priceCode',
                width: 120,
            },
            {
                headerName: 'Pay/Rec*',
                field: 'costDirection',
                width: 120,
            },
            {
                headerName: 'Rate/Amount',
                field: 'rate',
                type: 'numberColumn',
                cellEditorParams: {
                    displayMask: Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_7__["CustomNumberMask"])(12, 10, false),
                    isRightAligned: false,
                },
                width: 120,
            },
            {
                headerName: 'Narrative',
                field: 'narrative',
                cellEditorParams: {
                    maxLength: 100,
                    rows: 3,
                    cols: 50,
                },
                width: 120,
            },
            {
                headerName: 'Pro Rata',
                field: 'isProRated',
                colId: 'isProRated',
                cellRenderer: 'atlasCheckbox',
                cellRendererParams: function (params) {
                    return {
                        disabled: _this.isProRataEditable(params),
                        params: _this.gridContext,
                    };
                },
            },
        ];
    };
    ParentCostsComponent.prototype.isProRataEditable = function (params) {
        if (params.data.rateTypeCode === _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_5__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_5__["RateTypes"].Amount]) {
            return false;
        }
        else {
            return true;
        }
    };
    ParentCostsComponent.prototype.getCosts = function (sectionId) {
        var _this = this;
        var getCostsSubscription = this.tradingService.getParentCostsToAdjust(sectionId, this.dataVersionId).subscribe(function (data) {
            data.value.forEach(function (cost) {
                cost.rateTypeCode = _this.getRateCodeFromId(cost.rateTypeId);
                cost.priceCode = _this.getPriceCodeFromId(cost.priceUnitId);
                cost.costDirection = _this.getCostDirectionCodeFromId(cost.costDirectionId, _this.costDirections);
            });
            _this.parentCostsGridRows = data.value;
            _this.costTypesList = data.value.map(function (costs) { return costs.costTypeCode; });
            _this.listOfCostTypes.emit({
                costTypes: _this.costTypesList,
            });
        });
        this.subscriptions.push(getCostsSubscription);
    };
    ParentCostsComponent.prototype.getCostTypeCodeFromId = function (id) {
        var costTypeCode = this.masterdata.costTypes.find(function (e) { return e.costTypeId === id; });
        return costTypeCode ? costTypeCode.costTypeCode : null;
    };
    ParentCostsComponent.prototype.getSupplierCodeFromId = function (id) {
        var counterparty = this.masterdata.counterparties.find(function (e) { return e.counterpartyID === id; });
        return counterparty ? counterparty.counterpartyCode : null;
    };
    ParentCostsComponent.prototype.getRateCodeFromId = function (id) {
        var rateCode = _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_5__["RateTypes"][id];
        return rateCode;
    };
    ParentCostsComponent.prototype.getPriceCodeFromId = function (id) {
        var priceCode = this.masterdata.priceUnits.find(function (e) { return e.priceUnitId === id; });
        return priceCode ? priceCode.priceCode : '';
    };
    ParentCostsComponent.prototype.getCostDirectionCodeFromId = function (id, costDirections) {
        var costDirection = costDirections.find(function (e) { return e.costDirectionId === id; });
        return costDirection ? costDirection.costDirection : '';
    };
    ParentCostsComponent.prototype.getGridData = function () {
        var costs = this.gridApi.getSelectedRows();
        if (costs && costs.length > 0) {
            return costs;
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], ParentCostsComponent.prototype, "listOfCostTypes", void 0);
    ParentCostsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-parent-costs',
            template: __webpack_require__(/*! ./parent-costs.component.html */ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/parent-costs/parent-costs.component.html"),
            styles: [__webpack_require__(/*! ./parent-costs.component.scss */ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/parent-costs/parent-costs.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_9__["FormConfigurationProviderService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_8__["AgGridService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_10__["TradingService"]])
    ], ParentCostsComponent);
    return ParentCostsComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/costs-to-adjust.component.html":
/*!**************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/costs-to-adjust.component.html ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<form [formGroup]=\"transferCostsToSplitsForm\">\r\n    <div class=\"main-container\">\r\n        <atlas-parent-costs #parentCostsComponent\r\n                            (listOfCostTypes)=\"onCostTypesList($event)\"></atlas-parent-costs>\r\n\r\n        <atlas-children-costs #childrenCostsComponent></atlas-children-costs>\r\n\r\n        <div fxLayout=\"row \"\r\n             fxLayoutAlign=\"space-between start\"\r\n             class=\"button-details\">\r\n            <div fxLayout=\"column \"\r\n                 fxLayoutAlign=\"start \">\r\n                <button mat-button\r\n                        (click)=\"onDiscardButtonClicked()\">\r\n                    DISCARD\r\n                </button>\r\n            </div>\r\n            <div fxLayout=\"column \"\r\n                 fxLayoutAlign=\"start \">\r\n                <div fxLayout=\"row \"\r\n                     fxLayoutAlign=\"end start \">\r\n                    <button mat-raised-button\r\n                            (click)=\"onSaveButtonClicked()\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</form>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/costs-to-adjust.component.scss":
/*!**************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/costs-to-adjust.component.scss ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/costs-to-adjust.component.ts":
/*!************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/costs-to-adjust.component.ts ***!
  \************************************************************************************************************************/
/*! exports provided: CostsToAdjustComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CostsToAdjustComponent", function() { return CostsToAdjustComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _components_children_costs_children_costs_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/children-costs/children-costs.component */ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/children-costs/children-costs.component.ts");
/* harmony import */ var _components_parent_costs_parent_costs_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/parent-costs/parent-costs.component */ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/parent-costs/parent-costs.component.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









var CostsToAdjustComponent = /** @class */ (function (_super) {
    __extends(CostsToAdjustComponent, _super);
    function CostsToAdjustComponent(router, companyManager, route, formBuilder, formConfigurationProvider, tradingService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.router = router;
        _this.companyManager = companyManager;
        _this.route = route;
        _this.formBuilder = formBuilder;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.tradingService = tradingService;
        _this.formComponents = [];
        return _this;
    }
    CostsToAdjustComponent.prototype.ngOnInit = function () {
        this.sectionId = this.route.snapshot.params.sectionId;
        this.transferCostsToSplitsForm = this.formBuilder.group({
            childrenCostsComponent: this.childrenCostsComponent.getFormGroup(),
        });
        this.formComponents.push(this.childrenCostsComponent);
    };
    CostsToAdjustComponent.prototype.onCostTypesList = function ($event) {
        this.childrenCostsComponent.setCostsAsColumnsToChildGrid($event.costTypes);
    };
    CostsToAdjustComponent.prototype.onDiscardButtonClicked = function () {
        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades/display/' +
                encodeURIComponent(String(this.sectionId))]);
    };
    CostsToAdjustComponent.prototype.onSaveButtonClicked = function () {
        this.childrenCostsComponent.setParentData(this.parentCostsComponent.getGridData());
        this.childrenCostsComponent.addUpateCosts();
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('parentCostsComponent'),
        __metadata("design:type", _components_parent_costs_parent_costs_component__WEBPACK_IMPORTED_MODULE_8__["ParentCostsComponent"])
    ], CostsToAdjustComponent.prototype, "parentCostsComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('childrenCostsComponent'),
        __metadata("design:type", _components_children_costs_children_costs_component__WEBPACK_IMPORTED_MODULE_7__["ChildrenCostsComponent"])
    ], CostsToAdjustComponent.prototype, "childrenCostsComponent", void 0);
    CostsToAdjustComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-costs-to-adjust',
            template: __webpack_require__(/*! ./costs-to-adjust.component.html */ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/costs-to-adjust.component.html"),
            styles: [__webpack_require__(/*! ./costs-to-adjust.component.scss */ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/costs-to-adjust.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_3__["CompanyManagerService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_5__["FormConfigurationProviderService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_6__["TradingService"]])
    ], CostsToAdjustComponent);
    return CostsToAdjustComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/physical-contract-capture-form-costs-tab.component.html":
/*!***********************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/physical-contract-capture-form-costs-tab.component.html ***!
  \***********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"physical-section-tab main-container\">\r\n    <div fxLayout=\"row\">\r\n        <div fxLayout=\"row\"\r\n             fxFlex=\"50%\">\r\n            <button mat-raised-button\r\n                    [disabled]=\"!isTradeEdit\"\r\n                    (click)=\"onUseCostMatrixClicked()\">\r\n                Use Cost matrix\r\n            </button>\r\n            <mat-form-field class=\"mat-read-only-field\">\r\n                <input matInput\r\n                       [formControl]=\"useCostMatrixCtrl\"\r\n                       placeholder=\"Use a cost matrix\"\r\n                       autocomplete=\"off\"\r\n                       readonly>\r\n            </mat-form-field>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayout.md=\"column\"\r\n             fxLayoutAlign=\"end\"\r\n             fxFlex=\"50%\">\r\n            <div fxLayout=\"row \"\r\n                 fxLayoutAlign=\"start end \">\r\n                <div fxLayout=\"row \"\r\n                     fxLayoutAlign=\"end start \">\r\n                    <button mat-button\r\n                            [disabled]=\"!isTransferToCostsEnabled\"\r\n                            (click)=\"handleAction('transfer')\">\r\n                        Transfer to Splits\r\n                    </button>\r\n                </div>\r\n                <div fxLayout=\"row \"\r\n                     fxLayoutAlign=\"end end \">\r\n                    <button mat-button\r\n                            *ifAuthorized=\"'Trades.CostTab.EditingCostGrid', company:this.company, level:PermissionLevels.ReadWrite\"\r\n                            [disabled]=\"(!isTradeEdit || isCancelledTrade)\"\r\n                            (click)=\"handleAction('add')\">\r\n                        Add Costs\r\n                    </button>\r\n                </div>\r\n\r\n                <atlas-ag-grid-user-preferences *ngIf=\"costGridOptions && costGridOptions.columnDefs\"\r\n                                                [gridOptions]=\"costGridOptions\"\r\n                                                [company]=\"company\"\r\n                                                [gridId]=\"componentId\"\r\n                                                [showExport]=\"true\"\r\n                                                [sharingEnabled]=\"hasGridSharing\"\r\n                                                #userPreferences>\r\n                </atlas-ag-grid-user-preferences>\r\n                <atlas-grid-enlargement *ngIf=\"costGridOptions && costGridOptions.columnDefs\"\r\n                                        [gridOptions]=\"costGridOptions\"\r\n                                        [userPreferencesParameters]=\"gridPreferences\"\r\n                                        [additionnalActions]=\"gridZoomAdditionalActions\"\r\n                                        (cellSelected)=\"onCellClicked($event)\"\r\n                                        (cellValueChanged)=\"onCellValueChanged($event)\"\r\n                                        (additionalActionTriggered)=\"handleAction($event)\"\r\n                                        #gridZoom>\r\n                </atlas-grid-enlargement>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n    <mat-card>\r\n        <mat-card-content>\r\n            <div class=\"ag-theme-material pointer-cursor\"\r\n                 style=\"width: 100%; height: 100%\">\r\n                <ag-grid-angular\r\n                                 style=\" height: 100%;\"\r\n                                 class=\"ag-theme-material\"\r\n                                 [rowData]=\"costsGridRows\"\r\n                                 [columnDefs]=\"costsGridCols\"\r\n                                 [gridOptions]=\"costGridOptions\"\r\n                                 [enableColResize]=\"true\"\r\n                                 [pagination]=\"true\"\r\n                                 [paginationPageSize]=\"10\"\r\n                                 [enableSorting]=\"true\"\r\n                                 [rowHeight]=\"atlasAgGridParam.rowHeight\"\r\n                                 [singleClickEdit]=true\r\n                                 [frameworkComponents]=\"gridComponents\"\r\n                                 (gridReady)=\"onGridReady($event)\"\r\n                                 (cellClicked)=\"onCellClicked($event)\"\r\n                                 (cellValueChanged)=\"onCellValueChanged($event)\"\r\n                                 domLayout=autoHeight\r\n                                 enableFilter>\r\n                </ag-grid-angular>\r\n            </div>\r\n        </mat-card-content>\r\n    </mat-card>\r\n</div>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/physical-contract-capture-form-costs-tab.component.scss":
/*!***********************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/physical-contract-capture-form-costs-tab.component.scss ***!
  \***********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".physical-section-tab {\n  padding-top: 16px; }\n\n.ag-theme-material {\n  font: 400 14px \"Roboto Regular\", sans-serif; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/costs-tab/physical-contract-capture-form-costs-tab.component.ts":
/*!*********************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/costs-tab/physical-contract-capture-form-costs-tab.component.ts ***!
  \*********************************************************************************************************************************/
/*! exports provided: PhysicalContractCaptureFormCostsTabComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PhysicalContractCaptureFormCostsTabComponent", function() { return PhysicalContractCaptureFormCostsTabComponent; });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _execution_services_execution_cash_common_methods__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../execution/services/execution-cash-common-methods */ "./Client/app/execution/services/execution-cash-common-methods.ts");
/* harmony import */ var _shared_components_ag_contextual_menu_ag_contextual_menu_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component */ "./Client/app/shared/components/ag-contextual-menu/ag-contextual-menu.component.ts");
/* harmony import */ var _shared_components_ag_grid_checkbox_ag_grid_checkbox_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component */ "./Client/app/shared/components/ag-grid-checkbox/ag-grid-checkbox.component.ts");
/* harmony import */ var _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component */ "./Client/app/shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component.ts");
/* harmony import */ var _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component */ "./Client/app/shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_components_cell_editor_numeric_cell_editor_numeric_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component */ "./Client/app/shared/components/cell-editor-numeric/cell-editor-numeric.component.ts");
/* harmony import */ var _shared_components_cell_editor_select_cell_editor_select_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../shared/components/cell-editor-select/cell-editor-select.component */ "./Client/app/shared/components/cell-editor-select/cell-editor-select.component.ts");
/* harmony import */ var _shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../shared/components/confirmation-dialog/confirmation-dialog.component */ "./Client/app/shared/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony import */ var _shared_components_grid_enlargement_grid_enlargement_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../shared/components/grid-enlargement/grid-enlargement.component */ "./Client/app/shared/components/grid-enlargement/grid-enlargement.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_cost_entity__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../../shared/entities/cost.entity */ "./Client/app/shared/entities/cost.entity.ts");
/* harmony import */ var _shared_entities_tag_entity__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../../shared/entities/tag.entity */ "./Client/app/shared/entities/tag.entity.ts");
/* harmony import */ var _shared_entities_user_grid_preferences_parameters_entity__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../../../shared/entities/user-grid-preferences-parameters.entity */ "./Client/app/shared/entities/user-grid-preferences-parameters.entity.ts");
/* harmony import */ var _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../../../shared/enums/contract-status.enum */ "./Client/app/shared/enums/contract-status.enum.ts");
/* harmony import */ var _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../../../shared/enums/cost-direction.enum */ "./Client/app/shared/enums/cost-direction.enum.ts");
/* harmony import */ var _shared_enums_gaps_enum__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../../../shared/enums/gaps.enum */ "./Client/app/shared/enums/gaps.enum.ts");
/* harmony import */ var _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../../../shared/enums/permission-level.enum */ "./Client/app/shared/enums/permission-level.enum.ts");
/* harmony import */ var _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../../../shared/enums/rate-type.enum */ "./Client/app/shared/enums/rate-type.enum.ts");
/* harmony import */ var _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../../../../shared/models/section-complete-display-view */ "./Client/app/shared/models/section-complete-display-view.ts");
/* harmony import */ var _shared_numberMask__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../../../../shared/numberMask */ "./Client/app/shared/numberMask.ts");
/* harmony import */ var _shared_pipes_format_date_pipe_pipe__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../../../../shared/pipes/format-date-pipe.pipe */ "./Client/app/shared/pipes/format-date-pipe.pipe.ts");
/* harmony import */ var _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../../../../shared/services/ag-grid.service */ "./Client/app/shared/services/ag-grid.service.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_grid_configuration_provider_service__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../../../../shared/services/grid-configuration-provider.service */ "./Client/app/shared/services/grid-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../../../../shared/services/http-services/execution.service */ "./Client/app/shared/services/http-services/execution.service.ts");
/* harmony import */ var _shared_services_http_services_feature_flag_service__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../../../../shared/services/http-services/feature-flag.service */ "./Client/app/shared/services/http-services/feature-flag.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _add_cost_confirmation_dialog_add_cost_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./add-cost-confirmation-dialog/add-cost-confirmation-dialog.component */ "./Client/app/trading/components/contract-physical-capture/costs-tab/add-cost-confirmation-dialog/add-cost-confirmation-dialog.component.ts");
/* harmony import */ var _cost_invoice_marking_dialog_cost_invoice_marking_dialog_component__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./cost-invoice-marking-dialog/cost-invoice-marking-dialog.component */ "./Client/app/trading/components/contract-physical-capture/costs-tab/cost-invoice-marking-dialog/cost-invoice-marking-dialog.component.ts");
/* harmony import */ var _cost_matrix_dialog_cost_matrix_dialog_component__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./cost-matrix-dialog/cost-matrix-dialog.component */ "./Client/app/trading/components/contract-physical-capture/costs-tab/cost-matrix-dialog/cost-matrix-dialog.component.ts");
/* harmony import */ var _costs_ag_grid_row__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./costs-ag-grid-row */ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-ag-grid-row.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











































var PhysicalContractCaptureFormCostsTabComponent = /** @class */ (function (_super) {
    __extends(PhysicalContractCaptureFormCostsTabComponent, _super);
    function PhysicalContractCaptureFormCostsTabComponent(masterdataService, formConfigurationProvider, formBuilder, companyManager, dialog, snackbarService, tradingService, executionService, authorizationService, formatDate, route, router, securityService, gridConfigurationProvider, gridService, featureFlagService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.masterdataService = masterdataService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.formBuilder = formBuilder;
        _this.companyManager = companyManager;
        _this.dialog = dialog;
        _this.snackbarService = snackbarService;
        _this.tradingService = tradingService;
        _this.executionService = executionService;
        _this.authorizationService = authorizationService;
        _this.formatDate = formatDate;
        _this.route = route;
        _this.router = router;
        _this.securityService = securityService;
        _this.gridConfigurationProvider = gridConfigurationProvider;
        _this.gridService = gridService;
        _this.featureFlagService = featureFlagService;
        _this.useCostMatrixCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_18__["AtlasFormControl"]('useCostMatrix');
        _this.noOfZeroCostRow = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        _this.costInvoiced = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        _this.costsMenuActions = {
            deleteCost: 'delete',
            addCost: 'add',
            transferToSplits: 'transfer',
        };
        _this.model = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_27__["SectionCompleteDisplayView"]();
        _this.costsGridRows = [];
        _this.costGridOptions = {};
        _this.rateTypes = [
            {
                code: _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_26__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_26__["RateTypes"].Rate],
                description: '',
            },
            {
                code: _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_26__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_26__["RateTypes"].Amount],
                description: '',
            },
            {
                code: _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_26__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_26__["RateTypes"].Percent],
                description: '',
            },
        ];
        _this.filteredLines = [];
        _this.isSummaryView = false;
        _this.importedCostMatrices = '';
        _this.isTradeEdit = true;
        _this.isZeroRowExist = false;
        _this.isTransferToCostsEnabled = true;
        _this.isCancelledTrade = false;
        _this.formatType = 'en-US';
        _this.editInPNLPrivilege = {
            profileId: null,
            privilegeName: 'COSTSINP&L',
            permission: _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_25__["PermissionLevels"].ReadWrite,
            privilegeParentLevelOne: 'Trades',
            privilegeParentLevelTwo: 'CostTab',
        };
        _this.editNoActionPrivilege = {
            profileId: null,
            privilegeName: 'COSTSNOACT',
            permission: _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_25__["PermissionLevels"].ReadWrite,
            privilegeParentLevelOne: 'Trades',
            privilegeParentLevelTwo: 'CostTab',
        };
        _this.deletePrivilege = {
            profileId: null,
            privilegeName: 'COSTSDEL',
            permission: _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_25__["PermissionLevels"].ReadWrite,
            privilegeParentLevelOne: 'Trades',
            privilegeParentLevelTwo: 'CostTab',
        };
        _this.editEstimatedColumnsPrivilege = {
            profileId: null,
            privilegeName: 'COSTSORIGEST',
            permission: _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_25__["PermissionLevels"].ReadWrite,
            privilegeParentLevelOne: 'Trades',
            privilegeParentLevelTwo: 'CostTab',
        };
        _this.editingCostGrid = {
            profileId: null,
            privilegeName: 'EditingCostGrid',
            permission: _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_25__["PermissionLevels"].ReadWrite,
            privilegeParentLevelOne: 'Trades',
            privilegeParentLevelTwo: 'CostTab',
        };
        _this.editPercentageInvoicedPrivilege = {
            profileId: null,
            privilegeName: 'EditPercentageInvoiced',
            permission: _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_25__["PermissionLevels"].ReadWrite,
            privilegeParentLevelOne: 'Trades',
            privilegeParentLevelTwo: 'CostTab',
        };
        _this.costDirections = [
            {
                costDirectionId: _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_23__["CostDirections"].Payable,
                costDirection: 'Pay',
            },
            {
                costDirectionId: _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_23__["CostDirections"].Receivable,
                costDirection: 'Receive',
            },
        ];
        _this.gridComponents = {
            atlasSelect: _shared_components_cell_editor_select_cell_editor_select_component__WEBPACK_IMPORTED_MODULE_15__["CellEditorSelectComponent"],
            atlasNumeric: _shared_components_cell_editor_numeric_cell_editor_numeric_component__WEBPACK_IMPORTED_MODULE_14__["CellEditorNumericComponent"],
            atlasCheckbox: _shared_components_ag_grid_checkbox_ag_grid_checkbox_component__WEBPACK_IMPORTED_MODULE_10__["AgGridCheckboxComponent"],
        };
        _this.gridContext = {
            isContractApprovedOnce: false,
            contractStatus: '',
            gridEditable: true,
            editPrivileges: true,
            deletePrivileges: true,
            inPNLPrivileges: true,
            noACTPrivileges: true,
            percentageInvoiced: true,
        };
        _this.gaps = _shared_enums_gaps_enum__WEBPACK_IMPORTED_MODULE_24__["Gaps"];
        _this.isTradeImage = false;
        _this.isImageCostChecked = true;
        _this.isHideCost = true;
        _this.editingCostGridPrivilege = false;
        _this.isImage = false;
        _this.componentId = 'tradeCostList';
        _this.zeroQuantity = false;
        _this.PermissionLevels = _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_25__["PermissionLevels"];
        _this.gridPreferences = new _shared_entities_user_grid_preferences_parameters_entity__WEBPACK_IMPORTED_MODULE_21__["UserGridPreferencesParameters"]();
        _this.gridZoomAdditionalActions = [];
        _this.masterdata = _this.route.snapshot.data.masterdata;
        _this.getTagFields();
        _this.userActiveDirectoryName = _this.authorizationService.getCurrentUser().samAccountName;
        return _this;
    }
    ;
    PhysicalContractCaptureFormCostsTabComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.sectionId = this.route.snapshot.params.sectionId;
        this.atlasAgGridParam = this.gridService.getAgGridParam();
        this.company = this.companyManager.getCurrentCompanyId();
        var companyDetails = this.companyManager.getCurrentCompany();
        this.priceCode = companyDetails.priceCode;
        this.weightCode = companyDetails.weightCode;
        this.checkGridEditPrivilege();
        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;
        if (this.route.snapshot.data['isImage'] === true) {
            this.isImage = true;
            this.isHideCost = JSON.parse(this.route.snapshot.queryParams.imageEstimates);
        }
        this.init();
        this.bindConfiguration();
        this.featureFlagService.getFlagInfo(_shared_enums_gaps_enum__WEBPACK_IMPORTED_MODULE_24__["Gaps"].gap003).subscribe(function (flagAuth) {
            _this.flagAuth = flagAuth;
            _this.isRecommendedCostMatrixGapActive();
            _this.initCostsGridColumns();
        }, function (error) {
            _this.hasRecommendCMGap = false;
        });
        this.securityService
            .isSecurityReady()
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["concatMap"])(function () {
            return _this.gridConfigurationProvider.getConfiguration(_this.company, _this.componentId);
        }))
            .subscribe();
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.onGridReady = function (params) {
        this.costGridOptions = params;
        if (this.costsGridCols) {
            this.costGridOptions.columnDefs = this.costsGridCols;
        }
        this.gridApi = params.api;
        this.gridColumnApi = params.columnApi;
        this.gridService.sizeColumns(this.costGridOptions);
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.init = function () {
        this.costsGridContextualMenuActions = [
            {
                icon: 'delete',
                text: 'Delete',
                action: this.costsMenuActions.deleteCost,
                disabled: this.isDeleteDisabledWithPrivileges.bind(this),
            },
        ];
        this.importedCostMatrices = '';
        this.selectCostmatrix = '';
        this.gridPreferences = {
            company: this.company,
            gridId: this.componentId,
            gridOptions: this.costGridOptions,
            sharingEnabled: false,
            showExport: true,
        };
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.handleAction = function (action, cost) {
        var _this = this;
        if (cost === void 0) { cost = null; }
        switch (action) {
            case this.costsMenuActions.deleteCost:
                var confirmDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_16__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Cost Deletion',
                        text: 'Deleting a cost is permanent. Do you wish to proceed?',
                        okButton: 'Delete anyway',
                        cancelButton: 'Cancel',
                    },
                });
                var confirmationSubscription = confirmDialog.afterClosed().subscribe(function (answer) {
                    if (answer) {
                        if (cost.costId) {
                            var deleteConfirmationSubscription = _this.tradingService.deleteCost(cost.costId, cost.sectionId, _this.dataVersionId)
                                .subscribe(function () {
                                _this.snackbarService.informationSnackBar('Cost Deleted');
                                _this.getCosts(cost.sectionId);
                            }, function (err) {
                                _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_16__["ConfirmationDialogComponent"], {
                                    data: {
                                        title: 'DELETION',
                                        text: 'Cannot delete cost of this split',
                                        okButton: 'Got it',
                                    },
                                });
                            });
                            _this.subscriptions.push(deleteConfirmationSubscription);
                        }
                        else {
                            _this.gridApi.updateRowData({ remove: [cost] });
                        }
                    }
                });
                this.subscriptions.push(confirmationSubscription);
                break;
            case this.costsMenuActions.addCost:
                var newItem = this.createNewRowData();
                this.costsGridRows.push(newItem);
                this.gridApi.setRowData(this.costsGridRows);
                this.gridEnlargementComponent.refreshGrid();
                break;
            case this.costsMenuActions.transferToSplits:
                this.navigateToCostTransferPage();
                break;
            default:
                throw new Error('Unknown action: ' + action);
        }
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.isRecommendedCostMatrixGapActive = function () {
        if (this.flagAuth) {
            this.hasRecommendCMGap = this.flagAuth.active;
        }
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.getCosts = function (sectionId) {
        var _this = this;
        var getCostsSubscription = this.tradingService.getAllCosts(sectionId, this.dataVersionId).subscribe(function (data) {
            _this.costsGridRows = [];
            data.value.forEach(function (element) {
                var displayCostRow = new _costs_ag_grid_row__WEBPACK_IMPORTED_MODULE_42__["CostListDisplayView"](element, _this.masterdata, _this.costDirections);
                _this.costsGridRows.push(displayCostRow);
                if (!_this.importedCostMatrices.includes(element.costMatrixName)) {
                    _this.importedCostMatrices = _this.importedCostMatrices + element.costMatrixName + ' , ';
                }
            });
            _this.gridApi.setRowData(_this.costsGridRows);
            _this.useCostMatrixCtrl.setValue(_this.importedCostMatrices.trim().slice(0, -1));
        });
        this.subscriptions.push(getCostsSubscription);
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.populateEntity = function (entity) {
        var physicalFixedPricedContract = entity;
        physicalFixedPricedContract.costs = this.getGridData();
        return physicalFixedPricedContract;
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.validate = function () {
        var isValid = true;
        this.gridApi.forEachNode(function (rowData) {
            if (rowData.data.isDirty) {
                if (!(rowData.data.costTypeCode && rowData.data.costDirection && rowData.data.currencyCode && rowData.data.rateTypeCode)) {
                    isValid = false;
                }
            }
        });
        return isValid;
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.initGridZoom = function () {
        // Transfer to Splits Button
        this.gridZoomAdditionalActions.push({
            action: this.costsMenuActions.transferToSplits,
            text: 'Transfer to Splits',
            disabled: !this.isTransferToCostsEnabled,
        });
        // -- Add Cost Button
        var addCostPrivilegeLevel = this.authorizationService.getPermissionLevel(this.company, this.editingCostGrid.privilegeName, this.editingCostGrid.privilegeParentLevelOne, this.editingCostGrid.privilegeParentLevelTwo);
        var hasAddCostPrivilege = addCostPrivilegeLevel >= _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_25__["PermissionLevels"].ReadWrite;
        if (hasAddCostPrivilege) {
            this.gridZoomAdditionalActions.push({
                action: this.costsMenuActions.addCost,
                text: 'Add Cost',
                disabled: !this.isTradeEdit,
            });
        }
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.initForm = function (entity, isEdit) {
        var _this = this;
        var tradeRecord = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_27__["SectionCompleteDisplayView"](entity);
        this.model = tradeRecord;
        this.isCancelledTrade = this.model.isCancelled;
        this.sectionId = this.model.sectionId;
        this.isTradeEdit = isEdit;
        var isContractApprovedOnce = false;
        isContractApprovedOnce = tradeRecord.firstApprovalDateTime ? true : false;
        var contractStatus;
        contractStatus = tradeRecord.status;
        this.isTransferToCostsEnabled =
            entity.childSections && entity.childSections.length > 0 && (entity.costs && entity.costs.length > 0) ? true : false;
        if (this.isHideCost) {
            var costsToAdd_1 = [];
            this.model.costs.forEach(function (element) {
                if (_this.isImage) {
                    // estimates shouldn't get copied while imaging a trade
                    element.originalEstRate = null;
                    element.originalEstCurrencyCode = null;
                    element.originalEstPriceUnitId = null;
                    element.originalEstRateTypeId = null;
                    element.originalEstimatedPMTValue = null;
                }
                var displayCostRow = new _costs_ag_grid_row__WEBPACK_IMPORTED_MODULE_42__["CostListDisplayView"](element, _this.masterdata, _this.costDirections);
                costsToAdd_1.push(displayCostRow);
                if (element.costMatrixName && !_this.importedCostMatrices.includes(element.costMatrixName)) {
                    _this.importedCostMatrices = _this.importedCostMatrices + element.costMatrixName + ' , ';
                }
                if (displayCostRow.rate === 0) {
                    _this.isZeroRowExist = true;
                }
            });
            this.costsGridRows = costsToAdd_1;
            this.useCostMatrixCtrl.setValue(this.importedCostMatrices.trim().slice(0, -1));
        }
        this.gridContext.isContractApprovedOnce = isContractApprovedOnce;
        this.gridContext.contractStatus = contractStatus;
        this.gridContext.gridEditable = isEdit && this.editingCostGridPrivilege ? true : false;
        this.gridContext.editPrivileges = this.checkIfUserHasRequiredPrivileges(this.editEstimatedColumnsPrivilege);
        this.gridContext.deletePrivileges = this.checkIfUserHasRequiredPrivileges(this.deletePrivilege);
        this.gridContext.inPNLPrivileges = this.checkIfUserHasRequiredPrivileges(this.editInPNLPrivilege);
        this.gridContext.percentageInvoiced = this.checkIfUserHasRequiredPrivileges(this.editPercentageInvoicedPrivilege);
        this.gridContext.noACTPrivileges = this.checkIfUserHasRequiredPrivileges(this.editNoActionPrivilege);
        if (this.isImage) {
            this.costMatrixId = this.route.snapshot.queryParams.costMatrixId;
            if (this.costMatrixId) {
                this.imageCostMatrixTrade(this.costMatrixId);
            }
        }
        this.noOfZeroCostRow.emit({
            isZeroRowExist: this.isZeroRowExist,
        });
        this.costInvoiced.emit(this.costsGridRows);
        // --
        this.initGridZoom();
        return entity;
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.checkIfUserHasRequiredPrivileges = function (userCompanyPrivilege) {
        if (this.authorizationService.isUserAllowedForCompany(this.company)) {
            var userPermissionLevel = this.authorizationService.getPermissionLevel(this.company, userCompanyPrivilege.privilegeName, userCompanyPrivilege.privilegeParentLevelOne, userCompanyPrivilege.privilegeParentLevelTwo);
            if (userPermissionLevel >= userCompanyPrivilege.permission) {
                return true;
            }
        }
        return false;
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.isGridEditable = function (params) {
        // cannot edit the data of a cost if it has been fully invoiced
        this.gridContext.editPrivileges = this.checkIfUserHasRequiredPrivileges(this.editingCostGrid);
        this.gridContext.gridEditable = this.gridContext.editPrivileges ? true : false;
        if (this.isCancelledTrade && params && params.colDef.field === 'costTypeCode') {
            var paramCostType = this.masterdata.costTypes.find(function (c) { return c.costTypeCode === params.data.costTypeCode; });
            if ((paramCostType !== null && !paramCostType.isACommission) ||
                (paramCostType.isACommission)) {
                return false;
            }
        }
        return this.isColumnEditable(params);
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.isColumnEditable = function (params) {
        this.gridContext.gridEditable = this.isTradeEdit;
        return (this.gridContext.gridEditable &&
            (params.data.invoicePercent === undefined || params.data.invoicePercent < 100));
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.isColumnEditableCheckingCostTypeAndCancelledTrade = function (params) {
        if (this.isCancelledTrade) {
            var paramCostType = this.masterdata.costTypes.find(function (c) { return c.costTypeCode === params.data.costTypeCode; });
            if (!paramCostType.isACommission) {
                return false;
            }
        }
        return true;
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.isGridColumnEditableWithPrivileges = function (params) {
        return (this.isColumnEditable(params) &&
            this.isColumnEditableCheckingCostTypeAndCancelledTrade(params) &&
            this.gridContext.editPrivileges);
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.isGridCheckboxEditableWithPrivileges = function (params) {
        return !this.isGridColumnEditableWithPrivileges(params);
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.isInPNLEditableWithPrivileges = function (params) {
        return !(this.isColumnEditable(params) && this.gridContext.inPNLPrivileges
            && this.isColumnEditableCheckingCostTypeAndCancelledTrade(params));
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.noACTEditableWithPrivileges = function (params) {
        return !(this.isColumnEditable(params) &&
            this.gridContext.noACTPrivileges);
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.isDeleteDisabledWithPrivileges = function (params) {
        var costRow = params.data;
        if (!costRow.costId) {
            return false;
        }
        var deleteDisable = true;
        if (params.context.actionContext.gridEditable) {
            if (!params.context.isContractApprovedOnce) {
                deleteDisable = false;
            }
            else if (params.context.isContractApprovedOnce &&
                params.context.actionContext.deletePrivileges &&
                params.context.contractStatus === _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"][_shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"].Approved]) {
                deleteDisable = false;
            }
        }
        return deleteDisable && this.isColumnEditable(params) && !this.isColumnEditableCheckingCostTypeAndCancelledTrade(params);
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.getGridData = function () {
        var _this = this;
        var costs = new Array();
        var masterdata = this.masterdata;
        var costDirections = this.costDirections;
        this.gridApi.forEachNode(function (rowData) {
            var costData = rowData.data;
            if (costData.isDirty || (_this.isTradeImage && _this.isImageCostChecked) || _this.zeroQuantity) {
                costs.push(costData.getCost(masterdata, costDirections));
            }
        });
        return costs;
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.onCellValueChanged = function (params) {
        if (params.oldValue !== params.newValue) {
            params.node.data.isDirty = true;
            params.node.setDataValue('rowStatus', params.node.data.costId ? 'U' : 'N');
            this.gridColumnApi.autoSizeAllColumns();
        }
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.showCostInvoiceMarking = function (costId) {
        var _this = this;
        var openInvoiceMarkingCostDialog = this.dialog.open(_cost_invoice_marking_dialog_cost_invoice_marking_dialog_component__WEBPACK_IMPORTED_MODULE_40__["CostInvoiceMarkingDialogComponent"], {
            data: {
                masterdata: this.masterdata,
                costId: costId,
                model: this.model,
                company: this.company,
                dataVersionId: this.dataVersionId,
            },
            width: '90%',
            height: '80%',
        });
        openInvoiceMarkingCostDialog.afterClosed().subscribe(function (result) {
            if (result) {
                _this.gridApi.stopEditing();
            }
        });
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.onAddRowButtonClicked = function () {
        if (this.model.originalQuantity === 0 || this.contractAmountOnSelect === 0) {
            this.snackbarService.throwErrorSnackBar('You Cannot Add costs to a contract with Zero Quantity');
        }
        else {
            var newItem = this.createNewRowData();
            this.costsGridRows.push(newItem);
            this.gridApi.setRowData(this.costsGridRows);
            this.gridColumnApi.autoSizeAllColumns();
        }
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.createNewRowData = function () {
        var newCostRow = new _costs_ag_grid_row__WEBPACK_IMPORTED_MODULE_42__["CostListDisplayView"]();
        newCostRow.isDirty = true;
        newCostRow.currencyCode = 'USD';
        newCostRow.rowStatus = 'N';
        return newCostRow;
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.initCostsGridColumns = function () {
        var _this = this;
        this.costGridOptions.context = this.gridContext;
        this.gridPreferences.gridOptions = this.costGridOptions;
        this.gridPreferences = new _shared_entities_user_grid_preferences_parameters_entity__WEBPACK_IMPORTED_MODULE_21__["UserGridPreferencesParameters"](this.gridPreferences);
        if (this.flagAuth.active === true) {
            this.costsGridCols = [
                {
                    headerName: '',
                    colId: 'rowStatus',
                    field: 'rowStatus',
                    width: 70,
                    minWidth: 70,
                    maxWidth: 70,
                    cellRenderer: function (params) {
                        if (params.value) {
                            return '<mat-chip-list><mat-chip class="status-flag-chip">' + params.value
                                + '</mat-chip></mat-chip-list>';
                        }
                        return '';
                    },
                },
                {
                    headerName: 'Best Match',
                    colId: 'bestMatch',
                    field: 'bestMatch',
                    cellRenderer: function (params) {
                        if (params.value) {
                            return '<mat-chip-list><mat-chip class="status-flag-chip">' + params.value +
                                '</mat-chip></mat-chip-list>';
                        }
                        return '';
                    },
                },
                {
                    colId: 'costId',
                    field: 'costId',
                    hide: true,
                },
                {
                    headerName: 'Cost Type*',
                    field: 'costTypeCode',
                    colId: 'costTypeCode',
                    cellRendererFramework: _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_12__["AgGridContextualSearchComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.isGridEditable(params),
                            },
                            gridId: 'costTypesGrid',
                            options: _this.masterdata.costTypes
                                .filter(function (cost) { return cost.isATradeCost === true; })
                                .sort(function (a, b) { return a.costTypeCode.localeCompare(b.costTypeCode); }),
                            valueProperty: 'costTypeCode',
                            displayProperty: 'costTypeCode',
                            lightBoxTitle: 'Results for Cost Type',
                            isRequired: true,
                            showContextualSearchIcon: _this.isGridEditable(params),
                        };
                    },
                    onCellValueChanged: function (params) {
                        if (_this.isTradeEdit) {
                            var filteredCostType = _this.masterdata.costTypes.find(function (e) { return e.costTypeCode === params.data.costTypeCode; });
                            if (filteredCostType) {
                                params.node.setDataValue('description', filteredCostType.name);
                                params.node.setDataValue('inPL', filteredCostType.inPNL);
                                params.node.setDataValue('noAction', filteredCostType.noAction);
                            }
                        }
                    },
                },
                {
                    headerName: 'Description',
                    field: 'description',
                    width: 250,
                },
                {
                    headerName: 'Supplier',
                    field: 'supplierCode',
                    cellRendererFramework: _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_12__["AgGridContextualSearchComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.isGridEditable(params),
                            },
                            gridId: 'counterpartiesGrid',
                            options: _this.masterdata.counterparties,
                            isRequired: false,
                            displayProperty: 'counterpartyCode',
                            valueProperty: 'counterpartyCode',
                            descriptionProperty: 'description',
                            codeProperty: 'counterpartyCode',
                            lightBoxTitle: 'Results for Counterparty',
                            showContextualSearchIcon: _this.isGridEditable(params),
                        };
                    },
                    onCellValueChanged: function (params) {
                        if ((params.data.supplierCode || params.data.supplierCode === '') && _this.masterdata.counterparties) {
                            var selectedClientAccount = _this.masterdata.counterparties.find(function (clientAccount) { return clientAccount.counterpartyCode === params.data.supplierCode; });
                            if (selectedClientAccount) {
                                params.node.data.isDirty = true;
                            }
                            else if (params.data.supplierCode === '') {
                                params.node.data.isDirty = true;
                            }
                        }
                    },
                    width: 120,
                },
                {
                    headerName: 'Pay/Rec*',
                    field: 'costDirection',
                    editable: this.isGridEditable.bind(this),
                    cellRenderer: this.requiredCell,
                    cellEditor: 'agRichSelectCellEditor',
                    cellEditorParams: {
                        values: this.costDirections.map(function (costDirection) { return costDirection.costDirection; }),
                        displayPropertyName: 'costDirection',
                        valuePropertyName: 'costDirection',
                        displayFormat: 'costDirection',
                    },
                    width: 120,
                },
                {
                    headerName: 'Currency*',
                    field: 'currencyCode',
                    colId: 'currencyCode',
                    cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_11__["AgGridAutocompleteComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.isGridEditable(params),
                            },
                            options: _this.masterdata.currencies,
                            valueProperty: 'currencyCode',
                            codeProperty: 'currencyCode',
                            displayProperty: 'description',
                            isRequired: true,
                        };
                    },
                    onCellValueChanged: function (params) {
                        if (params.data.currencyCode && _this.masterdata.currencies) {
                            var currencyCode = _this.masterdata.currencies.find(function (currency) { return currency.currencyCode === params.data.currencyCode; });
                            if (currencyCode) {
                                params.node.setDataValue('currencyCode', params.data.currencyCode);
                                params.node.data.isDirty = true;
                            }
                        }
                    },
                    width: 120,
                },
                {
                    headerName: 'Rate Type*',
                    field: 'rateTypeCode',
                    editable: this.isGridEditable.bind(this),
                    cellRenderer: this.requiredCell,
                    cellEditor: 'agRichSelectCellEditor',
                    cellEditorParams: {
                        values: this.rateTypes.map(function (rateType) { return rateType.code; }),
                        valuePropertyName: 'code',
                        displayFormat: 'code',
                        context: this.masterdata,
                    },
                    onCellValueChanged: this.onRateTypeChange.bind(this),
                    width: 120,
                },
                {
                    headerName: 'Price Code',
                    field: 'priceCode',
                    colId: 'priceCode',
                    editable: this.isPriceCodeEditable.bind(this),
                    cellEditor: 'agRichSelectCellEditor',
                    cellRenderer: this.priceCodeRequired.bind(this),
                    cellEditorParams: {
                        values: this.masterdata.priceUnits.map(function (priceUnit) { return priceUnit.priceCode; }),
                        displayPropertyName: 'description',
                        valuePropertyName: 'priceCode',
                        displayFormat: 'priceCode | description',
                        context: this.masterdata,
                    },
                    width: 120,
                },
                {
                    headerName: 'Rate/Amount',
                    field: 'rate',
                    editable: this.isGridEditable.bind(this),
                    cellEditor: 'atlasNumeric',
                    type: 'numberColumn',
                    onCellValueChanged: this.onRateAmountChanged.bind(this),
                    cellEditorParams: {
                        displayMask: Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_28__["CustomNumberMask"])(12, 10, false),
                        isRightAligned: false,
                    },
                    valueFormatter: this.amountFormatter.bind(this),
                    width: 120,
                },
                {
                    headerName: 'Orig. Est. ' + this.priceCode,
                    field: 'originalEstimatedPMTValue',
                    type: 'numberColumn',
                    valueFormatter: this.amountFormatter.bind(this),
                    editable: this.isGridColumnEditableWithPrivileges.bind(this),
                    width: 120,
                },
                {
                    headerName: 'in P&L',
                    field: 'inPL',
                    colId: 'inPL',
                    cellRenderer: 'atlasCheckbox',
                    cellRendererParams: {
                        disabled: this.isInPNLEditableWithPrivileges.bind(this),
                        params: this.gridContext,
                    },
                    width: 120,
                },
                {
                    headerName: 'No Act',
                    field: 'noAction',
                    colId: 'noAction',
                    cellRenderer: 'atlasCheckbox',
                    cellRendererParams: {
                        disabled: this.noACTEditableWithPrivileges.bind(this),
                        params: this.gridContext,
                    },
                    width: 120,
                },
                {
                    headerName: 'Narrative',
                    field: 'narrative',
                    editable: this.isGridEditable.bind(this),
                    cellEditor: 'agLargeTextCellEditor',
                    cellEditorParams: {
                        maxLength: 100,
                        rows: 3,
                        cols: 50,
                    },
                    width: 120,
                },
                {
                    headerName: 'Matrix Name',
                    field: 'costMatrixName',
                    width: 120,
                },
                {
                    headerName: 'Orig.Est.Rate Type',
                    field: 'originalEstRateTypeCode',
                    editable: this.isGridColumnEditableWithPrivileges.bind(this),
                    width: 120,
                },
                {
                    headerName: 'Orig.Est.Price Code',
                    field: 'originalEstPriceCode',
                    editable: this.isGridColumnEditableWithPrivileges.bind(this),
                    width: 120,
                },
                {
                    headerName: 'Orig.Est.Currency',
                    field: 'originalEstCurrencyCode',
                    editable: this.isGridColumnEditableWithPrivileges.bind(this),
                    width: 120,
                },
                {
                    headerName: 'Orig.Est.Rate/Amount',
                    field: 'originalEstRate',
                    editable: this.isGridColumnEditableWithPrivileges.bind(this),
                    type: 'numericColumn',
                    tooltip: this.showCellValue.bind(this),
                    cellEditorParams: {
                        displayMask: Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_28__["CustomNumberMask"])(12, 10, false),
                        isRightAligned: false,
                    },
                    valueFormatter: this.amountFormatter.bind(this),
                    width: 120,
                },
                {
                    headerName: '%Invoiced',
                    field: 'invoicePercent',
                    editable: this.isPercentageInvoiceEditable.bind(this),
                    tooltip: this.showInvoiceDetails.bind(this),
                    width: 120,
                    type: 'numericColumn',
                },
                {
                    headerName: '',
                    cellRendererFramework: _shared_components_ag_contextual_menu_ag_contextual_menu_component__WEBPACK_IMPORTED_MODULE_9__["AgContextualMenuComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                actionContext: _this.gridContext,
                            },
                            isDisabled: !_this.gridContext.gridEditable,
                            menuActions: _this.costsGridContextualMenuActions,
                        };
                    },
                    cellClass: 'ag-contextual-menu',
                    width: 80,
                    maxWidth: 80,
                },
            ];
        }
        else {
            this.costsGridCols = [
                {
                    headerName: '',
                    colId: 'rowStatus',
                    field: 'rowStatus',
                    width: 70,
                    minWidth: 70,
                    maxWidth: 70,
                    cellRenderer: function (params) {
                        if (params.value) {
                            return '<mat-chip-list><mat-chip class="status-flag-chip">' + params.value
                                + '</mat-chip></mat-chip-list>';
                        }
                        return '';
                    },
                },
                {
                    colId: 'costId',
                    field: 'costId',
                    hide: true,
                },
                {
                    headerName: 'Cost Type*',
                    field: 'costTypeCode',
                    colId: 'costTypeCode',
                    cellRendererFramework: _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_12__["AgGridContextualSearchComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.isGridEditable(params),
                            },
                            gridId: 'costTypesGrid',
                            options: _this.masterdata.costTypes
                                .filter(function (cost) { return cost.isATradeCost === true; })
                                .sort(function (a, b) { return a.costTypeCode.localeCompare(b.costTypeCode); }),
                            valueProperty: 'costTypeCode',
                            displayProperty: 'costTypeCode',
                            lightBoxTitle: 'Results for Cost Type',
                            isRequired: true,
                            showContextualSearchIcon: _this.isGridEditable(params),
                        };
                    },
                    onCellValueChanged: function (params) {
                        if (_this.isTradeEdit) {
                            var filteredCostType = _this.masterdata.costTypes
                                .find(function (e) { return e.costTypeCode === params.data.costTypeCode; });
                            if (filteredCostType) {
                                params.node.setDataValue('description', filteredCostType.name);
                                params.node.setDataValue('inPL', filteredCostType.inPNL);
                                params.node.setDataValue('noAction', filteredCostType.noAction);
                            }
                        }
                    },
                },
                {
                    headerName: 'Description',
                    field: 'description',
                    width: 250,
                },
                {
                    headerName: 'Supplier',
                    field: 'supplierCode',
                    cellRendererFramework: _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_12__["AgGridContextualSearchComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.isGridEditable(params),
                            },
                            gridId: 'counterpartiesGrid',
                            options: _this.masterdata.counterparties,
                            isRequired: false,
                            displayProperty: 'counterpartyCode',
                            valueProperty: 'counterpartyCode',
                            descriptionProperty: 'description',
                            codeProperty: 'counterpartyCode',
                            lightBoxTitle: 'Results for Counterparty',
                            showContextualSearchIcon: _this.isGridEditable(params),
                        };
                    },
                    onCellValueChanged: function (params) {
                        if ((params.data.supplierCode || params.data.supplierCode === '') && _this.masterdata.counterparties) {
                            var selectedClientAccount = _this.masterdata.counterparties.find(function (clientAccount) { return clientAccount.counterpartyCode === params.data.supplierCode; });
                            if (selectedClientAccount) {
                                params.node.data.isDirty = true;
                            }
                            else if (params.data.supplierCode === '') {
                                params.node.data.isDirty = true;
                            }
                        }
                    },
                    width: 120,
                },
                {
                    headerName: 'Pay/Rec*',
                    field: 'costDirection',
                    editable: this.isGridEditable.bind(this),
                    cellRenderer: this.requiredCell,
                    cellEditor: 'agRichSelectCellEditor',
                    cellEditorParams: {
                        values: this.costDirections.map(function (costDirection) { return costDirection.costDirection; }),
                        displayPropertyName: 'costDirection',
                        valuePropertyName: 'costDirection',
                        displayFormat: 'costDirection',
                    },
                    width: 120,
                },
                {
                    headerName: 'Currency*',
                    field: 'currencyCode',
                    colId: 'currencyCode',
                    cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_11__["AgGridAutocompleteComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.isGridEditable(params),
                            },
                            options: _this.masterdata.currencies,
                            valueProperty: 'currencyCode',
                            codeProperty: 'currencyCode',
                            displayProperty: 'description',
                            isRequired: true,
                        };
                    },
                    onCellValueChanged: function (params) {
                        if (params.data.currencyCode && _this.masterdata.currencies) {
                            var currencyCode = _this.masterdata.currencies.find(function (currency) { return currency.currencyCode === params.data.currencyCode; });
                            if (currencyCode) {
                                params.node.setDataValue('currencyCode', params.data.currencyCode);
                                params.node.data.isDirty = true;
                            }
                        }
                    },
                    width: 120,
                },
                {
                    headerName: 'Rate Type*',
                    field: 'rateTypeCode',
                    editable: this.isGridEditable.bind(this),
                    cellRenderer: this.requiredCell,
                    cellEditor: 'agRichSelectCellEditor',
                    cellEditorParams: {
                        values: this.rateTypes.map(function (rateType) { return rateType.code; }),
                        valuePropertyName: 'code',
                        displayFormat: 'code',
                        context: this.masterdata,
                    },
                    onCellValueChanged: this.onRateTypeChange.bind(this),
                    width: 120,
                },
                {
                    headerName: 'Price Code',
                    field: 'priceCode',
                    colId: 'priceCode',
                    editable: this.isPriceCodeEditable.bind(this),
                    cellEditor: 'agRichSelectCellEditor',
                    cellRenderer: this.priceCodeRequired.bind(this),
                    cellEditorParams: {
                        values: this.masterdata.priceUnits.map(function (priceUnit) { return priceUnit.priceCode; }),
                        displayPropertyName: 'description',
                        valuePropertyName: 'priceCode',
                        displayFormat: 'priceCode | description',
                        context: this.masterdata,
                    },
                    width: 120,
                },
                {
                    headerName: 'Rate/Amount',
                    field: 'rate',
                    editable: this.isGridEditable.bind(this),
                    cellEditor: 'atlasNumeric',
                    type: 'numberColumn',
                    onCellValueChanged: this.onRateAmountChanged.bind(this),
                    cellEditorParams: {
                        displayMask: Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_28__["CustomNumberMask"])(12, 10, false),
                        isRightAligned: false,
                    },
                    valueFormatter: this.amountFormatter.bind(this),
                    width: 120,
                },
                {
                    headerName: 'Orig. Est./' + this.weightCode,
                    field: 'originalEstimatedPMTValue',
                    type: 'numberColumn',
                    valueFormatter: this.amountFormatter.bind(this),
                    editable: this.isGridColumnEditableWithPrivileges.bind(this),
                    width: 120,
                },
                {
                    headerName: 'in P&L',
                    field: 'inPL',
                    colId: 'inPL',
                    cellRenderer: 'atlasCheckbox',
                    cellRendererParams: function (params) {
                        return {
                            disabled: _this.isInPNLEditableWithPrivileges(params),
                            params: _this.gridContext,
                        };
                    },
                    width: 120,
                },
                {
                    headerName: 'No Act',
                    field: 'noAction',
                    colId: 'noAction',
                    cellRenderer: 'atlasCheckbox',
                    cellRendererParams: function (params) {
                        return {
                            disabled: _this.noACTEditableWithPrivileges(params),
                            params: _this.gridContext,
                        };
                    },
                    width: 120,
                },
                {
                    headerName: 'Narrative',
                    field: 'narrative',
                    editable: this.isGridEditable.bind(this),
                    cellEditor: 'agLargeTextCellEditor',
                    cellEditorParams: {
                        maxLength: 100,
                        rows: 3,
                        cols: 50,
                    },
                    width: 120,
                },
                {
                    headerName: 'Matrix Name',
                    field: 'costMatrixName',
                    width: 120,
                },
                {
                    headerName: 'Orig.Est.Rate Type',
                    field: 'originalEstRateTypeCode',
                    editable: this.isGridColumnEditableWithPrivileges.bind(this),
                    width: 120,
                },
                {
                    headerName: 'Orig.Est.Price Code',
                    field: 'originalEstPriceCode',
                    editable: this.isGridColumnEditableWithPrivileges.bind(this),
                    width: 120,
                },
                {
                    headerName: 'Orig.Est.Currency',
                    field: 'originalEstCurrencyCode',
                    editable: this.isGridColumnEditableWithPrivileges.bind(this),
                    width: 120,
                },
                {
                    headerName: 'Orig.Est.Rate/Amount',
                    field: 'originalEstRate',
                    editable: this.isGridColumnEditableWithPrivileges.bind(this),
                    type: 'numericColumn',
                    tooltip: this.showCellValue.bind(this),
                    cellEditorParams: {
                        displayMask: Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_28__["CustomNumberMask"])(12, 10, false),
                        isRightAligned: false,
                    },
                    valueFormatter: this.amountFormatter.bind(this),
                    width: 120,
                },
                {
                    headerName: '%Invoiced',
                    field: 'invoicePercent',
                    editable: this.isPercentageInvoiceEditable.bind(this),
                    tooltip: this.showInvoiceDetails.bind(this),
                    width: 120,
                    type: 'numericColumn',
                },
                {
                    headerName: '',
                    cellRendererFramework: _shared_components_ag_contextual_menu_ag_contextual_menu_component__WEBPACK_IMPORTED_MODULE_9__["AgContextualMenuComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                actionContext: _this.gridContext,
                            },
                            isDisabled: !_this.gridContext.gridEditable,
                            menuActions: _this.costsGridContextualMenuActions,
                        };
                    },
                    cellClass: 'ag-contextual-menu',
                    width: 80,
                    maxWidth: 80,
                },
            ];
        }
        if (this.costGridOptions) {
            this.costGridOptions.columnDefs = this.costsGridCols;
        }
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.onClientAccountSelected = function (params) {
        if (params.newValue && params.oldValue !== params.newValue && params.newValue) {
            var selectedClientAccount = this.masterdata.counterparties.find(function (clientAccount) { return clientAccount.counterpartyCode === params.newValue; });
            if (!selectedClientAccount) {
                this.snackbarService.throwErrorSnackBar('Not allowed : Client Account does not exist');
            }
        }
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.onCellClicked = function (params) {
        if (!this.isTradeEdit) {
            var invoiceCell = 'invoicePercent';
            var costRow = params.data;
            if (params.colDef.field === invoiceCell) {
                if (params.data.costId) {
                    this.showCostInvoiceMarking(costRow.costId);
                }
                else {
                    this.gridApi.stopEditing();
                }
            }
        }
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.amountFormatter = function (param) {
        if (param && param.value) {
            var commonMethods = new _execution_services_execution_cash_common_methods__WEBPACK_IMPORTED_MODULE_8__["CommonMethods"]();
            return commonMethods.getFormattedNumberValue(param.value, 2);
        }
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.onCostTypeChange = function (params) {
        var filteredCostType = params.colDef.cellEditorParams.context.costTypes.find(function (e) { return e.costTypeCode === params.data.costTypeCode; });
        if (filteredCostType) {
            params.node.setDataValue('description', filteredCostType.name);
            params.node.setDataValue('inPL', filteredCostType.inPNL);
            params.node.setDataValue('noAction', filteredCostType.noAction);
        }
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.onRateTypeChange = function (params) {
        if (params.newValue === _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_26__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_26__["RateTypes"].Rate]) {
            params.node.setDataValue('priceCode', this.priceCode);
        }
        else {
            params.node.setDataValue('priceCode', '');
        }
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.isPriceCodeEditable = function (params) {
        if (this.isGridEditable(params)) {
            if (params.data.rateTypeCode === _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_26__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_26__["RateTypes"].Rate]) {
                return this.gridContext.gridEditable;
            }
            else {
                params.node.setDataValue('priceCode', '');
                return !this.gridContext.gridEditable;
            }
        }
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.isPercentageInvoiceEditable = function (params) {
        if (this.isTradeEdit) {
            if (params.data.invoicePercent > 0) {
                return this.gridContext.gridEditable && this.gridContext.percentageInvoiced;
            }
            else {
                params.node.setDataValue('invoicePercent', params.data.invoicePercent);
                return !this.gridContext.gridEditable;
            }
        }
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.priceCodeRequired = function (params) {
        if ((!params.value || params.value === '') && params.data.rateTypeCode === _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_26__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_26__["RateTypes"].Rate]) {
            params.node.setDataValue('priceCode', this.requiredCell(this));
        }
        return params.value;
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.renderPriceUnit = function (params) {
        if (!params.value) {
            return '';
        }
        var priceCode = params.colDef.cellEditorParams.context.priceUnits.filter(function (e) { return e.priceUnitId === params.value; })[0].priceCode;
        return priceCode;
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.requiredCell = function (params) {
        if (!params.value || params.value === '') {
            return '<div class=\'cost-cell-value-required\'>Required *</div>';
        }
        return params.value;
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.showCellValue = function (params) {
        if (params) {
            return params.value;
        }
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.showInvoiceDetails = function (params) {
        if (params.data.invoicePercent && params.data.invoicePercent > 0) {
            return ('InvoiceReference: ' +
                params.data.documentReference +
                '  Invoice Date: ' +
                this.formatDate.transform(params.data.documentDate) +
                '  %Invoiced: ' +
                params.data.invoicePercent);
        }
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.onUseCostMatrixClicked = function () {
        var getSearchMatricesObservable = this.hasRecommendCMGap
            ? this.tradingService.searchCostMatrixListWithBestMatch(this.getTagParameters())
            : this.tradingService.getCostmatricesByCompanyId(this.company);
        getSearchMatricesObservable.subscribe(this.getCostMatrices());
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.getCostMatrices = function () {
        var _this = this;
        return function (data) {
            _this.costMatrix = data.value;
            if (_this.costMatrix) {
                if (_this.hasRecommendCMGap) {
                    var costMatrixIdWithBM = _this.costMatrix.filter(function (itemCostMatrix) { return itemCostMatrix.bestMatch > 0; });
                    var bestMatchIds = costMatrixIdWithBM.map(function (tag) { return tag.costMatrixId; });
                    var tagsToShow_1 = _this.getTagParameters();
                    if (bestMatchIds.length > 0) {
                        var tagValues = _this.tradingService.GetBulkCostMatricesListWithTags(bestMatchIds.toString());
                        tagValues.subscribe(function (result) {
                            _this.costMatrix.map(function (matrix) {
                                var value = result.find(function (tagvalue) { return tagvalue.costMatrixId === matrix.costMatrixId; });
                                if (value) {
                                    matrix.tags = value.tags;
                                }
                            });
                            _this.costMatrix.map(function (matrix) {
                                if (matrix.tags) {
                                    matrix.tags.map(function (value) {
                                        var valuesIncluded = '';
                                        for (var i = 0; i < tagsToShow_1.length; i++) {
                                            if (value.tagValueId.includes(tagsToShow_1[i].id)) {
                                                valuesIncluded += tagsToShow_1[i].id + ',';
                                            }
                                        }
                                        value.tagValueId = valuesIncluded;
                                    });
                                    matrix.tagsFormatted = _this.paramsToChip(matrix.tags);
                                }
                            });
                        }, function (err) {
                            console.log(err);
                        }, function () {
                            _this.openDialogCostmatrices();
                        });
                    }
                    else {
                        _this.openDialogCostmatrices();
                    }
                }
                else {
                    _this.openDialogCostmatrices();
                }
            }
        };
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.openDialogCostmatrices = function () {
        var _this = this;
        var openCostMatrixDialog = this.dialog.open(_cost_matrix_dialog_cost_matrix_dialog_component__WEBPACK_IMPORTED_MODULE_41__["CostMatrixDialogComponent"], {
            data: {
                matrixData: this.costMatrix,
            },
            width: '45%',
        });
        openCostMatrixDialog.afterClosed().subscribe(function (matrixId) {
            _this.importMatrices(matrixId);
        });
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.paramsToChip = function (val) {
        var _this = this;
        var chip = '';
        var chips = new Array();
        var typenameActual;
        if (this.tagsList && val && val.length > 0) {
            val.forEach(function (param) {
                if (param.typeName !== typenameActual && param.tagValueId !== null && param.tagValueId !== '') {
                    var value = _this.tagsList.find(function (a) { return param.typeName === a.typeName; });
                    if (value) {
                        var label = value.label;
                        chip = label + '=';
                        chip += _this.searchValue(param.typeName, param.tagValueId);
                        typenameActual = param.typeName;
                        chips.push(chip.substring(0, chip.length - 1));
                    }
                }
                else if (param.tagValueId !== '') {
                    chip += param.tagValueId + ',';
                    chips.push(chip.substring(0, chip.length - 1));
                }
            });
        }
        return chips;
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.searchValue = function (typename, tagValueId) {
        var paramName = '';
        var paramid = '';
        var list;
        if (typename !== '' && typename !== undefined) {
            switch (typename) {
                case 'SectionDto.ContractTermCode':
                    paramName = 'displayName';
                    paramid = 'contractTermId';
                    list = this.masterdata.contractTerms;
                    break;
                case 'TradeDto.Type':
                    paramName = 'enumEntityValue';
                    paramid = 'enumEntityId';
                    list = this.masterdata.contractTypes;
                    break;
                case 'SectionDto.PaymentTermCode':
                    paramName = 'paymentTermCode';
                    paramid = 'paymentTermsId';
                    list = this.masterdata.paymentTerms;
                    break;
                case 'SectionDto.CounterpartyReference':
                    paramName = 'counterpartyCode';
                    paramid = 'counterpartyID';
                    list = this.masterdata.counterparties;
                    break;
                case 'SectionDto.PortDestinationCode':
                case 'SectionDto.PortOriginCode':
                    paramName = 'portCode';
                    paramid = 'portId';
                    list = this.masterdata.ports;
                    break;
            }
            if (paramName !== '' && paramid !== '') {
                tagValueId = this.searchTagByid(tagValueId, list, paramName, paramid);
            }
        }
        return tagValueId;
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.searchTagByid = function (tagValueId, list, paramName, paramId) {
        var tagsIds = tagValueId.split(',');
        var newTagValueId = new Array();
        tagsIds.forEach(function (id) {
            var match = list.find(function (val) { return val[paramId] === Number(id); });
            if (match) {
                newTagValueId.push(match[paramName]);
            }
        });
        return newTagValueId.join();
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.getTagFields = function () {
        var _this = this;
        this.tradingService.getTagFields().subscribe(function (val) { return (_this.tagsList = val); });
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.getTagParameters = function () {
        var tagList = new Array();
        var mainTab = this.commodityFormGroup.controls.mainTabComponent;
        var cmyGroup = mainTab.controls.commodityGroup;
        var cmyFormGroup = cmyGroup.controls.commodityFormGroup;
        var locationGroup = mainTab.controls.locationFormComponent;
        var contractTermsGroup = mainTab.controls.contractTermsFormGroup;
        if (cmyFormGroup.controls.commodityPart1.value) {
            var tag = new _shared_entities_tag_entity__WEBPACK_IMPORTED_MODULE_20__["Tag"](cmyFormGroup.controls.commodityPart1.value, 'Commodity.PrincipalCommodity');
            tagList.push(tag);
        }
        if (cmyFormGroup.controls.commodityPart2.value) {
            var tag = new _shared_entities_tag_entity__WEBPACK_IMPORTED_MODULE_20__["Tag"](cmyFormGroup.controls.commodityPart2.value, 'Commodity.Part2');
            tagList.push(tag);
        }
        if (cmyFormGroup.controls.commodityPart3.value) {
            var tag = new _shared_entities_tag_entity__WEBPACK_IMPORTED_MODULE_20__["Tag"](cmyFormGroup.controls.commodityPart3.value, 'Commodity.Part3');
            tagList.push(tag);
        }
        if (cmyFormGroup.controls.commodityPart4.value) {
            var tag = new _shared_entities_tag_entity__WEBPACK_IMPORTED_MODULE_20__["Tag"](cmyFormGroup.controls.commodityPart4.value, 'Commodity.Part4');
            tagList.push(tag);
        }
        if (cmyFormGroup.controls.commodityPart5.value) {
            var tag = new _shared_entities_tag_entity__WEBPACK_IMPORTED_MODULE_20__["Tag"](cmyFormGroup.controls.commodityPart5.value, 'Commodity.Part5');
            tagList.push(tag);
        }
        if (mainTab.value.termsGroup.contractTermsCtrl) {
            var tag = new _shared_entities_tag_entity__WEBPACK_IMPORTED_MODULE_20__["Tag"](mainTab.value.termsGroup.contractTermsCtrl.toString(), 'SectionDto.ContractTermCode');
            tagList.push(tag);
        }
        if (mainTab.value.counterpartyGroup.counterpartyReferenceCtrl) {
            var tag = new _shared_entities_tag_entity__WEBPACK_IMPORTED_MODULE_20__["Tag"](mainTab.value.counterpartyGroup.counterpartyReferenceCtrl.toString(), 'SectionDto.CounterpartyReference');
            tagList.push(tag);
        }
        if (mainTab.value.priceGroup.paymentTermsCtrl.paymentTermsId) {
            var tag = new _shared_entities_tag_entity__WEBPACK_IMPORTED_MODULE_20__["Tag"](mainTab.value.priceGroup.paymentTermsCtrl.paymentTermsId.toString(), 'SectionDto.PaymentTermCode');
            tagList.push(tag);
        }
        if (locationGroup.controls.portofOriginCtrl.value) {
            var tag = new _shared_entities_tag_entity__WEBPACK_IMPORTED_MODULE_20__["Tag"](locationGroup.controls.portofOriginCtrl.value.portId.toString(), 'SectionDto.SectionDto.PortOriginCode');
            tagList.push(tag);
        }
        if (locationGroup.controls.portofDestinationCtrl.value) {
            var tag = new _shared_entities_tag_entity__WEBPACK_IMPORTED_MODULE_20__["Tag"](locationGroup.controls.portofDestinationCtrl.value.portId.toString(), 'SectionDto.PortDestinationCode');
            tagList.push(tag);
        }
        return tagList;
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.imageCostMatrixTrade = function (matrixId) {
        var _this = this;
        this.tradingService.getCostmatricesListByCostmatrixId(matrixId).subscribe(function (data) {
            if (data) {
                _this.selectCostmatrix = data.name;
                data.costMatrixLines.filter(function (line) {
                    data.costMatrixId = line.costMatrixId;
                    _this.filteredLines = data.costMatrixLines;
                });
            }
            if (_this.filteredLines && _this.filteredLines.length > 0) {
                _this.addCostMatrixLinesToCostGrid();
            }
        });
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.importMatrices = function (matrixId) {
        var _this = this;
        this.tradingService.getCostmatricesListByCostmatrixId(matrixId).subscribe(function (data) {
            _this.selectCostmatrix = data.name;
            _this.isBestMatch = null;
            if (!_this.importedCostMatrices.includes(data.name)) {
                _this.importedCostMatrices = _this.importedCostMatrices + data.name + ' , ';
            }
            _this.useCostMatrixCtrl.setValue(_this.importedCostMatrices.trim().slice(0, -1));
            data.costMatrixLines.filter(function (line) {
                data.costMatrixId = line.costMatrixId;
                _this.filteredLines = data.costMatrixLines;
            });
            if (_this.filteredLines && _this.filteredLines.length > 0) {
                if (_this.hasRecommendCMGap) {
                    _this.tradingService.searchCostMatrixListWithBestMatch(_this.getTagParameters()).subscribe(function (listWithBM) {
                        _this.isBestMatch = listWithBM.value.find(function (e) { return e.costMatrixId === data.costMatrixId; }).bestMatch > 0 ? 'BM' : null;
                        _this.confirmCosts();
                    });
                }
                else {
                    _this.confirmCosts();
                }
            }
        });
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.setCostMatrixLines = function (result) {
        var newGridRows = [];
        var costsToBeRemoved = [];
        var sectionId = 0;
        if (result) {
            this.addCostMatrixLinesToCostGrid();
        }
        else {
            this.gridApi.forEachNode(function (rowData) {
                if (rowData.data.invoicePercent === 100) {
                    newGridRows.push(rowData.data);
                }
                else {
                    costsToBeRemoved.push(rowData.data.costId);
                    sectionId = rowData.data.sectionId;
                }
            });
            if (sectionId && costsToBeRemoved) {
                var deleteConfirmationSubscription = this.tradingService
                    .deleteMultipleCost(costsToBeRemoved, sectionId, this.dataVersionId)
                    .subscribe(function () { });
                this.subscriptions.push(deleteConfirmationSubscription);
            }
            this.costsGridRows = newGridRows;
            this.addCostMatrixLinesToCostGrid();
        }
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.addCostMatrixLinesToCostGrid = function () {
        var _this = this;
        var newGridRows = [];
        this.filteredLines.forEach(function (rows) {
            var costRow = new _shared_entities_cost_entity__WEBPACK_IMPORTED_MODULE_19__["Cost"]();
            costRow.rowStatus = 'N';
            costRow.bestMatch = _this.isBestMatch;
            costRow.costMatrixName = _this.selectCostmatrix;
            costRow.costTypeCode = _this.getCostTypeCodeFromId(rows.costTypeId, _this.masterdata);
            costRow.description = rows.description;
            costRow.supplierCode = _this.getSupplierCodeFromId(rows.supplierId, _this.masterdata);
            costRow.costDirectionId = rows.payReceive;
            costRow.currencyCode = rows.currencyCode;
            costRow.rateTypeId = rows.rateType;
            costRow.priceUnitId = rows.priceUnitId;
            costRow.rate = rows.rateAmount;
            costRow.inPL = rows.inPL;
            costRow.noAction = rows.noAct;
            costRow.narrative = rows.narrative;
            costRow.costMatrixLineId = rows.costMatrixLineId;
            newGridRows.push(costRow);
        });
        newGridRows.forEach(function (e) {
            var displayCostRow = new _costs_ag_grid_row__WEBPACK_IMPORTED_MODULE_42__["CostListDisplayView"](e, _this.masterdata, _this.costDirections);
            displayCostRow.isDirty = true;
            _this.gridApi.updateRowData({ add: [displayCostRow] });
        });
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.getCostTypeCodeFromId = function (id, masterdata) {
        var costTypeCode = masterdata.costTypes.find(function (e) { return e.costTypeId === id; });
        return costTypeCode ? costTypeCode.costTypeCode : null;
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.getSupplierCodeFromId = function (id, masterdata) {
        var counterparty = masterdata.counterparties.find(function (e) { return e.counterpartyID === id; });
        return counterparty ? counterparty.counterpartyCode : null;
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.confirmCosts = function () {
        var _this = this;
        if (this.gridApi.getDisplayedRowCount() === 0) {
            this.addCostMatrixLinesToCostGrid();
        }
        else {
            var openConfirmCostsDialog = this.dialog.open(_add_cost_confirmation_dialog_add_cost_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_39__["AddCostConfirmationDialogComponent"]);
            openConfirmCostsDialog.afterClosed().subscribe(function (result) {
                _this.setCostMatrixLines(result);
            });
        }
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.checkGridEditPrivilege = function () {
        var _this = this;
        this.securityService.isSecurityReady().subscribe(function () {
            if (_this.authorizationService.isPrivilegeAllowed(_this.company, 'Trades') &&
                _this.authorizationService.isPrivilegeAllowed(_this.company, 'CostTab')) {
                _this.editingCostGridPrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'EditingCostGrid');
            }
        });
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.onTabSelected = function () {
        if (this.costGridOptions) {
            this.gridService.sizeColumns(this.costGridOptions);
        }
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.navigateToCostTransferPage = function () {
        this.router.navigate(['/' + this.company + '/trades/transferCosts/' + encodeURIComponent(String(this.sectionId))]);
    };
    PhysicalContractCaptureFormCostsTabComponent.prototype.onRateAmountChanged = function (params) {
        if (params && params.data) {
            if (params.data.invoicePercent) {
                if (params.newValue) {
                    var invoicePercent = (params.data.invoicePercent * params.oldValue) / params.newValue;
                    if (invoicePercent > 100) {
                        params.data.invoicePercent = 100;
                    }
                    else {
                        params.data.invoicePercent = invoicePercent;
                    }
                }
                else {
                    params.data.rate = params.oldValue;
                }
            }
        }
        if (this.gridApi) {
            this.gridApi.refreshCells(params.data);
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('gridZoom'),
        __metadata("design:type", _shared_components_grid_enlargement_grid_enlargement_component__WEBPACK_IMPORTED_MODULE_17__["GridEnlargementComponent"])
    ], PhysicalContractCaptureFormCostsTabComponent.prototype, "gridEnlargementComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('costMatrixDialogComponent'),
        __metadata("design:type", _cost_matrix_dialog_cost_matrix_dialog_component__WEBPACK_IMPORTED_MODULE_41__["CostMatrixDialogComponent"])
    ], PhysicalContractCaptureFormCostsTabComponent.prototype, "costMatrixDialogComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('addCostConfirmationDialogComponent'),
        __metadata("design:type", _add_cost_confirmation_dialog_add_cost_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_39__["AddCostConfirmationDialogComponent"])
    ], PhysicalContractCaptureFormCostsTabComponent.prototype, "addCostConfirmationDialogComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        __metadata("design:type", _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"])
    ], PhysicalContractCaptureFormCostsTabComponent.prototype, "commodityFormGroup", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
        __metadata("design:type", Object)
    ], PhysicalContractCaptureFormCostsTabComponent.prototype, "noOfZeroCostRow", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
        __metadata("design:type", Object)
    ], PhysicalContractCaptureFormCostsTabComponent.prototype, "costInvoiced", void 0);
    PhysicalContractCaptureFormCostsTabComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'atlas-physical-contract-capture-form-costs-tab',
            template: __webpack_require__(/*! ./physical-contract-capture-form-costs-tab.component.html */ "./Client/app/trading/components/contract-physical-capture/costs-tab/physical-contract-capture-form-costs-tab.component.html"),
            styles: [__webpack_require__(/*! ./physical-contract-capture-form-costs-tab.component.scss */ "./Client/app/trading/components/contract-physical-capture/costs-tab/physical-contract-capture-form-costs-tab.component.scss")],
            providers: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DatePipe"]],
        }),
        __metadata("design:paramtypes", [_shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_35__["MasterdataService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_31__["FormConfigurationProviderService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_7__["CompanyManagerService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatDialog"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_38__["SnackbarService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_36__["TradingService"],
            _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_33__["ExecutionService"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_6__["AuthorizationService"],
            _shared_pipes_format_date_pipe_pipe__WEBPACK_IMPORTED_MODULE_29__["FormatDatePipe"],
            _angular_router__WEBPACK_IMPORTED_MODULE_4__["ActivatedRoute"],
            _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"],
            _shared_services_security_service__WEBPACK_IMPORTED_MODULE_37__["SecurityService"],
            _shared_services_grid_configuration_provider_service__WEBPACK_IMPORTED_MODULE_32__["GridConfigurationProviderService"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_30__["AgGridService"],
            _shared_services_http_services_feature_flag_service__WEBPACK_IMPORTED_MODULE_34__["FeatureFlagService"]])
    ], PhysicalContractCaptureFormCostsTabComponent);
    return PhysicalContractCaptureFormCostsTabComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_13__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/adjust-weight-form-component/adjust-weight-form-component.component.html":
/*!**********************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/adjust-weight-form-component/adjust-weight-form-component.component.html ***!
  \**********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"trade-capture-card mat-card-height\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h2>Adjust Weight</h2>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\">\r\n            <div fxFlex=\"40%\"\r\n                 [class.displayMode]=\"!quantityCtrl.enabled\">\r\n                <mat-form-field id=\"quantityToolTip\"\r\n                                title=\"\">\r\n                    <input matInput\r\n                           [textMask]=\"{mask:mask}\"\r\n                           placeholder=\"Quantity\"\r\n                           [matTooltip]=\"'Quantity'\"\r\n                           autocomplete=\"off\"\r\n                           [attr.disabled]=\"isWashoutInvoiceGenerated\"\r\n                           [formControl]=\"quantityCtrl\"\r\n                           (blur)=\"ifCheckQuantityChange()\">\r\n                    <mat-hint style=\"color:orangered\"\r\n                              *ngIf=\"quantityCtrl.value === 0\">Quantity is 0</mat-hint>\r\n                    <mat-error *ngIf=\"quantityCtrl.hasError('isPositiveError')\">\r\n                        Value must be positive\r\n                    </mat-error>\r\n                    <mat-error *ngIf=\"quantityCtrl.hasError('maximumValue')\">\r\n                        Invoice generated can only be decreased\r\n                    </mat-error>\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"60%\"\r\n                 [class.displayMode]=\"!quantityCodeCtrl.enabled\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Quantity Code\"\r\n                           [matTooltip]=\"'Quantity Code'\"\r\n                           [attr.disabled]=\"isWashoutInvoiceGenerated\"\r\n                           [matAutocomplete]=\"weightUnits\"\r\n                           autocomplete=\"off\"\r\n                           [formControl]=\"quantityCodeCtrl\">\r\n                    <mat-autocomplete #weightUnits =\"matAutocomplete\"\r\n                                      [displayWith]=\"displayWeightUnit.bind(this)\">\r\n                        <mat-option *ngFor=\"let weightUnit of filteredWeightUnits \"\r\n                                    [value]=\"weightUnit.weightUnitId\">{{weightUnit.weightCode}} |\r\n                            {{weightUnit.description}}\r\n                        </mat-option>\r\n                    </mat-autocomplete>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/adjust-weight-form-component/adjust-weight-form-component.component.scss":
/*!**********************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/adjust-weight-form-component/adjust-weight-form-component.component.scss ***!
  \**********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".mat-card-height {\n  min-height: 110px; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/adjust-weight-form-component/adjust-weight-form-component.component.ts":
/*!********************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/adjust-weight-form-component/adjust-weight-form-component.component.ts ***!
  \********************************************************************************************************************************************************/
/*! exports provided: AdjustWeightFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdjustWeightFormComponent", function() { return AdjustWeightFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_directives_number_validators_directive__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/directives/number-validators.directive */ "./Client/app/shared/directives/number-validators.directive.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/entities/masterdata-props.entity */ "./Client/app/shared/entities/masterdata-props.entity.ts");
/* harmony import */ var _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/enums/contract-type.enum */ "./Client/app/shared/enums/contract-type.enum.ts");
/* harmony import */ var _shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/enums/invoice-type.enum */ "./Client/app/shared/enums/invoice-type.enum.ts");
/* harmony import */ var _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/enums/invoicing-status.enum */ "./Client/app/shared/enums/invoicing-status.enum.ts");
/* harmony import */ var _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/models/section-complete-display-view */ "./Client/app/shared/models/section-complete-display-view.ts");
/* harmony import */ var _shared_numberMask__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/numberMask */ "./Client/app/shared/numberMask.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _quantity_form_control_validator_validator__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./quantity-form-control-validator.validator */ "./Client/app/trading/components/contract-physical-capture/form-components/adjust-weight-form-component/quantity-form-control-validator.validator.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



















var AdjustWeightFormComponent = /** @class */ (function (_super) {
    __extends(AdjustWeightFormComponent, _super);
    function AdjustWeightFormComponent(formBuilder, masterdataService, tradingService, utilService, formConfigurationProvider, route, authorizationService, securityService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.masterdataService = masterdataService;
        _this.tradingService = tradingService;
        _this.utilService = utilService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.route = route;
        _this.authorizationService = authorizationService;
        _this.securityService = securityService;
        _this.isInputField = false;
        _this.checkQuantityChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.isEdit = false;
        _this.isWashoutInvoiceGenerated = false;
        _this.quantityForTrafficTabPrivilege = false;
        _this.quantityCodeForTrafficTabPrivilege = false;
        _this.isImage = false;
        _this.quantityCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('Quantity');
        _this.quantityCodeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('QuantityCode');
        _this.mask = Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_12__["CustomNumberMask"])(12, 10, false);
        _this.masterdataList = [
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__["MasterDataProps"].WeightUnits,
        ];
        return _this;
    }
    AdjustWeightFormComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.masterdataService.getMasterData(this.masterdataList).subscribe(function (data) {
            _this.masterdata = data;
            if (_this.route.snapshot.data['isImage'] === true) {
                _this.isImage = true;
            }
            _this.filteredWeightUnits = _this.masterdata.weightUnits;
            _this.quantityCodeCtrl.valueChanges.subscribe(function (input) {
                _this.filteredWeightUnits =
                    _this.utilService.filterListforAutocomplete(input, _this.masterdata.weightUnits, ['weightCode', 'description']);
            });
            _this.setValidators();
        });
        this.checkAdjustWeightFormPrivileges();
    };
    AdjustWeightFormComponent.prototype.updateQuantityValue = function (value) {
        this.quantityCtrl.patchValue(value);
        if (this.quantityCtrl.valid && this.isEdit && this.modelQuantity) {
            var quantity = this.quantityCtrl.value;
            quantity = quantity.toString().replace(',', '');
        }
    };
    AdjustWeightFormComponent.prototype.ifCheckQuantityChange = function () {
        if (this.quantityCtrl.valid && this.isEdit && this.modelQuantity) {
            var quantity = this.quantityCtrl.value;
            quantity = quantity.toString().replace(',', '');
            this.checkQuantityChange.emit({ newValue: Number(quantity), oldValue: Number(this.modelQuantity) });
        }
    };
    AdjustWeightFormComponent.prototype.setValidators = function (maxQuantity, condition) {
        if (maxQuantity === void 0) { maxQuantity = 0; }
        if (condition === void 0) { condition = 'base'; }
        switch (condition) {
            case 'base':
                this.quantityCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([Object(_shared_directives_number_validators_directive__WEBPACK_IMPORTED_MODULE_5__["isPositive"])()]));
                break;
            case 'max':
                this.quantityCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([Object(_shared_directives_number_validators_directive__WEBPACK_IMPORTED_MODULE_5__["isPositive"])(), Object(_quantity_form_control_validator_validator__WEBPACK_IMPORTED_MODULE_18__["maximumValue"])(maxQuantity)]));
                break;
        }
        this.quantityCtrl.updateValueAndValidity();
    };
    AdjustWeightFormComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            quantityCtrl: this.quantityCtrl,
            quantityCodeCtrl: this.quantityCodeCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    AdjustWeightFormComponent.prototype.displayWeightUnit = function (weightUnitId) {
        if (weightUnitId) {
            var selectedUnit = this.masterdata.weightUnits.find(function (weightUnit) { return weightUnit.weightUnitId === weightUnitId; });
            if (selectedUnit) {
                return selectedUnit.weightCode;
            }
        }
        return '';
    };
    AdjustWeightFormComponent.prototype.initForm = function (entity, isEdit) {
        this.isWashoutInvoiceGenerated = false;
        var tradeRecord = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_11__["SectionCompleteDisplayView"](entity);
        this.applyQuantityValidator(tradeRecord);
        if (tradeRecord.quantity) {
            this.formGroup.patchValue({ quantityCtrl: isEdit ? tradeRecord.quantity : tradeRecord.quantity.toFixed(3) });
        }
        this.formGroup.patchValue({ quantityCodeCtrl: tradeRecord.weightUnitId });
        this.modelQuantity = tradeRecord.quantity.toString();
        this.isEdit = isEdit;
        if (!isEdit) {
            this.formGroup.disable({ emitEvent: false });
        }
        if (isEdit && !this.isImage && entity &&
            entity.allocatedTo &&
            entity.invoiceReference &&
            entity.invoiceTypeId === _shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_9__["InvoiceTypes"].Washout &&
            entity.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_10__["InvoicingStatus"].Finalized &&
            entity.allocatedTo.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_10__["InvoicingStatus"].Finalized) {
            this.isWashoutInvoiceGenerated = true;
        }
        return entity;
    };
    AdjustWeightFormComponent.prototype.isSaleOrPurchase = function (type) {
        if ((type === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_8__["ContractTypes"][_shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_8__["ContractTypes"].Purchase]
            || type === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_8__["ContractTypes"][_shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_8__["ContractTypes"].Sale])) {
            return true;
        }
        return false;
    };
    AdjustWeightFormComponent.prototype.isTradeFinalInvoiceRequiredOrFinalized = function (tradeRecord) {
        if (tradeRecord.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_10__["InvoicingStatus"].FinalInvoiceRequired
            || tradeRecord.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_10__["InvoicingStatus"].Finalized) {
            return true;
        }
        return false;
    };
    AdjustWeightFormComponent.prototype.isAllocatedTradeFinalInvoiceRequiredOrFinalized = function (tradeRecord) {
        if (tradeRecord.allocatedToInvoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_10__["InvoicingStatus"].FinalInvoiceRequired
            || tradeRecord.allocatedToInvoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_10__["InvoicingStatus"].Finalized) {
            return true;
        }
        return false;
    };
    AdjustWeightFormComponent.prototype.isTradeUninvoice = function (tradeRecord) {
        if (tradeRecord.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_10__["InvoicingStatus"].Uninvoiced
            || tradeRecord.invoicingStatusId === null) {
            return true;
        }
        return false;
    };
    AdjustWeightFormComponent.prototype.isAllocatedTradeUninvoice = function (tradeRecord) {
        if (tradeRecord.allocatedToInvoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_10__["InvoicingStatus"].Uninvoiced
            || tradeRecord.allocatedToInvoicingStatusId === null) {
            return true;
        }
        return false;
    };
    AdjustWeightFormComponent.prototype.applyQuantityValidator = function (tradeRecord) {
        if (this.isSaleOrPurchase(tradeRecord.type) && !this.isImage) {
            if (!(tradeRecord.allocatedTo)) {
                if (this.isTradeUninvoice(tradeRecord)) {
                    this.setValidators();
                }
                else if (this.isTradeFinalInvoiceRequiredOrFinalized(tradeRecord)) {
                    // Invoiced, Not Allocated => Purchase Contract
                    this.setValidators(tradeRecord.quantity, 'max');
                }
            }
            else {
                if (this.isTradeUninvoice(tradeRecord)
                    // Not Invoiced and Allocated to Uninvoice Sale Contract
                    && this.isAllocatedTradeUninvoice(tradeRecord)) {
                    this.setValidators();
                }
                else if (this.isTradeUninvoice(tradeRecord)
                    // No final invoice and allocted to invoiced sale contract
                    && this.isAllocatedTradeFinalInvoiceRequiredOrFinalized(tradeRecord)) {
                    this.setValidators(tradeRecord.quantity, 'max');
                }
                else if (this.isTradeFinalInvoiceRequiredOrFinalized(tradeRecord)
                    // Final invoice and allocted to un-invoiced sale contract
                    && this.isAllocatedTradeUninvoice(tradeRecord)) {
                    this.setValidators(tradeRecord.quantity, 'max');
                }
                else if (this.isTradeFinalInvoiceRequiredOrFinalized(tradeRecord)
                    // Final invoice and allocted to un-invoiced sale contract
                    && this.isAllocatedTradeFinalInvoiceRequiredOrFinalized(tradeRecord)) {
                    this.setValidators(tradeRecord.quantity, 'max');
                }
            }
        }
    };
    AdjustWeightFormComponent.prototype.checkAdjustWeightFormPrivileges = function () {
        var _this = this;
        this.company = this.route.snapshot.paramMap.get('company');
        this.securityService.isSecurityReady().subscribe(function () {
            if (_this.authorizationService.isPrivilegeAllowed(_this.company, 'Trades') && _this.authorizationService.isPrivilegeAllowed(_this.company, 'TrafficTab')) {
                _this.quantityForTrafficTabPrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'QuantityForTraffic');
                _this.quantityCodeForTrafficTabPrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'QuantityCodeForTraffic');
            }
        });
        if (!this.quantityForTrafficTabPrivilege) {
            this.quantityCtrl.disable();
        }
        if (!this.quantityCodeForTrafficTabPrivilege) {
            this.quantityCodeCtrl.disable();
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], AdjustWeightFormComponent.prototype, "checkQuantityChange", void 0);
    AdjustWeightFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-adjust-weight-form-component',
            template: __webpack_require__(/*! ./adjust-weight-form-component.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/adjust-weight-form-component/adjust-weight-form-component.component.html"),
            styles: [__webpack_require__(/*! ./adjust-weight-form-component.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/adjust-weight-form-component/adjust-weight-form-component.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_14__["MasterdataService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_15__["TradingService"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_17__["UtilService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_13__["FormConfigurationProviderService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__["AuthorizationService"],
            _shared_services_security_service__WEBPACK_IMPORTED_MODULE_16__["SecurityService"]])
    ], AdjustWeightFormComponent);
    return AdjustWeightFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/adjust-weight-form-component/quantity-form-control-validator.validator.ts":
/*!***********************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/adjust-weight-form-component/quantity-form-control-validator.validator.ts ***!
  \***********************************************************************************************************************************************************/
/*! exports provided: maximumValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maximumValue", function() { return maximumValue; });
function maximumValue(maxvalue) {
    return function (control) {
        var minValue = Number(String(control.value).replace(/,/gi, ''));
        if (minValue > maxvalue) {
            return { maximumValue: true };
        }
        return null;
    };
}


/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/allocation-form-component/allocation-form-component.component.html":
/*!****************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/allocation-form-component/allocation-form-component.component.html ***!
  \****************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"trade-capture-card allocation-form\"\r\n          *ngIf=\"showAllocation\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h2>Allocation: {{allocatedSectionCode}}</h2>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\"\r\n             [ngClass]=\"{'allocation-toggle-ctrl': isAdjustAllocationEnabled==true}\">\r\n            <mat-slide-toggle [formControl]=\"adjustAllocationToggleCtrl\"\r\n                              (change)=\"toggleAllocation()\">Adjust Allocation</mat-slide-toggle>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\">\r\n            <mat-slide-toggle [formControl]=\"leaveStatusToggleCtrl\"\r\n                              (change)=\"toggleLeaveStatus()\">Leave Status as-is</mat-slide-toggle>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\">\r\n            <mat-slide-toggle [formControl]=\"unallocationToggleCtrl\"\r\n                              (change)=\"toggleUnallocated()\">Create Unallocated Residual Split</mat-slide-toggle>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/allocation-form-component/allocation-form-component.component.scss":
/*!****************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/allocation-form-component/allocation-form-component.component.scss ***!
  \****************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".allocation-toggle-ctrl::ng-deep .mat-disabled .mat-slide-toggle-thumb {\n  background-color: #53c234 !important; }\n\n.allocation-toggle-ctrl::ng-deep .mat-disabled .mat-slide-toggle-bar {\n  background-color: rgba(83, 194, 52, 0.5) !important; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/allocation-form-component/allocation-form-component.component.ts":
/*!**************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/allocation-form-component/allocation-form-component.component.ts ***!
  \**************************************************************************************************************************************************/
/*! exports provided: AllocationFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AllocationFormComponent", function() { return AllocationFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_enums_allocate_trade_option_enum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/enums/allocate-trade-option-enum */ "./Client/app/shared/enums/allocate-trade-option-enum.ts");
/* harmony import */ var _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/enums/contract-type.enum */ "./Client/app/shared/enums/contract-type.enum.ts");
/* harmony import */ var _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/enums/invoicing-status.enum */ "./Client/app/shared/enums/invoicing-status.enum.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/services/http-services/execution.service */ "./Client/app/shared/services/http-services/execution.service.ts");
/* harmony import */ var _services_trade_data_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../services/trade-data.service */ "./Client/app/trading/services/trade-data.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











var AllocationFormComponent = /** @class */ (function (_super) {
    __extends(AllocationFormComponent, _super);
    function AllocationFormComponent(formConfigurationProvider, formBuilder, executionService, route, tradeDataService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.formBuilder = formBuilder;
        _this.executionService = executionService;
        _this.route = route;
        _this.tradeDataService = tradeDataService;
        _this.checkLeaveStatusChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.adjustAllocationToggleCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('adjustAllocationToggleCtrl');
        _this.leaveStatusToggleCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('leaveStatusToggleCtrl');
        _this.unallocationToggleCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('unallocationToggleCtrl');
        _this.isAdjustAllocationEnabled = false;
        return _this;
    }
    AllocationFormComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));
        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;
        this.subscriptions.push(this.tradeDataService.getAllocationDetails()
            .subscribe(function (data) {
            _this.showAllocation = data ? true : false;
            _this.allocatedSectionCode = data ? data.allocatedSectionCode : '';
        }));
    };
    AllocationFormComponent.prototype.initForm = function (entity, isEdit) {
        this.sectionModel = entity;
        // if (!isEdit) {
        this.adjustAllocationToggleCtrl.disable();
        this.leaveStatusToggleCtrl.disable();
        this.unallocationToggleCtrl.disable();
        // }
        this.allocatedSection = entity.allocatedTo;
        return entity;
    };
    AllocationFormComponent.prototype.toggleAllocation = function () {
        if (this.adjustAllocationToggleCtrl.value) {
            this.leaveStatusToggleCtrl.setValue(false);
            this.unallocationToggleCtrl.setValue(false);
        }
        this.toggleLeaveStatus();
    };
    AllocationFormComponent.prototype.resetLeaveStatus = function (isChecked) {
        this.leaveStatusToggleCtrl.setValue(isChecked);
        if (isChecked) {
            this.adjustAllocationToggleCtrl.setValue(false);
            this.unallocationToggleCtrl.setValue(false);
        }
    };
    AllocationFormComponent.prototype.toggleLeaveStatus = function () {
        if (this.leaveStatusToggleCtrl.value) {
            this.adjustAllocationToggleCtrl.setValue(false);
            this.unallocationToggleCtrl.setValue(false);
        }
        this.checkLeaveStatusChange.emit(this.leaveStatusToggleCtrl.value);
    };
    AllocationFormComponent.prototype.toggleUnallocated = function () {
        if (this.unallocationToggleCtrl.value) {
            this.adjustAllocationToggleCtrl.setValue(false);
            this.leaveStatusToggleCtrl.setValue(false);
        }
        this.toggleLeaveStatus();
    };
    AllocationFormComponent.prototype.getFormGroup = function () {
        return _super.prototype.getFormGroup.call(this);
    };
    AllocationFormComponent.prototype.resetControl = function () {
        this.adjustAllocationToggleCtrl.setValue(false);
        this.unallocationToggleCtrl.setValue(false);
        this.leaveStatusToggleCtrl.setValue(false);
        this.leaveStatusToggleCtrl.enable();
        this.unallocationToggleCtrl.enable();
        this.adjustAllocationToggleCtrl.enable();
    };
    AllocationFormComponent.prototype.resetControlonGreaterValue = function () {
        this.isAdjustAllocationEnabled = false;
        this.adjustAllocationToggleCtrl.setValue(false);
        this.leaveStatusToggleCtrl.setValue(false);
        this.unallocationToggleCtrl.setValue(false);
        this.adjustAllocationToggleCtrl.disable();
        this.leaveStatusToggleCtrl.disable();
        this.unallocationToggleCtrl.disable();
        if (this.sectionModel.allocatedTo) {
            if (this.isSaleOrPurchase(this.sectionModel.contractType)) {
                if (this.isTradeUninvoice(this.sectionModel)
                    && this.isAllocatedTradeUninvoice(this.sectionModel)) {
                    this.isAdjustAllocationEnabled = true;
                    this.adjustAllocationToggleCtrl.setValue(true);
                    this.adjustAllocationToggleCtrl.disable();
                    this.leaveStatusToggleCtrl.disable();
                    this.unallocationToggleCtrl.disable();
                }
            }
        }
    };
    AllocationFormComponent.prototype.resetControlonLowerValue = function () {
        this.isAdjustAllocationEnabled = false;
        this.adjustAllocationToggleCtrl.setValue(false);
        this.leaveStatusToggleCtrl.setValue(false);
        this.unallocationToggleCtrl.setValue(false);
        this.adjustAllocationToggleCtrl.disable();
        this.leaveStatusToggleCtrl.disable();
        this.unallocationToggleCtrl.disable();
        if (this.sectionModel.allocatedTo) {
            if (this.isSaleOrPurchase(this.sectionModel.contractType)) {
                if (this.isTradeUninvoice(this.sectionModel)
                    && this.isAllocatedTradeUninvoice(this.sectionModel)) {
                    this.adjustAllocationToggleCtrl.enable();
                    this.dataVersionId ? this.leaveStatusToggleCtrl.disable() : this.leaveStatusToggleCtrl.enable();
                    this.dataVersionId ? this.unallocationToggleCtrl.disable() : this.unallocationToggleCtrl.enable();
                    this.adjustAllocationToggleCtrl.setValue(true);
                }
                else if (this.isTradeUninvoice(this.sectionModel)
                    && this.isAllocatedTradeFinalInvoiceRequiredOrFinalized(this.sectionModel)) {
                    this.leaveStatusToggleCtrl.setValue(true);
                    this.dataVersionId ? this.leaveStatusToggleCtrl.disable() : this.leaveStatusToggleCtrl.enable();
                }
                else if (this.isTradeFinalInvoiceRequiredOrFinalized(this.sectionModel)
                    && this.isAllocatedTradeUninvoice(this.sectionModel)) {
                    this.leaveStatusToggleCtrl.setValue(true);
                    this.dataVersionId ? this.leaveStatusToggleCtrl.disable() : this.leaveStatusToggleCtrl.enable();
                }
                else if (this.isTradeFinalInvoiceRequiredOrFinalized(this.sectionModel)
                    && this.isAllocatedTradeFinalInvoiceRequiredOrFinalized(this.sectionModel)) {
                    this.leaveStatusToggleCtrl.setValue(true);
                    this.dataVersionId ? this.leaveStatusToggleCtrl.disable() : this.leaveStatusToggleCtrl.enable();
                }
            }
        }
    };
    AllocationFormComponent.prototype.isSaleOrPurchase = function (type) {
        if ((type === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_6__["ContractTypes"].Purchase
            || type === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_6__["ContractTypes"].Sale)) {
            return true;
        }
        return false;
    };
    AllocationFormComponent.prototype.isTradeFinalInvoiceRequiredOrFinalized = function (tradeRecord) {
        if (tradeRecord.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoicingStatus"].FinalInvoiceRequired
            || tradeRecord.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoicingStatus"].Finalized) {
            return true;
        }
        return false;
    };
    AllocationFormComponent.prototype.isTradeUninvoice = function (tradeRecord) {
        if (tradeRecord.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoicingStatus"].Uninvoiced
            || tradeRecord.invoicingStatusId === null) {
            return true;
        }
        return false;
    };
    AllocationFormComponent.prototype.isAllocatedTradeFinalInvoiceRequiredOrFinalized = function (tradeRecord) {
        if (tradeRecord.allocatedTo.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoicingStatus"].FinalInvoiceRequired
            || tradeRecord.allocatedTo.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoicingStatus"].Finalized) {
            return true;
        }
        return false;
    };
    AllocationFormComponent.prototype.isAllocatedTradeUninvoice = function (tradeRecord) {
        if (tradeRecord.allocatedTo.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoicingStatus"].Uninvoiced
            || tradeRecord.allocatedTo.invoicingStatusId === null) {
            return true;
        }
        return false;
    };
    AllocationFormComponent.prototype.populateEntity = function (entity) {
        var section = entity;
        section.allocatedTo = this.allocatedSection;
        section.allocateTradeOptionId = _shared_enums_allocate_trade_option_enum__WEBPACK_IMPORTED_MODULE_5__["AllocateTradeOption"].NoAction;
        if (this.adjustAllocationToggleCtrl.value) {
            section.allocateTradeOptionId = _shared_enums_allocate_trade_option_enum__WEBPACK_IMPORTED_MODULE_5__["AllocateTradeOption"].AdjustAllocation;
        }
        else if (this.leaveStatusToggleCtrl.value) {
            section.allocateTradeOptionId = _shared_enums_allocate_trade_option_enum__WEBPACK_IMPORTED_MODULE_5__["AllocateTradeOption"].LeaveStatus;
        }
        else if (this.unallocationToggleCtrl.value) {
            section.allocateTradeOptionId = _shared_enums_allocate_trade_option_enum__WEBPACK_IMPORTED_MODULE_5__["AllocateTradeOption"].CreateUnallocatedResidualSplit;
        }
        return section;
    };
    AllocationFormComponent.prototype.allocationSelectionChecked = function () {
        if (this.showAllocation) {
            if ((this.adjustAllocationToggleCtrl.value) || (this.leaveStatusToggleCtrl.value) || (this.unallocationToggleCtrl.value)) {
                return false;
            }
            return true;
        }
        return false;
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], AllocationFormComponent.prototype, "checkLeaveStatusChange", void 0);
    AllocationFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-allocation-form-component',
            template: __webpack_require__(/*! ./allocation-form-component.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/allocation-form-component/allocation-form-component.component.html"),
            styles: [__webpack_require__(/*! ./allocation-form-component.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/allocation-form-component/allocation-form-component.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_8__["FormConfigurationProviderService"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_9__["ExecutionService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _services_trade_data_service__WEBPACK_IMPORTED_MODULE_10__["TradeDataService"]])
    ], AllocationFormComponent);
    return AllocationFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/allocation-info-form-component/allocation-info-form-component.component.html":
/*!**************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/allocation-info-form-component/allocation-info-form-component.component.html ***!
  \**************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"trade-capture-card\"\r\n          *ngIf=\"!hasEmptyState\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            Allocation\r\n        </mat-card-title>\r\n        <mat-card-subtitle>\r\n            Trade Allocated on {{dateOfAllocation}}\r\n        </mat-card-subtitle>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"10%\">\r\n            <div fxFlex=\"30%\"\r\n                 [class.displayMode]=\"!groupingNumberCtrl.enabled\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Grouping Number\"\r\n                           [formControl]=\"groupingNumberCtrl\"\r\n                           readonly\r\n                           autocomplete=\"off\"\r\n                           type=\"number\">\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n        <mat-card-subtitle>\r\n            Allocated to\r\n        </mat-card-subtitle>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\">\r\n            <mat-form-field fxFlex=\"30%\">\r\n                <input matInput\r\n                       class=\"trade-allocation-card\"\r\n                       placeholder=\"Contract Number\"\r\n                       [formControl]=\"contractNumberCtrl\"\r\n                       autocomplete=\"off\"\r\n                       (click)=\"onContractReferenceClicked()\"\r\n                       readonly>\r\n            </mat-form-field>\r\n            <div fxFlex=\"30%\"\r\n                 [class.displayMode]=\"!counterpartyReferenceCtrl.enabled\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Counterparty Reference\"\r\n                           autocomplete=\"off\"\r\n                           [formControl]=\"counterpartyReferenceCtrl\">\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"30%\"\r\n                 [class.displayMode]=\"!contractTermsCtrl.enabled\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Contract Terms\"\r\n                           autocomplete=\"off\"\r\n                           [formControl]=\"contractTermsCtrl\">\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>\r\n<atlas-empty-state *ngIf=\"hasEmptyState\"\r\n                   title=\"No Allocation\"\r\n                   [message]=\"allocationEmptyMessage\"></atlas-empty-state>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/allocation-info-form-component/allocation-info-form-component.component.scss":
/*!**************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/allocation-info-form-component/allocation-info-form-component.component.scss ***!
  \**************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "h4 {\n  margin: 0; }\n\n.trade-allocation-card {\n  color: #0000EE;\n  text-decoration: underline;\n  cursor: pointer; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/allocation-info-form-component/allocation-info-form-component.component.ts":
/*!************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/allocation-info-form-component/allocation-info-form-component.component.ts ***!
  \************************************************************************************************************************************************************/
/*! exports provided: AllocationInfoFormComponentComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AllocationInfoFormComponentComponent", function() { return AllocationInfoFormComponentComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_entities_allocation_entity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/entities/allocation.entity */ "./Client/app/shared/entities/allocation.entity.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/enums/contract-type.enum */ "./Client/app/shared/enums/contract-type.enum.ts");
/* harmony import */ var _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/models/section-complete-display-view */ "./Client/app/shared/models/section-complete-display-view.ts");
/* harmony import */ var _shared_pipes_format_date_pipe_pipe__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/pipes/format-date-pipe.pipe */ "./Client/app/shared/pipes/format-date-pipe.pipe.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/services/http-services/execution.service */ "./Client/app/shared/services/http-services/execution.service.ts");
/* harmony import */ var _services_trade_data_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../services/trade-data.service */ "./Client/app/trading/services/trade-data.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./../../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _entities_section_reference__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./../../../../entities/section-reference */ "./Client/app/trading/entities/section-reference.ts");
/* harmony import */ var _services_trade_actions_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./../../../../services/trade-actions.service */ "./Client/app/trading/services/trade-actions.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
















var AllocationInfoFormComponentComponent = /** @class */ (function (_super) {
    __extends(AllocationInfoFormComponentComponent, _super);
    function AllocationInfoFormComponentComponent(formConfigurationProvider, formBuilder, executionService, router, route, companyManager, formatDate, tradeActionsService, snackbarService, tradeDataService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.formBuilder = formBuilder;
        _this.executionService = executionService;
        _this.router = router;
        _this.route = route;
        _this.companyManager = companyManager;
        _this.formatDate = formatDate;
        _this.tradeActionsService = tradeActionsService;
        _this.snackbarService = snackbarService;
        _this.tradeDataService = tradeDataService;
        _this.allocatedDateCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('AllocationDate');
        _this.groupingNumberCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('GroupingNumber');
        _this.contractNumberCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('ContractNumber');
        _this.counterpartyReferenceCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('CounterpartyReference');
        _this.contractTermsCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('ContractTerms');
        _this.allocationModel = new _shared_entities_allocation_entity__WEBPACK_IMPORTED_MODULE_5__["Allocation"]();
        _this.hasEmptyState = true;
        _this.allocationEmptyMessage = 'This trade has not been allocated yet';
        return _this;
    }
    AllocationInfoFormComponentComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));
        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;
    };
    AllocationInfoFormComponentComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            groupingNumberCtrl: this.groupingNumberCtrl,
            contractNumberCtrl: this.contractNumberCtrl,
            counterpartyReferenceCtrl: this.counterpartyReferenceCtrl,
            contractTermsCtrl: this.contractTermsCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    AllocationInfoFormComponentComponent.prototype.initForm = function (entity) {
        var _this = this;
        if (this.sectionId !== 0) {
            this.subscriptions.push(this.tradeDataService.getAllocationDetails()
                .subscribe(function (data) {
                if (data) {
                    _this.allocationModel = data;
                    _this.assignValueToControl(entity);
                    _this.hasEmptyState = false;
                }
                _this.disableControl();
            }));
        }
    };
    AllocationInfoFormComponentComponent.prototype.assignValueToControl = function (entity) {
        this.tradeRecord = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_8__["SectionCompleteDisplayView"](entity);
        this.dateOfAllocation = this.formatDate.transform(this.allocationModel.dateOfAllocation === null ? null : this.allocationModel.dateOfAllocation);
        this.formGroup.patchValue({
            groupingNumberCtrl: this.allocationModel.groupNumber === null ? '' : this.allocationModel.groupNumber,
            contractNumberCtrl: this.allocationModel.allocatedSectionCode === null ? '' : this.allocationModel.allocatedSectionCode,
            contractTermsCtrl: this.allocationModel.contractTermCode === null ? '' : this.allocationModel.contractTermCode,
        });
        if (this.tradeRecord.type === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_7__["ContractTypes"][_shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_7__["ContractTypes"].Sale]) {
            this.formGroup.patchValue({ counterpartyReferenceCtrl: this.allocationModel.sellerCode });
        }
        else {
            this.formGroup.patchValue({ counterpartyReferenceCtrl: this.allocationModel.buyerCode });
        }
    };
    AllocationInfoFormComponentComponent.prototype.disableControl = function () {
        this.groupingNumberCtrl.disable();
        this.counterpartyReferenceCtrl.disable();
        this.contractTermsCtrl.disable();
    };
    AllocationInfoFormComponentComponent.prototype.onContractReferenceClicked = function () {
        var sectionId = this.allocationModel.allocatedSectionId;
        if (!sectionId) {
            this.snackbarService.throwErrorSnackBar('Cannot navigate to the allocation contract');
            return;
        }
        if (this.dataVersionId) {
            this.tradeActionsService.displaySectionInSnapshotSubject.next(new _entities_section_reference__WEBPACK_IMPORTED_MODULE_14__["SectionReference"](sectionId, this.dataVersionId));
        }
        else {
            this.tradeActionsService.displaySectionSubject.next(sectionId);
        }
    };
    AllocationInfoFormComponentComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-allocation-info-form-component',
            template: __webpack_require__(/*! ./allocation-info-form-component.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/allocation-info-form-component/allocation-info-form-component.component.html"),
            styles: [__webpack_require__(/*! ./allocation-info-form-component.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/allocation-info-form-component/allocation-info-form-component.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_10__["FormConfigurationProviderService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_11__["ExecutionService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_3__["CompanyManagerService"],
            _shared_pipes_format_date_pipe_pipe__WEBPACK_IMPORTED_MODULE_9__["FormatDatePipe"],
            _services_trade_actions_service__WEBPACK_IMPORTED_MODULE_15__["TradeActionsService"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_13__["SnackbarService"],
            _services_trade_data_service__WEBPACK_IMPORTED_MODULE_12__["TradeDataService"]])
    ], AllocationInfoFormComponentComponent);
    return AllocationInfoFormComponentComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/amendment-audit-form-component/amendment-audit-form-component.component.html":
/*!**************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/amendment-audit-form-component/amendment-audit-form-component.component.html ***!
  \**************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"trade-capture-card ammendment-auditform-card\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            Trade Creation & Amendment\r\n        </mat-card-title>\r\n        <mat-card-subtitle>\r\n            Trade created on {{createdDateFormat}} at {{createdTimeFormat}} by {{createdBy}}\r\n        </mat-card-subtitle>\r\n        <mat-card-subtitle *ngIf=\"amendmentDate\">Trade amended on {{amendmentDateFormat}} at {{amendmentTimeFormat}} by\r\n            {{amendedBy}}</mat-card-subtitle>\r\n    </mat-card-header>\r\n</mat-card>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/amendment-audit-form-component/amendment-audit-form-component.component.scss":
/*!**************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/amendment-audit-form-component/amendment-audit-form-component.component.scss ***!
  \**************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/amendment-audit-form-component/amendment-audit-form-component.component.ts":
/*!************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/amendment-audit-form-component/amendment-audit-form-component.component.ts ***!
  \************************************************************************************************************************************************************/
/*! exports provided: AmendmentAuditFormComponentComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AmendmentAuditFormComponentComponent", function() { return AmendmentAuditFormComponentComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_pipes_format_date_pipe_pipe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../shared/pipes/format-date-pipe.pipe */ "./Client/app/shared/pipes/format-date-pipe.pipe.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var AmendmentAuditFormComponentComponent = /** @class */ (function (_super) {
    __extends(AmendmentAuditFormComponentComponent, _super);
    function AmendmentAuditFormComponentComponent(formConfigurationProvider, formatDate) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.formatDate = formatDate;
        return _this;
    }
    AmendmentAuditFormComponentComponent.prototype.ngOnInit = function () {
    };
    AmendmentAuditFormComponentComponent.prototype.initForm = function (entity) {
        var model = entity;
        if (model) {
            this.createdDate = model.creationDate;
            this.createdDateFormat = this.formatDate.transform(this.createdDate === null ? null : this.createdDate);
            this.createdTimeFormat = this.formatDate.transformTimeWithoutSeconds(this.createdDate === null ? null : this.createdDate);
            this.createdBy = model.createdBy;
            this.createdByUserId = model.createdByUserId;
            this.amendmentDate = model.lastModifiedDate;
            this.amendmentDateFormat = this.formatDate.transform(this.amendmentDate === null ? null : this.amendmentDate);
            this.amendmentTimeFormat = this.formatDate.transformTimeWithoutSeconds(this.amendmentDate === null ? null : this.amendmentDate);
            this.amendedBy = model.lastModifiedBy;
            this.amendedByUserId = model.modifiedByUserId;
        }
    };
    AmendmentAuditFormComponentComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-amendment-audit-form-component',
            template: __webpack_require__(/*! ./amendment-audit-form-component.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/amendment-audit-form-component/amendment-audit-form-component.component.html"),
            styles: [__webpack_require__(/*! ./amendment-audit-form-component.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/amendment-audit-form-component/amendment-audit-form-component.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_2__["FormConfigurationProviderService"], _shared_pipes_format_date_pipe_pipe__WEBPACK_IMPORTED_MODULE_3__["FormatDatePipe"]])
    ], AmendmentAuditFormComponentComponent);
    return AmendmentAuditFormComponentComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_1__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/bl-info-form-component/bl-info-form-component.component.html":
/*!**********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/bl-info-form-component/bl-info-form-component.component.html ***!
  \**********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card *ngIf=\"!hasEmptyState\"\r\n          class=\"trade-capture-card\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            BL Information\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"space-between center\"\r\n             fxLayoutGap=\"5%\">\r\n            <div fxFlex=\"33%\"\r\n                 [class.displayMode]=\"!blDateCtrl.enabled\">\r\n                <mat-form-field>\r\n                    <div matTooltip=\"BL Date cannot be added to an unallocated sale\"\r\n                         [matTooltipDisabled]=\"isDisabled\">\r\n                        <input matInput\r\n                               [matDatepicker]=\"bldatepicker\"\r\n                               placeholder=\"Bl Date\"\r\n                               [formControl]='blDateCtrl'\r\n                               autocomplete=\"off\"\r\n                               (dateChange)=\"onBlDateChanged()\">\r\n                    </div>\r\n                    <mat-hint class=\"bl-date-error\"\r\n                              *ngIf=\"isFormEdit && isBLDateBeforeContractDate()\">BL date is before the contract date\r\n                    </mat-hint>\r\n                    <mat-datepicker-toggle matSuffix\r\n                                           [for]=\"bldatepicker\">\r\n                    </mat-datepicker-toggle>\r\n                    <mat-datepicker #bldatepicker></mat-datepicker>\r\n                    <mat-error *ngIf=\"blDateCtrl.hasError('isDateAfterValid')\">\r\n                        The BL date cannot be in the future\r\n                    </mat-error>\r\n                </mat-form-field>\r\n            </div>\r\n\r\n            <div fxFlex=\"33%\"\r\n                 [class.displayMode]=\"!blReferenceCtrl.enabled\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Bl Reference\"\r\n                           [formControl]=\"blReferenceCtrl\"\r\n                           autocomplete=\"off\"\r\n                           [matTooltip]=\"'Bl Reference'\">\r\n                </mat-form-field>\r\n            </div>\r\n\r\n            <div fxFlex=\"33%\"\r\n                 [class.displayMode]=\"!groupingNumberCtrl.enabled\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Grouping Number\"\r\n                           [formControl]=\"groupingNumberCtrl\"\r\n                           autocomplete=\"off\"\r\n                           readonly\r\n                           type=\"number\">\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n\r\n    </mat-card-content>\r\n</mat-card>\r\n\r\n<atlas-empty-state *ngIf=\"hasEmptyState\"\r\n                   title=\"No BL Date\"\r\n                   [message]=\"blDateEmptyMessage\"\r\n                   fxFlex=\"100\"></atlas-empty-state>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/bl-info-form-component/bl-info-form-component.component.scss":
/*!**********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/bl-info-form-component/bl-info-form-component.component.scss ***!
  \**********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".bl-date-error {\n  color: orangered; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/bl-info-form-component/bl-info-form-component.component.ts":
/*!********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/bl-info-form-component/bl-info-form-component.component.ts ***!
  \********************************************************************************************************************************************/
/*! exports provided: BlInfoFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlInfoFormComponent", function() { return BlInfoFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_entities_allocation_entity__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/entities/allocation.entity */ "./Client/app/shared/entities/allocation.entity.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_section_traffic_entity__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/entities/section-traffic.entity */ "./Client/app/shared/entities/section-traffic.entity.ts");
/* harmony import */ var _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/enums/contract-type.enum */ "./Client/app/shared/enums/contract-type.enum.ts");
/* harmony import */ var _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/models/section-complete-display-view */ "./Client/app/shared/models/section-complete-display-view.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/services/http-services/execution.service */ "./Client/app/shared/services/http-services/execution.service.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
/* harmony import */ var _shared_validators_date_validators_validator__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../shared/validators/date-validators.validator */ "./Client/app/shared/validators/date-validators.validator.ts");
/* harmony import */ var _services_trade_data_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../services/trade-data.service */ "./Client/app/trading/services/trade-data.service.ts");
/* harmony import */ var _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./../../../../../shared/enums/permission-level.enum */ "./Client/app/shared/enums/permission-level.enum.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


















var moment = moment__WEBPACK_IMPORTED_MODULE_3__;
var BlInfoFormComponent = /** @class */ (function (_super) {
    __extends(BlInfoFormComponent, _super);
    function BlInfoFormComponent(formBuilder, router, route, formConfigurationProvider, executionService, companyManager, authorizationService, securityService, tradeDataService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.router = router;
        _this.route = route;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.executionService = executionService;
        _this.companyManager = companyManager;
        _this.authorizationService = authorizationService;
        _this.securityService = securityService;
        _this.tradeDataService = tradeDataService;
        _this.blDateCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_8__["AtlasFormControl"]('BlDate');
        _this.blReferenceCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_8__["AtlasFormControl"]('BlReference');
        _this.groupingNumberCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_8__["AtlasFormControl"]('GroupingNumber');
        _this.allocationModel = new _shared_entities_allocation_entity__WEBPACK_IMPORTED_MODULE_7__["Allocation"]();
        _this.isDisabled = true;
        _this.sectionTrafficModel = new _shared_entities_section_traffic_entity__WEBPACK_IMPORTED_MODULE_9__["SectionTraffic"]();
        _this.isTradeImage = false;
        _this.blDatePrivilege = false;
        _this.blReferencePrivilege = false;
        _this.groupingNumberPrivilege = false;
        _this.hasEmptyState = true;
        _this.isEmpty = true;
        _this.blDateEmptyMessage = 'You can edit the trade to add one';
        _this.isFormEdit = false;
        _this.blDateChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        return _this;
    }
    BlInfoFormComponent.prototype.contractDateSelected = function (contractDate) {
        this.contractDate = contractDate;
        this.resetBlDateValidation();
    };
    BlInfoFormComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));
        this.dataVersionId = this.route.snapshot.paramMap.get('dataVersionId') ?
            Number(this.route.snapshot.paramMap.get('dataVersionId')) : null;
        this.formGroup = this.formBuilder.group({
            blDateCtrl: this.blDateCtrl,
            blReferenceCtrl: this.blReferenceCtrl,
        });
        this.setValidators();
        if (this.route.snapshot.data['isImage'] === true) {
            this.isTradeImage = true;
        }
        this.checkblInfoFormPrivileges();
    };
    BlInfoFormComponent.prototype.resetBlDateValidation = function () {
        this.blDateCtrl.clearValidators();
        this.blDateCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([Object(_shared_validators_date_validators_validator__WEBPACK_IMPORTED_MODULE_15__["isAfterDate"])(this.companyManager.getCurrentCompanyDate())]));
        this.blDateCtrl.updateValueAndValidity();
        this.formGroup.updateValueAndValidity();
    };
    BlInfoFormComponent.prototype.setValidators = function () {
        this.blReferenceCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].maxLength(255)]));
    };
    BlInfoFormComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            blDateCtrl: this.blDateCtrl,
            blReferenceCtrl: this.blReferenceCtrl,
            groupingNumberCtrl: this.groupingNumberCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    BlInfoFormComponent.prototype.initForm = function (entity, isEdit) {
        var _this = this;
        this.tradeRecord = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_11__["SectionCompleteDisplayView"](entity);
        if (this.sectionId !== 0) {
            this.subscriptions.push(this.tradeDataService.getTrafficDetails()
                .subscribe(function (data) {
                if (data) {
                    _this.sectionTrafficModel = data;
                    _this.formGroup.patchValue({ blDateCtrl: _this.sectionTrafficModel.blDate });
                    _this.formGroup.patchValue({ blReferenceCtrl: _this.sectionTrafficModel.blReference });
                    _this.isEmpty = !_this.sectionTrafficModel.blDate && !_this.sectionTrafficModel.blReference;
                    _this.hasEmptyState = _this.isEmpty && !isEdit;
                    _this.onBlDateChanged();
                }
            }));
            this.subscriptions.push(this.tradeDataService.getAllocationDetails()
                .subscribe(function (data) {
                if (data) {
                    _this.allocationModel = data;
                    _this.groupingNumberCtrl.setValue(_this.allocationModel.groupNumber);
                    _this.isEmpty = false;
                    _this.hasEmptyState = _this.isEmpty && !isEdit;
                }
                _this.disableControl();
            }));
        }
        if (!isEdit) {
            this.isFormEdit = false;
            this.formGroup.disable();
            if (this.tradeRecord.type === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_10__["ContractTypes"][_shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_10__["ContractTypes"].Sale]) {
                if (!this.tradeRecord.allocatedTo) {
                    this.blDateEmptyMessage = 'The trade needs to be allocated first';
                }
            }
        }
        else if (isEdit) {
            this.isFormEdit = true;
            if (this.tradeRecord.type === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_10__["ContractTypes"][_shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_10__["ContractTypes"].Sale]) {
                if (this.tradeRecord.allocatedTo === null) {
                    this.blDateCtrl.disable();
                    this.isDisabled = false;
                }
            }
            else if (this.isTradeImage) {
                this.blReferenceCtrl.disable();
                this.blDateCtrl.disable();
            }
            if (this.tradeRecord.invoiceReference && this.authorizationService.getPermissionLevel(this.company, 'Trades', 'Physicals', 'SuperTradeEdition') <= _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_17__["PermissionLevels"].None) {
                this.blDateCtrl.disable();
            }
            this.hasEmptyState = false;
        }
        return entity;
    };
    BlInfoFormComponent.prototype.disableControl = function () {
        this.groupingNumberCtrl.disable();
    };
    BlInfoFormComponent.prototype.isBLDateBeforeContractDate = function () {
        var result = Object(_shared_validators_date_validators_validator__WEBPACK_IMPORTED_MODULE_15__["isDateTwoBeforeDateOne"])(this.contractDate, this.blDateCtrl.value);
        if (result) {
            return result;
        }
    };
    BlInfoFormComponent.prototype.onBlDateChanged = function () {
        if (this.blDateCtrl.valid && this.blDateCtrl.value) {
            this.blDateChanged.emit(this.blDateCtrl.value);
        }
    };
    BlInfoFormComponent.prototype.checkblInfoFormPrivileges = function () {
        var _this = this;
        this.securityService.isSecurityReady().subscribe(function () {
            if (_this.authorizationService.isPrivilegeAllowed(_this.company, 'Trades')
                && _this.authorizationService.isPrivilegeAllowed(_this.company, 'TrafficTab')) {
                _this.blDatePrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'BlDate');
                _this.blReferencePrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'BlReference');
                _this.groupingNumberPrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'GroupingNumber');
            }
        });
        if (!this.blDatePrivilege) {
            this.blDateCtrl.disable();
        }
        if (!this.blReferencePrivilege) {
            this.blReferenceCtrl.disable();
        }
        if (!this.groupingNumberPrivilege) {
            this.groupingNumberCtrl.disable();
        }
    };
    BlInfoFormComponent.prototype.onSectionTrafficDetailsChanged = function (data, isEdit) {
        this.sectionTrafficModel = data;
        this.formGroup.patchValue({ blDateCtrl: this.sectionTrafficModel.blDate });
        this.formGroup.patchValue({ blReferenceCtrl: this.sectionTrafficModel.blReference });
        this.isEmpty = !this.sectionTrafficModel.blDate && !this.sectionTrafficModel.blReference;
        this.hasEmptyState = this.isEmpty && !isEdit;
        this.onBlDateChanged();
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], BlInfoFormComponent.prototype, "blDateChanged", void 0);
    BlInfoFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-bl-info-form-component',
            template: __webpack_require__(/*! ./bl-info-form-component.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/bl-info-form-component/bl-info-form-component.component.html"),
            styles: [__webpack_require__(/*! ./bl-info-form-component.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/bl-info-form-component/bl-info-form-component.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_12__["FormConfigurationProviderService"],
            _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_13__["ExecutionService"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_5__["CompanyManagerService"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_4__["AuthorizationService"],
            _shared_services_security_service__WEBPACK_IMPORTED_MODULE_14__["SecurityService"],
            _services_trade_data_service__WEBPACK_IMPORTED_MODULE_16__["TradeDataService"]])
    ], BlInfoFormComponent);
    return BlInfoFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_6__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/cash-against-invoice-form-component/cash-against-invoice-form-component.component.html":
/*!************************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/cash-against-invoice-form-component/cash-against-invoice-form-component.component.html ***!
  \************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card *ngIf=\"!hasEmptyState\"\r\n          class=\"trade-capture-card\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            Cash Against Invoice\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\">\r\n            <button mat-mini-fab\r\n                    disabled></button>\r\n            <div>\r\n                <atlas-form-input fxFlex=\"100%\"\r\n                                  [fieldControl]=\"cashMatchDateCtrl\"\r\n                                  [isEditable]=\"false\"\r\n                                  [label]=\"'Date Of Cash Matching'\"></atlas-form-input>\r\n            </div>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>\r\n<atlas-empty-state *ngIf=\"hasEmptyState\"\r\n                   title=\"No Cash Against Invoice\"\r\n                   [message]=\"cashAgainstInvoiceEmptyMessage\"></atlas-empty-state>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/cash-against-invoice-form-component/cash-against-invoice-form-component.component.scss":
/*!************************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/cash-against-invoice-form-component/cash-against-invoice-form-component.component.scss ***!
  \************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/cash-against-invoice-form-component/cash-against-invoice-form-component.component.ts":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/cash-against-invoice-form-component/cash-against-invoice-form-component.component.ts ***!
  \**********************************************************************************************************************************************************************/
/*! exports provided: CashAgainstInvoiceFormComponentComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CashAgainstInvoiceFormComponentComponent", function() { return CashAgainstInvoiceFormComponentComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var CashAgainstInvoiceFormComponentComponent = /** @class */ (function (_super) {
    __extends(CashAgainstInvoiceFormComponentComponent, _super);
    function CashAgainstInvoiceFormComponentComponent(formConfigurationProvider) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.cashMatchDateCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_2__["AtlasFormControl"]('CashMatchDate');
        _this.hasEmptyState = true;
        _this.cashAgainstInvoiceEmptyMessage = 'Accountants are working on the subject';
        return _this;
    }
    CashAgainstInvoiceFormComponentComponent.prototype.ngOnInit = function () {
    };
    CashAgainstInvoiceFormComponentComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-cash-against-invoice-form-component',
            template: __webpack_require__(/*! ./cash-against-invoice-form-component.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/cash-against-invoice-form-component/cash-against-invoice-form-component.component.html"),
            styles: [__webpack_require__(/*! ./cash-against-invoice-form-component.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/cash-against-invoice-form-component/cash-against-invoice-form-component.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_3__["FormConfigurationProviderService"]])
    ], CashAgainstInvoiceFormComponentComponent);
    return CashAgainstInvoiceFormComponentComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_1__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/charter-form-component/charter-form-component.component.html":
/*!**********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/charter-form-component/charter-form-component.component.html ***!
  \**********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card *ngIf=\"!hasEmptyState\"\r\n          class=\"trade-capture-card\">\r\n    <mat-card-header>\r\n        <mat-card-title>Charter</mat-card-title>\r\n        <mat-card-subtitle>\r\n            Contract assigned on {{charterAssignmentDate }} by {{charterAssignedBy}}\r\n        </mat-card-subtitle>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div>\r\n            <mat-form-field fxFlex=\"50%\">\r\n                <input matInput\r\n                       placeholder=\"Charter Reference\"\r\n                       [formControl]=\"charterRefCtrl\"\r\n                       (click)=\"charterRefClicked()\"\r\n                       readonly\r\n                       autocomplete=\"off\"\r\n                       class=\"trade-charter-card\">\r\n            </mat-form-field>\r\n\r\n            <atlas-form-input fxFlex=\"50%\"\r\n                              [fieldControl]=\"charterManagerCtrl\"\r\n                              [isEditable]=\"isInputField\"\r\n                              [label]=\"'Charter Manager'\">\r\n            </atlas-form-input>\r\n            <atlas-form-input fxFlex=\"50%\"\r\n                              [fieldControl]=\"blDateCtrl\"\r\n                              [isEditable]=\"isInputField\"\r\n                              [label]=\"'BL Date'\">\r\n            </atlas-form-input>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>\r\n<atlas-empty-state *ngIf=\"hasEmptyState\"\r\n                   title=\"No Charter Assignment\"\r\n                   [message]=\"charterEmptyMessage\"></atlas-empty-state>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/charter-form-component/charter-form-component.component.scss":
/*!**********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/charter-form-component/charter-form-component.component.scss ***!
  \**********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".trade-charter-card {\n  color: #0000EE;\n  text-decoration: underline;\n  cursor: pointer; }\n\n.trade-charter-text-color {\n  color: black; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/charter-form-component/charter-form-component.component.ts":
/*!********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/charter-form-component/charter-form-component.component.ts ***!
  \********************************************************************************************************************************************/
/*! exports provided: CharterFormComponentComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CharterFormComponentComponent", function() { return CharterFormComponentComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_charter_entity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/entities/charter.entity */ "./Client/app/shared/entities/charter.entity.ts");
/* harmony import */ var _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/models/section-complete-display-view */ "./Client/app/shared/models/section-complete-display-view.ts");
/* harmony import */ var _shared_pipes_format_date_pipe_pipe__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/pipes/format-date-pipe.pipe */ "./Client/app/shared/pipes/format-date-pipe.pipe.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/services/http-services/execution.service */ "./Client/app/shared/services/http-services/execution.service.ts");
/* harmony import */ var _shared_services_http_services_user_identity_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/services/http-services/user-identity.service */ "./Client/app/shared/services/http-services/user-identity.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











var CharterFormComponentComponent = /** @class */ (function (_super) {
    __extends(CharterFormComponentComponent, _super);
    function CharterFormComponentComponent(formConfigurationProvider, formBuilder, router, route, executionService, userIdentityService, formatDate) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.formBuilder = formBuilder;
        _this.router = router;
        _this.route = route;
        _this.executionService = executionService;
        _this.userIdentityService = userIdentityService;
        _this.formatDate = formatDate;
        _this.charterRefCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('CharterReference');
        _this.charterManagerCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('CharterManger');
        _this.blDateCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('BLDate');
        _this.shippingStatusCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('shippingStatus');
        _this.model = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_6__["SectionCompleteDisplayView"]();
        _this.isInputField = false;
        _this.charterModel = new _shared_entities_charter_entity__WEBPACK_IMPORTED_MODULE_5__["Charter"]();
        _this.hasEmptyState = true;
        _this.charterEmptyMessage = 'Execution team is looking for the perfect vessel';
        return _this;
    }
    CharterFormComponentComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));
    };
    CharterFormComponentComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            charterRefCtrl: this.charterRefCtrl,
            charterManagerCtrl: this.charterManagerCtrl,
            blDateCtrl: this.blDateCtrl,
            shippingStatusCtrl: this.shippingStatusCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    CharterFormComponentComponent.prototype.initForm = function (entity) {
        var _this = this;
        if (this.sectionId !== 0) {
            if (entity.blDate) {
                var dateFormat = this.formatDate;
                var formattedBLDate = dateFormat.transformdate(entity.blDate);
                this.formGroup.patchValue({ blDateCtrl: formattedBLDate });
                this.hasEmptyState = false;
            }
            this.executionService.getCharterBySectionId(this.sectionId)
                .subscribe(function (data) {
                if (data) {
                    _this.charterModel = data;
                    _this.assignValueToControl();
                    _this.hasEmptyState = false;
                }
                _this.disableControl();
            });
        }
        this.shippingStatusCtrl.disable();
    };
    CharterFormComponentComponent.prototype.setBlDate = function (blDate) {
        if (blDate) {
            var dateFormat = this.formatDate;
            var formattedBLDate = dateFormat.transformdate(blDate);
            this.formGroup.patchValue({ blDateCtrl: formattedBLDate });
            this.hasEmptyState = false;
        }
    };
    CharterFormComponentComponent.prototype.assignValueToControl = function () {
        this.charterAssignmentDate = this.formatDate.transform(this.charterModel.assignmentDate === null ? null : this.charterModel.assignmentDate);
        this.charterAssignedBy = this.charterModel.assignedByDisplayName !== null ?
            this.charterModel.assignedByDisplayName : this.charterModel.assignedBy;
        this.formGroup.patchValue({ charterRefCtrl: this.charterModel.charterCode });
        this.formGroup.patchValue({ charterManagerCtrl: this.charterModel.charterManagerDisplayName });
        this.formGroup.patchValue({ shippingStatusCtrl: this.charterModel.shippingStatusDescription });
    };
    CharterFormComponentComponent.prototype.charterRefClicked = function () {
        var charterId = this.charterModel.charterId;
        this.router.navigate([this.company + '/execution/charter/details', charterId]);
    };
    CharterFormComponentComponent.prototype.disableControl = function () {
        this.charterManagerCtrl.disable();
        this.blDateCtrl.disable();
    };
    CharterFormComponentComponent.prototype.updateCharterManager = function () {
        var _this = this;
        if (this.charterModel.charterManagerId) {
            this.userIdentityService.getAllUsers().subscribe(function (data) {
                var userName = data.value.find(function (user) { return user.userId === _this.charterModel.charterManagerId; }).displayName;
                _this.formGroup.patchValue({ charterManagerCtrl: userName });
            });
        }
    };
    CharterFormComponentComponent.prototype.updateOnlyShippingState = function () {
        this.hasEmptyState = false;
        this.formGroup.patchValue({ shippingStatusCtrl: 'Cancelled' });
    };
    CharterFormComponentComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-charter-form-component',
            template: __webpack_require__(/*! ./charter-form-component.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/charter-form-component/charter-form-component.component.html"),
            styles: [__webpack_require__(/*! ./charter-form-component.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/charter-form-component/charter-form-component.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_8__["FormConfigurationProviderService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_9__["ExecutionService"], _shared_services_http_services_user_identity_service__WEBPACK_IMPORTED_MODULE_10__["UserIdentityService"],
            _shared_pipes_format_date_pipe_pipe__WEBPACK_IMPORTED_MODULE_7__["FormatDatePipe"]])
    ], CharterFormComponentComponent);
    return CharterFormComponentComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/commodity-form-component/commodity-form-component.component.html":
/*!**************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/commodity-form-component/commodity-form-component.component.html ***!
  \**************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"trade-capture-card commodity-details\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h2>Commodity</h2>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <atlas-commodity-input [required]=\"commodityInputRequired.isRequired\"\r\n                               (optionSelected)=\"onCommodityIdSelected($event)\"\r\n                               #commodityInput></atlas-commodity-input>\r\n        <div id=\"crpyear\"\r\n             fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             class=\"cropyear-vatcode-details\">\r\n            <div fxFlex=\"50%\"\r\n                 [class.displayMode]=\"!cropYearCtrl.enabled\"\r\n                 [class.isEmpty]=\"!cropYearCtrl.value\"\r\n                 [class.required-field]=\"cropYearCtrl.isRequired\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Crop Year\"\r\n                           [required]=\"cropYearCtrl.isRequired\"\r\n                           [formControl]='cropYearCtrl'\r\n                           autocomplete=\"off\">\r\n                    <mat-hint *ngIf=\"!cropYearCtrl.hasError('pattern') && cropYearCtrl.enabled \">Only format YYYY or\r\n                        YYYY/YYYY allowed\r\n\r\n                    </mat-hint>\r\n                    <mat-error *ngIf=\"cropYearCtrl.hasError('pattern')\">\r\n                        Only format YYYY or YYYY/YYYY allowed\r\n                    </mat-error>\r\n                    <mat-error *ngIf=\"cropYearCtrl.hasError('isYearOutOfRange')\">\r\n                        Crop year should be within +/- 5 years from the contract date\r\n                    </mat-error>\r\n                    <mat-error *ngIf=\"cropYearCtrl.hasError('isFirstYearGreater')\">\r\n                        Second year entered after the “/” should always be “greater than” the first year entered before\r\n                        the\r\n                        “/”\r\n                    </mat-error>\r\n                    <mat-hint align=\"end\"\r\n                              *ngIf=\"cropYearCtrl.isRequired && cropYearCtrl.enabled\">\r\n                        Required *\r\n                    </mat-hint>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/commodity-form-component/commodity-form-component.component.scss":
/*!**************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/commodity-form-component/commodity-form-component.component.scss ***!
  \**************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".cropyear-vatcode-details {\n  margin-top: 16px; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/commodity-form-component/commodity-form-component.component.ts":
/*!************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/commodity-form-component/commodity-form-component.component.ts ***!
  \************************************************************************************************************************************************/
/*! exports provided: CommodityFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommodityFormComponent", function() { return CommodityFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_components_commodity_input_commodity_input_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/components/commodity-input/commodity-input.component */ "./Client/app/shared/components/commodity-input/commodity-input.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/entities/masterdata-props.entity */ "./Client/app/shared/entities/masterdata-props.entity.ts");
/* harmony import */ var _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/models/section-complete-display-view */ "./Client/app/shared/models/section-complete-display-view.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _shared_validators_crop_year_validator_validator__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../shared/validators/crop-year-validator.validator */ "./Client/app/shared/validators/crop-year-validator.validator.ts");
/* harmony import */ var _services_form_field_handler_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../services/form-field-handler.service */ "./Client/app/trading/services/form-field-handler.service.ts");
/* harmony import */ var _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./../../../../../shared/enums/permission-level.enum */ "./Client/app/shared/enums/permission-level.enum.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


















var moment = moment__WEBPACK_IMPORTED_MODULE_3__;
var CommodityFormComponent = /** @class */ (function (_super) {
    __extends(CommodityFormComponent, _super);
    function CommodityFormComponent(formBuilder, masterdataService, tradingService, utilService, formConfigurationProvider, route, authorizationService, securityService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.masterdataService = masterdataService;
        _this.tradingService = tradingService;
        _this.utilService = utilService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.route = route;
        _this.authorizationService = authorizationService;
        _this.securityService = securityService;
        _this.commodityCodeSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.commBlockWarnMessage = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.model = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_9__["SectionCompleteDisplayView"]();
        _this.isInputField = false;
        _this.commodityBlockingMessage = false;
        _this.commodityWarningMessage = false;
        _this.isChangedcommodityPart1 = '';
        _this.isChangedcommodityPart2 = '';
        _this.isChangedcommodityPart3 = '';
        _this.isChangedcommodityPart4 = '';
        _this.isChangedcommodityPart5 = '';
        _this.tradeImageDetails = [];
        _this.cropYearCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__["AtlasFormControl"]('CropYear');
        _this.masterdataList = [_shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_8__["MasterDataProps"].Commodities];
        _this.cropYearValidatorPattern = '^[0-9]{4}(\/[0-9]{4})?';
        _this.commodityPrivilege = false;
        _this.cropYearPrivilege = false;
        _this.isImage = false;
        _this.commodityInputRequired = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__["AtlasFormControl"]('CommodityId');
        return _this;
    }
    CommodityFormComponent.prototype.contractDateSelected = function (contractDate) {
        this.contractDate = contractDate ? moment(contractDate) : undefined;
        this.resetCropYearValidation();
    };
    CommodityFormComponent.prototype.ngOnInit = function () {
        var _this = this;
        var masterDataSubscription = this.masterdataService
            .getMasterData(this.masterdataList)
            .subscribe(function (data) {
            _this.masterdata = data;
            _this.filteredCommodities = _this.masterdata.commodities;
            _this.setValidators();
            _this.bindConfiguration();
        });
        if (this.route.snapshot.data['isImage'] === true) {
            this.isImage = true;
        }
        this.subscriptions.push(masterDataSubscription);
        this.checkCommodityCardPrivileges();
    };
    CommodityFormComponent.prototype.setValidators = function () {
        this.cropYearCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].pattern(this.cropYearValidatorPattern));
    };
    CommodityFormComponent.prototype.onCommodityIdSelected = function (commodityId) {
        var selectedCommodity = this.masterdata.commodities.filter(function (commodity) { return commodity.commodityId === commodityId; })[0];
        this.commodityCodeSelected.emit(selectedCommodity);
    };
    CommodityFormComponent.prototype.resetCropYearValidation = function () {
        this.cropYearCtrl.clearValidators();
        this.cropYearCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].pattern(this.cropYearValidatorPattern),
            Object(_shared_validators_crop_year_validator_validator__WEBPACK_IMPORTED_MODULE_15__["isCropYearValid"])(this.contractDate),
        ]));
        this.cropYearCtrl.updateValueAndValidity();
        this.formGroup.updateValueAndValidity();
    };
    CommodityFormComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            commodityFormGroup: this.commodityInput.getFormGroup(),
            cropYearCtrl: this.cropYearCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    CommodityFormComponent.prototype.initForm = function (entity, isEdit) {
        var _this = this;
        var tradeRecord = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_9__["SectionCompleteDisplayView"](entity);
        this.model = tradeRecord;
        if (this.model.commodityId && this.masterdata && this.masterdata.commodities) {
            var commodity = this.masterdata.commodities.find(function (cmy) {
                return cmy.commodityId === _this.model.commodityId;
            });
            this.commodityPart1 = commodity.commodityType;
            this.commodityPart2 = commodity.commodityOrigin;
            this.commodityPart3 = commodity.commodityGrade;
            this.commodityPart4 = commodity.commodityLvl4;
            this.commodityPart5 = commodity.commodityLvl5;
            this.commodityInput.patchValue(commodity);
            this.onCommodityIdSelected(this.model.commodityId);
        }
        if (this.model.cropYear) {
            this.model.cropYearTo ?
                this.formGroup.patchValue({ cropYearCtrl: this.model.cropYear + '/' + this.model.cropYearTo }) :
                this.formGroup.patchValue({ cropYearCtrl: this.model.cropYear });
        }
        if (!isEdit) {
            this.formGroup.disable({ emitEvent: false });
        }
        else {
            if (!this.isImage) {
                if (this.model.invoiceReference &&
                    this.authorizationService.getPermissionLevel(this.company, 'Trades', 'Physicals', 'SuperTradeEdition') <= _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_17__["PermissionLevels"].None) {
                    this.formGroup.get('commodityFormGroup').disable({ emitEvent: false });
                }
            }
        }
        if (this.isImage) {
            this.tradeImageDetails = JSON.parse(this.route.snapshot.queryParams.tradeImageDetails);
            if (this.tradeImageDetails && this.tradeImageDetails.length > 0) {
                var checkCropYearIsImage = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'CropYear'; });
                if (checkCropYearIsImage) {
                    if (!checkCropYearIsImage.isEdit) {
                        this.cropYearCtrl.disable();
                    }
                    if (!checkCropYearIsImage.isCopy) {
                        this.cropYearCtrl.patchValue(null);
                    }
                }
                var checkCommodityIsImage = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'CommodityId'; });
                if (checkCommodityIsImage && !checkCommodityIsImage.isCopy) {
                    this.commodityInput.patchValue(null);
                }
            }
        }
        this.commodityInput.isEditableCommodityForm();
        return entity;
    };
    CommodityFormComponent.prototype.commodityEmitter = function () {
        this.commBlockWarnMessage.emit({
            isCommodityBlockerChanged: this.commodityBlockingMessage,
            isCommodityWarningChanged: this.commodityWarningMessage,
            isChangedCmyPart1: this.isChangedcommodityPart1,
            isChangedCmyPart2: this.isChangedcommodityPart2,
            isChangedCmyPart3: this.isChangedcommodityPart3,
            isChangedCmyPart4: this.isChangedcommodityPart4,
            isChangedCmyPart5: this.isChangedcommodityPart5,
        });
    };
    CommodityFormComponent.prototype.populateEntity = function (entity) {
        var section = entity;
        if (this.commodityInputRequired.isRequired || this.commodityInput.getCommodity() != null) {
            this.newCommodityPart1 = this.commodityInput.getCommodity().commodityType;
            this.newCommodityPart2 = this.commodityInput.getCommodity().commodityOrigin;
            this.newCommodityPart3 = this.commodityInput.getCommodity().commodityGrade;
            this.newCommodityPart4 = this.commodityInput.getCommodity().commodityLvl4;
            this.newCommodityPart5 = this.commodityInput.getCommodity().commodityLvl5;
            section.commodityId = this.commodityInput.getCommodity().commodityId;
            if (this.newCommodityPart1 !== this.commodityPart1 || this.newCommodityPart2 !== this.commodityPart2) {
                this.commodityBlockingMessage = true;
                if (this.newCommodityPart1 !== this.commodityPart1) {
                    this.isChangedcommodityPart1 = '[Cmy 1]';
                }
                if (this.newCommodityPart2 !== this.commodityPart2) {
                    this.isChangedcommodityPart2 = '[Cmy 2]';
                }
                this.commodityEmitter();
            }
            else if ((this.newCommodityPart1 === this.commodityPart1 && this.newCommodityPart2 === this.commodityPart2) &&
                (this.commodityPart3 !== this.newCommodityPart3 || this.commodityPart4 !== this.newCommodityPart4 ||
                    this.commodityPart5 !== this.newCommodityPart5)) {
                this.commodityWarningMessage = true;
                if (this.newCommodityPart3 !== this.commodityPart3) {
                    this.isChangedcommodityPart3 = '[Cmy 3]';
                }
                if (this.newCommodityPart4 !== this.commodityPart4) {
                    this.isChangedcommodityPart4 = '[Cmy 4]';
                }
                if (this.newCommodityPart5 !== this.commodityPart5) {
                    this.isChangedcommodityPart5 = '[Cmy 5]';
                }
                this.commodityEmitter();
            }
        }
        else {
            section.commodityId = 0;
        }
        if (this.cropYearCtrl.value) {
            var cropYearValues = Object(_services_form_field_handler_service__WEBPACK_IMPORTED_MODULE_16__["getCropYearValue"])(this.cropYearCtrl
                .value);
            section.cropYear = cropYearValues.from;
            section.cropYearTo = cropYearValues.to;
        }
        return section;
    };
    CommodityFormComponent.prototype.checkCommodityCardPrivileges = function () {
        var _this = this;
        this.company = this.route.snapshot.paramMap.get('company');
        this.securityService.isSecurityReady().subscribe(function () {
            if (_this.authorizationService.isPrivilegeAllowed(_this.company, 'Trades')
                && _this.authorizationService.isPrivilegeAllowed(_this.company, 'MainTab')) {
                _this.commodityPrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'Commodity');
                _this.cropYearPrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'CropYear');
            }
        });
        if (!this.commodityPrivilege) {
            this.formGroup.get('commodityFormGroup').disable();
        }
        if (!this.cropYearPrivilege) {
            this.cropYearCtrl.disable();
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('commodityInput'),
        __metadata("design:type", _shared_components_commodity_input_commodity_input_component__WEBPACK_IMPORTED_MODULE_6__["CommodityInputComponent"])
    ], CommodityFormComponent.prototype, "commodityInput", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CommodityFormComponent.prototype, "commodityCodeSelected", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CommodityFormComponent.prototype, "commBlockWarnMessage", void 0);
    CommodityFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-commodity-form-component',
            template: __webpack_require__(/*! ./commodity-form-component.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/commodity-form-component/commodity-form-component.component.html"),
            styles: [__webpack_require__(/*! ./commodity-form-component.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/commodity-form-component/commodity-form-component.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_11__["MasterdataService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_12__["TradingService"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_14__["UtilService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_10__["FormConfigurationProviderService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_4__["AuthorizationService"],
            _shared_services_security_service__WEBPACK_IMPORTED_MODULE_13__["SecurityService"]])
    ], CommodityFormComponent);
    return CommodityFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/counterparty-form-component/counterparty-form-component.component.html":
/*!********************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/counterparty-form-component/counterparty-form-component.component.html ***!
  \********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"trade-capture-card counterparty-details\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h2>Counterparty</h2>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\">\r\n            <div fxFlex=\"30%\">\r\n                <atlas-masterdata-user-preferences-input [isEditable]=\"buyerCodeCtrl.enabled\"\r\n                                                         [fieldControl]=\"buyerCodeCtrl\"\r\n                                                         [options]=\"filteredBuyers\"\r\n                                                         label=\"Buyer Code\"\r\n                                                         displayProperty=\"counterpartyCode\"\r\n                                                         [selectProperties]=\"['counterpartyCode', 'description']\"\r\n                                                         [errorMap]=\"counterpartyErrorMap\"\r\n                                                         lightBoxTitle=\"Results for Counterparty\"\r\n                                                         gridId=\"counterpartiesGrid\"\r\n                                                         (optionSelected)=\"buyerCodeSelected($event)\"\r\n                                                         [dataLoader]=\"counterpartyDataLoader\">\r\n                </atlas-masterdata-user-preferences-input>\r\n            </div>\r\n            <atlas-form-input fxFlex=\"70%\"\r\n                              [fieldControl]=\"buyerNameCtrl\"\r\n                              [required]=\"buyerNameCtrl.isRequired\"\r\n                              [isEditable]=\"isInputField\"\r\n                              [label]=\"'Buyer Name'\">\r\n                <mat-error *ngIf=\"buyerNameCtrl.hasError('required')\">\r\n                    Required *\r\n                </mat-error>\r\n            </atlas-form-input>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"center start\"\r\n             fxLayoutGap=\"5%\">\r\n            <div fxFlex=\"30%\">\r\n                <atlas-masterdata-user-preferences-input [isEditable]=\"sellerCodeCtrl.enabled\"\r\n                                                         [fieldControl]=\"sellerCodeCtrl\"\r\n                                                         [options]=\"filteredSellers\"\r\n                                                         label=\"Seller Code\"\r\n                                                         displayProperty=\"counterpartyCode\"\r\n                                                         [selectProperties]=\"['counterpartyCode', 'description']\"\r\n                                                         [errorMap]=\"counterpartyErrorMap\"\r\n                                                         lightBoxTitle=\"Results for Counterparty\"\r\n                                                         gridId=\"counterpartiesGrid\"\r\n                                                         (optionSelected)=\"sellerCodeSelected($event)\"\r\n                                                         [dataLoader]=\"counterpartyDataLoader\">\r\n                </atlas-masterdata-user-preferences-input>\r\n            </div>\r\n            <atlas-form-input fxFlex=\"70%\"\r\n                              [fieldControl]=\"sellerNameCrtl\"\r\n                              [required]=\"sellerNameCrtl.isRequired\"\r\n                              [isEditable]=\"isInputField\"\r\n                              [label]=\"'Seller Name'\">\r\n                <mat-error *ngIf=\"sellerNameCrtl.hasError('required')\">\r\n                    Required *\r\n                </mat-error>\r\n            </atlas-form-input>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\">\r\n            <div fxFlex=\"35%\"\r\n                 class=\"custom-form\"\r\n                 [class.required-field]=\"counterpartyReferenceCtrl.isRequired\"\r\n                 [class.displayMode]=\"!counterpartyReferenceCtrl.enabled\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Counterparty Reference\"\r\n                           autocomplete=\"off\"\r\n                           [formControl]=\"counterpartyReferenceCtrl\">\r\n                    <mat-error *ngIf=\"counterpartyReferenceCtrl.hasError('maxlength')\">\r\n                        Counterparty Reference should be more than 40 characters long\r\n                    </mat-error>\r\n                    <mat-error *ngIf=\"counterpartyReferenceCtrl.hasError('required')\">\r\n                        Required *\r\n                    </mat-error>\r\n                    <mat-hint *ngIf=\"counterpartyReferenceCtrl.isRequired && counterpartyReferenceCtrl.enabled\">\r\n                        Required *\r\n                    </mat-hint>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/counterparty-form-component/counterparty-form-component.component.scss":
/*!********************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/counterparty-form-component/counterparty-form-component.component.scss ***!
  \********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/counterparty-form-component/counterparty-form-component.component.ts":
/*!******************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/counterparty-form-component/counterparty-form-component.component.ts ***!
  \******************************************************************************************************************************************************/
/*! exports provided: CounterpartyFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CounterpartyFormComponent", function() { return CounterpartyFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/directives/autocomplete-dropdown.directive */ "./Client/app/shared/directives/autocomplete-dropdown.directive.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/entities/masterdata-props.entity */ "./Client/app/shared/entities/masterdata-props.entity.ts");
/* harmony import */ var _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/enums/contract-type.enum */ "./Client/app/shared/enums/contract-type.enum.ts");
/* harmony import */ var _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/models/section-complete-display-view */ "./Client/app/shared/models/section-complete-display-view.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
/* harmony import */ var _shared_services_masterdata_counterparty_data_loader__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/services/masterdata/counterparty-data-loader */ "./Client/app/shared/services/masterdata/counterparty-data-loader.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./../../../../../shared/enums/permission-level.enum */ "./Client/app/shared/enums/permission-level.enum.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

















var CounterpartyFormComponent = /** @class */ (function (_super) {
    __extends(CounterpartyFormComponent, _super);
    function CounterpartyFormComponent(route, formBuilder, masterdataService, utilService, formConfigurationProvider, counterpartyDataLoader, companyManagerService, authorizationService, securityService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.route = route;
        _this.formBuilder = formBuilder;
        _this.masterdataService = masterdataService;
        _this.utilService = utilService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.counterpartyDataLoader = counterpartyDataLoader;
        _this.companyManagerService = companyManagerService;
        _this.authorizationService = authorizationService;
        _this.securityService = securityService;
        _this.isInputField = false;
        _this.isTradeImage = false;
        _this.model = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_10__["SectionCompleteDisplayView"]();
        _this.buyerCodeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__["AtlasFormControl"]('BuyerId');
        _this.buyerNameCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__["AtlasFormControl"]('BuyerDescription');
        _this.sellerCodeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__["AtlasFormControl"]('SellerId');
        _this.sellerNameCrtl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__["AtlasFormControl"]('SellerDescription');
        _this.counterpartyReferenceCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__["AtlasFormControl"]('CounterpartyRef');
        _this.masterdataList = [_shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_8__["MasterDataProps"].Counterparties];
        _this.tradeImageDetails = [];
        _this.buyerCodePrivilege = false;
        _this.sellerCodePrivilege = false;
        _this.counterPartyReference = false;
        _this.counterpartyErrorMap = new Map()
            .set('required', 'Required *')
            .set('inDropdownList', 'Invalid entry. Client not in the list.');
        return _this;
    }
    CounterpartyFormComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.masterdataService
            .getMasterData(this.masterdataList)
            .subscribe(function (data) {
            _this.masterdata = data;
            _this.filteredBuyers = _this.masterdata.counterparties;
            _this.buyerCodeCtrl.valueChanges.subscribe(function (input) {
                _this.filterBuyers(input);
            });
            _this.filteredSellers = _this.masterdata.counterparties;
            _this.sellerCodeCtrl.valueChanges.subscribe(function (input) {
                _this.filterSellers(input);
            });
            _this.setValidators();
            _this.bindConfiguration();
        });
        if (this.route.snapshot.data['isImage'] === true) {
            this.isTradeImage = true;
        }
        // disabling this control as these are description and not to be edited
        this.buyerNameCtrl.disable();
        this.sellerNameCrtl.disable();
        this.checkCounterPartyPrivileges();
    };
    CounterpartyFormComponent.prototype.filterBuyers = function (input) {
        var _this = this;
        this.filteredBuyers = this.utilService.filterListforAutocomplete(input, this.masterdata.counterparties, ['counterpartyCode', 'description']);
        this.filteredBuyers = this.filteredBuyers.filter(function (counterparty) {
            return _this.sellerCodeCtrl.value !== counterparty;
        });
        if (this.buyerCodeCtrl.valid || !this.buyerCodeCtrl.value) {
            this.buyerCodeSelected(this.buyerCodeCtrl.value);
        }
    };
    CounterpartyFormComponent.prototype.filterSellers = function (input) {
        var _this = this;
        this.filteredSellers = this.utilService.filterListforAutocomplete(input, this.masterdata.counterparties, ['counterpartyCode', 'description']);
        this.filteredSellers = this.filteredSellers.filter(function (counterparty) {
            return _this.buyerCodeCtrl.value !== counterparty;
        });
        if (this.sellerCodeCtrl.valid || !this.sellerCodeCtrl.value) {
            this.sellerCodeSelected(this.sellerCodeCtrl.value);
        }
    };
    CounterpartyFormComponent.prototype.buyerCodeSelected = function (buyerCode) {
        if (!this.buyerCodeCtrl.valid || !buyerCode) {
            if (this.buyerNameCtrl.value) {
                this.buyerNameCtrl.patchValue('');
            }
            return;
        }
        var selectedBuyer = this.masterdata.counterparties.find(function (buyer) { return buyer.counterpartyCode === buyerCode.counterpartyCode; });
        if (selectedBuyer) {
            this.buyerNameCtrl.patchValue(selectedBuyer.description);
            if (this.selectedContractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_9__["ContractTypes"].Sale) {
                this.selectedCounterparty = selectedBuyer;
            }
        }
    };
    CounterpartyFormComponent.prototype.sellerCodeSelected = function (sellerCode) {
        if (!this.sellerCodeCtrl.valid || !sellerCode) {
            if (this.sellerNameCrtl.value) {
                this.sellerNameCrtl.patchValue('');
            }
            return;
        }
        var selectedSeller = this.masterdata.counterparties.find(function (seller) { return seller.counterpartyCode === sellerCode.counterpartyCode; });
        if (selectedSeller) {
            this.sellerNameCrtl.patchValue(selectedSeller.description);
            if (this.selectedContractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_9__["ContractTypes"].Purchase) {
                this.selectedCounterparty = selectedSeller;
            }
        }
    };
    CounterpartyFormComponent.prototype.setValidators = function () {
        this.buyerCodeCtrl.setValidators(Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_6__["inDropdownListValidator"])(this.masterdata.counterparties, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_15__["nameof"])('counterpartyCode')));
        this.sellerCodeCtrl.setValidators(Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_6__["inDropdownListValidator"])(this.masterdata.counterparties, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_15__["nameof"])('counterpartyCode')));
        this.counterpartyReferenceCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].maxLength(40));
        this.formGroup.updateValueAndValidity();
    };
    CounterpartyFormComponent.prototype.contractTypeSelected = function (contractType) {
        var company = this.companyManagerService.getCurrentCompany();
        if (!company || !company.counterpartyId) {
            return;
        }
        var defaultCounterparty = this.masterdata.counterparties.find(function (fb) { return fb.counterpartyID === company.counterpartyId; });
        this.selectedContractType = contractType;
        if (contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_9__["ContractTypes"].Purchase) {
            if (defaultCounterparty) {
                this.buyerCodeCtrl.setValue(defaultCounterparty);
                this.sellerCodeCtrl.setValue('');
                this.sellerNameCrtl.setValue('');
                this.buyerCodeCtrl.disable();
                this.sellerCodeCtrl.enable();
            }
        }
        if (contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_9__["ContractTypes"].Sale) {
            if (defaultCounterparty) {
                this.sellerCodeCtrl.setValue(defaultCounterparty);
                this.buyerCodeCtrl.setValue('');
                this.buyerNameCtrl.setValue('');
                this.sellerCodeCtrl.disable();
                this.buyerCodeCtrl.enable();
            }
        }
    };
    CounterpartyFormComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            buyerCodeCtrl: this.buyerCodeCtrl,
            buyerNameCtrl: this.buyerNameCtrl,
            sellerCodeCtrl: this.sellerCodeCtrl,
            sellerNameCrtl: this.sellerNameCrtl,
            counterpartyReferenceCtrl: this.counterpartyReferenceCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    CounterpartyFormComponent.prototype.initForm = function (entity, isEdit) {
        var _this = this;
        var tradeRecord = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_10__["SectionCompleteDisplayView"](entity);
        this.model = tradeRecord;
        if (this.model.buyerCode) {
            var selectedBuyer = this.masterdata.counterparties.filter(function (seller) { return seller.counterpartyCode === _this.model.buyerCode; });
            if (selectedBuyer.length > 0) {
                this.buyerCode = selectedBuyer;
                this.buyerCodeCtrl.patchValue(selectedBuyer[0]);
                this.buyerCodeSelected(selectedBuyer[0]);
            }
        }
        if (this.model.sellerCode) {
            var selectedSeller = this.masterdata.counterparties.filter(function (seller) { return seller.counterpartyCode === _this.model.sellerCode; });
            if (selectedSeller.length > 0) {
                this.sellerCode = selectedSeller;
                this.sellerCodeCtrl.patchValue(selectedSeller[0]);
                this.sellerCodeSelected(selectedSeller[0]);
            }
        }
        if (this.model.counterpartyReference != null) {
            this.formGroup.patchValue({ counterpartyReferenceCtrl: this.model.counterpartyReference });
        }
        if (isEdit) {
            if (this.model.type === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_9__["ContractTypes"][0]) {
                this.buyerCodeCtrl.disable();
            }
            else if (this.model.type === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_9__["ContractTypes"][1]) {
                this.sellerCodeCtrl.disable();
            }
        }
        if (!isEdit) {
            this.formGroup.disable();
        }
        else if (this.isTradeImage) {
            var contractType = _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_9__["ContractTypes"][Number(this.route.snapshot.queryParams.type)];
            if (contractType !== this.model.type) {
                if (this.sellerCode.length > 0) {
                    this.buyerCodeCtrl.patchValue(this.sellerCode[0]);
                }
                if (this.buyerCode.length > 0) {
                    this.sellerCodeCtrl.patchValue(this.buyerCode[0]);
                }
            }
            this.buyerCodeCtrl.enable();
            this.sellerCodeCtrl.enable();
            if (contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_9__["ContractTypes"][0]) {
                this.buyerCodeCtrl.disable();
            }
            else if (contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_9__["ContractTypes"][1]) {
                this.sellerCodeCtrl.disable();
            }
            this.tradeImageDetails = JSON.parse(this.route.snapshot.queryParams.tradeImageDetails);
            if (this.tradeImageDetails && this.tradeImageDetails.length > 0) {
                var checkBuyerIsImage = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'BuyerId'; });
                if (checkBuyerIsImage && !checkBuyerIsImage.isCopy) {
                    this.buyerCodeCtrl.patchValue(null);
                    this.buyerNameCtrl.patchValue(null);
                }
                var checkSellerIdIsImage = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'SellerId'; });
                if (checkSellerIdIsImage && !checkSellerIdIsImage.isCopy) {
                    this.sellerCodeCtrl.patchValue(null);
                    this.sellerNameCrtl.patchValue(null);
                }
                var checkCounterpartyRefIsImage = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'CounterpartyRef'; });
                if (checkCounterpartyRefIsImage && !checkCounterpartyRefIsImage.isEdit) {
                    this.counterpartyReferenceCtrl.disable();
                }
                if (checkCounterpartyRefIsImage && !checkCounterpartyRefIsImage.isCopy) {
                    this.counterpartyReferenceCtrl.patchValue(null);
                }
                else {
                    this.counterpartyReferenceCtrl.patchValue(this.model.counterpartyReference);
                }
            }
        }
        else {
            if (this.model.invoiceReference &&
                this.authorizationService.getPermissionLevel(this.company, 'Trades', 'Physicals', 'SuperTradeEdition') <= _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_16__["PermissionLevels"].None) {
                this.buyerCodeCtrl.disable();
                this.sellerCodeCtrl.disable();
            }
        }
        return entity;
    };
    CounterpartyFormComponent.prototype.populateEntity = function (entity) {
        var section = entity;
        section.sellerCode = this.sellerCodeCtrl.value.counterpartyCode;
        section.buyerCode = this.buyerCodeCtrl.value.counterpartyCode;
        section.counterpartyReference = this.counterpartyReferenceCtrl.value;
        return section;
    };
    CounterpartyFormComponent.prototype.checkCounterPartyPrivileges = function () {
        var _this = this;
        this.company = this.route.snapshot.paramMap.get('company');
        this.securityService.isSecurityReady().subscribe(function () {
            if (_this.authorizationService.isPrivilegeAllowed(_this.company, 'Trades') &&
                _this.authorizationService.isPrivilegeAllowed(_this.company, 'MainTab')) {
                _this.buyerCodePrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'BuyerCode');
                _this.sellerCodePrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'SellerCode');
                _this.counterPartyReference = _this.authorizationService.isPrivilegeAllowed(_this.company, 'CounterPartyReference');
            }
        });
        if (!this.buyerCodePrivilege) {
            this.buyerCodeCtrl.disable();
            this.buyerNameCtrl.disable();
        }
        if (!this.sellerCodePrivilege) {
            this.sellerCodeCtrl.disable();
            this.sellerNameCrtl.disable();
        }
        if (!this.counterPartyReference) {
            this.counterpartyReferenceCtrl.disable();
        }
    };
    CounterpartyFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-counterparty-form-component',
            template: __webpack_require__(/*! ./counterparty-form-component.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/counterparty-form-component/counterparty-form-component.component.html"),
            styles: [__webpack_require__(/*! ./counterparty-form-component.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/counterparty-form-component/counterparty-form-component.component.scss")],
            providers: [_shared_services_masterdata_counterparty_data_loader__WEBPACK_IMPORTED_MODULE_13__["CounterPartyDataLoader"]],
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_12__["MasterdataService"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_15__["UtilService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_11__["FormConfigurationProviderService"],
            _shared_services_masterdata_counterparty_data_loader__WEBPACK_IMPORTED_MODULE_13__["CounterPartyDataLoader"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_4__["CompanyManagerService"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__["AuthorizationService"],
            _shared_services_security_service__WEBPACK_IMPORTED_MODULE_14__["SecurityService"]])
    ], CounterpartyFormComponent);
    return CounterpartyFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/current-trade-form-component/current-trade-form-component.component.html":
/*!**********************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/current-trade-form-component/current-trade-form-component.component.html ***!
  \**********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"trade-capture-card current-trade-form\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h2>Current Trade</h2>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\">\r\n            <mat-slide-toggle value=\"false\"\r\n                              [formControl]=\"adjustWeightToggleCtrl\"\r\n                              (change)=\"toggleAdjustWeight()\">Adjust Contract</mat-slide-toggle>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\">\r\n            <mat-slide-toggle [formControl]=\"allocatedResidualSplitCtrl\"\r\n                              (change)=\"toggleAllocatedResidualSplit()\">Create Allocated Residual Split</mat-slide-toggle>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\"\r\n             class=\"created-allocated-residual-split-dropdown\">\r\n            <mat-form-field fxFlex=\"30%\">\r\n                <mat-select [formControl]=\"allocatedResidualSplitDropDownCtrl\">\r\n                    <mat-option value=\"Leave status as is\">Leave status as is</mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\">\r\n            <mat-slide-toggle [formControl]=\"unallocatedResidualSplitCtrl\"\r\n                              (change)=\"toggleUnallocatedResidualSplit()\">Create Unallocated Residual Split</mat-slide-toggle>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/current-trade-form-component/current-trade-form-component.component.scss":
/*!**********************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/current-trade-form-component/current-trade-form-component.component.scss ***!
  \**********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/current-trade-form-component/current-trade-form-component.component.ts":
/*!********************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/current-trade-form-component/current-trade-form-component.component.ts ***!
  \********************************************************************************************************************************************************/
/*! exports provided: CurrentTradeFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CurrentTradeFormComponent", function() { return CurrentTradeFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/enums/contract-type.enum */ "./Client/app/shared/enums/contract-type.enum.ts");
/* harmony import */ var _shared_enums_current_trade_option_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/enums/current-trade-option-enum */ "./Client/app/shared/enums/current-trade-option-enum.ts");
/* harmony import */ var _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/enums/invoicing-status.enum */ "./Client/app/shared/enums/invoicing-status.enum.ts");
/* harmony import */ var _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/models/section-complete-display-view */ "./Client/app/shared/models/section-complete-display-view.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};













var CurrentTradeFormComponent = /** @class */ (function (_super) {
    __extends(CurrentTradeFormComponent, _super);
    function CurrentTradeFormComponent(formBuilder, masterdataService, utilService, tradingService, formConfigurationProvider, route) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.masterdataService = masterdataService;
        _this.utilService = utilService;
        _this.tradingService = tradingService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.route = route;
        _this.checkAllocatedResidualSplitChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.adjustWeightToggleCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('AdjustWeight');
        _this.allocatedResidualSplitCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('AllocatedResidualSplit');
        _this.allocatedResidualSplitDropDownCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('AllocatedResidualSplitDropDown');
        _this.unallocatedResidualSplitCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('UnallocatedResidualSplit');
        _this.model = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_8__["SectionCompleteDisplayView"]();
        return _this;
    }
    CurrentTradeFormComponent.prototype.ngOnInit = function () {
        this.allocatedResidualSplitDropDownCtrl.setValue('Leave status as is');
        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;
    };
    CurrentTradeFormComponent.prototype.initForm = function (entity, isEdit) {
        this.sectionModel = entity;
        // if (!isEdit) {
        this.adjustWeightToggleCtrl.disable();
        this.allocatedResidualSplitCtrl.disable();
        this.allocatedResidualSplitDropDownCtrl.disable();
        this.unallocatedResidualSplitCtrl.disable();
        // } else {
        //    if (!this.sectionModel.allocatedTo) {
        this.allocatedResidualSplitDropDownCtrl.disable();
        this.allocatedResidualSplitCtrl.disable();
        //    }
        // this.enableDisableControl();
        // }
        return entity;
    };
    CurrentTradeFormComponent.prototype.resetControlOnHigherValue = function () {
        this.adjustWeightToggleCtrl.setValue(false);
        this.unallocatedResidualSplitCtrl.setValue(false);
        this.allocatedResidualSplitCtrl.setValue(false);
        this.allocatedResidualSplitDropDownCtrl.disable();
        this.unallocatedResidualSplitCtrl.disable();
        this.allocatedResidualSplitCtrl.disable();
        this.adjustWeightToggleCtrl.disable();
        this.enableDisableControl(true);
    };
    CurrentTradeFormComponent.prototype.enableDisableControl = function (isQuantityIncrease) {
        if (this.isSaleOrPurchase(this.sectionModel.contractType)) {
            if (!(this.sectionModel.allocatedTo)) {
                if (this.isTradeUninvoice(this.sectionModel)) {
                    if (isQuantityIncrease) {
                        this.adjustWeightToggleCtrl.setValue(true);
                        this.adjustWeightToggleCtrl.enable();
                    }
                    else {
                        this.adjustWeightToggleCtrl.setValue(true);
                        this.adjustWeightToggleCtrl.enable();
                        this.dataVersionId ? this.unallocatedResidualSplitCtrl.disable() : this.unallocatedResidualSplitCtrl.enable();
                    }
                }
                else if (this.isTradeFinalInvoiceRequiredOrFinalized(this.sectionModel)) {
                    if (!isQuantityIncrease) {
                        this.dataVersionId ? this.unallocatedResidualSplitCtrl.setValue(false) :
                            this.unallocatedResidualSplitCtrl.setValue(true);
                        this.dataVersionId ? this.unallocatedResidualSplitCtrl.disable() : this.unallocatedResidualSplitCtrl.enable();
                    }
                }
            }
            else {
                if (this.isTradeUninvoice(this.sectionModel)
                    && this.isAllocatedTradeUninvoice(this.sectionModel)) {
                    if (!isQuantityIncrease) {
                        this.adjustWeightToggleCtrl.setValue(true);
                        this.unallocatedResidualSplitCtrl.setValue(false);
                        this.allocatedResidualSplitCtrl.setValue(false);
                        this.allocatedResidualSplitDropDownCtrl.disable();
                        this.dataVersionId ? this.unallocatedResidualSplitCtrl.disable() : this.unallocatedResidualSplitCtrl.enable();
                        this.dataVersionId ? this.allocatedResidualSplitCtrl.disable() : this.allocatedResidualSplitCtrl.enable();
                        this.adjustWeightToggleCtrl.enable();
                    }
                    else {
                        this.adjustWeightToggleCtrl.setValue(true);
                        this.adjustWeightToggleCtrl.enable();
                    }
                }
                else if (this.isTradeUninvoice(this.sectionModel)
                    && this.isAllocatedTradeFinalInvoiceRequiredOrFinalized(this.sectionModel) && !isQuantityIncrease) {
                    this.dataVersionId ? this.allocatedResidualSplitCtrl.setValue(false) :
                        this.allocatedResidualSplitCtrl.setValue(true);
                    this.dataVersionId ? this.allocatedResidualSplitCtrl.disable() : this.allocatedResidualSplitCtrl.enable();
                }
                else if (this.isTradeFinalInvoiceRequiredOrFinalized(this.sectionModel)
                    && this.isAllocatedTradeUninvoice(this.sectionModel) && !isQuantityIncrease) {
                    this.dataVersionId ? this.allocatedResidualSplitCtrl.disable() : this.allocatedResidualSplitCtrl.enable();
                    this.dataVersionId ? this.allocatedResidualSplitCtrl.setValue(false) :
                        this.allocatedResidualSplitCtrl.setValue(true);
                }
                else if (this.isTradeFinalInvoiceRequiredOrFinalized(this.sectionModel)
                    && this.isAllocatedTradeFinalInvoiceRequiredOrFinalized(this.sectionModel) && !isQuantityIncrease) {
                    this.allocatedResidualSplitCtrl.enable();
                    this.allocatedResidualSplitCtrl.setValue(true);
                }
            }
        }
    };
    CurrentTradeFormComponent.prototype.resetControlonLowerValue = function () {
        this.adjustWeightToggleCtrl.setValue(false);
        this.unallocatedResidualSplitCtrl.setValue(false);
        this.allocatedResidualSplitCtrl.setValue(false);
        this.allocatedResidualSplitDropDownCtrl.disable();
        this.unallocatedResidualSplitCtrl.disable();
        this.allocatedResidualSplitCtrl.disable();
        this.adjustWeightToggleCtrl.disable();
        this.enableDisableControl(false);
    };
    CurrentTradeFormComponent.prototype.resetAllocatedResidualSplit = function (isChecked) {
        this.allocatedResidualSplitCtrl.setValue(isChecked);
        this.allocatedResidualSplitDropDownCtrl.disable();
        if (isChecked) {
            this.adjustWeightToggleCtrl.setValue(false);
            this.unallocatedResidualSplitCtrl.setValue(false);
            this.dataVersionId ? this.allocatedResidualSplitDropDownCtrl.disable() : this.allocatedResidualSplitDropDownCtrl.enable();
        }
    };
    CurrentTradeFormComponent.prototype.resetControl = function (isAllocated) {
        this.isAllocated = isAllocated;
        this.allocatedResidualSplitDropDownCtrl.disable();
        this.adjustWeightToggleCtrl.setValue(false);
        this.unallocatedResidualSplitCtrl.setValue(false);
        this.allocatedResidualSplitCtrl.setValue(false);
        this.adjustWeightToggleCtrl.enable();
        this.dataVersionId ? this.unallocatedResidualSplitCtrl.disable() : this.unallocatedResidualSplitCtrl.enable();
        this.dataVersionId ? this.allocatedResidualSplitCtrl.disable() : this.allocatedResidualSplitCtrl.enable();
        if (!isAllocated) {
            this.allocatedResidualSplitCtrl.disable();
        }
        // this.enableDisableControl();
    };
    CurrentTradeFormComponent.prototype.toggleAdjustWeight = function () {
        if (this.adjustWeightToggleCtrl.value) {
            this.allocatedResidualSplitCtrl.setValue(false);
            this.unallocatedResidualSplitCtrl.setValue(false);
            this.allocatedResidualSplitDropDownCtrl.disable();
        }
        this.toggleAllocatedResidualSplit();
    };
    CurrentTradeFormComponent.prototype.toggleAllocatedResidualSplit = function () {
        this.allocatedResidualSplitDropDownCtrl.disable();
        if (this.allocatedResidualSplitCtrl.value) {
            this.adjustWeightToggleCtrl.setValue(false);
            this.unallocatedResidualSplitCtrl.setValue(false);
            this.allocatedResidualSplitDropDownCtrl.enable();
        }
        this.checkAllocatedResidualSplitChange.emit(this.allocatedResidualSplitCtrl.value);
    };
    CurrentTradeFormComponent.prototype.toggleUnallocatedResidualSplit = function () {
        if (this.unallocatedResidualSplitCtrl.value) {
            this.allocatedResidualSplitCtrl.setValue(false);
            this.adjustWeightToggleCtrl.setValue(false);
            this.allocatedResidualSplitDropDownCtrl.disable();
        }
        this.toggleAllocatedResidualSplit();
    };
    CurrentTradeFormComponent.prototype.checkQuantityChange = function (quantity) {
        this.adjustWeightToggleCtrl.enable();
        this.adjustWeightToggleCtrl.setValue(true);
        this.allocatedResidualSplitCtrl.disable();
        this.allocatedResidualSplitDropDownCtrl.disable();
        if (quantity.newValue > quantity.oldValue) {
            this.unallocatedResidualSplitCtrl.disable();
        }
        else if (quantity.newValue < quantity.oldValue) {
            this.dataVersionId ? this.unallocatedResidualSplitCtrl.disable() : this.unallocatedResidualSplitCtrl.enable();
        }
    };
    CurrentTradeFormComponent.prototype.checkAnyToggleSelected = function () {
        if ((this.adjustWeightToggleCtrl.value) || (this.allocatedResidualSplitCtrl.value) || (this.unallocatedResidualSplitCtrl.value)) {
            return true;
        }
        return false;
    };
    CurrentTradeFormComponent.prototype.isSaleOrPurchase = function (type) {
        if ((type === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_5__["ContractTypes"].Purchase
            || type === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_5__["ContractTypes"].Sale)) {
            return true;
        }
        return false;
    };
    CurrentTradeFormComponent.prototype.isTradeFinalInvoiceRequiredOrFinalized = function (tradeRecord) {
        if (tradeRecord.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoicingStatus"].FinalInvoiceRequired
            || tradeRecord.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoicingStatus"].Finalized) {
            return true;
        }
        return false;
    };
    CurrentTradeFormComponent.prototype.isTradeUninvoice = function (tradeRecord) {
        if (tradeRecord.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoicingStatus"].Uninvoiced
            || tradeRecord.invoicingStatusId === null) {
            return true;
        }
        return false;
    };
    CurrentTradeFormComponent.prototype.isAllocatedTradeFinalInvoiceRequiredOrFinalized = function (tradeRecord) {
        if (tradeRecord.allocatedTo.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoicingStatus"].FinalInvoiceRequired
            || tradeRecord.allocatedTo.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoicingStatus"].Finalized) {
            return true;
        }
        return false;
    };
    CurrentTradeFormComponent.prototype.isAllocatedTradeUninvoice = function (tradeRecord) {
        if (tradeRecord.allocatedTo.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoicingStatus"].Uninvoiced
            || tradeRecord.allocatedTo.invoicingStatusId === null) {
            return true;
        }
        return false;
    };
    CurrentTradeFormComponent.prototype.populateEntity = function (entity) {
        var section = entity;
        section.currentTradeOptionId = _shared_enums_current_trade_option_enum__WEBPACK_IMPORTED_MODULE_6__["CurrentTradeOption"].NoAction;
        if (this.adjustWeightToggleCtrl.value) {
            section.currentTradeOptionId = _shared_enums_current_trade_option_enum__WEBPACK_IMPORTED_MODULE_6__["CurrentTradeOption"].AdjustContract;
        }
        else if (this.allocatedResidualSplitCtrl.value) {
            section.currentTradeOptionId = _shared_enums_current_trade_option_enum__WEBPACK_IMPORTED_MODULE_6__["CurrentTradeOption"].CreateAllocatedResidualSplit;
        }
        else if (this.unallocatedResidualSplitCtrl.value) {
            section.currentTradeOptionId = _shared_enums_current_trade_option_enum__WEBPACK_IMPORTED_MODULE_6__["CurrentTradeOption"].CreateUnallocatedResidualSplit;
        }
        return section;
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CurrentTradeFormComponent.prototype, "checkAllocatedResidualSplitChange", void 0);
    CurrentTradeFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-current-trade-form-component',
            template: __webpack_require__(/*! ./current-trade-form-component.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/current-trade-form-component/current-trade-form-component.component.html"),
            styles: [__webpack_require__(/*! ./current-trade-form-component.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/current-trade-form-component/current-trade-form-component.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_10__["MasterdataService"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_12__["UtilService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_11__["TradingService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_9__["FormConfigurationProviderService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"]])
    ], CurrentTradeFormComponent);
    return CurrentTradeFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/document-status-form-component/document-status-form-component.component.html":
/*!**************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/document-status-form-component/document-status-form-component.component.html ***!
  \**************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card *ngIf=\"!hasEmptyState\"\r\n          class=\"trade-capture-card\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h2>Contract & Document Status</h2>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"right start\"\r\n             fxLayoutGap=\"5%\">\r\n            <mat-form-field fxFlex=\"40%\">\r\n                <input matInput\r\n                       [matDatepicker]=\"lastDocumentIssuedDatePicker\"\r\n                       placeholder=\"Contract issued\"\r\n                       autocomplete=\"off\"\r\n                       [formControl]='lastDocumentIssuedDateCtrl'>\r\n                <mat-datepicker-toggle matSuffix\r\n                                       [for]=\"lastDocumentIssuedDatePicker\"></mat-datepicker-toggle>\r\n                <mat-datepicker #lastDocumentIssuedDatePicker></mat-datepicker>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field fxFlex=\"40%\">\r\n                <input matInput\r\n                       [matDatepicker]=\"contractSentDatePicker\"\r\n                       placeholder=\"Contract sent\"\r\n                       autocomplete=\"off\"\r\n                       [formControl]='contractSentDateCtrl'>\r\n                <mat-datepicker-toggle matSuffix\r\n                                       [for]=\"contractSentDatePicker\"></mat-datepicker-toggle>\r\n                <mat-datepicker #contractSentDatePicker></mat-datepicker>\r\n            </mat-form-field>\r\n        </div>\r\n\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"right start\"\r\n             fxLayoutGap=\"5%\">\r\n            <mat-form-field fxFlex=\"40%\">\r\n                <input matInput\r\n                       [matDatepicker]=\"lastEmailReceivedDatePicker\"\r\n                       placeholder=\"Email received\"\r\n                       autocomplete=\"off\"\r\n                       [formControl]='lastEmailReceivedDateCtrl'>\r\n                <mat-datepicker-toggle matSuffix\r\n                                       [for]=\"lastEmailReceivedDatePicker\"></mat-datepicker-toggle>\r\n                <mat-datepicker #lastEmailReceivedDatePicker></mat-datepicker>\r\n            </mat-form-field>\r\n            <mat-form-field fxFlex=\"40%\">\r\n                <input matInput\r\n                       [matDatepicker]=\"contractReturnedDatePicker\"\r\n                       placeholder=\"Contract returned\"\r\n                       autocomplete=\"off\"\r\n                       [formControl]='contractReturnedDateCtrl'>\r\n                <mat-datepicker-toggle matSuffix\r\n                                       [for]=\"contractReturnedDatePicker\"></mat-datepicker-toggle>\r\n                <mat-datepicker #contractReturnedDatePicker></mat-datepicker>\r\n            </mat-form-field>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>\r\n<atlas-empty-state *ngIf=\"hasEmptyState\"\r\n                   title=\"No Document Status\"\r\n                   [message]=\"documentEmptyMessage\"></atlas-empty-state>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/document-status-form-component/document-status-form-component.component.scss":
/*!**************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/document-status-form-component/document-status-form-component.component.scss ***!
  \**************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/document-status-form-component/document-status-form-component.component.ts":
/*!************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/document-status-form-component/document-status-form-component.component.ts ***!
  \************************************************************************************************************************************************************/
/*! exports provided: DocumentStatusFormComponentComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DocumentStatusFormComponentComponent", function() { return DocumentStatusFormComponentComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/models/section-complete-display-view */ "./Client/app/shared/models/section-complete-display-view.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









var DocumentStatusFormComponentComponent = /** @class */ (function (_super) {
    __extends(DocumentStatusFormComponentComponent, _super);
    function DocumentStatusFormComponentComponent(formBuilder, route, formConfigurationProvider, authorizationService, securityService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.route = route;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.authorizationService = authorizationService;
        _this.securityService = securityService;
        _this.lastDocumentIssuedDateCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('lastDocumentIssuedDateCtrl');
        _this.otherReferenceCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('otherReferenceCtrl');
        _this.isTradeImage = false;
        _this.contractIssuedOnPrivilege = false;
        _this.otherReferencePrivilege = false;
        _this.hasEmptyState = true;
        _this.isEmpty = true;
        _this.documentEmptyMessage = 'No document has been issued yet';
        _this.lastEmailReceivedDateCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('lastEmailReceivedDateCtrl');
        _this.contractReturnedDateCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('contractReturnedDateCtrl');
        _this.contractSentDateCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('contractSentDateCtrl');
        return _this;
    }
    DocumentStatusFormComponentComponent.prototype.ngOnInit = function () {
        if (this.route.snapshot.data['isImage'] === true) {
            this.isTradeImage = true;
        }
        this.checkDocumentStatusFormPrivileges();
    };
    DocumentStatusFormComponentComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            lastDocumentIssuedDateCtrl: this.lastDocumentIssuedDateCtrl,
            lastEmailReceivedDateCtrl: this.lastEmailReceivedDateCtrl,
            contractReturnedDateCtrl: this.contractReturnedDateCtrl,
            contractSentDateCtrl: this.contractSentDateCtrl,
            otherReferenceCtrl: this.otherReferenceCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    DocumentStatusFormComponentComponent.prototype.initForm = function (entity, isEdit) {
        var tradeRecord = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_6__["SectionCompleteDisplayView"](entity);
        this.model = tradeRecord;
        if (this.model.lastDocumentIssuedDate != null) {
            this.formGroup.patchValue({ lastDocumentIssuedDateCtrl: this.model.lastDocumentIssuedDate });
            this.isEmpty = false;
        }
        if (this.model.lastEmailReceivedDate != null) {
            this.formGroup.patchValue({ lastEmailReceivedDateCtrl: this.model.lastEmailReceivedDate });
            this.isEmpty = false;
        }
        if (this.model.contractReturnedDate != null) {
            this.formGroup.patchValue({ contractReturnedDateCtrl: this.model.contractReturnedDate });
            this.isEmpty = false;
        }
        if (this.model.contractSentDate != null) {
            this.formGroup.patchValue({ contractSentDateCtrl: this.model.contractSentDate });
            this.isEmpty = false;
        }
        if (!isEdit) {
            this.formGroup.disable();
        }
        var reference = this.model.reference;
        if (this.isTradeImage) {
            this.otherReferenceCtrl.patchValue(reference);
            this.lastDocumentIssuedDateCtrl.disable();
            this.lastEmailReceivedDateCtrl.disable();
            this.contractReturnedDateCtrl.disable();
            this.contractSentDateCtrl.disable();
            this.isEmpty = false;
        }
        else if (this.model.otherReference) {
            this.otherReferenceCtrl.patchValue(this.model.otherReference);
            this.isEmpty = false;
        }
        this.hasEmptyState = this.isEmpty && !isEdit;
    };
    DocumentStatusFormComponentComponent.prototype.populateEntity = function (entity) {
        var section = entity;
        section.lastDocumentIssuedDate = this.lastDocumentIssuedDateCtrl.value;
        section.lastEmailReceivedDate = this.lastEmailReceivedDateCtrl.value;
        section.contractReturnedDate = this.contractReturnedDateCtrl.value;
        section.contractSentDate = this.contractSentDateCtrl.value;
        section.otherReference = this.otherReferenceCtrl.value;
        return section;
    };
    DocumentStatusFormComponentComponent.prototype.checkDocumentStatusFormPrivileges = function () {
        var _this = this;
        this.company = this.route.snapshot.paramMap.get('company');
        this.securityService.isSecurityReady().subscribe(function () {
            if (_this.authorizationService.isPrivilegeAllowed(_this.company, 'Trades') && _this.authorizationService.isPrivilegeAllowed(_this.company, 'StatusTab')) {
                _this.contractIssuedOnPrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'ContractIssuedOn');
                _this.otherReferencePrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'OtherReference');
            }
        });
        if (!this.contractIssuedOnPrivilege) {
            this.lastDocumentIssuedDateCtrl.disable();
        }
        if (!this.otherReferencePrivilege) {
            this.otherReferenceCtrl.disable();
        }
    };
    DocumentStatusFormComponentComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-document-status-form-component',
            template: __webpack_require__(/*! ./document-status-form-component.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/document-status-form-component/document-status-form-component.component.html"),
            styles: [__webpack_require__(/*! ./document-status-form-component.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/document-status-form-component/document-status-form-component.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_7__["FormConfigurationProviderService"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__["AuthorizationService"],
            _shared_services_security_service__WEBPACK_IMPORTED_MODULE_8__["SecurityService"]])
    ], DocumentStatusFormComponentComponent);
    return DocumentStatusFormComponentComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/header-form-component/header-form-component.component.html":
/*!********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/header-form-component/header-form-component.component.html ***!
  \********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<header class=\"header-background trade \"\r\n        [class.trade-capture]=\"!isShow\">\r\n    <div class=\"header-container\">\r\n        <div class=\"header-content\">\r\n            <div fxLayout=\"column\"\r\n                 fxLayoutAlign=\"space-between stretch\"\r\n                 class=\"header-height\">\r\n                <div fxLayout=\"row\"\r\n                     fxLayoutAlign=\"start stretch\"\r\n                     fxLayoutGap=\"1%\">\r\n                    <mat-button-toggle-group class=\"toggle-group\"\r\n                                             name=\"toggleStyle\"\r\n                                             aria-label=\"Contract Type\"\r\n                                             [formControl]='contractTypeCtrl'\r\n                                             (change)='contractTypeChanged()'\r\n                                             *ngIf=\"!isShow\">\r\n                        <mat-button-toggle [value]=\"ContractType.Purchase\">Purchase</mat-button-toggle>\r\n                        <mat-button-toggle [value]=\"ContractType.Sale\">Sale</mat-button-toggle>\r\n                    </mat-button-toggle-group>\r\n                    <h2 *ngIf=\"isShow\"\r\n                        class=\"trade-view-title\">\r\n                        Trade\r\n                        <label>{{contractReference}}</label>\r\n                    </h2>\r\n                    <div fxFlex=\"50%\"\r\n                         class=\"custom-form\"\r\n                         [class.required-field]=\"contractReferenceCtrl.isRequired\">\r\n                        <mat-form-field *ngIf=\"!isShow || isEditContract\"\r\n                                        fxFlex=\"140px\">\r\n                            <input matInput\r\n                                   placeholder=\"Contract Reference\"\r\n                                   [required]=\"contractReferenceCtrl.isRequired\"\r\n                                   [formControl]='contractReferenceCtrl'\r\n                                   autocomplete=\"off\">\r\n                            <mat-error *ngIf=\"contractReferenceCtrl.hasError('pattern')\">\r\n                                Special characters are not allowed\r\n                            </mat-error>\r\n                            <mat-error *ngIf=\"contractReferenceCtrl.hasError('maxlength')\">\r\n                                Contract Ref should be at most 7 characters long\r\n                            </mat-error>\r\n                            <mat-error *ngIf=\"contractReferenceCtrl.hasError('notUnique')\">\r\n                                Contract Ref already exists\r\n                            </mat-error>\r\n                            <mat-error *ngIf=\"contractReferenceCtrl.hasError('required')\">\r\n                                This field is required\r\n                            </mat-error>\r\n                            <mat-hint *ngIf=\"contractReferenceCtrl.isRequired &&  contractReferenceCtrl.enabled\">\r\n                                Required *\r\n                            </mat-hint>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <mat-chip-list *ngIf=\"isShow\"\r\n                                   class=\"chip-list\"\r\n                                   fxFlex>\r\n                        <mat-chip selected\r\n                                  disabled>\r\n                            {{contractType}}\r\n                        </mat-chip>\r\n                        <mat-chip selected\r\n                                  disabled\r\n                                  [ngClass]=\"contractStatus == 'Approved' ? 'mat-approved': 'mat-error'\">\r\n                            {{contractStatus}}\r\n                        </mat-chip>\r\n                        <mat-chip selected\r\n                                  disabled\r\n                                  [ngClass]=\"status == 'Realized' ? 'mat-approved': 'mat-error'\">\r\n                            {{status}}\r\n                        </mat-chip>\r\n                        <mat-chip selected\r\n                                  disabled\r\n                                  [ngClass]=\"openCloseStatus != 'Open' ? 'mat-error' : 'mat-approved'\">\r\n                            {{openCloseStatus}}\r\n                        </mat-chip>\r\n                        <mat-chip *ngIf=\"isCancelled\"\r\n                                  selected\r\n                                  disabled\r\n                                  class=\"mat-error\">\r\n                            {{tradeCancelledStatus}}\r\n                        </mat-chip>\r\n                    </mat-chip-list>\r\n                </div>\r\n                <div fxLayout=\"row\"\r\n                     fxLayoutAlign=\"start end\"\r\n                     fxLayoutGap=\"1%\"\r\n                     class=\"header-meta\">\r\n                    <mat-form-field fxFlex=\"10%\">\r\n                        <input matInput\r\n                               [required]=\"contractDateCtrl.isRequired\"\r\n                               [matDatepicker]=\"contractDatePicker\"\r\n                               placeholder=\"Contract Date\"\r\n                               [formControl]='contractDateCtrl'\r\n                               (dateChange)='ifContractDateSelected()'\r\n                               autocomplete=\"off\">\r\n                        <mat-datepicker-toggle matSuffix\r\n                                               [for]=\"contractDatePicker\"></mat-datepicker-toggle>\r\n                        <mat-datepicker #contractDatePicker></mat-datepicker>\r\n                        <mat-error *ngIf=\"contractDateCtrl.hasError('required')\">\r\n                            This field is required\r\n                        </mat-error>\r\n                        <mat-error *ngIf=\"contractDateCtrl.hasError('isDateValid')\">\r\n                            Date cannot be in the future\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                    <div class=\"custom-form\"\r\n                         fxFlex=\"10%\"\r\n                         [class.displayMode]=\"!traderCtrl.enabled\"\r\n                         [class.isEmpty]=\"!traderCtrl.value\"\r\n                         [class.required-field]=\"traderCtrl.isRequired\">\r\n                        <mat-form-field>\r\n                            <input matInput\r\n                                   placeholder=\"Trader\"\r\n                                   [required]=\"traderCtrl.isRequired\"\r\n                                   [matAutocomplete]=\"traders\"\r\n                                   [formControl]=\"traderCtrl\"\r\n                                   [matTooltip]=\"'Trade Owners'\"\r\n                                   autocomplete=\"off\">\r\n                            <mat-autocomplete #traders=\"matAutocomplete\"\r\n                                              [panelWidth]=\"panelSize\"\r\n                                              [displayWith]=\"displayTrader.bind(this)\">\r\n                                <mat-option *ngFor=\"let trader of filteredTradeOwners\"\r\n                                            [value]=\"trader.userId\">\r\n                                    {{ trader.samAccountName }} | {{trader.displayName}}\r\n                                </mat-option>\r\n                            </mat-autocomplete>\r\n                            <mat-error *ngIf=\"traderCtrl.hasError('required')\">\r\n                                This field is required\r\n                            </mat-error>\r\n                            <mat-error *ngIf=\"traderCtrl.hasError('inDropdownList')\">\r\n                                {{ getTraderErrorMessageInDropdownList() }}\r\n                            </mat-error>\r\n                            <mat-hint *ngIf=\"traderCtrl.isRequired &&  traderCtrl.enabled\">\r\n                                Required *\r\n                            </mat-hint>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"10%\">\r\n                        <atlas-masterdata-user-preferences-input [isEditable]=\"!isShow || isEditable\"\r\n                                                                 [fieldControl]=\"departmentCodeCtrl\"\r\n                                                                 [options]=\"filteredDepartments\"\r\n                                                                 label=\"Department Code\"\r\n                                                                 displayProperty=\"departmentCode\"\r\n                                                                 [selectProperties]=\"['departmentCode', 'description']\"\r\n                                                                 [errorMap]=\"departmentErrorMap\"\r\n                                                                 lightBoxTitle=\"Results for Department\"\r\n                                                                 gridId=\"departmentsGrid\"\r\n                                                                 (optionSelected)=\"departmentCodeSelected($event)\"\r\n                                                                 [dataLoader]=\"departmentDataLoader\">\r\n                        </atlas-masterdata-user-preferences-input>\r\n                    </div>\r\n\r\n                    <atlas-form-input fxFlex=\"10%\"\r\n                                      [fieldControl]=\"departmentDescriptionCtrl\"\r\n                                      [isEditable]=\"isInputField\"\r\n                                      [label]=\"'Department Description'\">\r\n                    </atlas-form-input>\r\n\r\n                    <!--------Creator-->\r\n                    <mat-form-field fxFlex=\"10%\"\r\n                                    *ngIf=\"isShow\">\r\n                        <input matInput\r\n                               placeholder=\"Creator\"\r\n                               disabled=true\r\n                               [formControl]=\"creatorCtrl\"\r\n                               autocomplete=\"off\"\r\n                               value={{createdBy}}>\r\n                    </mat-form-field>\r\n\r\n                    <!-------Created On-->\r\n                    <mat-form-field fxFlex=\"10%\"\r\n                                    *ngIf=\"isShow\">\r\n                        <input matInput\r\n                               [matDatepicker]=\"createdOnPicker\"\r\n                               placeholder=\"Created On\"\r\n                               autocomplete=\"off\"\r\n                               [formControl]='createdOnCtrl'>\r\n                        <mat-datepicker-toggle matSuffix\r\n                                               [for]=\"createdOnPicker\"></mat-datepicker-toggle>\r\n                        <mat-datepicker #createdOnPicker></mat-datepicker>\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</header>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/header-form-component/header-form-component.component.scss":
/*!********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/header-form-component/header-form-component.component.scss ***!
  \********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".header-background {\n  min-height: 120px; }\n\n.header-container {\n  height: 120px; }\n\n.header-content {\n  padding: 16px 30px 0px; }\n\n.header-height {\n  height: 100px; }\n\ndiv.mat-form-field-infix {\n  padding: 0px;\n  border-top: none !important; }\n\n.mat-form-field-wrapper {\n  padding-bottom: 1em; }\n\n.mat-form-field-infix {\n  padding: 0px 0px 5px 0px; }\n\n.header-background.trade {\n  display: table;\n  height: 100px;\n  width: 100%;\n  background: bottom/cover url(\"/assets/img/pattern-small.jpg\") no-repeat; }\n\n.header-background.trade.trade-capture {\n    background: top/contain url(\"/assets/img/luke-waves-gray.svg\") no-repeat;\n    background-position-x: right;\n    background-color: white; }\n\n.header-background.trade.trade-capture .header-container {\n      background: none; }\n\n.header-background.trade.trade-capture .header-container h2,\n      .header-background.trade.trade-capture .header-container .mat-input-element:disabled,\n      .header-background.trade.trade-capture .header-container label,\n      .header-background.trade.trade-capture .header-container span,\n      .header-background.trade.trade-capture .header-container .mat-form-field {\n        color: #332f30; }\n\n.header-background.trade.trade-capture .header-meta {\n      margin-top: 4px; }\n\n.header-background.trade ::ng-deep.mat-input-element:disabled {\n    color: white !important; }\n\n.header-background.trade .header-container {\n    background: rgba(24, 91, 157, 0.84);\n    background: -webkit-gradient(left top, right top, color-stop(0%, rgba(24, 91, 157, 0.84)), color-stop(100%, rgba(53, 129, 28, 0.68)));\n    background: linear-gradient(to right, rgba(24, 91, 157, 0.84) 0%, rgba(53, 129, 28, 0.68) 100%);\n    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#185b9d',\r endColorstr='#35811c',\r GradientType=1); }\n\n.header-background.trade .header-container h2,\n    .header-background.trade .header-container .mat-input-element:disabled,\n    .header-background.trade .header-container label,\n    .header-background.trade .header-container span,\n    .header-background.trade .header-container .mat-icon-button,\n    .header-background.trade .header-container .mat-form-field {\n      color: white; }\n\n.header-background.trade .header-container .mat-button-toggle-group {\n      height: 32px; }\n\n.header-background.trade .header-container .chip-list {\n      margin-bottom: 4px; }\n\n.header-background.trade .header-container .trade-view-title {\n      margin-bottom: 0; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/header-form-component/header-form-component.component.ts":
/*!******************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/header-form-component/header-form-component.component.ts ***!
  \******************************************************************************************************************************************/
/*! exports provided: HeaderFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeaderFormComponent", function() { return HeaderFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/directives/autocomplete-dropdown.directive */ "./Client/app/shared/directives/autocomplete-dropdown.directive.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/entities/masterdata-props.entity */ "./Client/app/shared/entities/masterdata-props.entity.ts");
/* harmony import */ var _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/enums/contract-status.enum */ "./Client/app/shared/enums/contract-status.enum.ts");
/* harmony import */ var _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/enums/contract-type.enum */ "./Client/app/shared/enums/contract-type.enum.ts");
/* harmony import */ var _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/models/section-complete-display-view */ "./Client/app/shared/models/section-complete-display-view.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _shared_validators_date_validators_validator__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../../shared/validators/date-validators.validator */ "./Client/app/shared/validators/date-validators.validator.ts");
/* harmony import */ var _validators_contract_reference_async_validator_validator__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../validators/contract-reference-async-validator.validator */ "./Client/app/trading/validators/contract-reference-async-validator.validator.ts");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./../../../../../shared/enums/permission-level.enum */ "./Client/app/shared/enums/permission-level.enum.ts");
/* harmony import */ var _shared_services_http_services_user_identity_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./../../../../../shared/services/http-services/user-identity.service */ "./Client/app/shared/services/http-services/user-identity.service.ts");
/* harmony import */ var _shared_services_masterdata_department_data_loader__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./../../../../../shared/services/masterdata/department-data-loader */ "./Client/app/shared/services/masterdata/department-data-loader.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./../../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};























var moment = moment__WEBPACK_IMPORTED_MODULE_3__;
var HeaderFormComponent = /** @class */ (function (_super) {
    __extends(HeaderFormComponent, _super);
    function HeaderFormComponent(formBuilder, masterdataService, utilService, tradingService, companyManager, formConfigurationProvider, route, snackbarService, userIdentityService, departmentDataLoader, authorizationService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.masterdataService = masterdataService;
        _this.utilService = utilService;
        _this.tradingService = tradingService;
        _this.companyManager = companyManager;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.route = route;
        _this.snackbarService = snackbarService;
        _this.userIdentityService = userIdentityService;
        _this.departmentDataLoader = departmentDataLoader;
        _this.authorizationService = authorizationService;
        _this.contractTypeSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.contractDateSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.isInputField = false;
        _this.ContractType = _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_10__["ContractTypes"];
        _this.isShow = false;
        _this.isEditable = false;
        _this.contractReferencePattern = '^[a-zA-Z0-9]*$';
        _this.contractTypeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__["AtlasFormControl"]('ContractType');
        _this.contractReferenceCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__["AtlasFormControl"]('PhysicalContractCode');
        _this.contractDateCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__["AtlasFormControl"]('ContractDate');
        _this.traderCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__["AtlasFormControl"]('TraderId');
        _this.departmentCodeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__["AtlasFormControl"]('DepartmentId');
        _this.departmentDescriptionCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__["AtlasFormControl"]('DepartmentDescription');
        _this.creatorCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__["AtlasFormControl"]('Creator');
        _this.createdOnCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__["AtlasFormControl"]('CreatedOn');
        _this.tradeImageDetails = [];
        _this.traders = [];
        _this.masterdataList = [_shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_8__["MasterDataProps"].Departments];
        _this.model = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_11__["SectionCompleteDisplayView"]();
        _this.contractStatus = null;
        _this.date = false;
        _this.isEditContract = false;
        _this.isImage = false;
        _this.openCloseStatus = '';
        _this.tradeCancelledStatus = '';
        _this.departmentErrorMap = new Map()
            .set('inDropdownList', 'Invalid entry. Department not in the list or not authorized.');
        return _this;
    }
    HeaderFormComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.company = this.route.snapshot.paramMap.get('company');
        // this.currentDate = this.authorizationService.getUserDateFormat();
        if (this.route.snapshot.data['isImage'] === true) {
            this.isImage = true;
        }
        this.masterdata = this.route.snapshot.data.masterdata;
        this.filteredDepartments = this.masterdata.departments;
        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;
        if (this.filteredDepartments && this.filteredDepartments.length === 1) {
            this.departmentCodeCtrl.setValue(this.filteredDepartments[0]);
        }
        this.departmentCodeCtrl.valueChanges.subscribe(function (input) {
            _this.filteredDepartments = _this.utilService.filterListforAutocomplete(input, _this.masterdata.departments, ['departmentCode', 'description']);
            if (_this.departmentCodeCtrl.valid) {
                _this.departmentCodeSelected(_this.departmentCodeCtrl.value);
            }
        });
        this.contractDateCtrl.setValue(this.companyManager.getCurrentCompanyDate());
        this.contractDateSelected.emit(this.contractDateCtrl.value);
        this.tradingService.getAllTraders()
            .subscribe(function (traders) {
            _this.traders = _this.filteredTradeOwners = traders.value;
            _this.traderCtrl.valueChanges.subscribe(function (input) {
                _this.filteredTradeOwners = _this.utilService.filterListforAutocomplete(input, _this.traders, ['samAccountName', 'firstName', 'lastName']);
            });
            if (_this.model) {
                _this.displayTraderNameInViewForDisabledTraders();
            }
            _this.setValidators();
            _this.bindConfiguration();
        });
    };
    HeaderFormComponent.prototype.displayTraderNameInViewForDisabledTraders = function () {
        var _this = this;
        if (this.model && this.model.traderId && this.filteredTradeOwners) {
            var filteredTrader = this.filteredTradeOwners.find(function (trader) { return trader.userId === _this.model.traderId; });
            if (filteredTrader) {
                this.subscriptions.push(this.userIdentityService.getUserById(this.model.traderId, true).subscribe(function (user) {
                    _this.deprecatedTrader = user;
                    _this.traderCtrl.setValue(_this.model.traderId);
                }));
            }
        }
    };
    HeaderFormComponent.prototype.setContractReferenceValidators = function () {
        var contractRefValidators = [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].maxLength(7), _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].pattern(this.contractReferencePattern)];
        if (this.dataVersionId) {
            contractRefValidators.push(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required);
        }
        this.contractReferenceCtrl.setValidators(contractRefValidators);
        this.contractReferenceCtrl.setAsyncValidators(_validators_contract_reference_async_validator_validator__WEBPACK_IMPORTED_MODULE_17__["ContractReferenceAsyncValidator"].createValidator(this.tradingService, this.dataVersionId));
    };
    HeaderFormComponent.prototype.setValidators = function () {
        this.contractDateCtrl.setValidators(Object(_shared_validators_date_validators_validator__WEBPACK_IMPORTED_MODULE_16__["isBeforeDate"])(this.companyManager.getCurrentCompanyDate()));
        if (!this.isShow) {
            var contractRefValidators = [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].maxLength(7), _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].pattern(this.contractReferencePattern)];
            if (this.dataVersionId) {
                contractRefValidators.push(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required);
            }
            this.contractReferenceCtrl.setValidators(contractRefValidators);
            this.contractReferenceCtrl.setAsyncValidators(_validators_contract_reference_async_validator_validator__WEBPACK_IMPORTED_MODULE_17__["ContractReferenceAsyncValidator"].createValidator(this.tradingService, this.dataVersionId));
        }
        this.departmentCodeCtrl.setValidators(Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_6__["inDropdownListValidator"])(this.masterdata.departments, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_15__["nameof"])('departmentCode')));
        this.traderCtrl.setValidators(Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_6__["inDropdownListValidator"])(this.traders, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_15__["nameof"])('userId')));
    };
    HeaderFormComponent.prototype.findDepartmentByCode = function (departmentCode) {
        if (!departmentCode) {
            return;
        }
        var filteredDepartment = this.masterdata.departments.filter(function (dept) { return dept.departmentCode === departmentCode.departmentCode; });
        if (filteredDepartment.length > 0) {
            return filteredDepartment[0];
        }
    };
    HeaderFormComponent.prototype.departmentCodeSelected = function (departments) {
        if (!departments) {
            return;
        }
        var selectedDepartment = this.masterdata.departments.filter(function (department) { return department.departmentCode === departments.departmentCode; });
        if (selectedDepartment.length > 0) {
            this.departmentDescriptionCtrl.patchValue(selectedDepartment[0].description);
        }
    };
    HeaderFormComponent.prototype.contractTypeChanged = function () {
        var res = this.contractTypeCtrl.value;
        this.contractType = res.toString();
        this.contractTypeSelected.emit(res);
    };
    HeaderFormComponent.prototype.ifContractDateSelected = function () {
        var contractDate = this.contractDateCtrl.value;
        this.contractDateSelected.emit(contractDate);
    };
    HeaderFormComponent.prototype.displayTrader = function (userId) {
        if (userId) {
            var selectedUser = this.traders.find(function (user) { return user.userId === userId; });
            if (selectedUser) {
                return selectedUser.displayName;
            }
            else if (this.deprecatedTrader && this.deprecatedTrader.userId === userId) {
                return this.deprecatedTrader.displayName;
            }
        }
        return '';
    };
    HeaderFormComponent.prototype.populateEntity = function (entity) {
        var section = entity;
        section.type = this.contractTypeCtrl.value;
        section.contractReference = this.contractReferenceCtrl.value === '' ? null : this.contractReferenceCtrl.value;
        section.contractDate = this.contractDateCtrl.value;
        section.traderId = this.traderCtrl.value;
        var department = this.findDepartmentByCode(this.departmentCodeCtrl.value);
        section.departmentId = department ? department.departmentId : null;
        section.status = _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_9__["ContractStatus"][this.contractStatus];
        return section;
    };
    HeaderFormComponent.prototype.initForm = function (entity, isEdit) {
        var _this = this;
        this.isShow = true;
        this.isEditable = isEdit ? true : false;
        this.contractReferenceCtrl.clearAsyncValidators();
        this.contractReferenceCtrl.clearValidators();
        if (entity.traderId === 0 || (entity.header && entity.header.traderId === 0)) {
            entity.header.traderId = null;
        }
        var tradeRecord = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_11__["SectionCompleteDisplayView"](entity);
        this.model = tradeRecord;
        this.contractStatus = this.model.status === 'Closed' ? _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_9__["ContractStatus"][_shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_9__["ContractStatus"].Unapproved] : this.model.status;
        this.openCloseStatus = this.model.isClosed ? 'Closed' : 'Open';
        this.isCancelled = this.model.isCancelled;
        if (this.model.type != null) {
            this.contractTypeCtrl.setValue(_shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_10__["ContractTypes"][this.model.type]);
            this.contractType = this.model.type;
        }
        this.contractReference = this.model.reference;
        if (this.model.contractDate != null) {
            this.formGroup.patchValue({ contractDateCtrl: this.model.contractDate });
            this.contractDateSelected.emit(this.contractDateCtrl.value);
        }
        this.formGroup.patchValue({ traderCtrl: this.model.traderId });
        this.displayTraderNameInViewForDisabledTraders();
        var departmentCode = this.masterdata.departments
            .filter(function (e) { return e.departmentId === _this.model.departmentId; });
        if (departmentCode) {
            this.departmentCodeCtrl.patchValue(departmentCode[0]);
            this.departmentCodeSelected(departmentCode[0]);
        }
        this.createdBy = this.model.createdBy;
        if (this.model.creationDate != null) {
            this.createdOnCtrl.setValue(moment(this.model.creationDate));
        }
        if (!isEdit) {
            this.formGroup.disable();
            this.creatorCtrl.disable();
            this.createdOnCtrl.disable();
        }
        else {
            if (!this.isImage) {
                if (this.model.allocatedTo ||
                    (this.model.invoiceReference &&
                        this.authorizationService.getPermissionLevel(this.company, 'Trades', 'Physicals', 'SuperTradeEdition') <= _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_19__["PermissionLevels"].None)) {
                    this.departmentCodeCtrl.disable();
                    this.departmentDescriptionCtrl.disable();
                }
            }
            this.creatorCtrl.disable();
            this.createdOnCtrl.disable();
        }
        if (this.isImage) {
            this.contractTypeCtrl.patchValue(_shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_10__["ContractTypes"][Number(this.route.snapshot.queryParams.type)]);
            this.contractType = _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_10__["ContractTypes"][Number(this.route.snapshot.queryParams.type)];
            this.contractDateCtrl.setValue(this.companyManager.getCurrentCompanyDate());
            this.createdOnCtrl.setValue(this.companyManager.getCurrentCompanyDate());
            this.contractReference = null;
            this.isEditContract = true;
            this.contractReferenceCtrl.patchValue(this.contractReference);
            this.setContractReferenceValidators();
            this.tradeImageDetails = JSON.parse(this.route.snapshot.queryParams.tradeImageDetails);
            if (this.tradeImageDetails && this.tradeImageDetails.length > 0) {
                var checkTraderIdRefIsImage = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'TraderId'; });
                if (checkTraderIdRefIsImage && !checkTraderIdRefIsImage.isEdit) {
                    this.traderCtrl.disable();
                }
                var checkContractStatusCodeIsImage = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'ContractStatusCode'; });
                if (checkContractStatusCodeIsImage && !checkContractStatusCodeIsImage.isEdit) {
                    this.contractTypeCtrl.disable();
                }
                var checkDepartmentIdIsImage = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'DepartmentId'; });
                if (checkDepartmentIdIsImage && !checkDepartmentIdIsImage.isEdit) {
                    this.departmentCodeCtrl.disable();
                    this.departmentDescriptionCtrl.disable();
                }
                var checkContractDateIsImage = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'ContractDate'; });
                if (checkContractDateIsImage && !checkContractDateIsImage.isEdit) {
                    this.contractDateCtrl.disable();
                }
                var checkPhysicalContractCodeIsImage = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'PhysicalContractCode'; });
                if (checkPhysicalContractCodeIsImage && !checkPhysicalContractCodeIsImage.isEdit) {
                    this.contractReferenceCtrl.disable();
                }
                var checkTraderIdIsImage = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'TraderId'; });
                if (checkTraderIdIsImage && !checkTraderIdIsImage.isCopy) {
                    this.traderCtrl.patchValue(null);
                }
                var checkDepartmentIdIsCopy = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'DepartmentId'; });
                if (checkDepartmentIdIsCopy && !checkDepartmentIdIsCopy.isCopy) {
                    this.departmentCodeCtrl.patchValue(null);
                    this.departmentDescriptionCtrl.patchValue(null);
                }
                var checkContractDateIsCopy = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'ContractDate'; });
                if (checkContractDateIsCopy && !checkContractDateIsCopy.isCopy) {
                    this.contractDateCtrl.setValue(this.companyManager.getCurrentCompanyDate());
                }
                else {
                    this.contractDateCtrl.setValue(this.model.contractDate);
                }
                var checkPhysicalContractCodeIsCopy = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'PhysicalContractCode'; });
                if (checkPhysicalContractCodeIsCopy && !checkPhysicalContractCodeIsCopy.isCopy) {
                    this.contractReferenceCtrl.patchValue(this.contractReference);
                }
            }
            this.contractStatus = _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_9__["ContractStatus"][_shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_9__["ContractStatus"].Unapproved];
            this.status = 'Not Realized';
        }
        var favoriteId = Number(this.route.snapshot.queryParams.favoriteId);
        if (favoriteId) {
            this.isEditContract = true;
            this.contractDateCtrl.setValue(this.companyManager.getCurrentCompanyDate());
            this.createdOnCtrl.setValue(this.companyManager.getCurrentCompanyDate());
        }
        this.contractRealisedStatus();
        if (this.model.isCancelled) {
            this.tradeCancelledStatus = 'Cancelled';
        }
    };
    HeaderFormComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            contractTypeCtrl: this.contractTypeCtrl,
            contractReferenceCtrl: this.contractReferenceCtrl,
            contractDateCtrl: this.contractDateCtrl,
            traderCtrl: this.traderCtrl,
            departmentCodeCtrl: this.departmentCodeCtrl,
            departmentDescriptionCtrl: this.departmentDescriptionCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    HeaderFormComponent.prototype.contractStatusChanged = function (contractStatus) {
        this.contractStatus = _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_9__["ContractStatus"][contractStatus];
    };
    HeaderFormComponent.prototype.contractRealisedStatus = function () {
        if (this.model.blDate && !this.isImage) {
            this.date = true;
            this.status = 'Realized';
        }
        else {
            this.status = 'Not Realized';
        }
    };
    HeaderFormComponent.prototype.getTraderErrorMessageInDropdownList = function () {
        if (this.deprecatedTrader && this.traderCtrl.value === this.deprecatedTrader.userId) {
            return 'This user is no longer a trader';
        }
        return 'Trader not in the list';
    };
    HeaderFormComponent.prototype.getTradeImageFieldsCompany = function () {
        var _this = this;
        this.tradingService.getTradeImageFieldsByCompany()
            .subscribe(function (data) {
            _this.tradeImageDetails = data.value;
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], HeaderFormComponent.prototype, "contractTypeSelected", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], HeaderFormComponent.prototype, "contractDateSelected", void 0);
    HeaderFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-header-form-component',
            template: __webpack_require__(/*! ./header-form-component.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/header-form-component/header-form-component.component.html"),
            styles: [__webpack_require__(/*! ./header-form-component.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/header-form-component/header-form-component.component.scss")],
            providers: [_shared_services_masterdata_department_data_loader__WEBPACK_IMPORTED_MODULE_21__["DepartmentDataLoader"]],
        }),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_13__["MasterdataService"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_15__["UtilService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_14__["TradingService"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_4__["CompanyManagerService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_12__["FormConfigurationProviderService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_22__["SnackbarService"],
            _shared_services_http_services_user_identity_service__WEBPACK_IMPORTED_MODULE_20__["UserIdentityService"],
            _shared_services_masterdata_department_data_loader__WEBPACK_IMPORTED_MODULE_21__["DepartmentDataLoader"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_18__["AuthorizationService"]])
    ], HeaderFormComponent);
    return HeaderFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/invoicing-form-component/invoicing-form-component.component.html":
/*!**************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/invoicing-form-component/invoicing-form-component.component.html ***!
  \**************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card *ngIf=\"!hasEmptyState && !isLoading\"\r\n          class=\"trade-capture-card\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            Invoicing\r\n        </mat-card-title>\r\n        <mat-card-subtitle>\r\n            Invoiced on {{invoiceDateFormat}}\r\n        </mat-card-subtitle>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"right start\"\r\n             fxLayoutGap=\"5%\">\r\n            <mat-form-field fxFlex=\"40%\">\r\n                <input matInput\r\n                       placeholder=\"MAIN invoice reference number\"\r\n                       [formControl]=\"invoiceReferenceCtrl\"\r\n                       type=\"text\"\r\n                       autocomplete=\"off\"\r\n                       readonly>\r\n            </mat-form-field>\r\n            <mat-form-field fxFlex=\"40%\">\r\n                <input matInput\r\n                       placeholder=\"Percentage (%) invoiced\"\r\n                       [formControl]=\"salesPercentageCtrl\"\r\n                       type=\"number\"\r\n                       autocomplete=\"off\"\r\n                       readonly>\r\n            </mat-form-field>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"right start\"\r\n             fxLayoutGap=\"5%\">\r\n            <mat-form-field fxFlex=\"40%\">\r\n                <input matInput\r\n                       placeholder=\"Quantity invoiced (Quantity)\"\r\n                       [formControl]=\"quantityInvoicedCtrl\"\r\n                       type=\"number\"\r\n                       autocomplete=\"off\"\r\n                       readonly>\r\n            </mat-form-field>\r\n            <mat-form-field fxFlex=\"40%\">\r\n                <input matInput\r\n                       placeholder=\"Quantity invoiced (Code)\"\r\n                       [formControl]=\"quantityCodeCtrl\"\r\n                       type=\"text\"\r\n                       autocomplete=\"off\"\r\n                       readonly>\r\n            </mat-form-field>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"right start\"\r\n             fxLayoutGap=\"5%\">\r\n            <mat-form-field fxFlex=\"40%\">\r\n                <input matInput\r\n                       placeholder=\"Invoice Type\"\r\n                       [matTooltip]=\"'Invoice Type'\"\r\n                       [matAutocomplete]=\"invoiceType\"\r\n                       [formControl]=\"invoiceTypeCtrl\">\r\n                <mat-autocomplete #invoiceType=\"matAutocomplete\">\r\n                    <mat-option *ngFor=\"let invoice of filteredInvoiceTypeArray\"\r\n                                [value]=\"invoice.contractInvoiceType\">\r\n                        {{invoice.contractInvoiceType}}\r\n                    </mat-option>\r\n                </mat-autocomplete>\r\n                <mat-error *ngIf=\"invoiceTypeCtrl.hasError('inDropdownList')\">\r\n                    Value not in list.\r\n                </mat-error>\r\n            </mat-form-field>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>\r\n<atlas-empty-state *ngIf=\"hasEmptyState && !isLoading\"\r\n                   title=\"No Invoicing\"\r\n                   [message]=\"invoicingEmptyMessage\"></atlas-empty-state>\r\n<mat-card *ngIf=\"isLoading\">\r\n    <mat-card-content>\r\n            <div fxLayout=\"row\"\r\n                 fxLayoutAlign=\"center center\"\r\n                 fxLayoutWrap\r\n                 fxLayoutGap=\"20px\">\r\n                <mat-spinner color=\"accent\"></mat-spinner>\r\n            </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/invoicing-form-component/invoicing-form-component.component.scss":
/*!**************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/invoicing-form-component/invoicing-form-component.component.scss ***!
  \**************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/invoicing-form-component/invoicing-form-component.component.ts":
/*!************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/invoicing-form-component/invoicing-form-component.component.ts ***!
  \************************************************************************************************************************************************/
/*! exports provided: InvoicingFormComponentComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InvoicingFormComponentComponent", function() { return InvoicingFormComponentComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/directives/autocomplete-dropdown.directive */ "./Client/app/shared/directives/autocomplete-dropdown.directive.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_enums_contract_invoice_type_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/enums/contract-invoice-type.enum */ "./Client/app/shared/enums/contract-invoice-type.enum.ts");
/* harmony import */ var _shared_pipes_format_date_pipe_pipe__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/pipes/format-date-pipe.pipe */ "./Client/app/shared/pipes/format-date-pipe.pipe.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/services/http-services/execution.service */ "./Client/app/shared/services/http-services/execution.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _services_trade_data_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../services/trade-data.service */ "./Client/app/trading/services/trade-data.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};












var InvoicingFormComponentComponent = /** @class */ (function (_super) {
    __extends(InvoicingFormComponentComponent, _super);
    function InvoicingFormComponentComponent(formConfigurationProvider, formBuilder, executionService, route, formatDate, tradeDataService, utilService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.formBuilder = formBuilder;
        _this.executionService = executionService;
        _this.route = route;
        _this.formatDate = formatDate;
        _this.tradeDataService = tradeDataService;
        _this.utilService = utilService;
        _this.quantityCodeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('invoicedQuantityCode');
        _this.invoiceReferenceCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('invoiceReference');
        _this.salesPercentageCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('salesPercentage');
        _this.quantityInvoicedCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('invoicedQuantity');
        _this.invoiceTypeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('invoiceType');
        _this.hasEmptyState = true;
        _this.invoicingEmptyMessage = 'This trade has not been invoiced yet';
        _this.isLoading = true;
        _this.isEdit = false;
        return _this;
    }
    InvoicingFormComponentComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));
        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;
        if (this.sectionId !== 0) {
            this.getInvoiceStatusValues();
        }
        else {
            this.isLoading = false;
        }
        this.invoiceTypeArray = [
            {
                contractInvoiceType: 'Washout',
                contractInvoiceTypeId: _shared_enums_contract_invoice_type_enum__WEBPACK_IMPORTED_MODULE_6__["ContractInvoiceType"].Washout,
            },
            {
                contractInvoiceType: 'Cancellation',
                contractInvoiceTypeId: _shared_enums_contract_invoice_type_enum__WEBPACK_IMPORTED_MODULE_6__["ContractInvoiceType"].Cancellation,
            },
        ];
        this.filteredInvoiceTypeArray = this.invoiceTypeArray;
        this.invoiceTypeCtrl.valueChanges.subscribe(function (input) {
            _this.filteredInvoiceTypeArray = _this.utilService.filterListforAutocomplete(input, _this.invoiceTypeArray, ['contractInvoiceType', 'contractInvoiceTypeId']);
        });
        this.setValidators();
    };
    InvoicingFormComponentComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            quantityCodeCtrl: this.quantityCodeCtrl,
            invoiceReferenceCtrl: this.invoiceReferenceCtrl,
            salesPercentageCtrl: this.salesPercentageCtrl,
            quantityInvoicedCtrl: this.quantityInvoicedCtrl,
            invoiceTypeCtrl: this.invoiceTypeCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    InvoicingFormComponentComponent.prototype.getInvoiceStatusValues = function () {
        var _this = this;
        this.subscriptions.push(this.tradeDataService.getInvoiceMarkingDetails()
            .subscribe(function (data) {
            if (data) {
                _this.invoiceMarkingDetails = data;
                _this.invoiceDate = data.createdDateTime;
                _this.invoiceDateFormatted = _this.formatDate.transform(data.createdDateTime);
                _this.invoiceReferenceCtrl.patchValue(data.invoiceCode);
                _this.quantityCodeCtrl.patchValue(data.weightCode);
                if (data.invoicePercent) {
                    _this.invoicePercentage = data.invoicePercent;
                }
                _this.checkIfEmpty();
            }
            _this.isLoading = false;
        }));
    };
    InvoicingFormComponentComponent.prototype.checkIfEmpty = function () {
        var zero = 0;
        var isNotEmpty = false;
        if (this.invoiceReferenceCtrl.value && this.invoiceReferenceCtrl.value !== '') {
            isNotEmpty = true;
        }
        else if (this.quantityInvoicedCtrl.value && this.quantityInvoicedCtrl.value !== 0) {
            isNotEmpty = true;
        }
        else if (this.salesPercentageCtrl.value && this.salesPercentageCtrl.value !== zero.toFixed(2)) {
            isNotEmpty = true;
        }
        else if (this.invoiceTypeCtrl.value && this.invoiceReferenceCtrl.value !== '' && this.isEdit) {
            isNotEmpty = true;
        }
        this.hasEmptyState = !isNotEmpty;
    };
    InvoicingFormComponentComponent.prototype.totalValuesCalculated = function (model) {
        this.quantityInvoicedCtrl.patchValue(model.totalQuantity);
        this.salesPercentageCtrl.setValue((model.totalInvoiceValuePercent ? model.totalInvoiceValuePercent : 0).toFixed(2));
        this.checkIfEmpty();
    };
    InvoicingFormComponentComponent.prototype.setValidators = function () {
        this.invoiceTypeCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([
            Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_4__["inDropdownListValidator"])(this.invoiceTypeArray, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_10__["nameof"])('contractInvoiceType')),
        ]));
    };
    InvoicingFormComponentComponent.prototype.initForm = function (entity, isEdit) {
        if (!isEdit || this.invoicePercentage === 100) {
            this.invoiceTypeCtrl.disable();
        }
        else {
            this.invoiceTypeCtrl.enable();
        }
        this.isEdit = isEdit;
        return entity;
    };
    InvoicingFormComponentComponent.prototype.setContractInvoiceType = function (invoiceTypeId) {
        if (invoiceTypeId) {
            this.invoiceTypeCtrl.patchValue(this.invoiceTypeArray[invoiceTypeId - 1].contractInvoiceType);
        }
    };
    InvoicingFormComponentComponent.prototype.populateEntity = function (entity) {
        var section = entity;
        if (this.invoiceTypeCtrl.value === _shared_enums_contract_invoice_type_enum__WEBPACK_IMPORTED_MODULE_6__["ContractInvoiceType"][1]) {
            section.contractInvoiceTypeId = _shared_enums_contract_invoice_type_enum__WEBPACK_IMPORTED_MODULE_6__["ContractInvoiceType"].Washout;
        }
        else if (this.invoiceTypeCtrl.value === _shared_enums_contract_invoice_type_enum__WEBPACK_IMPORTED_MODULE_6__["ContractInvoiceType"][2]) {
            section.contractInvoiceTypeId = _shared_enums_contract_invoice_type_enum__WEBPACK_IMPORTED_MODULE_6__["ContractInvoiceType"].Cancellation;
        }
        return section;
    };
    InvoicingFormComponentComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-invoicing-form-component',
            template: __webpack_require__(/*! ./invoicing-form-component.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/invoicing-form-component/invoicing-form-component.component.html"),
            styles: [__webpack_require__(/*! ./invoicing-form-component.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/invoicing-form-component/invoicing-form-component.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_8__["FormConfigurationProviderService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_9__["ExecutionService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _shared_pipes_format_date_pipe_pipe__WEBPACK_IMPORTED_MODULE_7__["FormatDatePipe"],
            _services_trade_data_service__WEBPACK_IMPORTED_MODULE_11__["TradeDataService"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_10__["UtilService"]])
    ], InvoicingFormComponentComponent);
    return InvoicingFormComponentComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/location-form-component/location-form-component.component.html":
/*!************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/location-form-component/location-form-component.component.html ***!
  \************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card>\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h2>Location</h2>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"16px\">\r\n            <div fxFlex=\"25%\">\r\n                <atlas-masterdata-user-preferences-input [isEditable]=\"portOfOriginCtrl.enabled\"\r\n                                                         [fieldControl]=\"portOfOriginCtrl\"\r\n                                                         [options]=\"filteredOriginPorts\"\r\n                                                         label=\"Port Of Origin\"\r\n                                                         displayProperty=\"portCode\"\r\n                                                         [selectProperties]=\"['portCode', 'description']\"\r\n                                                         [errorMap]=\"originportErrorMap\"\r\n                                                         lightBoxTitle=\"Results for Counterparty\"\r\n                                                         gridId=\"portsGrid\"\r\n                                                         (optionSelected)=\"portofOriginSelected($event)\"\r\n                                                         [dataLoader]=\"portDataLoader\">\r\n                </atlas-masterdata-user-preferences-input>\r\n            </div>\r\n\r\n            <atlas-form-input fxFlex=\"60%\"\r\n                              [fieldControl]=\"portOfOriginDescriptionCtrl\"\r\n                              [isEditable]=\"isInputField\"\r\n                              [label]=\"'Description'\">\r\n            </atlas-form-input>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"16px\">\r\n            <div fxFlex=\"25%\">\r\n                <atlas-masterdata-user-preferences-input [isEditable]=\"portOfDestinationCtrl.enabled\"\r\n                                                         [fieldControl]=\"portOfDestinationCtrl\"\r\n                                                         [options]=\"filteredDestinationPorts\"\r\n                                                         label=\"Port Of Destination\"\r\n                                                         displayProperty=\"portCode\"\r\n                                                         [selectProperties]=\"['portCode', 'description']\"\r\n                                                         [errorMap]=\"destinationportErrorMap\"\r\n                                                         lightBoxTitle=\"Results for Port\"\r\n                                                         gridId=\"portsGrid\"\r\n                                                         (optionSelected)=\"portofDestinationselected($event)\"\r\n                                                         [dataLoader]=\"portDataLoader\">\r\n                </atlas-masterdata-user-preferences-input>\r\n            </div>\r\n            <atlas-form-input fxFlex=\"60%\"\r\n                              [fieldControl]=\"portOfDestinationDescCtrl\"\r\n                              [isEditable]=\"isInputField\"\r\n                              [label]=\"'Description'\">\r\n            </atlas-form-input>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"16px\"\r\n             *ngIf=\"businessSectorFieldShow\">\r\n            <div fxFlex=\"25%\"\r\n                 class=\"custom-form\"\r\n                 [class.required-field]=\"businessSectorCtrl.isRequired\"\r\n                 [class.displayMode]=\"!businessSectorCtrl.enabled\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Business Sector\"\r\n                           [matAutocomplete]=\"businessSectorAutoComplete\"\r\n                           [formControl]=\"businessSectorCtrl\"\r\n                           [required]=\"businessSectorCtrl.isRequired\"\r\n                           matTooltip=\"Business Sector\">\r\n                    <mat-icon *ngIf=\"isEdit\"\r\n                              class=\"bookmark-icon\"\r\n                              matSuffix>bookmark</mat-icon>\r\n                    <mat-autocomplete #businessSectorAutoComplete=\"matAutocomplete\"\r\n                                      [panelWidth]=\"panelSize\"\r\n                                      (closed)=\"clearDescription()\"\r\n                                      (optionSelected)=\"businessSectorSelected($event.option.value)\"\r\n                                      [displayWith]=\"displayBusinessSector\">\r\n                        <mat-option *ngFor=\"let businessSector of filteredBusinessSector\"\r\n                                    [value]=\"businessSector\">\r\n                            {{businessSector.sectorCode}} |\r\n                            {{businessSector.description}}\r\n                        </mat-option>\r\n                    </mat-autocomplete>\r\n                    <mat-error *ngIf=\"businessSectorCtrl.hasError('required')\">\r\n                        This field is required\r\n                    </mat-error>\r\n                    <mat-hint *ngIf=\"businessSectorCtrl.isRequired && businessSectorCtrl.enabled\">\r\n                        Required *\r\n                    </mat-hint>\r\n                    <mat-error *ngIf=\"businessSectorCtrl.hasError('inDropdownList')\">\r\n                        Value not in list\r\n                    </mat-error>\r\n                </mat-form-field>\r\n            </div>\r\n            <atlas-form-input fxFlex=\"60%\"\r\n                              [fieldControl]=\"businessSectorDescriptionCtrl\"\r\n                              [isEditable]=\"isInputField\"\r\n                              [label]=\"'Description'\">\r\n            </atlas-form-input>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/location-form-component/location-form-component.component.scss":
/*!************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/location-form-component/location-form-component.component.scss ***!
  \************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/location-form-component/location-form-component.component.ts":
/*!**********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/location-form-component/location-form-component.component.ts ***!
  \**********************************************************************************************************************************************/
/*! exports provided: LocationFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LocationFormComponent", function() { return LocationFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _node_modules_angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../../node_modules/@angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/directives/autocomplete-dropdown.directive */ "./Client/app/shared/directives/autocomplete-dropdown.directive.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/entities/masterdata-props.entity */ "./Client/app/shared/entities/masterdata-props.entity.ts");
/* harmony import */ var _shared_entities_trade_configuration_entity__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/entities/trade-configuration-entity */ "./Client/app/shared/entities/trade-configuration-entity.ts");
/* harmony import */ var _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/enums/invoicing-status.enum */ "./Client/app/shared/enums/invoicing-status.enum.ts");
/* harmony import */ var _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/models/section-complete-display-view */ "./Client/app/shared/models/section-complete-display-view.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
/* harmony import */ var _shared_services_masterdata_ports_data_loader__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/services/masterdata/ports-data-loader */ "./Client/app/shared/services/masterdata/ports-data-loader.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

















var LocationFormComponent = /** @class */ (function (_super) {
    __extends(LocationFormComponent, _super);
    function LocationFormComponent(formBuilder, masterdataService, utilService, formConfigurationProvider, route, portDataLoader, authorizationService, securityService, tradingService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.masterdataService = masterdataService;
        _this.utilService = utilService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.route = route;
        _this.portDataLoader = portDataLoader;
        _this.authorizationService = authorizationService;
        _this.securityService = securityService;
        _this.tradingService = tradingService;
        _this.portsWarningMessage = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.isInputField = false;
        _this.isChangedPortOfOrigin = false;
        _this.isChangedPortOfDestination = false;
        _this.businessSectorforTradingOperation = false;
        _this.businessSectorNominalForTradingOperation = false;
        _this.businessSectorFieldShow = false;
        _this.portOfOriginPrivilege = false;
        _this.portOfDestinationPrivilege = false;
        _this.businessSectorPrivilege = false;
        _this.isChangedPortOfOriginCoulmn = '';
        _this.isChangedPortOfDestinationCoulmn = '';
        _this.isEdit = true;
        _this.model = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_10__["SectionCompleteDisplayView"]();
        _this.tradeConfiguration = new _shared_entities_trade_configuration_entity__WEBPACK_IMPORTED_MODULE_8__["TradeConfiguration"]();
        _this.portOfOriginCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('PortOriginId');
        _this.portOfOriginDescriptionCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('PortOfOriginDescription');
        _this.portOfDestinationCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('PortDestinationId');
        _this.portOfDestinationDescCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('PortOfDestinationDescription');
        _this.businessSectorCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('MarketSectorId');
        _this.businessSectorDescriptionCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('BusinessSectorDescripton');
        _this.tradeImageDetails = [];
        _this.masterdataList = [
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__["MasterDataProps"].Ports,
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__["MasterDataProps"].BusinessSectors,
        ];
        _this.originportErrorMap = new Map()
            .set('required', 'Required *')
            .set('inDropdownList', 'Invalid entry. Client not in the list.');
        _this.destinationportErrorMap = new Map()
            .set('required', 'Required *')
            .set('inDropdownList', 'Invalid entry. Client not in the list.');
        _this.businessSectorMandatory = false;
        return _this;
    }
    LocationFormComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.masterdata = this.route.snapshot.data.masterdata;
        this.filteredOriginPorts = this.masterdata.ports;
        this.portOfOriginCtrl.valueChanges.subscribe(function (input) {
            _this.filteredOriginPorts = _this.utilService.filterListforAutocomplete(input, _this.masterdata.ports, ['portCode', 'portDescription']);
            if (_this.portOfOriginCtrl.valid) {
                _this.portofOriginSelected(_this.portOfOriginCtrl.value);
            }
        });
        this.filteredDestinationPorts = this.masterdata.ports;
        this.portOfDestinationCtrl.valueChanges.subscribe(function (input) {
            _this.filteredDestinationPorts = _this.utilService.filterListforAutocomplete(input, _this.masterdata.ports, ['portCode', 'portDescription']);
            if (_this.portOfDestinationCtrl.valid) {
                _this.portofDestinationselected(_this.portOfDestinationCtrl.value);
            }
        });
        this.filteredBusinessSector = this.masterdata.businessSectors;
        this.businessSectorCtrl.valueChanges.subscribe(function (input) {
            _this.filteredBusinessSector = _this.utilService.filterListforAutocomplete(input, _this.masterdata.businessSectors, ['sectorCode', 'description']);
        });
        this.getBusinessSectorConfiguration();
        this.setValidators();
        this.bindConfiguration();
        this.checkLocationFormPrivileges();
        this.businessSectorDescriptionCtrl.disable();
    };
    LocationFormComponent.prototype.getBusinessSectorConfiguration = function () {
        var _this = this;
        this.tradeConfigurationSubscription = this.tradingService.getTradeConfigurationDetails()
            .subscribe(function (data) {
            if (data) {
                _this.tradeConfiguration = data;
                _this.businessSectorFieldShow = (data.businessSectorNominalTradingOperation) ? true : false;
            }
        });
    };
    LocationFormComponent.prototype.ngOnDestroy = function () {
        if (this.tradeConfigurationSubscription) {
            this.tradeConfigurationSubscription.unsubscribe();
        }
    };
    LocationFormComponent.prototype.setValidators = function () {
        this.portOfOriginCtrl.setValidators(Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_5__["inDropdownListValidator"])(this.masterdata.ports, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_15__["nameof"])('portCode')));
        this.portOfDestinationCtrl.setValidators(Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_5__["inDropdownListValidator"])(this.masterdata.ports, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_15__["nameof"])('portCode')));
        this.businessSectorCtrl.setValidators(_node_modules_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].compose([
            Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_5__["inDropdownListValidator"])(this.masterdata.businessSectors),
        ]));
        if (this.businessSectorMandatory) {
            this.businessSectorCtrl.setValidators(_node_modules_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required);
        }
    };
    LocationFormComponent.prototype.portofOriginSelected = function (portCode) {
        if (!this.masterdata || !portCode) {
            if (this.portOfOriginDescriptionCtrl.value) {
                this.portOfOriginDescriptionCtrl.patchValue('');
            }
            return;
        }
        var selectedPort = this.masterdata.ports.find(function (port) { return port.portCode === portCode.portCode; });
        if (selectedPort) {
            this.portOfOriginDescriptionCtrl.patchValue(selectedPort.description);
        }
    };
    LocationFormComponent.prototype.portofDestinationselected = function (portCode) {
        if (!this.masterdata || !portCode) {
            if (this.portOfDestinationDescCtrl.value) {
                this.portOfDestinationDescCtrl.patchValue('');
            }
            return;
        }
        var selectedPort = this.masterdata.ports.find(function (port) { return port.portCode === portCode.portCode; });
        if (selectedPort) {
            this.portOfDestinationDescCtrl.patchValue(selectedPort.description);
        }
    };
    LocationFormComponent.prototype.businessSectorSelected = function (businessSector) {
        this.businessSectorDescriptionCtrl.patchValue(businessSector ? businessSector.description : '');
    };
    LocationFormComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            portofOriginCtrl: this.portOfOriginCtrl,
            portofOriginDescriptionCtrl: this.portOfOriginDescriptionCtrl,
            portofDestinationCtrl: this.portOfDestinationCtrl,
            portofDestinationDescCtrl: this.portOfDestinationDescCtrl,
            businessSectorCtrl: this.businessSectorCtrl,
            businessSectorDescriptionCtrl: this.businessSectorDescriptionCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    LocationFormComponent.prototype.populateEntity = function (entity) {
        var section = entity;
        section.portOfOrigin = this.portOfOriginCtrl.value ? this.portOfOriginCtrl.value.portCode : null;
        section.portOfDestination = this.portOfDestinationCtrl.value ? this.portOfDestinationCtrl.value.portCode : null;
        section.marketSectorId = (!this.businessSectorCtrl.value || this.businessSectorCtrl.value === '') ?
            null : this.businessSectorCtrl.value.sectorId;
        this.newPortOfOrigin = section.portOfOrigin;
        this.newPortOfDestination = section.portOfDestination;
        if (this.portOfOrigin !== this.newPortOfOrigin && this.portOfDestination !== this.newPortOfDestination) {
            this.isChangedPortOfDestination = true;
            this.isChangedPortOfOrigin = true;
            this.isChangedPortOfOriginCoulmn = '[PortOfOrigin]';
            this.isChangedPortOfDestinationCoulmn = '[PortOfDestination]';
            this.WarningEmitter();
        }
        else {
            if (this.portOfOrigin !== this.newPortOfOrigin) {
                this.isChangedPortOfOrigin = true;
                this.isChangedPortOfOriginCoulmn = '[PortOfOrigin]';
                this.WarningEmitter();
            }
            else if (this.portOfDestination !== this.newPortOfDestination) {
                this.isChangedPortOfDestination = true;
                this.isChangedPortOfDestinationCoulmn = '[PortOfDestination]';
                this.WarningEmitter();
            }
        }
        return section;
    };
    LocationFormComponent.prototype.WarningEmitter = function () {
        this.portsWarningMessage.emit({
            portOfOriginChanged: this.isChangedPortOfOrigin,
            portOfDestinationChanged: this.isChangedPortOfDestination,
            portOfOriginColumn: this.isChangedPortOfOriginCoulmn,
            portOfDestinationColumn: this.isChangedPortOfDestinationCoulmn,
        });
    };
    LocationFormComponent.prototype.initForm = function (entity, isEdit) {
        var _this = this;
        var tradeRecord = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_10__["SectionCompleteDisplayView"](entity);
        this.portOfOrigin = tradeRecord.portOfOrigin;
        this.portOfDestination = tradeRecord.portOfDestination;
        this.model = tradeRecord;
        this.isEdit = isEdit;
        if (this.model.portOfOrigin != null) {
            var selectedPort = this.masterdata.ports.filter(function (port) { return port.portCode === _this.model.portOfOrigin; });
            if (selectedPort.length > 0) {
                this.filteredOriginPorts = selectedPort;
                this.portOfOriginCtrl.patchValue(selectedPort[0]);
                this.portofOriginSelected(selectedPort[0]);
            }
        }
        if (this.model.portOfDestination != null) {
            var selectedPort = this.masterdata.ports.find(function (port) { return port.portCode === _this.model.portOfDestination; });
            if (selectedPort) {
                this.filteredDestinationPorts = [selectedPort];
                this.portOfDestinationCtrl.patchValue(selectedPort);
                this.portofDestinationselected(selectedPort);
            }
        }
        if (this.model.marketSectorId != null) {
            var selectedBusinessSector = this.masterdata.businessSectors.find(function (businessSector) { return businessSector.sectorId === _this.model.marketSectorId; });
            if (selectedBusinessSector) {
                this.businessSectorCtrl.patchValue(selectedBusinessSector);
                this.businessSectorSelected(selectedBusinessSector);
            }
        }
        if (!isEdit) {
            this.formGroup.disable();
        }
        else {
            this.portOfDestinationDescCtrl.disable();
            this.businessSectorDescriptionCtrl.disable();
            this.portOfOriginDescriptionCtrl.disable();
        }
        if (this.route.snapshot.data['isImage'] === true) {
            this.tradeImageDetails = JSON.parse(this.route.snapshot.queryParams.tradeImageDetails);
            if (this.tradeImageDetails && this.tradeImageDetails.length > 0) {
                var checkPortOriginIdIsEdit = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'PortOriginId'; });
                if (checkPortOriginIdIsEdit && !checkPortOriginIdIsEdit.isEdit) {
                    this.portOfOriginCtrl.disable();
                }
                var checkPortDestinationIdIsEdit = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'PortDestinationId'; });
                if (checkPortDestinationIdIsEdit && !checkPortDestinationIdIsEdit.isEdit) {
                    this.portOfDestinationCtrl.disable();
                }
                var checkMarketSectorIdIsEdit = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'MarketSectorId'; });
                if (checkMarketSectorIdIsEdit && !checkMarketSectorIdIsEdit.isEdit) {
                    this.businessSectorCtrl.disable();
                }
                var checkPortOriginIdIsCopy = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'PortOriginId'; });
                if (checkPortOriginIdIsCopy && !checkPortOriginIdIsCopy.isCopy) {
                    this.portOfOriginCtrl.patchValue(null);
                    this.portOfOriginDescriptionCtrl.patchValue(null);
                }
                var checkPortDestinationIdIsCopy = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'PortDestinationId'; });
                if (checkPortDestinationIdIsCopy && !checkPortDestinationIdIsCopy.isCopy) {
                    this.portOfDestinationCtrl.patchValue(null);
                    this.portOfDestinationDescCtrl.patchValue(null);
                }
                var checkMarketSectorIdIdIsCopy = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'MarketSectorId'; });
                if (checkMarketSectorIdIdIsCopy && !checkMarketSectorIdIdIsCopy.isCopy) {
                    this.businessSectorCtrl.patchValue(null);
                    this.businessSectorDescriptionCtrl.patchValue(null);
                }
            }
        }
        if (isEdit) {
            if (tradeRecord.invoicingStatusId !== _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_9__["InvoicingStatus"].Uninvoiced) {
                this.businessSectorCtrl.disable();
                this.businessSectorDescriptionCtrl.disable();
            }
            else {
                this.businessSectorCtrl.enable();
                this.businessSectorDescriptionCtrl.enable();
            }
        }
        return entity;
    };
    LocationFormComponent.prototype.displayBusinessSector = function (businessSector) {
        return businessSector ? businessSector.sectorCode : '';
    };
    LocationFormComponent.prototype.checkLocationFormPrivileges = function () {
        var _this = this;
        this.company = this.route.snapshot.paramMap.get('company');
        this.securityService.isSecurityReady().subscribe(function () {
            if (_this.authorizationService.isPrivilegeAllowed(_this.company, 'Trades')
                && _this.authorizationService.isPrivilegeAllowed(_this.company, 'MainTab')) {
                _this.portOfOriginPrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'PortOfOrigin');
                _this.portOfDestinationPrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'PortOfDestination');
                _this.businessSectorPrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'MarketSector');
            }
        });
        if (!this.portOfOriginPrivilege) {
            this.portOfOriginCtrl.disable();
            this.portOfOriginDescriptionCtrl.disable();
        }
        if (!this.portOfDestinationPrivilege) {
            this.portOfDestinationCtrl.disable();
            this.portOfDestinationDescCtrl.disable();
        }
        if (!this.businessSectorPrivilege) {
            this.businessSectorCtrl.disable();
            this.businessSectorDescriptionCtrl.disable();
        }
    };
    LocationFormComponent.prototype.clearDescription = function () {
        if (!this.businessSectorCtrl.value) {
            this.businessSectorDescriptionCtrl.patchValue('');
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], LocationFormComponent.prototype, "portsWarningMessage", void 0);
    LocationFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-location-form-component',
            template: __webpack_require__(/*! ./location-form-component.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/location-form-component/location-form-component.component.html"),
            styles: [__webpack_require__(/*! ./location-form-component.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/location-form-component/location-form-component.component.scss")],
            providers: [_shared_services_masterdata_ports_data_loader__WEBPACK_IMPORTED_MODULE_13__["PortsDataLoader"]],
        }),
        __metadata("design:paramtypes", [_node_modules_angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"],
            _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_12__["MasterdataService"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_15__["UtilService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_11__["FormConfigurationProviderService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"],
            _shared_services_masterdata_ports_data_loader__WEBPACK_IMPORTED_MODULE_13__["PortsDataLoader"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__["AuthorizationService"],
            _shared_services_security_service__WEBPACK_IMPORTED_MODULE_14__["SecurityService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_16__["TradingService"]])
    ], LocationFormComponent);
    return LocationFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/memo-form-component/memo-form-component.component.html":
/*!****************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/memo-form-component/memo-form-component.component.html ***!
  \****************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"trade-capture-card\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h2>Internal Memorandum</h2>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxFlex=\"100%\"\r\n             class=\"custom-form\"\r\n             [class.required-field]=\"memoCtrl.isRequired\"\r\n             [class.displayMode]=\"!isInputField\">\r\n            <mat-form-field>\r\n                <textarea matInput\r\n                          rows=\"5\"\r\n                          [maxlength]=\"2000\"\r\n                          [formControl]='memoCtrl'\r\n                          [required]=\"memoCtrl.isRequired\"></textarea>\r\n                <mat-error *ngIf=\"memoCtrl.hasError('maxlength')\"> Internal memorandum should be at most 2000 Characters\r\n                    long </mat-error>\r\n                <mat-error *ngIf=\"memoCtrl.hasError('required')\">\r\n                    This field is required\r\n                </mat-error>\r\n                <mat-hint *ngIf=\"memoCtrl.isRequired && memoCtrl.enabled\">\r\n                    Required *\r\n                </mat-hint>\r\n            </mat-form-field>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/memo-form-component/memo-form-component.component.scss":
/*!****************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/memo-form-component/memo-form-component.component.scss ***!
  \****************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "textarea.mat-input-element {\n  max-height: 125px; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/memo-form-component/memo-form-component.component.ts":
/*!**************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/memo-form-component/memo-form-component.component.ts ***!
  \**************************************************************************************************************************************/
/*! exports provided: MemoFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MemoFormComponent", function() { return MemoFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/models/section-complete-display-view */ "./Client/app/shared/models/section-complete-display-view.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









var MemoFormComponent = /** @class */ (function (_super) {
    __extends(MemoFormComponent, _super);
    function MemoFormComponent(formbuilder, formConfigurationProvider, route, authorizationService, securityService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formbuilder = formbuilder;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.route = route;
        _this.authorizationService = authorizationService;
        _this.securityService = securityService;
        _this.isInputField = true;
        _this.model = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_6__["SectionCompleteDisplayView"]();
        _this.memoCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('Memorandum');
        _this.tradeImageDetails = [];
        _this.internalMemorandumPrivilege = false;
        return _this;
    }
    MemoFormComponent.prototype.ngOnInit = function () {
        this.setValidators();
        this.bindConfiguration();
        this.checkInternalMemorandumPrivilege();
    };
    MemoFormComponent.prototype.setValidators = function () {
        this.memoCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].maxLength(2000)]));
        this.formGroup.updateValueAndValidity();
    };
    MemoFormComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formbuilder.group({
            memoCtrl: this.memoCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    MemoFormComponent.prototype.initForm = function (entity, isEdit) {
        var tradeRecord = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_6__["SectionCompleteDisplayView"](entity);
        this.model = tradeRecord;
        this.isInputField = isEdit;
        if (this.model.memorandum != null) {
            this.formGroup.patchValue({ memoCtrl: this.model.memorandum });
        }
        if (!isEdit) {
            this.memoCtrl.disable();
        }
        if (this.route.snapshot.data['isImage'] === true) {
            this.tradeImageDetails = JSON.parse(this.route.snapshot.queryParams.tradeImageDetails);
            if (this.tradeImageDetails && this.tradeImageDetails.length > 0) {
                if (!this.tradeImageDetails.filter(function (e) { return e.tradeFieldName === 'Memorandum'; })[0].isEdit) {
                    this.memoCtrl.disable();
                }
                if (!this.tradeImageDetails.filter(function (e) { return e.tradeFieldName === 'Memorandum'; })[0].isCopy) {
                    this.memoCtrl.patchValue(null);
                }
                else {
                    this.formGroup.patchValue({ memoCtrl: this.model.memorandum });
                }
            }
        }
        return entity;
    };
    MemoFormComponent.prototype.populateEntity = function (entity) {
        var section = entity;
        section.memorandum = this.memoCtrl.value;
        return entity;
    };
    MemoFormComponent.prototype.checkInternalMemorandumPrivilege = function () {
        var _this = this;
        this.company = this.route.snapshot.paramMap.get('company');
        this.securityService.isSecurityReady().subscribe(function () {
            if (_this.authorizationService.isPrivilegeAllowed(_this.company, 'Trades') && _this.authorizationService.isPrivilegeAllowed(_this.company, 'MainTab')) {
                _this.internalMemorandumPrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'InternalMemorandum');
            }
        });
        if (!this.internalMemorandumPrivilege) {
            this.memoCtrl.disable();
        }
    };
    MemoFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-memo-form-component',
            template: __webpack_require__(/*! ./memo-form-component.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/memo-form-component/memo-form-component.component.html"),
            styles: [__webpack_require__(/*! ./memo-form-component.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/memo-form-component/memo-form-component.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_7__["FormConfigurationProviderService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__["AuthorizationService"],
            _shared_services_security_service__WEBPACK_IMPORTED_MODULE_8__["SecurityService"]])
    ], MemoFormComponent);
    return MemoFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/price-form-component/price-form-component.component.html":
/*!******************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/price-form-component/price-form-component.component.html ***!
  \******************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"trade-capture-card\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h2>Price</h2>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\">\r\n            <div class=\"custom-form\"\r\n                 fxFlex=\"30%\"\r\n                 [class.displayMode]=\"!currencyCtrl.enabled\"\r\n                 [class.isEmpty]=\"!currencyCtrl.value\"\r\n                 [class.required-field]=\"currencyCtrl.isRequired\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Currency\"\r\n                           [matAutocomplete]=\"currencies\"\r\n                           [formControl]=\"currencyCtrl\"\r\n                           [matTooltip]=\"'Currency'\"\r\n                           autocomplete=\"off\"\r\n                           [required]=\"currencyCtrl.isRequired\">\r\n                    <mat-icon *ngIf=\"isEdit\"\r\n                              class=\"bookmark-icon\"\r\n                              matSuffix>bookmark</mat-icon>\r\n                    <mat-autocomplete #currencies=\"matAutocomplete\"\r\n                                      [panelWidth]=\"panelSize\">\r\n                        <mat-option *ngFor=\"let currency of filteredCurrencyList\"\r\n                                    [value]=\"currency.currencyCode\">{{currency.currencyCode}} |\r\n                            {{currency.description}}</mat-option>\r\n                    </mat-autocomplete>\r\n                    <mat-error *ngIf=\"currencyCtrl.hasError('required')\">\r\n                        Currency is required\r\n                    </mat-error>\r\n                    <mat-error *ngIf=\"currencyCtrl.hasError('inDropdownList')\">\r\n                        Value not in list\r\n                    </mat-error>\r\n                    <mat-hint *ngIf=\"currencyCtrl.isRequired && currencyCtrl.enabled\">\r\n                        Required *\r\n                    </mat-hint>\r\n                </mat-form-field>\r\n            </div>\r\n            <div class=\"custom-form\"\r\n                 fxFlex=\"30%\"\r\n                 [class.displayMode]=\"!priceUnitIdCtrl.enabled\"\r\n                 [class.isEmpty]=\"!priceUnitIdCtrl.value\"\r\n                 [class.required-field]=\"priceUnitIdCtrl.isRequired\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Price Code\"\r\n                           [matAutocomplete]=\"priceUnits\"\r\n                           [formControl]=\"priceUnitIdCtrl\"\r\n                           [matTooltip]=\"'Price Code'\"\r\n                           autocomplete=\"off\"\r\n                           [required]=\"priceUnitIdCtrl.isRequired\">\r\n                    <mat-icon *ngIf=\"isEdit\"\r\n                              class=\"bookmark-icon\"\r\n                              matSuffix>bookmark</mat-icon>\r\n                    <mat-autocomplete #priceUnits=\"matAutocomplete\"\r\n                                      [panelWidth]=\"panelSize\"\r\n                                      [displayWith]=\"displayPriceUnit.bind(this)\">\r\n                        <mat-option *ngFor=\"let priceCode of filteredPriceCodeList\"\r\n                                    [value]=\"priceCode.priceUnitId\">{{priceCode.priceCode}} |\r\n                            {{priceCode.description}}</mat-option>\r\n                    </mat-autocomplete>\r\n                    <mat-error *ngIf=\"priceUnitIdCtrl.hasError('required')\">\r\n                        Price Code is required\r\n                    </mat-error>\r\n                    <mat-error *ngIf=\"priceUnitIdCtrl.hasError('inDropdownList')\">\r\n                        Value not in list\r\n                    </mat-error>\r\n                    <mat-hint *ngIf=\"priceUnitIdCtrl.isRequired && priceUnitIdCtrl.enabled\">\r\n                        Required *\r\n                    </mat-hint>\r\n                </mat-form-field>\r\n            </div>\r\n            <div class=\"custom-form\"\r\n                 fxFlex=\"30%\"\r\n                 [class.displayMode]=\"!contractPriceCtrl.enabled\"\r\n                 [class.isEmpty]=\"!contractPriceCtrl.value\"\r\n                 [class.required-field]=\"contractPriceCtrl.isRequired\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           [textMask]=\"{mask:mask}\"\r\n                           placeholder=\"Contract Price\"\r\n                           [formControl]=\"contractPriceCtrl\"\r\n                           [title]=\"priceToolTip\"\r\n                           [required]=\"contractPriceCtrl.isRequired\"\r\n                           autocomplete=\"off\">\r\n                    <mat-error *ngIf=\"contractPriceCtrl.hasError('required')\">\r\n                        Contract Price is required\r\n                    </mat-error>\r\n                    <mat-error *ngIf=\"contractPriceCtrl.hasError('isPositiveError')\">\r\n                        Price must be positive.\r\n                    </mat-error>\r\n                    <mat-hint *ngIf=\"contractPriceCtrl.isRequired && contractPriceCtrl.enabled\">\r\n                        Required *\r\n                    </mat-hint>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\"\r\n             class=\"displayMode\">\r\n            <mat-form-field fxFlex=\"30%\">\r\n                <input matInput\r\n                       [formControl]=\"contractValueCtrl\"\r\n                       placeholder=\"Contract Value\"\r\n                       [title]=\"contractValueToolTip\"\r\n                       autocomplete=\"off\">\r\n            </mat-form-field>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\">\r\n            <div fxFlex=\"35%\">\r\n                <atlas-masterdata-user-preferences-input fxFlex=\"90%\"\r\n                                                         [isEditable]=\"paymentTermsCtrl.enabled\"\r\n                                                         [fieldControl]=\"paymentTermsCtrl\"\r\n                                                         [options]=\"filteredPaymentTermsList\"\r\n                                                         label=\"Payment Terms\"\r\n                                                         displayProperty=\"paymentTermCode\"\r\n                                                         [selectProperties]=\"['paymentTermCode','description']\"\r\n                                                         [errorMap]=\"paymentTermsErrorMap\"\r\n                                                         lightBoxTitle=\"Results for Payment Terms\"\r\n                                                         gridId=\"paymentTermsGrid\"\r\n                                                         (optionSelected)=\"onPaymentTermSelected($event)\"\r\n                                                         [dataLoader]=\"paymentTermsDataLoader\">\r\n                </atlas-masterdata-user-preferences-input>\r\n\r\n            </div>\r\n            <atlas-form-input fxFlex=\"45%\"\r\n                              [fieldControl]=\"paymentTermsDescriptionCtrl\"\r\n                              [isEditable]=\"isInputField\"\r\n                              [label]=\"'Payment Term Description'\">\r\n            </atlas-form-input>\r\n\r\n        </div>\r\n        <mat-accordion class=\"price-accordion\">\r\n            <mat-expansion-panel [expanded]=\"isExpanded\">\r\n                <mat-expansion-panel-header (click)=\"onPanelClicked()\"\r\n                                            [collapsedHeight]=\"'25px'\"\r\n                                            [expandedHeight]=\"'25px'\">\r\n                </mat-expansion-panel-header>\r\n                <div fxLayout=\"row\"\r\n                     fxLayoutAlign=\"left start\"\r\n                     fxLayoutGap=\"5%\"\r\n                     class=\"price-expansion-section\">\r\n                    <mat-button-toggle-group class=\"toggle-group\"\r\n                                             name=\"toggleStyle\"\r\n                                             [formControl]=\"discountPremiumCtrl\">\r\n                        <mat-button-toggle [value]=\"DiscountType.Discount\"\r\n                                           (change)=\"onDiscPremToggleClicked($event)\">\r\n                            {{DiscountType[DiscountType.Discount]}}</mat-button-toggle>\r\n                        <mat-button-toggle [value]=\"DiscountType.Premium\"\r\n                                           (change)=\"onDiscPremToggleClicked($event)\">\r\n                            {{DiscountType[DiscountType.Premium]}}</mat-button-toggle>\r\n                    </mat-button-toggle-group>\r\n                    <div fxFlex=\"15%\"\r\n                         [class.displayMode]=\"isShow\">\r\n                        <mat-form-field>\r\n                            <input matInput\r\n                                   placeholder=\"D/P Ccy\"\r\n                                   [matAutocomplete]=\"dpCurrencies\"\r\n                                   [formControl]=\"discountPremiumCurrencyCtrl\"\r\n                                   [matTooltip]=\"'D/P Currency'\"\r\n                                   autocomplete=\"off\"\r\n                                   [required]=\"discountPremiumCurrencyCtrl.isRequired\">\r\n                            <mat-autocomplete #dpCurrencies=\"matAutocomplete\"\r\n                                              [panelWidth]=\"panelSize\">\r\n                                <mat-option *ngFor=\"let dpcurrency of filteredCurrencyList\"\r\n                                            [value]=\"dpcurrency.currencyCode\">\r\n                                    {{dpcurrency.currencyCode}} | {{dpcurrency.description}}\r\n                                </mat-option>\r\n                            </mat-autocomplete>\r\n                            <mat-error *ngIf=\"discountPremiumCurrencyCtrl.hasError('inDropdownList')\">\r\n                                Value not in list\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"15%\"\r\n                         [class.displayMode]=\"isShow\">\r\n                        <mat-form-field>\r\n                            <mat-select placeholder=\"D/P Type\"\r\n                                        [formControl]=\"discountPremiumTypeCtrl\"\r\n                                        [matTooltip]=\"'D/P Type'\"\r\n                                        [required]=\"discountPremiumTypeCtrl.isRequired\">\r\n                                <mat-option [value]=\"DiscountBasis.Rate\">{{DiscountBasis[DiscountBasis.Rate]}}\r\n                                </mat-option>\r\n                                <mat-option [value]=\"DiscountBasis.Percent\">{{DiscountBasis[DiscountBasis.Percent]}}\r\n                                </mat-option>\r\n                            </mat-select>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div fxFlex=\"15%\"\r\n                         [class.displayMode]=\"isShow\">\r\n                        <mat-form-field>\r\n                            <input matInput\r\n                                   placeholder=\"D/P value\"\r\n                                   [value]=\"0\"\r\n                                   [formControl]=\"discountPremiumValueCtrl\"\r\n                                   [matTooltip]=\"'D/P Value'\"\r\n                                   autocomplete=\"off\"\r\n                                   type=\"number\"\r\n                                   [required]=\"discountPremiumValueCtrl.isRequired\">\r\n                            <mat-error *ngIf=\"discountPremiumValueCtrl.hasError('min')\">\r\n                                Value must be positive.\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n                <div fxLayout=\"row\"\r\n                     fxLayoutAlign=\"left start\">\r\n                    <div fxFlex=\"30%\"\r\n                         [class.displayMode]=\"isShow\">\r\n                        <mat-form-field>\r\n                            <input matInput\r\n                                   [matDatepicker]=\"empicker\"\r\n                                   [formControl]=\"estimatedMaturityDateCtrl\"\r\n                                   autocomplete=\"off\"\r\n                                   placeholder=\"Estimated Maturity\">\r\n                            <mat-datepicker-toggle matSuffix\r\n                                                   [for]=\"empicker\"></mat-datepicker-toggle>\r\n                            <mat-datepicker #empicker></mat-datepicker>\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n            </mat-expansion-panel>\r\n        </mat-accordion>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/price-form-component/price-form-component.component.scss":
/*!******************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/price-form-component/price-form-component.component.scss ***!
  \******************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".mat-button-toggle-label-content {\n  padding: 0 10px;\n  font-size: 1em; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/price-form-component/price-form-component.component.ts":
/*!****************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/price-form-component/price-form-component.component.ts ***!
  \****************************************************************************************************************************************/
/*! exports provided: PriceFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PriceFormComponent", function() { return PriceFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var text_mask_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! text-mask-core */ "./node_modules/text-mask-core/dist/textMaskCore.js");
/* harmony import */ var text_mask_core__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(text_mask_core__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/directives/autocomplete-dropdown.directive */ "./Client/app/shared/directives/autocomplete-dropdown.directive.ts");
/* harmony import */ var _shared_directives_number_validators_directive__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/directives/number-validators.directive */ "./Client/app/shared/directives/number-validators.directive.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/entities/masterdata-props.entity */ "./Client/app/shared/entities/masterdata-props.entity.ts");
/* harmony import */ var _shared_enums_credit_against_type_enum__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/enums/credit-against-type.enum */ "./Client/app/shared/enums/credit-against-type.enum.ts");
/* harmony import */ var _shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/enums/discount-basis.enum */ "./Client/app/shared/enums/discount-basis.enum.ts");
/* harmony import */ var _shared_enums_discount_type_enum__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../shared/enums/discount-type.enum */ "./Client/app/shared/enums/discount-type.enum.ts");
/* harmony import */ var _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../shared/models/section-complete-display-view */ "./Client/app/shared/models/section-complete-display-view.ts");
/* harmony import */ var _shared_numberMask__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../../shared/numberMask */ "./Client/app/shared/numberMask.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./../../../../../shared/entities/atlas-number.entity */ "./Client/app/shared/entities/atlas-number.entity.ts");
/* harmony import */ var _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./../../../../../shared/enums/permission-level.enum */ "./Client/app/shared/enums/permission-level.enum.ts");
/* harmony import */ var _shared_services_masterdata_paymentTerms_data_loader__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./../../../../../shared/services/masterdata/paymentTerms-data-loader */ "./Client/app/shared/services/masterdata/paymentTerms-data-loader.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
























var moment = moment__WEBPACK_IMPORTED_MODULE_3__;
var PriceFormComponent = /** @class */ (function (_super) {
    __extends(PriceFormComponent, _super);
    function PriceFormComponent(route, formBuilder, masterdataService, utilService, companyManager, formConfigurationProvider, paymentTermsDataLoader, authorizationService, securityService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.route = route;
        _this.formBuilder = formBuilder;
        _this.masterdataService = masterdataService;
        _this.utilService = utilService;
        _this.companyManager = companyManager;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.paymentTermsDataLoader = paymentTermsDataLoader;
        _this.authorizationService = authorizationService;
        _this.securityService = securityService;
        _this.DiscountType = _shared_enums_discount_type_enum__WEBPACK_IMPORTED_MODULE_14__["DiscountTypes"];
        _this.DiscountBasis = _shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_13__["DiscountBasis"];
        _this.selectedDiscPrem = undefined; // this variable is used to help unselect the prem/disc toggle
        _this.isShow = false;
        _this.isEdit = true;
        _this.model = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_15__["SectionCompleteDisplayView"]();
        _this.isInputField = false;
        _this.isTradeImage = false;
        _this.currencyPrivilege = false;
        _this.priceCodePrivilege = false;
        _this.contractPricePrivilege = false;
        _this.contractValuePrivilege = false;
        _this.paymentTermsPrivilege = false;
        _this.priceToolTip = '';
        _this.contractValueToolTip = '';
        _this.currencyCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_10__["AtlasFormControl"]('CurrencyCode');
        _this.priceUnitIdCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_10__["AtlasFormControl"]('PricingMethodId');
        _this.contractPriceCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_10__["AtlasFormControl"]('Price');
        _this.contractValueCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_10__["AtlasFormControl"]('ContractedValue');
        _this.paymentTermsCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_10__["AtlasFormControl"]('PaymentTermId');
        _this.paymentTermsDescriptionCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_10__["AtlasFormControl"]('Description');
        _this.discountPremiumCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_10__["AtlasFormControl"]('FlatPricePremiumOrDiscount');
        _this.discountPremiumCurrencyCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_10__["AtlasFormControl"]('PremiumDiscountCurrency');
        _this.discountPremiumTypeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_10__["AtlasFormControl"]('Type');
        _this.discountPremiumValueCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_10__["AtlasFormControl"]('PremiumDiscountValue', Object(_shared_directives_number_validators_directive__WEBPACK_IMPORTED_MODULE_9__["isPositive"])());
        _this.estimatedMaturityDateCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_10__["AtlasFormControl"]('EstimatedMaturityDate');
        _this.tradeImageDetails = [];
        _this.masterdataList = [
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_11__["MasterDataProps"].Currencies,
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_11__["MasterDataProps"].PriceUnits,
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_11__["MasterDataProps"].PaymentTerms,
        ];
        _this.mask = Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_16__["CustomNumberMask"])(12, 10, true);
        _this.paymentTermsErrorMap = new Map()
            .set('required', 'Payment Term is required')
            .set('inDropdownList', 'Value not in list.');
        _this.isExpanded = false;
        _this.startPositionMonthType = 'start';
        _this.endPositionMonthType = 'end';
        return _this;
    }
    PriceFormComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.masterdataService
            .getMasterData(this.masterdataList)
            .subscribe(function (data) {
            _this.masterdata = data;
            _this.filteredCurrencyList = _this.masterdata.currencies;
            _this.currencyCtrl.valueChanges.subscribe(function (input) {
                _this.filteredCurrencyList = _this.utilService.filterListforAutocomplete(input, _this.masterdata.currencies, ['currencyCode', 'description']);
            });
            _this.filteredPriceCodeList = _this.masterdata.priceUnits;
            _this.priceUnitIdCtrl.valueChanges.subscribe(function (input) {
                _this.filteredPriceCodeList = _this.utilService.filterListforAutocomplete(input, _this.masterdata.priceUnits, ['priceCode', 'description']);
                _this.setContractValue();
            });
            _this.filteredPaymentTermsList = _this.masterdata.paymentTerms;
            _this.paymentTermsCtrl.valueChanges.subscribe(function (input) {
                _this.filteredPaymentTermsList = _this.utilService.filterListforAutocomplete(input, _this.masterdata.paymentTerms, ['paymentTermCode', 'description']);
                if (_this.paymentTermsCtrl.valid || !_this.paymentTermsCtrl.value) {
                    _this.onPaymentTermSelected(_this.paymentTermsCtrl.value);
                }
            });
            _this.filteredDiscPremCurrencyList = _this.masterdata.currencies;
            _this.discountPremiumCurrencyCtrl.valueChanges.subscribe(function (input) {
                _this.filteredDiscPremCurrencyList = _this.utilService.filterListforAutocomplete(input, _this.masterdata.currencies, ['currencyCode', 'description']);
            });
            _this.setValidators();
            _this.bindConfiguration();
        });
        this.contractPriceCtrl.valueChanges.subscribe(function (v) {
            return _this.setContractValue();
        });
        this.discountPremiumCurrencyCtrl.valueChanges.subscribe(function (v) {
            return _this.setContractValue();
        });
        this.discountPremiumTypeCtrl.valueChanges.subscribe(function (v) { return _this.setContractValue(); });
        this.discountPremiumValueCtrl.valueChanges.subscribe(function (v) { return _this.setContractValue(); });
        this.currencyCtrl.valueChanges.subscribe(function (v) { return _this.setContractValue(); });
        this.contractValueCtrl.disable({ emitEvent: false });
        if (this.route.snapshot.data['isImage'] === true) {
            this.isTradeImage = true;
        }
        this.checkPriceFormPrivileges();
    };
    PriceFormComponent.prototype.setValidators = function () {
        this.currencyCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([
            Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_8__["inDropdownListValidator"])(this.masterdata.currencies, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_20__["nameof"])('currencyCode')),
        ]));
        this.priceUnitIdCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([
            Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_8__["inDropdownListValidator"])(this.masterdata.priceUnits, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_20__["nameof"])('priceUnitId')),
        ]));
        this.contractPriceCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([Object(_shared_directives_number_validators_directive__WEBPACK_IMPORTED_MODULE_9__["isPositive"])()]));
        this.paymentTermsCtrl.setValidators(Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_8__["inDropdownListValidator"])(this.masterdata.paymentTerms, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_20__["nameof"])('paymentTermCode')));
        this.discountPremiumCurrencyCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([
            Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_8__["inDropdownListValidator"])(this.masterdata.currencies, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_20__["nameof"])('currencyCode'))
        ]));
        this.discountPremiumValueCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].min(0)]));
        this.setDiscountPremiumValidators();
    };
    PriceFormComponent.prototype.getCurrency = function (currencyValue) {
        this.currencyVal = currencyValue;
    };
    PriceFormComponent.prototype.onPaymentTermSelected = function (paymentTermCode) {
        if (!this.paymentTermsCtrl.valid || !paymentTermCode) {
            if (this.paymentTermsDescriptionCtrl.value) {
                this.paymentTermsDescriptionCtrl.patchValue('');
            }
            return;
        }
        var selectedPaymentTerm = this.masterdata.paymentTerms.find(function (payTerm) { return payTerm.paymentTermCode === paymentTermCode.paymentTermCode; });
        if (selectedPaymentTerm) {
            this.paymentTermsDescriptionCtrl.patchValue(selectedPaymentTerm.description);
            this.formGroup.updateValueAndValidity();
        }
    };
    PriceFormComponent.prototype.setContractValue = function () {
        var _this = this;
        if (this.masterdata === undefined) {
            return;
        }
        var weightCodeConversion = this.weightUnit
            ? this.weightUnit.conversionFactor
            : undefined;
        var selectedPriceUnit = this.masterdata.priceUnits.filter(function (priceUnit) { return priceUnit.priceUnitId === _this.priceUnitIdCtrl.value; });
        var priceCodeConversion = selectedPriceUnit.length > 0
            ? selectedPriceUnit[0].conversionFactor
            : undefined;
        if (!weightCodeConversion || !priceCodeConversion
            || !(this.quantityVal || this.quantityVal === 0)
            || !this.contractPriceCtrl.value) {
            this.contractValueCtrl.setValue('');
            return;
        }
        var contractPrice = this.contractPriceCtrl.value.toString().replace(/,/g, '');
        var contractPriceDecimal = new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_21__["AtlasNumber"](contractPrice);
        var quantity = this.quantityVal.toString().replace(/,/g, '');
        var quantityDecimal = new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_21__["AtlasNumber"](quantity);
        if (this.discountPremiumCtrl.value !== undefined &&
            this.currencyCtrl !== this.discountPremiumCurrencyCtrl &&
            this.selectedDiscPrem !== undefined) {
            // discountPremiumValue exists
            if ((this.discountPremiumCtrl.value && this.selectedDiscPrem) != null) {
                this.isExpanded = true;
            }
            var discountPremiumContractedPrice = 0;
            var discountPremiumSign = (this.discountPremiumCtrl.value === _shared_enums_discount_type_enum__WEBPACK_IMPORTED_MODULE_14__["DiscountTypes"].Discount ? -1 : 1);
            // tslint:disable-next-line:prefer-conditional-expression
            if (this.discountPremiumTypeCtrl.value === _shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_13__["DiscountBasis"].Rate) {
                discountPremiumContractedPrice = this.discountPremiumValueCtrl.value * discountPremiumSign;
            }
            else if (this.discountPremiumTypeCtrl.value === _shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_13__["DiscountBasis"].Percent) {
                discountPremiumContractedPrice = contractPriceDecimal.bigNumber.toNumber()
                    * ((this.discountPremiumValueCtrl.value * discountPremiumSign / 100));
            }
            contractPriceDecimal = contractPriceDecimal.plus(discountPremiumContractedPrice);
        }
        var contractValue = contractPriceDecimal.times(quantityDecimal).times(weightCodeConversion *
            priceCodeConversion).toString();
        var contractValueFormatted = Object(text_mask_core__WEBPACK_IMPORTED_MODULE_4__["conformToMask"])(contractValue, this.mask, { guide: false }).conformedValue;
        this.contractValueCtrl.setValue(contractValueFormatted);
    };
    PriceFormComponent.prototype.commodityCodeSelected = function (commodity) {
        if (!this.currencyCtrl.value) {
            this.currencyCtrl.setValue(commodity.currency);
        }
        if (!this.priceUnitIdCtrl.value) {
            this.priceUnitIdCtrl.setValue(commodity.priceUnitId);
        }
        this.currencyCtrl.updateValueAndValidity();
        this.priceUnitIdCtrl.updateValueAndValidity();
    };
    PriceFormComponent.prototype.onDiscPremToggleClicked = function (event) {
        var discountType = event.value;
        if (this.selectedDiscPrem !== undefined
            && discountType === this.selectedDiscPrem) {
            this.discountPremiumCtrl.setValue('');
            this.selectedDiscPrem = undefined;
        }
        else {
            this.selectedDiscPrem = discountType;
        }
        this.setDiscountPremiumValidators();
        this.discountPremiumCurrencyCtrl.reset();
        this.discountPremiumTypeCtrl.reset();
        this.discountPremiumValueCtrl.reset();
    };
    PriceFormComponent.prototype.setDiscountPremiumValidators = function () {
        if (this.selectedDiscPrem || this.selectedDiscPrem === 0) {
            this.discountPremiumCurrencyCtrl.enable();
            this.discountPremiumTypeCtrl.enable();
            this.discountPremiumValueCtrl.enable();
        }
        else {
            this.discountPremiumCurrencyCtrl.disable();
            this.discountPremiumTypeCtrl.disable();
            this.discountPremiumValueCtrl.disable();
        }
    };
    PriceFormComponent.prototype.initForm = function (entity, isEdit) {
        var _this = this;
        this.isEdit = isEdit;
        this.isShow = !isEdit;
        var tradeRecord = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_15__["SectionCompleteDisplayView"](entity);
        this.model = tradeRecord;
        if (this.model.priceUnitId === 0) {
            this.model.priceUnitId = null;
        }
        if (this.model.priceUnitId != null) {
            this.formGroup.patchValue({ priceUnitIdCtrl: this.model.priceUnitId });
        }
        if (this.model.currency != null) {
            this.formGroup.patchValue({ currencyCtrl: this.model.currency });
        }
        if (this.model.price != null) {
            this.formGroup.patchValue({
                contractPriceCtrl: isEdit ? this.model.price :
                    this.model.price.toFixed(4),
            });
        }
        if (this.model.paymentTerms != null) {
            var selectedPaymentTerm = this.masterdata.paymentTerms.find(function (paymentTerms) { return paymentTerms.paymentTermCode === _this.model.paymentTerms; });
            if (selectedPaymentTerm) {
                this.filteredPaymentTermsList = [selectedPaymentTerm];
                this.paymentTermsCtrl.patchValue(selectedPaymentTerm);
                this.onPaymentTermSelected(selectedPaymentTerm);
            }
            if (this.model.estimatedMaturityDate) {
                this.estimatedMaturityDateCtrl.setValue(this.model.estimatedMaturityDate);
            }
            else {
                var creditDays = selectedPaymentTerm ? selectedPaymentTerm.creditDays : null;
                var creditAgainst = selectedPaymentTerm ? selectedPaymentTerm.creditAgainst : null;
                var maturityDate = this.companyManager.getCurrentCompanyDate().toDate();
                switch (creditAgainst) {
                    case _shared_enums_credit_against_type_enum__WEBPACK_IMPORTED_MODULE_12__["CreditAgainstTypes"].CurrentDate:
                        maturityDate = this.companyManager.getCurrentCompanyDate().toDate();
                        break;
                    case _shared_enums_credit_against_type_enum__WEBPACK_IMPORTED_MODULE_12__["CreditAgainstTypes"].ArrivalDate:
                        maturityDate = new Date(this.model.deliveryPeriodEnd.getTime());
                        break;
                    case _shared_enums_credit_against_type_enum__WEBPACK_IMPORTED_MODULE_12__["CreditAgainstTypes"].InvoiceDate:
                        maturityDate = this.model.invoiceDate ?
                            new Date(this.model.invoiceDate) :
                            this.calculateMaturityDateOnShippment();
                        break;
                    default:
                        // Need to call new Date(date) to avoid modifying the blDate when changing maturityDate
                        maturityDate = this.model.blDate ?
                            new Date(this.model.blDate) :
                            this.calculateMaturityDateOnShippment();
                        break;
                }
                maturityDate.setDate(maturityDate.getDate() + creditDays);
                this.estimatedMaturityDateCtrl.setValue(maturityDate);
            }
        }
        if (this.model.premiumDiscountBasis != null) {
            this.discountPremiumTypeCtrl.setValue(this.model.premiumDiscountBasis);
        }
        if (this.model.premiumDiscountCurrency != null) {
            this.discountPremiumCurrencyCtrl.setValue(this.model.premiumDiscountCurrency);
        }
        if (this.model.premiumDiscountValue != null) {
            this.discountPremiumValueCtrl.setValue(this.model.premiumDiscountValue);
        }
        this.selectedDiscPrem = this.model.premiumDiscountTypeId;
        this.setDiscountPremiumValidators();
        this.discountPremiumCtrl.setValue(this.model.premiumDiscountTypeId);
        if (this.model.contractedValue || this.model.contractedValue === '0') {
            this.formGroup.patchValue({
                contractValueCtrl: isEdit ?
                    this.formatpriceContractValue(Number(this.removeExponentialIfExist(this.model.contractedValue))) :
                    this.formatContractValue(Number(this.removeExponentialIfExist(this.model.contractedValue))),
            });
        }
        if (!isEdit) {
            this.formGroup.disable({ emitEvent: false });
            this.priceToolTip = this.formatpriceContractValue(this.model.price);
            this.contractValueToolTip = this.formatpriceContractValue(Number(this.model.contractedValue));
        }
        else if (this.isTradeImage) {
            this.tradeImageDetails = JSON.parse(this.route.snapshot.queryParams.tradeImageDetails);
            if (this.tradeImageDetails && this.tradeImageDetails.length > 0) {
                var checkCurrencyCodeIsEdit = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'CurrencyCode'; });
                if (checkCurrencyCodeIsEdit && !checkCurrencyCodeIsEdit.isEdit) {
                    this.currencyCtrl.disable();
                }
                else {
                    this.currencyCtrl.enable();
                }
                var checkPricingMethodIdIsEdit = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'PricingMethodId'; });
                if (checkPricingMethodIdIsEdit && !checkPricingMethodIdIsEdit.isEdit) {
                    this.priceUnitIdCtrl.disable();
                }
                else {
                    this.priceUnitIdCtrl.enable();
                }
                var checkPriceIsEdit = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'Price'; });
                if (checkPriceIsEdit && !checkPriceIsEdit.isEdit) {
                    this.contractPriceCtrl.disable();
                }
                else {
                    this.contractPriceCtrl.enable();
                }
                var checkPaymentTermIdIsEdit = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'PaymentTermId'; });
                if (checkPaymentTermIdIsEdit && !checkPaymentTermIdIsEdit.isEdit) {
                    this.paymentTermsCtrl.disable();
                }
                else {
                    this.paymentTermsCtrl.enable();
                }
                var checkPremiumDiscountBasisIsEdit = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'PremiumDiscountBasis'; });
                if (checkPremiumDiscountBasisIsEdit && !checkPremiumDiscountBasisIsEdit.isEdit) {
                    this.discountPremiumCtrl.disable();
                }
                else {
                    this.discountPremiumCtrl.enable();
                }
                var checkCurrencyCodeIsCopy = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'CurrencyCode'; });
                if (checkCurrencyCodeIsCopy && !checkCurrencyCodeIsCopy.isCopy) {
                    this.currencyCtrl.patchValue(null);
                }
                var checkPricingMethodIdIsCopy = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'PriceUnitId'; });
                if (checkPricingMethodIdIsCopy && !checkPricingMethodIdIsCopy.isCopy) {
                    this.priceUnitIdCtrl.patchValue(null);
                }
                var checkPriceIsCopy = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'Price'; });
                if (checkPriceIsCopy && !checkPriceIsCopy.isCopy) {
                    this.contractPriceCtrl.patchValue(null);
                }
                var checkPaymentTermIdIsCopy = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'PaymentTermId'; });
                if (checkPaymentTermIdIsCopy && !checkPaymentTermIdIsCopy.isCopy) {
                    this.paymentTermsCtrl.patchValue(null);
                    this.paymentTermsDescriptionCtrl.patchValue(null);
                }
                var checkPremiumDiscountCurrencyIsCopy = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'PremiumDiscountCurrency'; });
                if (checkPremiumDiscountCurrencyIsCopy && !checkPremiumDiscountCurrencyIsCopy.isCopy) {
                    this.discountPremiumCurrencyCtrl.patchValue(null);
                }
                var checkPremiumDiscountValueIsCopy = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'PremiumDiscountValue'; });
                if (checkPremiumDiscountValueIsCopy && !checkPremiumDiscountValueIsCopy.isCopy) {
                    this.discountPremiumValueCtrl.patchValue(null);
                }
                var checkEstimatedMaturityDateIsCopy = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'EstimatedMaturityDate'; });
                if (checkEstimatedMaturityDateIsCopy && !checkEstimatedMaturityDateIsCopy.isCopy) {
                    this.estimatedMaturityDateCtrl.patchValue(null);
                }
            }
        }
        else if (this.model.invoiceReference &&
            this.authorizationService.getPermissionLevel(this.company, 'Trades', 'Physicals', 'SuperTradeEdition') <= _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_22__["PermissionLevels"].None) {
            this.currencyCtrl.disable({ emitEvent: false });
            this.contractPriceCtrl.disable({ emitEvent: false });
            this.priceUnitIdCtrl.disable({ emitEvent: false });
            this.discountPremiumCtrl.disable({ emitEvent: false });
            this.discountPremiumCurrencyCtrl.disable({ emitEvent: false });
            this.discountPremiumTypeCtrl.disable({ emitEvent: false });
            this.discountPremiumValueCtrl.disable({ emitEvent: false });
        }
        return entity;
    };
    PriceFormComponent.prototype.calculateMaturityDateOnShippment = function () {
        var dateToConsider = new Date();
        if (this.model.positionMonthType.toLowerCase() === this.startPositionMonthType.toLowerCase()) {
            dateToConsider = new Date(this.model.deliveryPeriodStart);
            return moment(dateToConsider.setMonth(dateToConsider.getMonth()
                + this.model.positionMonthIndex)).endOf('month').toDate();
        }
        else if (this.model.positionMonthType.toLowerCase() === this.endPositionMonthType.toLowerCase()) {
            dateToConsider = new Date(this.model.deliveryPeriodEnd);
            return moment(dateToConsider.setMonth(dateToConsider.getMonth()
                + this.model.positionMonthIndex)).endOf('month').toDate();
        }
    };
    PriceFormComponent.prototype.removeExponentialIfExist = function (value) {
        if (value) {
            var newValue = new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_21__["AtlasNumber"](value);
            return newValue.toString();
        }
        return value;
    };
    PriceFormComponent.prototype.formatContractValue = function (value) {
        if (value) {
            return new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(value);
        }
        return value;
    };
    PriceFormComponent.prototype.formatpriceContractValue = function (value) {
        if (value) {
            return new Intl.NumberFormat('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 10 }).format(value);
        }
        return value;
    };
    PriceFormComponent.prototype.populateEntity = function (entity) {
        var section = entity;
        section.currencyCode = this.currencyCtrl.value;
        section.priceUnitId = ((this.priceUnitIdCtrl.value === '' && !this.priceUnitIdCtrl.isRequired) ? 0 : this.priceUnitIdCtrl.value);
        section.price = ((this.contractPriceCtrl.value === '' && !this.contractPriceCtrl.isRequired) ? 0 : this.contractPriceCtrl.value);
        section.contractedValue = this.contractValueCtrl.value ? this.contractValueCtrl.value : 0;
        var paymentTermCode = this.paymentTermsCtrl.value;
        section.paymentTerms = paymentTermCode ? paymentTermCode.paymentTermCode : null;
        section.discountPremiumCurrency = this.discountPremiumCurrencyCtrl.value;
        section.discountPremiumType = (this.selectedDiscPrem !== undefined) ? this.discountPremiumCtrl.value : null;
        section.discountPremiumBasis = this.discountPremiumTypeCtrl.value ? this.discountPremiumTypeCtrl.value : null;
        section.discountPremiumValue = this.discountPremiumValueCtrl.value ? this.discountPremiumValueCtrl.value : null;
        section.estimatedMaturityDate = this.estimatedMaturityDateCtrl.value ? this.estimatedMaturityDateCtrl.value : null;
        section.invoiceDate = this.model.invoiceDate;
        return section;
    };
    PriceFormComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            currencyCtrl: this.currencyCtrl,
            priceUnitIdCtrl: this.priceUnitIdCtrl,
            contractPriceCtrl: this.contractPriceCtrl,
            contractValueCtrl: this.contractValueCtrl,
            paymentTermsCtrl: this.paymentTermsCtrl,
            paymentTermsDescriptionCtrl: this.paymentTermsDescriptionCtrl,
            discountPremiumCtrl: this.discountPremiumCtrl,
            discountPremiumcurrencyCtrl: this.discountPremiumCurrencyCtrl,
            discountPremiumtypeCtrl: this.discountPremiumTypeCtrl,
            discountPremiumvalueCtrl: this.discountPremiumValueCtrl,
            estimatedMaturityDateCtrl: this.estimatedMaturityDateCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    PriceFormComponent.prototype.displayPriceUnit = function (priceUnitId) {
        if (priceUnitId) {
            var selectedUnit = this.masterdata.priceUnits.filter(function (priceUnit) { return priceUnit.priceUnitId === priceUnitId; });
            if (selectedUnit.length > 0) {
                return selectedUnit[0].priceCode;
            }
        }
        return '';
    };
    PriceFormComponent.prototype.checkPriceFormPrivileges = function () {
        var _this = this;
        this.company = this.route.snapshot.paramMap.get('company');
        this.securityService.isSecurityReady().subscribe(function () {
            if (_this.authorizationService.isPrivilegeAllowed(_this.company, 'Trades')
                && _this.authorizationService.isPrivilegeAllowed(_this.company, 'MainTab')) {
                _this.currencyPrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'Currency');
                _this.priceCodePrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'PriceCode');
                _this.contractPricePrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'ContractPrice');
                _this.contractValuePrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'ContractValue');
                _this.paymentTermsPrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'PaymentTerms');
            }
        });
        if (!this.currencyPrivilege) {
            this.currencyCtrl.disable();
        }
        if (!this.priceCodePrivilege) {
            this.priceUnitIdCtrl.disable();
        }
        if (!this.contractPricePrivilege) {
            this.contractPriceCtrl.disable();
        }
        if (!this.contractValuePrivilege) {
            this.contractValueCtrl.disable();
        }
        if (!this.paymentTermsPrivilege) {
            this.paymentTermsCtrl.disable();
            this.paymentTermsDescriptionCtrl.disable();
        }
    };
    PriceFormComponent.prototype.onPanelClicked = function () {
        this.isExpanded = !this.isExpanded;
    };
    PriceFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-price-form-component',
            template: __webpack_require__(/*! ./price-form-component.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/price-form-component/price-form-component.component.html"),
            styles: [__webpack_require__(/*! ./price-form-component.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/price-form-component/price-form-component.component.scss")],
            providers: [_shared_services_masterdata_paymentTerms_data_loader__WEBPACK_IMPORTED_MODULE_23__["PaymentTermsDataLoader"]],
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_18__["MasterdataService"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_20__["UtilService"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_6__["CompanyManagerService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_17__["FormConfigurationProviderService"],
            _shared_services_masterdata_paymentTerms_data_loader__WEBPACK_IMPORTED_MODULE_23__["PaymentTermsDataLoader"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_5__["AuthorizationService"],
            _shared_services_security_service__WEBPACK_IMPORTED_MODULE_19__["SecurityService"]])
    ], PriceFormComponent);
    return PriceFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_7__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/quantity-form-component/quantity-form-component.component.html":
/*!************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/quantity-form-component/quantity-form-component.component.html ***!
  \************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"trade-capture-card\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h2>Quantity</h2>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\">\r\n            <div class=\"custom-form\"\r\n                 fxFlex=\"30%\"\r\n                 [class.displayMode]=\"!weightUnitIdCtrl.enabled\"\r\n                 [class.isEmpty]=\"!weightUnitIdCtrl.value\"\r\n                 [class.required-field]=\"weightUnitIdCtrl.isRequired\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Quantity Code\"\r\n                           [required]=\"weightUnitIdCtrl.isRequired\"\r\n                           [matAutocomplete]=\"quantityCode\"\r\n                           [formControl]=\"weightUnitIdCtrl\"\r\n                           [matTooltip]=\"'Quantity Codes'\"\r\n                           autocomplete=\"off\"\r\n                           (focusout)=\"onFocusOut()\"\r\n                           (blur)=\"quantityCodeSet()\">\r\n                    <mat-icon *ngIf=\"isEdit\"\r\n                              class=\"bookmark-icon\"\r\n                              matSuffix>bookmark</mat-icon>\r\n                    <mat-autocomplete #quantityCode=\"matAutocomplete\"\r\n                                      [panelWidth]=\"panelSize\"\r\n                                      [displayWith]=\"displayQuantityUnit.bind(this)\">\r\n                        <mat-option *ngFor=\"let qtCode of filteredQuantityCode\"\r\n                                    [value]=\"qtCode.weightUnitId\">\r\n                            {{qtCode.weightCode}} |\r\n                            {{qtCode.description}}\r\n                        </mat-option>\r\n                    </mat-autocomplete>\r\n                    <mat-error *ngIf=\"weightUnitIdCtrl.hasError('required')\">\r\n                        This field is required\r\n                    </mat-error>\r\n                    <mat-error *ngIf=\"weightUnitIdCtrl.hasError('inDropdownList')\">\r\n                        Value not in list\r\n                    </mat-error>\r\n                    <mat-hint *ngIf=\"weightUnitIdCtrl.isRequired && weightUnitIdCtrl.enabled\">\r\n                        Required *\r\n                    </mat-hint>\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"30%\">\r\n                <atlas-form-input [fieldControl]=\"quantityCtrl\"\r\n                                  [required]=\"quantityCtrl.isRequired\"\r\n                                  [textMask]=\"{mask:mask}\"\r\n                                  [isEditable]=\"isInputField|| isInputMode\"\r\n                                  [title]=\"quantityToolTip\"\r\n                                  label=\"Quantity\"\r\n                                  [errorMap]=\"inputErrorMap\"\r\n                                  type=\"number\"\r\n                                  [hasWarning]=\"quantityWarning\"\r\n                                  warningMessage=\"Quantity is 0\"\r\n                                  (blur)=\"onQuantityBlur($event.target.value)\">\r\n                </atlas-form-input>\r\n            </div>\r\n            <div fxFlex=\"30%\">\r\n                <atlas-form-input [fieldControl]=\"quantityContractedCtrl\"\r\n                                  [required]=\"quantityContractedCtrl.isRequired\"\r\n                                  [textMask]=\"{mask:mask}\"\r\n                                  [isEditable]=\"isInputField|| isInputMode\"\r\n                                  [title]=\"contractedQtyToolTip\"\r\n                                  label=\"Quantity Contracted\"\r\n                                  type=\"number\"\r\n                                  [errorMap]=\"inputErrorMap \"\r\n                                  [hasWarning]=\"quantityContractedWarning\"\r\n                                  warningMessage=\"Quantity Contracted is 0\"\r\n                                  (blur)=\"onContractedQuantityBlur($event.target.value)\">\r\n                </atlas-form-input>\r\n            </div>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/quantity-form-component/quantity-form-component.component.scss":
/*!************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/quantity-form-component/quantity-form-component.component.scss ***!
  \************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/quantity-form-component/quantity-form-component.component.ts":
/*!**********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/quantity-form-component/quantity-form-component.component.ts ***!
  \**********************************************************************************************************************************************/
/*! exports provided: QuantityFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuantityFormComponent", function() { return QuantityFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/directives/autocomplete-dropdown.directive */ "./Client/app/shared/directives/autocomplete-dropdown.directive.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/entities/masterdata-props.entity */ "./Client/app/shared/entities/masterdata-props.entity.ts");
/* harmony import */ var _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/models/section-complete-display-view */ "./Client/app/shared/models/section-complete-display-view.ts");
/* harmony import */ var _shared_numberMask__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/numberMask */ "./Client/app/shared/numberMask.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./../../../../../shared/entities/atlas-number.entity */ "./Client/app/shared/entities/atlas-number.entity.ts");
/* harmony import */ var _shared_entities_section_entity__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./../../../../../shared/entities/section.entity */ "./Client/app/shared/entities/section.entity.ts");
/* harmony import */ var _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./../../../../../shared/enums/contract-status.enum */ "./Client/app/shared/enums/contract-status.enum.ts");
/* harmony import */ var _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./../../../../../shared/enums/permission-level.enum */ "./Client/app/shared/enums/permission-level.enum.ts");
/* harmony import */ var _quantity_form_control_validator_validator__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./quantity-form-control-validator.validator */ "./Client/app/trading/components/contract-physical-capture/form-components/quantity-form-component/quantity-form-control-validator.validator.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



















var QuantityFormComponent = /** @class */ (function (_super) {
    __extends(QuantityFormComponent, _super);
    function QuantityFormComponent(route, formBuilder, utilService, masterdataService, formConfigurationProvider, authorizationService, securityService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.route = route;
        _this.formBuilder = formBuilder;
        _this.utilService = utilService;
        _this.masterdataService = masterdataService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.authorizationService = authorizationService;
        _this.securityService = securityService;
        _this.quantitySelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.quantityCodeSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.isInputMode = true;
        _this.quantityWarning = false;
        _this.quantityContractedWarning = false;
        _this.isSplitAndTranche = true;
        _this.isTradeImage = false;
        _this.isInputField = false;
        _this.inputErrorMap = new Map();
        _this.model = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_8__["SectionCompleteDisplayView"]();
        _this.section = new _shared_entities_section_entity__WEBPACK_IMPORTED_MODULE_15__["Section"]();
        _this.tradeImageDetails = [];
        _this.isEdit = true;
        _this.quantityToolTip = '';
        _this.contractedQtyToolTip = '';
        _this.weightUnitIdCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('WeightUnitId');
        _this.quantityCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('Quantity');
        _this.quantityContractedCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('OriginalQuantity');
        _this.masterdataList = [_shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__["MasterDataProps"].WeightUnits];
        _this.quantityPrivilege = false;
        _this.quantityCodePrivilege = false;
        _this.quantityContractedPrivilege = false;
        _this.zeroQuantityContracted = '0.000';
        _this.mask = Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_9__["CustomNumberMask"])(12, 10, true);
        _this.inputErrorMap
            .set('required', 'Required *')
            .set('min', 'Quantity must be positive.')
            .set('inferiorValue', 'Should be equal to or greater than Quantity');
        return _this;
    }
    QuantityFormComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.masterdataService
            .getMasterData(this.masterdataList)
            .subscribe(function (data) {
            _this.masterdata = data;
            _this.filteredQuantityCode = _this.masterdata.weightUnits;
            _this.weightUnitIdCtrl.valueChanges.subscribe(function (input) {
                _this.filteredQuantityCode = _this.utilService.filterListforAutocomplete(input, _this.masterdata.weightUnits, ['weightCode', 'description']);
            });
            _this.setValidators();
            _this.bindConfiguration();
            _this.quantityCodeSet();
        });
        if (this.route.snapshot.data['isImage'] === true) {
            this.isTradeImage = true;
            this.isInputField = true;
            this.isSplitAndTranche = JSON.parse(this.route.snapshot.queryParams.splitAndTranche);
        }
        this.checkQuantityFormPrivileges();
    };
    QuantityFormComponent.prototype.setValidators = function () {
        this.weightUnitIdCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([
            Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_5__["inDropdownListValidator"])(this.masterdata.weightUnits, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_13__["nameof"])('weightUnitId')),
        ]));
        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));
        if (this.sectionId === 0) {
            this.formGroup.setValidators(Object(_quantity_form_control_validator_validator__WEBPACK_IMPORTED_MODULE_18__["biggerValue"])('quantityContractedCtrl', 'quantityCtrl'));
        }
    };
    QuantityFormComponent.prototype.onQuantityBlur = function (targetValue, isInit) {
        if (isInit === void 0) { isInit = false; }
        if (this.quantityCtrl.valid) {
            var res = this.quantityCtrl.value;
            // If contract is not approved and not splitted/tranched, then update quantity contracted
            if (this.isTradeImage || (this.section.status !== _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_16__["ContractStatus"].Approved && !this.section.sectionOriginId &&
                (this.section.childSections && this.section.childSections.length === 0) && !isInit)) {
                this.quantityContractedCtrl.patchValue(targetValue);
            }
            this.quantitySelected.emit(res);
            this.quantityWarning = (this.quantityCtrl.valid)
                && (Number(this.quantityCtrl.value) === 0);
            this.quantityContractedWarning = (this.quantityContractedCtrl.valid)
                && (Number(this.quantityContractedCtrl.value) === 0) && (Number(this.quantityCtrl.value) === 0);
        }
        this.quantityContractedCtrl.updateValueAndValidity();
    };
    QuantityFormComponent.prototype.onContractedQuantityBlur = function (targetValue) {
        var res = this.quantityContractedCtrl.value;
        // If contract is not approved and not splitted/tranched, then update quantity
        if (this.isTradeImage || (this.section.status !== _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_16__["ContractStatus"].Approved && !this.section.sectionOriginId &&
            this.section.childSections.length === 0)) {
            this.quantityCtrl.patchValue(targetValue);
            this.quantitySelected.emit(res);
            this.quantityWarning = (this.quantityCtrl.valid)
                && (Number(this.quantityCtrl.value) === 0);
        }
        this.quantityContractedWarning = (this.quantityContractedCtrl.valid)
            && (Number(this.quantityContractedCtrl.value) === 0) && (Number(this.quantityCtrl.value) === 0);
        this.quantityContractedCtrl.updateValueAndValidity();
        this.quantityCtrl.updateValueAndValidity();
    };
    QuantityFormComponent.prototype.formatQuantity = function (value) {
        if (value) {
            return new Intl.NumberFormat('en-US', { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(value);
        }
        return value;
    };
    QuantityFormComponent.prototype.formatEditQuantity = function (value) {
        if (value) {
            return new Intl.NumberFormat('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 10 }).format(value);
        }
        return value;
    };
    QuantityFormComponent.prototype.quantityCodeSet = function () {
        if (this.weightUnitIdCtrl.valid) {
            var res_1 = this.weightUnitIdCtrl.value;
            var weightCode = this.masterdata.weightUnits.filter(function (weightUnit) { return weightUnit.weightUnitId === res_1; });
            this.quantityCodeSelected.emit(weightCode.length > 0 ? weightCode[0] : undefined);
        }
    };
    QuantityFormComponent.prototype.isEqual = function (value1, value2) {
        return value1 && value2 && value1 === value2;
    };
    QuantityFormComponent.prototype.initForm = function (entity, isEdit) {
        this.isInputMode = isEdit;
        var childCount = entity.childSections ? entity.childSections.length : 0;
        this.section = entity;
        var tradeRecord = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_8__["SectionCompleteDisplayView"](entity);
        this.model = tradeRecord;
        this.isEdit = isEdit;
        if (this.model.weightUnitId === 0) {
            this.model.weightUnitId = null;
        }
        if (this.model.weightUnitId != null) {
            this.formGroup.patchValue({ weightUnitIdCtrl: this.model.weightUnitId });
            this.quantityCodeSet();
        }
        if (this.model.originalQuantity != null) {
            var newOriginalValue = new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_14__["AtlasNumber"](this.model.originalQuantity.toString());
            this.formGroup.patchValue({
                quantityContractedCtrl: isEdit ?
                    this.formatEditQuantity(Number(newOriginalValue.toString())) :
                    this.formatQuantity(this.model.originalQuantity),
            });
            if (!this.quantityContractedCtrl.value) {
                this.quantityContractedCtrl.patchValue(this.zeroQuantityContracted);
            }
        }
        if (this.model.quantity != null) {
            var newValue = new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_14__["AtlasNumber"](this.model.quantity.toString());
            this.formGroup.patchValue({
                quantityCtrl: isEdit ?
                    this.formatEditQuantity(Number(newValue.toString())) :
                    this.formatQuantity(this.model.quantity),
            });
            this.onQuantityBlur(isEdit ? newValue.toString() : this.formatQuantity(this.model.quantity), true);
        }
        if (!this.quantityCtrl.value) {
            this.quantityCtrl.patchValue(this.zeroQuantityContracted);
        }
        if (!isEdit) {
            this.formGroup.disable();
            this.quantityToolTip = this.formatEditQuantity(this.model.quantity);
            this.contractedQtyToolTip = this.formatEditQuantity(this.model.originalQuantity);
        }
        if (!this.isSplitAndTranche) {
            this.quantityCtrl.enable();
            this.weightUnitIdCtrl.enable();
        }
        if (this.isTradeImage && !this.isSplitAndTranche) {
            if (this.model.quantity != null && childCount > 0) {
                var newValue = new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_14__["AtlasNumber"](this.model.quantity.toString());
                this.formGroup.patchValue({ quantityContractedCtrl: newValue.toString() });
            }
        }
        if (this.isTradeImage && this.isSplitAndTranche) {
            this.formGroup.disable();
        }
        else {
            if (this.model.invoiceReference &&
                this.authorizationService.getPermissionLevel(this.company, 'Trades', 'Physicals', 'SuperTradeEdition') <= _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_17__["PermissionLevels"].None) {
                this.weightUnitIdCtrl.disable();
            }
            if (this.model.allocatedTo || this.model.invoiceReference) {
                this.isInputMode = false;
            }
        }
        if (this.isTradeImage) {
            this.tradeImageDetails = JSON.parse(this.route.snapshot.queryParams.tradeImageDetails);
            if (this.tradeImageDetails && this.tradeImageDetails.length > 0) {
                var checkWeightUnitIdIsImage = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'WeightUnitId'; });
                if (checkWeightUnitIdIsImage && !checkWeightUnitIdIsImage.isCopy) {
                    this.weightUnitIdCtrl.patchValue(null);
                }
                var checkQuantityIsImage = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'Quantity'; });
                if (checkQuantityIsImage && !checkQuantityIsImage.isCopy) {
                    this.quantityCtrl.patchValue(null);
                }
                var checkOriginalQuantityIsImage = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'OriginalQuantity'; });
                if (checkOriginalQuantityIsImage && !checkOriginalQuantityIsImage.isCopy) {
                    this.quantityContractedCtrl.patchValue(null);
                }
            }
            var isAllocateContract = JSON.parse(this.route.snapshot.queryParams.allocateContract);
            if (isAllocateContract) {
                this.quantityCtrl.disable();
                this.quantityContractedCtrl.disable();
            }
        }
        return entity;
    };
    QuantityFormComponent.prototype.displayQuantityUnit = function (weightUnitId) {
        if (weightUnitId) {
            var selectedUnit = this.masterdata.weightUnits.filter(function (weightUnit) { return weightUnit.weightUnitId === weightUnitId; });
            if (selectedUnit.length > 0) {
                return selectedUnit[0].weightCode;
            }
        }
        return '';
    };
    QuantityFormComponent.prototype.populateEntity = function (entity) {
        var section = entity;
        section.quantity = ((this.quantityCtrl.value === '' && !this.quantityCtrl.isRequired) ? 0 : this.quantityCtrl.value);
        section.weightUnitId = ((this.weightUnitIdCtrl.value === '' && !this.weightUnitIdCtrl.isRequired) ? 0 :
            this.weightUnitIdCtrl.value);
        section.originalQuantity = ((this.quantityCtrl.value === '' && !this.quantityCtrl.isRequired) ? 0 : this.quantityCtrl.value);
        return section;
    };
    QuantityFormComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            weightUnitIdCtrl: this.weightUnitIdCtrl,
            quantityCtrl: this.quantityCtrl,
            quantityContractedCtrl: this.quantityContractedCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    QuantityFormComponent.prototype.checkQuantityFormPrivileges = function () {
        var _this = this;
        this.company = this.route.snapshot.paramMap.get('company');
        this.securityService.isSecurityReady().subscribe(function () {
            if (_this.authorizationService.isPrivilegeAllowed(_this.company, 'Trades')
                && _this.authorizationService.isPrivilegeAllowed(_this.company, 'MainTab')) {
                _this.quantityPrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'Quantity');
                _this.quantityCodePrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'QuantityCode');
                _this.quantityContractedPrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'QuantityContracted');
            }
        });
        if (!this.quantityPrivilege) {
            this.quantityCtrl.disable();
        }
        if (!this.quantityCodePrivilege) {
            this.weightUnitIdCtrl.disable();
        }
        if (!this.quantityContractedPrivilege) {
            this.quantityContractedCtrl.disable();
        }
    };
    QuantityFormComponent.prototype.onFocusOut = function () {
        if (this.filteredQuantityCode.length === 1 && this.filteredQuantityCode[0]['weightUnitId'] !== this.weightUnitIdCtrl.value) {
            // If there is only one option possible, select it
            this.weightUnitIdCtrl.setValue(this.filteredQuantityCode[0]['weightUnitId']);
            this.quantityCodeSet();
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], QuantityFormComponent.prototype, "quantitySelected", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], QuantityFormComponent.prototype, "quantityCodeSelected", void 0);
    QuantityFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-custom-quantity-form-component',
            template: __webpack_require__(/*! ./quantity-form-component.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/quantity-form-component/quantity-form-component.component.html"),
            styles: [__webpack_require__(/*! ./quantity-form-component.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/quantity-form-component/quantity-form-component.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_13__["UtilService"],
            _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_11__["MasterdataService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_10__["FormConfigurationProviderService"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__["AuthorizationService"],
            _shared_services_security_service__WEBPACK_IMPORTED_MODULE_12__["SecurityService"]])
    ], QuantityFormComponent);
    return QuantityFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/quantity-form-component/quantity-form-control-validator.validator.ts":
/*!******************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/quantity-form-component/quantity-form-control-validator.validator.ts ***!
  \******************************************************************************************************************************************************/
/*! exports provided: biggerValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "biggerValue", function() { return biggerValue; });
function biggerValue(biggerFormControlName, smallerFormControlName, allowEqual) {
    if (allowEqual === void 0) { allowEqual = true; }
    return function (abstractForm) {
        var maxFormControl = abstractForm.get(biggerFormControlName);
        var minFormControl = abstractForm.get(smallerFormControlName);
        if (maxFormControl && maxFormControl.value
            && minFormControl && minFormControl.value) {
            var minValue = Number(String(minFormControl.value).replace(/,/gi, ''));
            var maxValue = Number(String(maxFormControl.value).replace(/,/gi, ''));
            var res = (maxValue > minValue);
            if (allowEqual) {
                res = res || (maxValue === minValue);
            }
            if (!res) {
                maxFormControl.setErrors({ inferiorValue: true });
                return { inferiorValue: true };
            }
        }
        return null;
    };
}


/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/shipment-info-form-component/shipment-info-form-component.component.html":
/*!**********************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/shipment-info-form-component/shipment-info-form-component.component.html ***!
  \**********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"trade-capture-card\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h2>Shipment Information</h2>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\">\r\n            <div fxFlex=\"60%\"\r\n                 [class.displayMode]=\"!vesselCtrl.enabled\"\r\n                 fxLayout=\"column\">\r\n                <atlas-masterdata-user-preferences-input [isEditable]=\"vesselNamePrivilege\"\r\n                                                         [fieldControl]=\"vesselCtrl\"\r\n                                                         [options]=\"filteredVessels\"\r\n                                                         label=\"Vessel Name\"\r\n                                                         displayProperty=\"vesselName\"\r\n                                                         [selectProperties]=\"['vesselName']\"\r\n                                                         [errorMap]=\"vesselErrorMap\"\r\n                                                         lightBoxTitle=\"Results for Vessel\"\r\n                                                         gridId=\"vesselsGrid\">\r\n                </atlas-masterdata-user-preferences-input>\r\n            </div>\r\n            <div fxLayout=\"column\"\r\n                 fxFlex=\"50%\">\r\n                <div fxLayout=\"row\"\r\n                     fxLayoutAlign=\"left start\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/shipment-info-form-component/shipment-info-form-component.component.scss":
/*!**********************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/shipment-info-form-component/shipment-info-form-component.component.scss ***!
  \**********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/shipment-info-form-component/shipment-info-form-component.component.ts":
/*!********************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/shipment-info-form-component/shipment-info-form-component.component.ts ***!
  \********************************************************************************************************************************************************/
/*! exports provided: ShipmentInfoFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShipmentInfoFormComponent", function() { return ShipmentInfoFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/directives/autocomplete-dropdown.directive */ "./Client/app/shared/directives/autocomplete-dropdown.directive.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/entities/masterdata-props.entity */ "./Client/app/shared/entities/masterdata-props.entity.ts");
/* harmony import */ var _shared_entities_section_traffic_entity__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/entities/section-traffic.entity */ "./Client/app/shared/entities/section-traffic.entity.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/services/http-services/execution.service */ "./Client/app/shared/services/http-services/execution.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _services_trade_data_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../services/trade-data.service */ "./Client/app/trading/services/trade-data.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};















var ShipmentInfoFormComponent = /** @class */ (function (_super) {
    __extends(ShipmentInfoFormComponent, _super);
    function ShipmentInfoFormComponent(formBuilder, masterdataService, utilService, route, executionService, formConfigurationProvider, authorizationService, securityService, tradeDataService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.masterdataService = masterdataService;
        _this.utilService = utilService;
        _this.route = route;
        _this.executionService = executionService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.authorizationService = authorizationService;
        _this.securityService = securityService;
        _this.tradeDataService = tradeDataService;
        _this.vesselCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('Vessel');
        _this.shippingStatusCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('shippingStatus');
        _this.isTradeImage = false;
        _this.vesselNamePrivilege = false;
        _this.shipmentStatusUpdate = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.sectionTrafficModel = new _shared_entities_section_traffic_entity__WEBPACK_IMPORTED_MODULE_8__["SectionTraffic"]();
        _this.masterdataList = [
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__["MasterDataProps"].Vessels,
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__["MasterDataProps"].ShippingStatus,
        ];
        _this.vesselErrorMap = new Map()
            .set('required', 'Required *')
            .set('inDropdownList', 'Invalid entry. Vessel not in the list.');
        return _this;
    }
    ShipmentInfoFormComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.company = this.route.snapshot.paramMap.get('company');
        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));
        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;
        this.masterdata = this.route.snapshot.data.masterdata;
        this.formGroup = this.formBuilder.group({
            vesselCtrl: this.vesselCtrl,
            shippingStatusCtrl: this.shippingStatusCtrl,
        });
        this.masterdataService
            .getMasterData(this.masterdataList)
            .subscribe(function (data) {
            _this.masterdata = data;
            _this.shippingStatus = _this.masterdata.shippingStatus;
        });
        this.shippingStatusCtrl.valueChanges.subscribe(function (input) {
            _this.shippingStatus = _this.utilService.filterListforAutocomplete(input, _this.masterdata.shippingStatus, ['shippingStatusCode', 'description']);
        });
        this.filteredVessels = this.masterdata.vessels;
        this.vesselCtrl.valueChanges.subscribe(function (input) {
            _this.filteredVessels = _this.utilService.filterListforAutocomplete(input, _this.masterdata.vessels, ['vesselName']);
        });
        this.setValidators();
        this.bindConfiguration();
        if (this.route.snapshot.data['isImage'] === true) {
            this.isTradeImage = true;
        }
        this.checkShipmentFormPrivileges();
    };
    ShipmentInfoFormComponent.prototype.setValidators = function () {
        this.vesselCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([
            Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_5__["inDropdownListValidator"])(this.masterdata.vessels, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_13__["nameof"])('vesselName')),
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].maxLength(30),
        ]));
    };
    ShipmentInfoFormComponent.prototype.initForm = function (entity, isEdit) {
        var _this = this;
        if (this.sectionId !== 0) {
            this.subscriptions.push(this.tradeDataService.getTrafficDetails()
                .subscribe(function (data) {
                if (data) {
                    _this.sectionTrafficModel = data;
                    _this.populateVesselDetails(_this.sectionTrafficModel.vesselCode);
                    _this.populateShippingDetails(_this.sectionTrafficModel.shippingStatusCode);
                }
            }));
        }
        if (!isEdit || this.isTradeImage || !this.vesselNamePrivilege) {
            this.formGroup.disable();
        }
        else {
            this.formGroup.enable();
        }
        return entity;
    };
    ShipmentInfoFormComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            vesselCtrl: this.vesselCtrl,
            shippingStatusCtrl: this.shippingStatusCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    ShipmentInfoFormComponent.prototype.populateVesselDetails = function (vesselCode) {
        if (vesselCode) {
            var vessel = this.masterdata.vessels.find(function (item) { return item.vesselName === vesselCode; });
            if (vessel) {
                this.vesselCtrl.patchValue(vessel);
            }
        }
    };
    ShipmentInfoFormComponent.prototype.populateShippingDetails = function (shippingStatusCode) {
        if (shippingStatusCode) {
            var shippingStatus = this.masterdata.shippingStatus.find(function (item) { return item.shippingStatusCode === shippingStatusCode; });
            if (shippingStatus) {
                this.shippingStatusCtrl.patchValue(shippingStatus.description);
            }
        }
    };
    ShipmentInfoFormComponent.prototype.checkShipmentFormPrivileges = function () {
        var _this = this;
        this.securityService.isSecurityReady().subscribe(function () {
            if (_this.authorizationService.isPrivilegeAllowed(_this.company, 'Trades') && _this.authorizationService.isPrivilegeAllowed(_this.company, 'TrafficTab')) {
                _this.vesselNamePrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'VesselName');
            }
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], ShipmentInfoFormComponent.prototype, "shipmentStatusUpdate", void 0);
    ShipmentInfoFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-shipment-info-form-component',
            template: __webpack_require__(/*! ./shipment-info-form-component.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/shipment-info-form-component/shipment-info-form-component.component.html"),
            styles: [__webpack_require__(/*! ./shipment-info-form-component.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/shipment-info-form-component/shipment-info-form-component.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_11__["MasterdataService"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_13__["UtilService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_10__["ExecutionService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_9__["FormConfigurationProviderService"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__["AuthorizationService"],
            _shared_services_security_service__WEBPACK_IMPORTED_MODULE_12__["SecurityService"],
            _services_trade_data_service__WEBPACK_IMPORTED_MODULE_14__["TradeDataService"]])
    ], ShipmentInfoFormComponent);
    return ShipmentInfoFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/shipment-period-form/shipment-period-form.component.html":
/*!******************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/shipment-period-form/shipment-period-form.component.html ***!
  \******************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"shipment-details\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h2>Shipment Period</h2>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"start\"\r\n             fxLayoutGap=\"16px\">\r\n            <div class=\"custom-form\"\r\n                 fxFlex=\"25%\"\r\n                 [class.displayMode]=\"!periodTypeCtrl.enabled\"\r\n                 [class.isEmpty]=\"!periodTypeCtrl.value\"\r\n                 [class.required-field]=\"periodTypeCtrl.isRequired\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Period Type\"\r\n                           [required]=\"periodTypeCtrl.isRequired\"\r\n                           [matAutocomplete]=\"periodTypes\"\r\n                           [formControl]=\"periodTypeCtrl\"\r\n                           autocomplete=\"off\"\r\n                           [matTooltip]=\"'Period Type'\">\r\n                    <mat-autocomplete #periodTypes=\"matAutocomplete\"\r\n                                      [panelWidth]=\"panelSize\"\r\n                                      [displayWith]=\"displayPeriodType.bind(this)\">\r\n                        <mat-option *ngFor=\"let periodType of filteredPeriodType\"\r\n                                    [value]=\"periodType.periodTypeId\">\r\n                            {{periodType.periodTypeCode}} | {{periodType.periodTypeDescription}}\r\n                        </mat-option>\r\n\r\n                    </mat-autocomplete>\r\n                    <mat-error *ngIf=\"periodTypeCtrl.hasError('required')\">\r\n                        This field is required\r\n                    </mat-error>\r\n                    <mat-error *ngIf=\"periodTypeCtrl.hasError('inDropdownList')\">\r\n                        Value not in list\r\n                    </mat-error>\r\n                    <mat-hint *ngIf=\"periodTypeCtrl.isRequired && periodTypeCtrl.enabled\">\r\n                        Required *\r\n                    </mat-hint>\r\n                </mat-form-field>\r\n            </div>\r\n\r\n            <div class=\"custom-form\"\r\n                 fxFlex=\"20%\"\r\n                 [class.displayMode]=\"!periodFromCtrl.enabled\"\r\n                 [class.isEmpty]=\"!periodFromCtrl.value\"\r\n                 [class.required-field]=\"periodFromCtrl.isRequired\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           [required]=\"periodFromCtrl.isRequired\"\r\n                           [matDatepicker]=\"frompicker\"\r\n                           placeholder=\"From\"\r\n                           value=\"frompicker\"\r\n                           autocomplete=\"off\"\r\n                           [formControl]='periodFromCtrl'>\r\n                    <mat-datepicker-toggle matSuffix\r\n                                           [for]=\"frompicker\"></mat-datepicker-toggle>\r\n                    <mat-datepicker #frompicker></mat-datepicker>\r\n                    <mat-error *ngIf=\"periodFromCtrl.hasError('required')\">\r\n                        This field is required\r\n                    </mat-error>\r\n                    <mat-error *ngIf=\"periodToCtrl.hasError('isBeforeDate')\">\r\n                        Cannot be After Period To\r\n                    </mat-error>\r\n                    <mat-hint *ngIf=\"periodFromCtrl.isRequired && periodFromCtrl.enabled\">\r\n                        Required *\r\n                    </mat-hint>\r\n                </mat-form-field>\r\n            </div>\r\n\r\n            <div class=\"custom-form\"\r\n                 fxFlex=\"20%\"\r\n                 [class.displayMode]=\"!periodToCtrl.enabled\"\r\n                 [class.isEmpty]=\"!periodToCtrl.value\"\r\n                 [class.required-field]=\"periodToCtrl.isRequired\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           [required]=\"periodToCtrl.isRequired\"\r\n                           [matDatepicker]=\"topicker\"\r\n                           placeholder=\"To\"\r\n                           value=\"topicker\"\r\n                           autocomplete=\"off\"\r\n                           [formControl]='periodToCtrl'>\r\n                    <mat-datepicker-toggle matSuffix\r\n                                           [for]=\"topicker\"></mat-datepicker-toggle>\r\n                    <mat-datepicker #topicker></mat-datepicker>\r\n                    <mat-error *ngIf=\"periodToCtrl.hasError('required')\">\r\n                        This field is required\r\n                    </mat-error>\r\n                    <mat-error *ngIf=\"periodToCtrl.hasError('isBeforeDate')\">\r\n                        Cannot be before Period From\r\n                    </mat-error>\r\n                    <mat-hint *ngIf=\"periodToCtrl.isRequired && periodToCtrl.enabled\">\r\n                        Required *\r\n                    </mat-hint>\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"25%\"\r\n                 [class.displayMode]=\"!positionTypeCtrl.enabled\">\r\n                <mat-form-field>\r\n                    <mat-select placeholder=\"Position Type\"\r\n                                [required]=\"positionTypeCtrl.isRequired\"\r\n                                [formControl]=\"positionTypeCtrl\">\r\n                        <mat-option *ngFor=\"let type of masterdata.positionMonthTypes\"\r\n                                    [value]=\"type.positionMonthTypeCode\">{{type.positionMonthTypeDescription}}\r\n                        </mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/shipment-period-form/shipment-period-form.component.scss":
/*!******************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/shipment-period-form/shipment-period-form.component.scss ***!
  \******************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/shipment-period-form/shipment-period-form.component.ts":
/*!****************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/shipment-period-form/shipment-period-form.component.ts ***!
  \****************************************************************************************************************************************/
/*! exports provided: ShipmentPeriodFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShipmentPeriodFormComponent", function() { return ShipmentPeriodFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/directives/autocomplete-dropdown.directive */ "./Client/app/shared/directives/autocomplete-dropdown.directive.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/entities/masterdata-props.entity */ "./Client/app/shared/entities/masterdata-props.entity.ts");
/* harmony import */ var _shared_entities_masterdata_entity__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/entities/masterdata.entity */ "./Client/app/shared/entities/masterdata.entity.ts");
/* harmony import */ var _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/models/section-complete-display-view */ "./Client/app/shared/models/section-complete-display-view.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _shipment_period_date_validator_validator__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./shipment-period-date-validator.validator */ "./Client/app/trading/components/contract-physical-capture/form-components/shipment-period-form/shipment-period-date-validator.validator.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};















var ShipmentPeriodFormComponent = /** @class */ (function (_super) {
    __extends(ShipmentPeriodFormComponent, _super);
    function ShipmentPeriodFormComponent(formBuilder, masterdataService, utilService, formConfigurationProvider, route, authorizationService, securityService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.masterdataService = masterdataService;
        _this.utilService = utilService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.route = route;
        _this.authorizationService = authorizationService;
        _this.securityService = securityService;
        _this.model = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_9__["SectionCompleteDisplayView"]();
        _this.periodTypeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('PeriodTypeId');
        _this.periodFromCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('DeliveryPeriodStart');
        _this.periodToCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('DeliveryPeriodEnd');
        _this.positionTypeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('PositionMonthType');
        _this.tradeImageDetails = [];
        _this.masterdata = new _shared_entities_masterdata_entity__WEBPACK_IMPORTED_MODULE_8__["MasterData"]();
        _this.masterdataList = [
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__["MasterDataProps"].PositionMonthTypes,
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__["MasterDataProps"].PeriodTypes,
        ];
        _this.periodTypePrivilege = false;
        _this.fromDatePrivilege = false;
        _this.toDatePrivilege = false;
        _this.positionTypePrivilege = false;
        _this.isImage = false;
        return _this;
    }
    ShipmentPeriodFormComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.route.snapshot.data['isImage'] === true) {
            this.isImage = true;
        }
        this.masterdata = this.route.snapshot.data.masterdata;
        this.filteredPeriodType = this.masterdata.periodTypes;
        this.periodTypeCtrl.valueChanges.subscribe(function (input) {
            _this.filteredPeriodType =
                _this.utilService.filterListforAutocompleteWithTechnicalId(input, _this.masterdata.periodTypes, ['periodTypeCode', 'periodTypeDescription'], 'periodTypeId');
        });
        this.setValidators();
        this.bindConfiguration();
        var startPositionMonthType = this.masterdata.positionMonthTypes
            .filter(function (position) { return position.positionMonthTypeDescription === 'Start'; });
        if (startPositionMonthType.length > 0) {
            this.positionTypeCtrl.patchValue(startPositionMonthType[0].positionMonthTypeCode);
        }
        if (!this.isImage) {
            this.checkShipmentFormPrivileges();
        }
    };
    ShipmentPeriodFormComponent.prototype.setValidators = function () {
        this.periodTypeCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([
            Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_5__["inDropdownListValidator"])(this.masterdata.periodTypes, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_13__["nameof"])('periodTypeId')),
        ]));
    };
    ShipmentPeriodFormComponent.prototype.displayPeriodType = function (periodTypeId) {
        if (periodTypeId) {
            var selectedPeriod = this.filteredPeriodType.filter(function (periodType) { return periodType.periodTypeId === periodTypeId; });
            if (selectedPeriod.length > 0) {
                return selectedPeriod[0].periodTypeDescription;
            }
        }
        return '';
    };
    ShipmentPeriodFormComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            periodTypeCtrl: this.periodTypeCtrl,
            periodFromCtrl: this.periodFromCtrl,
            periodToCtrl: this.periodToCtrl,
            positionTypeCtrl: this.positionTypeCtrl,
        }, { validator: Object(_shipment_period_date_validator_validator__WEBPACK_IMPORTED_MODULE_14__["dateAfter"])('periodToCtrl', 'periodFromCtrl') });
        return _super.prototype.getFormGroup.call(this);
    };
    ShipmentPeriodFormComponent.prototype.initForm = function (entity, isEdit) {
        var _this = this;
        var tradeRecord = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_9__["SectionCompleteDisplayView"](entity);
        this.model = tradeRecord;
        if (this.model.periodTypeCode != null) {
            var periodTypeFiltered = this.masterdata.periodTypes.find(function (periodType) {
                return periodType.periodTypeCode === _this.model.periodTypeCode;
            });
            if (periodTypeFiltered) {
                this.model.periodTypeId = periodTypeFiltered.periodTypeId;
                this.formGroup.patchValue({ periodTypeCtrl: this.model.periodTypeId });
            }
        }
        if (this.model.deliveryPeriodStart != null) {
            this.formGroup.patchValue({ periodFromCtrl: this.model.deliveryPeriodStart });
        }
        if (this.model.deliveryPeriodEnd != null) {
            this.formGroup.patchValue({ periodToCtrl: this.model.deliveryPeriodEnd });
        }
        if (!isEdit) {
            this.formGroup.disable();
        }
        else if (this.model.blDate && !this.isImage) {
            this.periodFromCtrl.disable();
            this.periodToCtrl.disable();
        }
        if (this.isImage) {
            this.tradeImageDetails = JSON.parse(this.route.snapshot.queryParams.tradeImageDetails);
            if (this.tradeImageDetails && this.tradeImageDetails.length > 0) {
                var checkPeriodTypeIdIsImage = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'PeriodTypeId'; });
                if (checkPeriodTypeIdIsImage && !checkPeriodTypeIdIsImage.isEdit) {
                    this.periodTypeCtrl.disable();
                }
                var checkDeliveryPeriodStartIsImage = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'DeliveryPeriodStart'; });
                if (checkDeliveryPeriodStartIsImage && !checkDeliveryPeriodStartIsImage.isEdit) {
                    this.periodFromCtrl.disable();
                    this.periodToCtrl.disable();
                }
                var checkPositionMonthTypeIsImage = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'PositionMonthType'; });
                if (checkPositionMonthTypeIsImage && !checkPositionMonthTypeIsImage.isEdit) {
                    this.positionTypeCtrl.disable();
                }
                var checkPeriodTypeIdIsCopy = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'PeriodTypeId'; });
                if (checkPeriodTypeIdIsCopy && !checkPeriodTypeIdIsCopy.isCopy) {
                    this.periodTypeCtrl.patchValue(null);
                }
                var checkDeliveryPeriodStartIsCopy = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'DeliveryPeriodStart'; });
                if (checkDeliveryPeriodStartIsCopy && !checkDeliveryPeriodStartIsCopy.isCopy) {
                    this.periodFromCtrl.patchValue(null);
                    this.periodToCtrl.patchValue(null);
                }
            }
        }
        if (this.model.positionMonthIndex != null) {
            var monthType = this.masterdata.positionMonthTypes.filter(function (position) {
                return position.positionMonthTypeDescription.startsWith(_this.model.positionMonthType) &&
                    position.positionMonthTypeCode.month === _this.model.positionMonthIndex;
            });
            if (monthType.length > 0) {
                this.formGroup.patchValue({ positionTypeCtrl: monthType[0].positionMonthTypeCode });
            }
        }
        return entity;
    };
    ShipmentPeriodFormComponent.prototype.populateEntity = function (entity) {
        var section = entity;
        section.periodTypeId = ((this.periodTypeCtrl.value === '' && !this.periodTypeCtrl.isRequired) ? 0 : this.periodTypeCtrl.value);
        section.deliveryPeriodStartDate = this.periodFromCtrl.value;
        section.deliveryPeriodEndDate = this.periodToCtrl.value;
        section.positionMonthType = Number(this.positionTypeCtrl.value.type);
        section.positionMonthIndex = Number(this.positionTypeCtrl.value.month);
        return section;
    };
    ShipmentPeriodFormComponent.prototype.checkShipmentFormPrivileges = function () {
        var _this = this;
        this.company = this.route.snapshot.paramMap.get('company');
        this.securityService.isSecurityReady().subscribe(function () {
            if (_this.authorizationService.isPrivilegeAllowed(_this.company, 'Trades') && _this.authorizationService.isPrivilegeAllowed(_this.company, 'MainTab')) {
                _this.periodTypePrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'PeriodType');
                _this.fromDatePrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'FromDate');
                _this.toDatePrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'ToDate');
                _this.positionTypePrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'PositionType');
            }
        });
        if (!this.periodTypePrivilege) {
            this.periodTypeCtrl.disable();
        }
        if (!this.fromDatePrivilege) {
            this.periodFromCtrl.disable();
        }
        if (!this.toDatePrivilege) {
            this.periodToCtrl.disable();
        }
        if (!this.positionTypePrivilege) {
            this.positionTypeCtrl.disable();
        }
    };
    ShipmentPeriodFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-shipment-period-form',
            template: __webpack_require__(/*! ./shipment-period-form.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/shipment-period-form/shipment-period-form.component.html"),
            styles: [__webpack_require__(/*! ./shipment-period-form.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/shipment-period-form/shipment-period-form.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_11__["MasterdataService"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_13__["UtilService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_10__["FormConfigurationProviderService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__["AuthorizationService"],
            _shared_services_security_service__WEBPACK_IMPORTED_MODULE_12__["SecurityService"]])
    ], ShipmentPeriodFormComponent);
    return ShipmentPeriodFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/terms-form-component/terms-form-component.component.html":
/*!******************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/terms-form-component/terms-form-component.component.html ***!
  \******************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"trade-capture-card\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h2>Terms</h2>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\">\r\n            <div class=\"custom-form\"\r\n                 fxFlex=\"30%\"\r\n                 [class.displayMode]=\"!contractTermsCtrl.enabled\"\r\n                 [class.isEmpty]=\"!contractTermsCtrl.value\"\r\n                 [class.required-field]=\"contractTermsCtrl.isRequired\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Contract Terms\"\r\n                           [required]=\"contractTermsCtrl.isRequired\"\r\n                           [matAutocomplete]=\"contractTerms\"\r\n                           [formControl]=\"contractTermsCtrl\"\r\n                           [matTooltip]=\"'Contract Terms Code'\">\r\n                    <mat-icon *ngIf=\"isEdit\"\r\n                              class=\"bookmark-icon\"\r\n                              matSuffix>bookmark</mat-icon>\r\n                    <mat-autocomplete #contractTerms=\"matAutocomplete\"\r\n                                      [panelWidth]=\"panelSize\"\r\n                                      (closed)=\"clearDescription()\"\r\n                                      (optionSelected)=\"contractTermsCodeSelected($event.option.value)\">\r\n                        <mat-option *ngFor=\"let coTerm of filteredContractTerms\"\r\n                                    [value]=\"coTerm.contractTermCode\">\r\n                            {{coTerm.contractTermCode}} | {{coTerm.description}}\r\n                        </mat-option>\r\n                    </mat-autocomplete>\r\n                    <mat-error *ngIf=\"contractTermsCtrl.hasError('required')\">\r\n                        This field is required\r\n                    </mat-error>\r\n                    <mat-error *ngIf=\"contractTermsCtrl.hasError('inDropdownList')\">\r\n                        Value not in list\r\n                    </mat-error>\r\n                    <mat-hint *ngIf=\"contractTermsCtrl.isRequired && contractTermsCtrl.enabled\">\r\n                        Required *\r\n                    </mat-hint>\r\n                </mat-form-field>\r\n            </div>\r\n            <atlas-form-input fxFlex=\"70%\"\r\n                              [fieldControl]=\"contractTermsDescriptionCtrl\"\r\n                              [isEditable]=\"isInputField\"\r\n                              [label]=\"'Contract Terms Description'\">\r\n            </atlas-form-input>\r\n        </div>\r\n\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\">\r\n            <div class=\"custom-form\"\r\n                 fxFlex=\"30%\"\r\n                 [class.displayMode]=\"!portTermsCtrl.enabled\"\r\n                 [class.isEmpty]=\"!portTermsCtrl.value\"\r\n                 [class.required-field]=\"portTermsCtrl.isRequired\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Port Terms\"\r\n                           [required]=\"portTermsCtrl.isRequired\"\r\n                           [matAutocomplete]=\"portTerms\"\r\n                           [formControl]=\"portTermsCtrl\"\r\n                           autocomplete=\"off\"\r\n                           [matTooltip]=\"'Port Terms Code'\">\r\n                    <mat-icon *ngIf=\"isEdit\"\r\n                              class=\"bookmark-icon\"\r\n                              matSuffix>bookmark</mat-icon>\r\n                    <mat-autocomplete #portTerms=\"matAutocomplete\"\r\n                                      [panelWidth]=\"panelSize\"\r\n                                      (closed)=\"clearDescription()\"\r\n                                      (optionSelected)=\"portCodeSelected($event.option.value)\">\r\n                        <mat-option *ngFor=\"let poTerm of filteredPortTerms\"\r\n                                    [value]=\"poTerm.portCode\">\r\n                            {{poTerm.portCode}} | {{poTerm.description}}\r\n                        </mat-option>\r\n                    </mat-autocomplete>\r\n                    <mat-error *ngIf=\"portTermsCtrl.hasError('required')\">\r\n                        This field is required\r\n                    </mat-error>\r\n                    <mat-error *ngIf=\"portTermsCtrl.hasError('inDropdownList')\">\r\n                        Value not in list\r\n                    </mat-error>\r\n                    <mat-hint *ngIf=\"portTermsCtrl.isRequired && portTermsCtrl.enabled\">\r\n                        Required *\r\n                    </mat-hint>\r\n                </mat-form-field>\r\n            </div>\r\n            <atlas-form-input fxFlex=\"70%\"\r\n                              [fieldControl]=\"portTermsDescriptionCtrl\"\r\n                              [isEditable]=\"isInputField\"\r\n                              [label]=\"'Port Description'\">\r\n            </atlas-form-input>\r\n        </div>\r\n\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\"\r\n             class=\"custom-form\"\r\n             [class.required-field]=\"arbitrationCtrl.isRequired\"\r\n             [class.displayMode]=\"!arbitrationCtrl.enabled\">\r\n\r\n            <mat-form-field fxFlex=\"30%\">\r\n                <input matInput\r\n                       placeholder=\"Arbitration\"\r\n                       [required]=\"arbitrationCtrl.isRequired\"\r\n                       [matAutocomplete]=\"arbitration\"\r\n                       [formControl]=\"arbitrationCtrl\"\r\n                       autocomplete=\"off\"\r\n                       [matTooltip]=\"'Arbitration Code'\">\r\n                <mat-icon *ngIf=\"isEdit\"\r\n                          class=\"bookmark-icon\"\r\n                          matSuffix>bookmark</mat-icon>\r\n                <mat-autocomplete #arbitration=\"matAutocomplete\"\r\n                                  [panelWidth]=\"panelSize\"\r\n                                  (closed)=\"clearDescription()\"\r\n                                  (optionSelected)=\"arbitrationCodeSelected($event.option.value)\">\r\n                    <mat-option *ngFor=\"let arCode of filteredArbitration\"\r\n                                [value]=\"arCode.arbitrationCode\">\r\n                        {{arCode.arbitrationCode}} | {{arCode.description}}\r\n                    </mat-option>\r\n                </mat-autocomplete>\r\n                <mat-error *ngIf=\"arbitrationCtrl.hasError('required')\">\r\n                    This field is required\r\n                </mat-error>\r\n                <mat-error *ngIf=\"arbitrationCtrl.hasError('inDropdownList')\">\r\n                    Value not in list\r\n                </mat-error>\r\n                <mat-hint *ngIf=\"arbitrationCtrl.isRequired && arbitrationCtrl.enabled\">\r\n                    Required *\r\n                </mat-hint>\r\n            </mat-form-field>\r\n\r\n            <atlas-form-input fxFlex=\"60%\"\r\n                              [fieldControl]=\"arbitrationDescriptionCtrl\"\r\n                              [isEditable]=\"isInputField\"\r\n                              [label]=\"'Arbitration Description'\">\r\n            </atlas-form-input>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/terms-form-component/terms-form-component.component.scss":
/*!******************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/terms-form-component/terms-form-component.component.scss ***!
  \******************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/terms-form-component/terms-form-component.component.ts":
/*!****************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/terms-form-component/terms-form-component.component.ts ***!
  \****************************************************************************************************************************************/
/*! exports provided: TermsFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TermsFormComponent", function() { return TermsFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/directives/autocomplete-dropdown.directive */ "./Client/app/shared/directives/autocomplete-dropdown.directive.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/entities/masterdata-props.entity */ "./Client/app/shared/entities/masterdata-props.entity.ts");
/* harmony import */ var _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/models/section-complete-display-view */ "./Client/app/shared/models/section-complete-display-view.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./../../../../../shared/enums/permission-level.enum */ "./Client/app/shared/enums/permission-level.enum.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};















var TermsFormComponent = /** @class */ (function (_super) {
    __extends(TermsFormComponent, _super);
    function TermsFormComponent(route, formBuilder, masterdataService, utilService, tradingService, formConfigurationProvider, authorizationService, securityService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.route = route;
        _this.formBuilder = formBuilder;
        _this.masterdataService = masterdataService;
        _this.utilService = utilService;
        _this.tradingService = tradingService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.authorizationService = authorizationService;
        _this.securityService = securityService;
        _this.isInputField = false;
        _this.isTradeImage = false;
        _this.isEdit = true;
        _this.model = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_8__["SectionCompleteDisplayView"]();
        _this.contractTermsCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('ContractTermId');
        _this.contractTermsDescriptionCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('ContractTermsDescription');
        _this.portTermsCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('ContractTermLocationId');
        _this.portTermsDescriptionCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('ContractTermsPortDescription');
        _this.arbitrationCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('ArbitrationId');
        _this.arbitrationDescriptionCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_6__["AtlasFormControl"]('ArbitrationDescription');
        _this.tradeImageDetails = [];
        _this.masterdataList = [
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__["MasterDataProps"].ContractTerms,
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__["MasterDataProps"].Ports,
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_7__["MasterDataProps"].Arbitrations,
        ];
        _this.contractTermsPrivilege = false;
        _this.portTermsPrivilege = false;
        _this.arbitrationPriviege = false;
        return _this;
    }
    TermsFormComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.masterdataService
            .getMasterData(this.masterdataList)
            .subscribe(function (data) {
            _this.masterdata = data;
            _this.filteredContractTerms = _this.masterdata.contractTerms;
            _this.contractTermsCtrl.valueChanges.subscribe(function (input) {
                _this.filteredContractTerms = _this.utilService.filterListforAutocomplete(input, _this.masterdata.contractTerms, ['contractTermCode', 'description']);
            });
            _this.filteredPortTerms = _this.masterdata.ports;
            _this.portTermsCtrl.valueChanges.subscribe(function (input) {
                _this.filteredPortTerms = _this.utilService.filterListforAutocomplete(input, _this.masterdata.ports, ['portCode', 'description']);
            });
            _this.filteredArbitration = _this.masterdata.arbitrations;
            _this.arbitrationCtrl.valueChanges.subscribe(function (input) {
                _this.filteredArbitration = _this.utilService.filterListforAutocomplete(input, _this.masterdata.arbitrations, ['arbitrationCode', 'description']);
            });
            _this.setValidators();
            _this.bindConfiguration();
        });
        if (this.route.snapshot.data['isImage'] === true) {
            this.isTradeImage = true;
        }
        this.checkTermsFormPrivileges();
    };
    TermsFormComponent.prototype.setValidators = function () {
        this.contractTermsCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([
            Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_5__["inDropdownListValidator"])(this.masterdata.contractTerms, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_13__["nameof"])('contractTermCode')),
        ]));
        this.portTermsCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([
            Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_5__["inDropdownListValidator"])(this.masterdata.ports, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_13__["nameof"])('portCode')),
        ]));
        this.arbitrationCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([
            Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_5__["inDropdownListValidator"])(this.masterdata.arbitrations, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_13__["nameof"])('arbitrationCode')),
        ]));
        this.formGroup.updateValueAndValidity();
    };
    TermsFormComponent.prototype.contractTermsCodeSelected = function (contractTermsCode) {
        var selectedContractTerm = this.masterdata.contractTerms.find(function (conTerm) { return conTerm.contractTermCode === contractTermsCode; });
        if (selectedContractTerm) {
            this.contractTermsDescriptionCtrl.patchValue(selectedContractTerm.description);
        }
    };
    TermsFormComponent.prototype.portCodeSelected = function (portCode) {
        var selectedPort = this.masterdata.ports.find(function (pCode) { return pCode.portCode === portCode; });
        if (selectedPort) {
            this.portTermsDescriptionCtrl.patchValue(selectedPort.description);
        }
    };
    TermsFormComponent.prototype.arbitrationCodeSelected = function (arbitrationCode) {
        var filteredArbitration = this.masterdata.arbitrations.filter(function (arbCode) { return arbCode.arbitrationCode === arbitrationCode; });
        if (filteredArbitration.length === 0) {
            return;
        }
        var selectedArbitration = filteredArbitration[0];
        this.arbitrationDescriptionCtrl.patchValue(selectedArbitration.description);
        this.arbitrationDescriptionCtrl.updateValueAndValidity();
    };
    TermsFormComponent.prototype.commodityCodeSelected = function (commodity) {
        if (!this.arbitrationCtrl.value && commodity.arbitrationCode) {
            var filteredArbitration = this.masterdata.arbitrations.filter(function (arbCode) {
                return arbCode.arbitrationCode === commodity.arbitrationCode;
            });
            if (filteredArbitration.length === 0) {
                return;
            }
            this.arbitrationCtrl.patchValue(filteredArbitration[0].arbitrationCode);
            this.arbitrationCodeSelected(commodity.arbitrationCode);
            this.arbitrationCtrl.updateValueAndValidity();
        }
    };
    TermsFormComponent.prototype.initForm = function (entity, isEdit) {
        var tradeRecord = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_8__["SectionCompleteDisplayView"](entity);
        this.model = tradeRecord;
        this.isEdit = isEdit;
        if (this.model.contractTerms != null) {
            this.formGroup.patchValue({ contractTermsCtrl: this.model.contractTerms });
            this.contractTermsCodeSelected(this.model.contractTerms);
        }
        if (this.model.contractTermsLocation != null) {
            this.formGroup.patchValue({ portTermsCtrl: this.model.contractTermsLocation });
            this.portCodeSelected(this.model.contractTermsLocation);
        }
        if (this.model.arbitration != null) {
            this.formGroup.patchValue({ arbitrationCtrl: this.model.arbitration });
            this.arbitrationCodeSelected(this.model.arbitration);
        }
        if (!isEdit) {
            this.formGroup.disable();
        }
        else {
            if (!this.isTradeImage) {
                this.arbitrationDescriptionCtrl.disable();
                this.contractTermsDescriptionCtrl.disable();
                this.portTermsDescriptionCtrl.disable();
            }
        }
        if (this.isTradeImage) {
            this.tradeImageDetails = JSON.parse(this.route.snapshot.queryParams.tradeImageDetails);
            if (this.tradeImageDetails && this.tradeImageDetails.length > 0) {
                var checkContractTermIdIsImage = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'ContractTermId'; });
                if (checkContractTermIdIsImage && !checkContractTermIdIsImage.isEdit) {
                    this.contractTermsCtrl.disable();
                }
                else {
                    this.contractTermsCtrl.enable();
                }
                var checkContractLocationIdIsImage = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'ContractTermLocationId'; });
                if (checkContractLocationIdIsImage && !checkContractLocationIdIsImage.isEdit) {
                    this.portTermsCtrl.disable();
                }
                else {
                    this.portTermsCtrl.enable();
                }
                var checkArbitrationIdIsImage = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'ArbitrationId'; });
                if (checkArbitrationIdIsImage && !checkArbitrationIdIsImage.isEdit) {
                    this.arbitrationCtrl.disable();
                }
                var checkContractTermIdIsCopy = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'ContractTermId'; });
                if (checkContractTermIdIsCopy && !checkContractTermIdIsCopy.isCopy) {
                    this.contractTermsCtrl.patchValue(null);
                    this.contractTermsDescriptionCtrl.patchValue(null);
                }
                var checkContractTermLocationIdIsCopy = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'ContractTermLocationId'; });
                if (checkContractTermLocationIdIsCopy && !checkContractTermLocationIdIsCopy.isCopy) {
                    this.portTermsCtrl.patchValue(null);
                    this.portTermsDescriptionCtrl.patchValue(null);
                }
                var checkArbitrationIdIsCopy = this.tradeImageDetails.find(function (e) { return e.tradeFieldName === 'ArbitrationId'; });
                if (checkArbitrationIdIsCopy && !checkArbitrationIdIsCopy.isCopy) {
                    this.arbitrationCtrl.patchValue(null);
                    this.arbitrationDescriptionCtrl.patchValue(null);
                }
            }
        }
        else {
            if (this.model.invoiceReference &&
                this.authorizationService.getPermissionLevel(this.company, 'Trades', 'Physicals', 'SuperTradeEdition') <= _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_14__["PermissionLevels"].None) {
                this.contractTermsCtrl.disable();
                this.portTermsCtrl.disable();
            }
        }
        return entity;
    };
    TermsFormComponent.prototype.populateEntity = function (entity) {
        var section = entity;
        section.contractTerms = this.contractTermsCtrl.value;
        section.contractTermsLocation = this.portTermsCtrl.value;
        section.arbitration = this.arbitrationCtrl.value && this.arbitrationCtrl.value.length > 0 ? this.arbitrationCtrl.value : null;
        return section;
    };
    TermsFormComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            contractTermsCtrl: this.contractTermsCtrl,
            contractTermsDescrptionCtrl: this.contractTermsDescriptionCtrl,
            portTermsCtrl: this.portTermsCtrl,
            portTermsDescriptionCtrl: this.portTermsDescriptionCtrl,
            arbitrationCtrl: this.arbitrationCtrl,
            arbitrationDescriptionCtrl: this.arbitrationDescriptionCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    TermsFormComponent.prototype.checkTermsFormPrivileges = function () {
        var _this = this;
        this.company = this.route.snapshot.paramMap.get('company');
        this.securityService.isSecurityReady().subscribe(function () {
            if (_this.authorizationService.isPrivilegeAllowed(_this.company, 'Trades') && _this.authorizationService.isPrivilegeAllowed(_this.company, 'MainTab')) {
                _this.contractTermsPrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'ContractTerms');
                _this.portTermsPrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'PortTerms');
                _this.arbitrationPriviege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'Arbitration');
            }
        });
        if (!this.contractTermsPrivilege) {
            this.contractTermsCtrl.disable();
            this.contractTermsDescriptionCtrl.disable();
        }
        if (!this.portTermsPrivilege) {
            this.portTermsCtrl.disable();
            this.portTermsDescriptionCtrl.disable();
        }
        if (!this.arbitrationPriviege) {
            this.arbitrationCtrl.disable();
            this.arbitrationDescriptionCtrl.disable();
        }
    };
    TermsFormComponent.prototype.clearDescription = function () {
        if (!this.arbitrationCtrl.value) {
            this.arbitrationDescriptionCtrl.patchValue('');
        }
        if (!this.portTermsCtrl.value) {
            this.portTermsDescriptionCtrl.patchValue('');
        }
        if (!this.contractTermsCtrl.value) {
            this.contractTermsDescriptionCtrl.patchValue('');
        }
    };
    TermsFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-terms-form-component',
            template: __webpack_require__(/*! ./terms-form-component.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/terms-form-component/terms-form-component.component.html"),
            styles: [__webpack_require__(/*! ./terms-form-component.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/terms-form-component/terms-form-component.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_10__["MasterdataService"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_13__["UtilService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_11__["TradingService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_9__["FormConfigurationProviderService"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__["AuthorizationService"],
            _shared_services_security_service__WEBPACK_IMPORTED_MODULE_12__["SecurityService"]])
    ], TermsFormComponent);
    return TermsFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/cost-impact-warning-dialog/cost-impact-warning-dialog.component.html":
/*!******************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/cost-impact-warning-dialog/cost-impact-warning-dialog.component.html ***!
  \******************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"cost-impact-warning-dialog\">\r\n    <div fxLayoutAlign=\"space-between center\">\r\n        <h1 class=\"no-margin\">Cost Impact Warning Message</h1>\r\n        <button mat-button\r\n                class=\"close-button\">\r\n            <mat-icon (click)=\"onCloseButtonClicked()\">close</mat-icon>\r\n        </button>\r\n    </div>\r\n    <mat-dialog-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"space-between start\">\r\n            <p>{{dialogText}}</p>\r\n        </div>\r\n\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"space-between start\">\r\n            <div class=\"chip-list\">\r\n                <atlas-chip-list *ngIf=\"chipStringList\"\r\n                                 [textList]='chipStringList'></atlas-chip-list>\r\n            </div>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"space-between start\"\r\n             *ngIf=\"warningListForDiffFields\">\r\n            <p>The following field(s) \"{{warningListForDiffFields}}\" are different on both trades. Do you wish to\r\n                continue.\r\n            </p>\r\n        </div>\r\n    </mat-dialog-content>\r\n    <mat-dialog-actions>\r\n        <div fxFlex=\"50\"\r\n             fxLayout=\"row\"\r\n             fxAlignLayout=\"start start\">\r\n            <button mat-button\r\n                    (click)=\"onNoButtonClicked()\">No</button>\r\n        </div>\r\n        <div fxFlex=\"50\"\r\n             fxLayout=\"row\"\r\n             fxAlignLayout=\"start end\">\r\n            <span class=\"fill-space\"></span>\r\n            <button mat-button\r\n                    class=\"add-cost-button\"\r\n                    (click)=\"onYesButtonClicked()\">Yes</button>\r\n        </div>\r\n    </mat-dialog-actions>\r\n</div>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/cost-impact-warning-dialog/cost-impact-warning-dialog.component.scss":
/*!******************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/cost-impact-warning-dialog/cost-impact-warning-dialog.component.scss ***!
  \******************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/cost-impact-warning-dialog/cost-impact-warning-dialog.component.ts":
/*!****************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/cost-impact-warning-dialog/cost-impact-warning-dialog.component.ts ***!
  \****************************************************************************************************************************************************************/
/*! exports provided: CostImpactWarningDialogComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CostImpactWarningDialogComponent", function() { return CostImpactWarningDialogComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};


var CostImpactWarningDialogComponent = /** @class */ (function () {
    function CostImpactWarningDialogComponent(thisDialogRef, data) {
        this.thisDialogRef = thisDialogRef;
        this.data = data;
        this.dialogText = '';
        this.dialogData = data;
        this.dialogText = this.dialogData.confirmationMessage;
        this.chipStringList = this.dialogData.contractReference;
        this.warningListForDiffFields = this.dialogData.warningList;
    }
    CostImpactWarningDialogComponent.prototype.ngOnInit = function () {
    };
    CostImpactWarningDialogComponent.prototype.onCloseButtonClicked = function () {
        this.thisDialogRef.close();
    };
    CostImpactWarningDialogComponent.prototype.onYesButtonClicked = function () {
        this.thisDialogRef.close(true);
    };
    CostImpactWarningDialogComponent.prototype.onNoButtonClicked = function () {
        this.thisDialogRef.close(false);
    };
    CostImpactWarningDialogComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-cost-impact-warning-dialog',
            template: __webpack_require__(/*! ./cost-impact-warning-dialog.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/cost-impact-warning-dialog/cost-impact-warning-dialog.component.html"),
            styles: [__webpack_require__(/*! ./cost-impact-warning-dialog.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/cost-impact-warning-dialog/cost-impact-warning-dialog.component.scss")],
        }),
        __param(1, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_1__["MAT_DIALOG_DATA"])),
        __metadata("design:paramtypes", [_angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialogRef"], Object])
    ], CostImpactWarningDialogComponent);
    return CostImpactWarningDialogComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-options/merge-options.component.html":
/*!****************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-options/merge-options.component.html ***!
  \****************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card>\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h2>Merge Options</h2>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\">\r\n            <atlas-dropdown-select [label]=\"'Merge Options'\"\r\n                                   [options]=\"mergeOptionsList\"\r\n                                   [fieldControl]=\"mergeOptionsCtrl\"\r\n                                   isEditable=true\r\n                                   (optionSelected)=\"onMergeOptionSelectionChanged($event)\"\r\n                                   [selectProperties]=\"['name']\">\r\n            </atlas-dropdown-select>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-options/merge-options.component.scss":
/*!****************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-options/merge-options.component.scss ***!
  \****************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-options/merge-options.component.ts":
/*!**************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-options/merge-options.component.ts ***!
  \**************************************************************************************************************************************/
/*! exports provided: MergeOptionsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MergeOptionsComponent", function() { return MergeOptionsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_entities_trade_merge_options_entity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../shared/entities/trade-merge-options.entity */ "./Client/app/shared/entities/trade-merge-options.entity.ts");
/* harmony import */ var _shared_enums_trade_merge_options_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../../shared/enums/trade-merge-options.enum */ "./Client/app/shared/enums/trade-merge-options.enum.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






var MergeOptionsComponent = /** @class */ (function (_super) {
    __extends(MergeOptionsComponent, _super);
    function MergeOptionsComponent(formConfigurationProvider, formBuilder) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.formBuilder = formBuilder;
        _this.mergeOptionSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.mergeOptionsList = [];
        _this.mergeOptionsCtrl = new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"]();
        _this.mergeOptionsList = _shared_entities_trade_merge_options_entity__WEBPACK_IMPORTED_MODULE_3__["TradeMergeOptions"].getTradeMergeOptionsList();
        return _this;
    }
    MergeOptionsComponent.prototype.ngOnInit = function () {
        this.mergeOptionsCtrl = new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"](this.mergeOptionsList.find(function (option) { return option.name === 'Contract Header(.0000)'; }));
    };
    MergeOptionsComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            mergeOptionsCtrl: this.mergeOptionsCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    MergeOptionsComponent.prototype.onMergeOptionSelectionChanged = function (mergeOptionNames) {
        this.mergeOptionSelected.emit(mergeOptionNames.value);
    };
    MergeOptionsComponent.prototype.populateEntity = function (entity) {
        var selectedContracts = entity;
        if (this.mergeOptionsCtrl.value && this.mergeOptionsCtrl.value.value && this.mergeOptionsCtrl.value.value === _shared_enums_trade_merge_options_enum__WEBPACK_IMPORTED_MODULE_4__["ContractMergeOptions"].ContractHeader) {
            this.mergeOptionSelected.emit(_shared_enums_trade_merge_options_enum__WEBPACK_IMPORTED_MODULE_4__["ContractMergeOptions"].ContractHeader);
        }
        return selectedContracts;
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], MergeOptionsComponent.prototype, "mergeOptionSelected", void 0);
    MergeOptionsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-merge-options',
            template: __webpack_require__(/*! ./merge-options.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-options/merge-options.component.html"),
            styles: [__webpack_require__(/*! ./merge-options.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-options/merge-options.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_5__["FormConfigurationProviderService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"]])
    ], MergeOptionsComponent);
    return MergeOptionsComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_2__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-validations/merge-validations.component.html":
/*!************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-validations/merge-validations.component.html ***!
  \************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"trade-merge-validations-messages\">\r\n    <div *ngIf=\"showWarningMessageCard\">\r\n        <mat-card *ngFor=\"let text of contractSectionCodeWarningList\"\r\n                  class=\"trade-merge-validation-warning-card\">\r\n            <div class=\"warning-circle-icon\">\r\n                <mat-icon>warning_outline</mat-icon>\r\n            </div>\r\n            <mat-card-header>\r\n                <mat-card-title>\r\n                    <h4>{{text.contractSectionCode}} at risk for Merging</h4>\r\n                </mat-card-title>\r\n                <mat-card-subtitle>\r\n                    {{text.blockingOrWarningInput}} are different\r\n                </mat-card-subtitle>\r\n                <button class=\"remove-button\"\r\n                        mat-button\r\n                        (click)=\"onWarningRemoveButtonClicked(text.sectionId)\">REMOVE\r\n                </button>\r\n            </mat-card-header>\r\n        </mat-card>\r\n    </div>\r\n\r\n    <div *ngIf=\"showRestrictedMessageCard\">\r\n        <mat-card *ngFor=\"let text of contractSectionCodeBlockingList\"\r\n                  class=\"trade-merge-validation-warning-card\">\r\n            <div class=\"error-circle-icon\">\r\n                <mat-icon>remove_circle</mat-icon>\r\n            </div>\r\n            <mat-card-header>\r\n                <mat-card-title>\r\n                    <h4>{{text.contractSectionCode}} impossible to merge</h4>\r\n                </mat-card-title>\r\n                <mat-card-subtitle>\r\n                    {{text.blockingOrWarningInput}} are different\r\n                </mat-card-subtitle>\r\n                <button class=\"remove-button\"\r\n                        mat-button\r\n                        (click)=\"onRestrictRemoveButtonClicked(text.sectionId)\">REMOVE\r\n                </button>\r\n            </mat-card-header>\r\n        </mat-card>\r\n    </div>\r\n\r\n</div>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-validations/merge-validations.component.scss":
/*!************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-validations/merge-validations.component.scss ***!
  \************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "mat-card.trade-merge-validation-warning-card.mat-card {\n  padding: 0 !important;\n  height: 75px;\n  display: flex;\n  align-items: center; }\n  mat-card.trade-merge-validation-warning-card.mat-card button {\n    margin: 0px 15px 0 10px;\n    box-shadow: none; }\n  mat-card.trade-merge-validation-warning-card.mat-card mat-card-header.mat-card-header mat-card-title.mat-card-title {\n    margin: 0;\n    padding: 8px 0; }\n  mat-card.trade-merge-validation-warning-card.mat-card mat-card-header.mat-card-header h4 {\n    margin: 0; }\n  mat-card.trade-merge-validation-warning-card.mat-card mat-card-header.mat-card-header mat-card-subtitle.mat-card-subtitle {\n    margin: 0; }\n  button.remove-button.mat-button {\n  position: absolute;\n  right: 10px;\n  bottom: 15px; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-validations/merge-validations.component.ts":
/*!**********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-validations/merge-validations.component.ts ***!
  \**********************************************************************************************************************************************/
/*! exports provided: MergeValidationsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MergeValidationsComponent", function() { return MergeValidationsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _trading_entities_trade_merge_message_entity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../../trading/entities/trade-merge-message.entity */ "./Client/app/trading/entities/trade-merge-message.entity.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






var MergeValidationsComponent = /** @class */ (function (_super) {
    __extends(MergeValidationsComponent, _super);
    function MergeValidationsComponent(formConfigurationProvider, tradingService, route) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.tradingService = tradingService;
        _this.route = route;
        _this.removeClick = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.mergeButtonEnabled = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.noWarningCardToButtonEnable = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.warningMessageOnDiffFields = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.showRestrictedMessageCard = false;
        _this.showWarningMessageCard = false;
        _this.isBlocking = false;
        _this.isWarning = false;
        _this.blockingInput = [];
        _this.warningInput = [];
        _this.contractSectionCodeWarningList = [];
        _this.contractSectionCodeBlockingList = [];
        _this.warningMessageList = [];
        _this.blockingMessageList = [];
        _this.existingSectionIds = [];
        _this.resultWarningOrBlcokingMessages = [];
        _this.warningListWithDiffMessages = [];
        return _this;
    }
    MergeValidationsComponent.prototype.ngOnInit = function () {
        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;
    };
    MergeValidationsComponent.prototype.removeCardOnUnCheck = function (event) {
        if (this.existingSectionIds && this.existingSectionIds.length > 0) {
            if (this.contractSectionCodeBlockingList && this.contractSectionCodeBlockingList.length > 0) {
                this.contractSectionCodeBlockingList = this.contractSectionCodeBlockingList.filter(function (item) {
                    return item.sectionId !== event;
                });
            }
            if (this.contractSectionCodeWarningList && this.contractSectionCodeWarningList.length > 0) {
                this.contractSectionCodeWarningList = this.contractSectionCodeWarningList.filter(function (item) {
                    return item.sectionId !== event;
                });
            }
            this.existingSectionIds = this.existingSectionIds.filter(function (item) { return item !== event; });
        }
    };
    MergeValidationsComponent.prototype.getSelectedSectionIds = function (sectionIds) {
        var _this = this;
        if (sectionIds && sectionIds.length > 0) {
            this.tradingService.getSectionIdsForSelectedContractsToMerge(sectionIds, this.dataVersionId)
                .subscribe(function (data) {
                if (data && data.value.length > 0) {
                    _this.resultWarningOrBlcokingMessages = data.value;
                    data.value.forEach(function (element) {
                        _this.blockingOrWarningSectionIds = element.sectionId;
                        _this.contractSectionCode = element.contractSectionCode;
                        if (_this.existingSectionIds && _this.existingSectionIds.length === 0) {
                            _this.existingSectionIds.push(element.sectionId);
                            _this.setWarningOrBlockingMessages(element);
                        }
                        else if (!_this.existingSectionIds.includes(element.sectionId)) {
                            _this.setWarningOrBlockingMessages(element);
                            _this.existingSectionIds.push(element.sectionId);
                        }
                    });
                }
                else if (data && data.value.length === 0) {
                    _this.noWarningCardToButtonEnable.emit();
                }
            });
        }
    };
    MergeValidationsComponent.prototype.setWarningOrBlockingMessages = function (element) {
        this.isBlocking = false;
        this.isWarning = false;
        var blockingMessage = this.resultWarningOrBlcokingMessages.find(function (result) {
            return result.sectionId === element.sectionId && result.isBlocking;
        });
        if (blockingMessage) {
            this.isBlocking = blockingMessage.isBlocking;
        }
        var warningMessage = this.resultWarningOrBlcokingMessages.find(function (result) {
            return result.sectionId === element.sectionId && result.isWarning;
        });
        if (warningMessage) {
            this.isWarning = warningMessage.isWarning;
        }
        if (this.isBlocking) {
            this.showRestrictedMessageCard = true;
            this.blockingInput = this.resultWarningOrBlcokingMessages.find(function (result) {
                return result.sectionId === element.sectionId && result.isBlocking;
            }).blockingOrWarningInput;
            this.blockingSectionIds = element.sectionId;
            var message = new _trading_entities_trade_merge_message_entity__WEBPACK_IMPORTED_MODULE_5__["TradeMergeMessage"]();
            message.contractSectionCode = element.contractSectionCode;
            message.blockingOrWarningInput = this.blockingInput;
            message.sectionId = element.sectionId;
            this.contractSectionCodeBlockingList.push(message);
            this.contractSectionCodeBlockingList = Array.from(new Set(this.contractSectionCodeBlockingList.map(function (contract) { return contract; })));
        }
        if (this.isWarning) {
            this.showWarningMessageCard = true;
            this.warningInput = this.resultWarningOrBlcokingMessages.find(function (result) {
                return result.sectionId === element.sectionId && result.isWarning;
            }).blockingOrWarningInput;
            var message = new _trading_entities_trade_merge_message_entity__WEBPACK_IMPORTED_MODULE_5__["TradeMergeMessage"]();
            message.contractSectionCode = element.contractSectionCode;
            message.blockingOrWarningInput = this.warningInput;
            message.sectionId = element.sectionId;
            this.contractSectionCodeWarningList.push(message);
            this.contractSectionCodeWarningList = Array.from(new Set(this.contractSectionCodeWarningList.map(function (contract) { return contract; })));
            this.warningSectionIds = element.sectionId;
        }
        this.mergeButtonEnabled.emit({
            blockingList: this.contractSectionCodeBlockingList,
            warningList: this.contractSectionCodeWarningList,
        });
        this.warningMessageOnDiffFields.emit({
            warningList: this.warningInput.toString(),
        });
    };
    MergeValidationsComponent.prototype.onWarningRemoveButtonClicked = function (sectionId) {
        this.contractSectionCodeWarningList = this.contractSectionCodeWarningList.filter(function (item) { return item.sectionId !== sectionId; });
        this.removeClick.emit({
            blockingSectionId: null,
            warningSectionId: sectionId,
            warningList: this.contractSectionCodeWarningList,
            blockingList: this.contractSectionCodeBlockingList,
        });
    };
    MergeValidationsComponent.prototype.onRestrictRemoveButtonClicked = function (sectionId) {
        this.contractSectionCodeBlockingList = this.contractSectionCodeBlockingList.filter(function (item) { return item.sectionId !== sectionId; });
        this.removeClick.emit({
            blockingSectionId: sectionId,
            warningSectionId: null,
            blockingList: this.contractSectionCodeBlockingList,
            warningList: this.contractSectionCodeWarningList,
        });
    };
    MergeValidationsComponent.prototype.getNoSelectedRows = function () {
        if (this.showRestrictedMessageCard) {
            this.showRestrictedMessageCard = !this.showRestrictedMessageCard;
        }
        if (this.showWarningMessageCard) {
            this.showWarningMessageCard = !this.showWarningMessageCard;
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], MergeValidationsComponent.prototype, "removeClick", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], MergeValidationsComponent.prototype, "mergeButtonEnabled", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], MergeValidationsComponent.prototype, "noWarningCardToButtonEnable", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], MergeValidationsComponent.prototype, "warningMessageOnDiffFields", void 0);
    MergeValidationsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-merge-validations',
            template: __webpack_require__(/*! ./merge-validations.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-validations/merge-validations.component.html"),
            styles: [__webpack_require__(/*! ./merge-validations.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-validations/merge-validations.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_3__["FormConfigurationProviderService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_4__["TradingService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"]])
    ], MergeValidationsComponent);
    return MergeValidationsComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_2__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trade-merge.component.html":
/*!************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trade-merge.component.html ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<form [formGroup]=\"tradeMergeForm\">\r\n    <div class=\"main-container\">\r\n        <atlas-trades-list #tradesListComponent\r\n                           (selectedSectionIds)=\"onSelectionOfSelectedIds($event)\"\r\n                           (selectedContractLabels)=\"onSelectedContractLabels($event)\"\r\n                           (mergeToContractLabel)=\"onSelectedMergeToContractLabel($event)\"\r\n                           (noRowsSelected)=\"onNoRowsSelected()\"\r\n                           (multipleMergeSelected)=\"onMultipleMergeOptionSelected($event)\"\r\n                           (selectedSectionIds)=\"selectedSectionIds($event)\"\r\n                           (successMsg)=\"onShowMessage($event)\"\r\n                           (removeCardOnUnCheck)=\"onRemoveCardOnUncheck($event)\"></atlas-trades-list>\r\n        <atlas-merge-validations #mergeValidationsComponent\r\n                                 (removeClick)=\"onRemoveClick($event)\"\r\n                                 (mergeButtonEnabled)=\"enableMergeButton($event)\"\r\n                                 (noWarningCardToButtonEnable)=\"enableMergeOnNoWarning($event)\"\r\n                                 (warningMessageOnDiffFields)=\"messageOnCostPopup($event)\">\r\n        </atlas-merge-validations>\r\n        <atlas-merge-options #mergeOptionsComponent\r\n                             (mergeOptionSelected)=\"onMergeOptionSelected($event)\"></atlas-merge-options>\r\n\r\n        <div fxLayout=\"row \"\r\n             fxLayoutAlign=\"space-between start\"\r\n             class=\"button-details\">\r\n            <div fxLayout=\"column \"\r\n                 fxLayoutAlign=\"start \">\r\n                <button mat-button\r\n                        (click)=\"onDiscardButtonClicked()\">\r\n                    DISCARD\r\n                </button>\r\n            </div>\r\n            <div fxLayout=\"column \"\r\n                 fxLayoutAlign=\"start \">\r\n                <div fxLayout=\"row \"\r\n                     fxLayoutAlign=\"end start \">\r\n                    <button mat-raised-button\r\n                            (click)=\"onMergeButtonClicked()\"\r\n                            [disabled]=\"displayMergeButton\">\r\n                        Merge Selected Splits\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</form>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trade-merge.component.scss":
/*!************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trade-merge.component.scss ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trade-merge.component.ts":
/*!**********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trade-merge.component.ts ***!
  \**********************************************************************************************************************/
/*! exports provided: TradeMergeComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeMergeComponent", function() { return TradeMergeComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/entities/lock-functional-context.entity */ "./Client/app/shared/entities/lock-functional-context.entity.ts");
/* harmony import */ var _shared_enums_trade_merge_options_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/enums/trade-merge-options.enum */ "./Client/app/shared/enums/trade-merge-options.enum.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/services/http-services/lock.service */ "./Client/app/shared/services/http-services/lock.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _merge_options_merge_options_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./merge-options/merge-options.component */ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-options/merge-options.component.ts");
/* harmony import */ var _merge_validations_merge_validations_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./merge-validations/merge-validations.component */ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-validations/merge-validations.component.ts");
/* harmony import */ var _trades_list_trades_list_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./trades-list/trades-list.component */ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trades-list/trades-list.component.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};














var TradeMergeComponent = /** @class */ (function (_super) {
    __extends(TradeMergeComponent, _super);
    function TradeMergeComponent(router, route, formBuilder, tradingService, formConfigurationProvider, companyManager, lockService, snackbarService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.router = router;
        _this.route = route;
        _this.formBuilder = formBuilder;
        _this.tradingService = tradingService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.companyManager = companyManager;
        _this.lockService = lockService;
        _this.snackbarService = snackbarService;
        _this.formComponents = [];
        _this.displayMergeButton = true;
        _this.selectedSectionId = [];
        _this.message = false;
        _this.contract = [];
        return _this;
    }
    TradeMergeComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.params['company'];
        this.sectionId = this.route.snapshot.params['currentSection.sectionId'];
        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;
        this.tradeMergeForm = this.formBuilder.group({
            tradesListComponent: this.tradesListComponent.getFormGroup(),
            mergeOptionsComponent: this.mergeOptionsComponent.getFormGroup(),
        });
        this.formComponents.push(this.mergeOptionsComponent, this.tradesListComponent);
        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe());
    };
    TradeMergeComponent.prototype.selectedSectionIds = function (event) {
        this.selectedSectionId = event.sectiondIds;
    };
    TradeMergeComponent.prototype.onDiscardButtonClicked = function () {
        var _this = this;
        var _loop_1 = function (i) {
            var sectionId = this_1.selectedSectionId[i];
            this_1.subscriptions.push(this_1.lockService.unlockContract(sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_5__["LockFunctionalContext"].TradeMerge)
                .subscribe(function () {
                _this.selectedSectionId = _this.selectedSectionId.filter(function (id) { return id !== sectionId; });
            }));
        };
        var this_1 = this;
        for (var i = 0; i < this.selectedSectionId.length; i++) {
            _loop_1(i);
        }
        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades/display/' +
                encodeURIComponent(String(this.sectionId))]);
    };
    TradeMergeComponent.prototype.onSelectionOfSelectedIds = function (event) {
        if (event.sectiondIds && event.sectiondIds.length > 0) {
            this.mergeValidationsComponent.getSelectedSectionIds(event.sectiondIds);
        }
    };
    TradeMergeComponent.prototype.messageOnCostPopup = function (event) {
        this.tradesListComponent.warningMessageForDiffFields(event.warningList);
    };
    TradeMergeComponent.prototype.onSelectedContractLabels = function (contracts) {
        this.selectedContractLabels = contracts;
    };
    TradeMergeComponent.prototype.onSelectedMergeToContractLabel = function (contractLabel) {
        this.contractLabel = contractLabel;
    };
    TradeMergeComponent.prototype.enableMergeOnNoWarning = function (event) {
        this.displayMergeButton = false;
    };
    TradeMergeComponent.prototype.enableMergeButton = function (event) {
        if (event.blockingList && event.blockingList.length > 0) {
            this.displayMergeButton = true;
        }
        else if (event.warningList && event.warningList.length > 0) {
            this.displayMergeButton = false;
        }
    };
    TradeMergeComponent.prototype.onRemoveClick = function (event) {
        if (event.blockingSectionId && event.warningSectionId === null) {
            this.tradesListComponent.disableSelectedRowClick(event.blockingSectionId);
            if (event.blockingList && event.blockingList.length > 0) {
                this.displayMergeButton = true;
            }
            else {
                this.displayMergeButton = false;
            }
        }
        else if (event.warningSectionId && event.blockingSectionId === null) {
            this.tradesListComponent.disableSelectedRowClick(event.warningSectionId);
            if (event.warningList && event.warningList.length > 0) {
                this.displayMergeButton = false;
                if (event.blockingList && event.blockingList.length > 0) {
                    this.displayMergeButton = true;
                }
            }
            else {
                this.displayMergeButton = true;
            }
        }
        else {
            this.displayMergeButton = false;
        }
    };
    TradeMergeComponent.prototype.onRemoveCardOnUncheck = function (event) {
        this.mergeValidationsComponent.removeCardOnUnCheck(event);
    };
    TradeMergeComponent.prototype.onNoRowsSelected = function () {
        this.mergeValidationsComponent.getNoSelectedRows();
        this.displayMergeButton = true;
    };
    TradeMergeComponent.prototype.onMergeOptionSelected = function (event) {
        this.tradesListComponent.mergeOption = event;
        this.tradesListComponent.onMergeOptionSelected(event);
    };
    TradeMergeComponent.prototype.onMultipleMergeOptionSelected = function (message) {
        this.multipleMergeMessage = message;
    };
    TradeMergeComponent.prototype.onMergeButtonClicked = function () {
        var _this = this;
        this.formComponents.forEach(function (comp) {
            _this.contract = comp.populateEntity(_this.contract);
        });
        this.tradesListComponent.onDisplayWarningMessage(this.contract);
    };
    TradeMergeComponent.prototype.onShowMessage = function (event) {
        var _this = this;
        var messageText;
        this.message = event;
        if (this.message) {
            var isMultipleMerge = this.contract.find(function (trade) { return trade.mergeOption === _shared_enums_trade_merge_options_enum__WEBPACK_IMPORTED_MODULE_6__["ContractMergeOptions"].ContractParent; });
            messageText = isMultipleMerge ? this.multipleMergeMessage :
                'The Trade ' + this.selectedContractLabels + ' is merged To Trade ' + this.contractLabel + '';
            this.subscriptions.push(this.tradingService
                .saveContractsToTradeMerge(this.contract, this.dataVersionId)
                .subscribe(function (data) {
                _this.snackbarService.informationSnackBar(messageText);
                _this.router.navigate(['/' + _this.companyManager.getCurrentCompanyId() + '/trades/display/' +
                        encodeURIComponent(String(_this.sectionId))]);
            }));
        }
    };
    TradeMergeComponent.prototype.ngOnDestroy = function () {
        var _this = this;
        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe(function () {
            _this.subscriptions.forEach(function (subscription) {
                subscription.unsubscribe();
            });
        }));
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('tradesListComponent'),
        __metadata("design:type", _trades_list_trades_list_component__WEBPACK_IMPORTED_MODULE_13__["TradesListComponent"])
    ], TradeMergeComponent.prototype, "tradesListComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('mergeValidationsComponent'),
        __metadata("design:type", _merge_validations_merge_validations_component__WEBPACK_IMPORTED_MODULE_12__["MergeValidationsComponent"])
    ], TradeMergeComponent.prototype, "mergeValidationsComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('mergeOptionsComponent'),
        __metadata("design:type", _merge_options_merge_options_component__WEBPACK_IMPORTED_MODULE_11__["MergeOptionsComponent"])
    ], TradeMergeComponent.prototype, "mergeOptionsComponent", void 0);
    TradeMergeComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-trade-merge',
            template: __webpack_require__(/*! ./trade-merge.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trade-merge.component.html"),
            styles: [__webpack_require__(/*! ./trade-merge.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trade-merge.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_9__["TradingService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_7__["FormConfigurationProviderService"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_3__["CompanyManagerService"],
            _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_8__["LockService"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_10__["SnackbarService"]])
    ], TradeMergeComponent);
    return TradeMergeComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trades-list/trades-list.component.html":
/*!************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trades-list/trades-list.component.html ***!
  \************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"center center\"\r\n             fxLayoutWrap\r\n             *ngIf=\"isLoading\"\r\n             class=\"loading\">\r\n            <mat-spinner color=\"accent\"></mat-spinner>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayout.xs=\"column\"\r\n             fxLayoutAlign=\"space-between left\"\r\n             fxLayoutWrap\r\n             fxLayoutGap=\"20px\"\r\n             class=\"atlas-grid-card-header\">\r\n            <h2 class=\"atlas-grid-card-title\">{{dataLength}} {{dataLength > 1 ? 'Sections' : 'Section'}} Found</h2>\r\n            <atlas-ag-grid-user-preferences *ngIf=\"tradesListToMergeGridOptions && tradesListToMergeGridOptions.columnDefs\"\r\n                                            [gridOptions]=\"tradesListToMergeGridOptions\"\r\n                                            [company]=\"company\"\r\n                                            [gridId]=\"componentId\"\r\n                                            [sharingEnabled]=\"hasGridSharing\"\r\n                                            #userPreferences>\r\n            </atlas-ag-grid-user-preferences>\r\n        </div>\r\n        <div ag-grid=\"tradesListToMergeGridOptions\"\r\n             style=\"width: 100%; height:100%\">\r\n            <ag-grid-angular style=\" height:100%;\"\r\n                             class=\"ag-theme-material\"\r\n                             [rowData]=\"tradesListToMergeGridRows\"\r\n                             [gridOptions]=\"tradesListToMergeGridOptions\"\r\n                             [columnDefs]=\"tradesListToMergeGridColumns\"\r\n                             domLayout=\"autoHeight\"\r\n                             (gridReady)=\"onGridReady($event)\"\r\n                             [pagination]=\"true\"\r\n                             [paginationPageSize]=\"50\"\r\n                             (columnVisible)=\"onAddOrDeleteColumn($event)\"\r\n                             [enableSorting]=\"true\"\r\n                             [enableColResize]=\"true\"\r\n                             (rowSelected)=\"onSelectionChanged($event)\"\r\n                             enableFilter\r\n                             [rowHeight]=atlasAgGridParam.rowHeight\r\n                             rowSelection=\"multiple\">\r\n            </ag-grid-angular>\r\n        </div>\r\n    </mat-card-content>\r\n    <atlas-lock-interval [resourcesInformation]=\"resourcesInformation\">\r\n    </atlas-lock-interval>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trades-list/trades-list.component.scss":
/*!************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trades-list/trades-list.component.scss ***!
  \************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trades-list/trades-list.component.ts":
/*!**********************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trades-list/trades-list.component.ts ***!
  \**********************************************************************************************************************************/
/*! exports provided: TradesListComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradesListComponent", function() { return TradesListComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _shared_components_ag_grid_user_preferences_ag_grid_user_preferences_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component */ "./Client/app/shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../../shared/components/confirmation-dialog/confirmation-dialog.component */ "./Client/app/shared/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony import */ var _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../../shared/entities/lock-functional-context.entity */ "./Client/app/shared/entities/lock-functional-context.entity.ts");
/* harmony import */ var _shared_entities_lock_resource_information_entity__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../../shared/entities/lock-resource-information.entity */ "./Client/app/shared/entities/lock-resource-information.entity.ts");
/* harmony import */ var _shared_entities_merge_contracts_entity__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../../shared/entities/merge-contracts.entity */ "./Client/app/shared/entities/merge-contracts.entity.ts");
/* harmony import */ var _shared_enums_discount_type_enum__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../../shared/enums/discount-type.enum */ "./Client/app/shared/enums/discount-type.enum.ts");
/* harmony import */ var _shared_enums_trade_merge_options_enum__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../../shared/enums/trade-merge-options.enum */ "./Client/app/shared/enums/trade-merge-options.enum.ts");
/* harmony import */ var _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../../shared/services/ag-grid.service */ "./Client/app/shared/services/ag-grid.service.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_grid_configuration_provider_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../../shared/services/grid-configuration-provider.service */ "./Client/app/shared/services/grid-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../../shared/services/http-services/lock.service */ "./Client/app/shared/services/http-services/lock.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../../../../shared/services/ui.service */ "./Client/app/shared/services/ui.service.ts");
/* harmony import */ var _cost_impact_warning_dialog_cost_impact_warning_dialog_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../cost-impact-warning-dialog/cost-impact-warning-dialog.component */ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/cost-impact-warning-dialog/cost-impact-warning-dialog.component.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





















var TradesListComponent = /** @class */ (function (_super) {
    __extends(TradesListComponent, _super);
    function TradesListComponent(formConfigurationProvider, dialog, gridService, route, securityService, uiService, gridConfigurationProvider, lockService, tradingService, snackbarService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.dialog = dialog;
        _this.gridService = gridService;
        _this.route = route;
        _this.securityService = securityService;
        _this.uiService = uiService;
        _this.gridConfigurationProvider = gridConfigurationProvider;
        _this.lockService = lockService;
        _this.tradingService = tradingService;
        _this.snackbarService = snackbarService;
        _this.gridContext = {
            componentParent: _this,
        };
        _this.selectedSectionIds = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.selectedContractLabels = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.mergeToContractLabel = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.noRowsSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.multipleMergeSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.successMsg = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.removeCardOnUnCheck = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.tradesListToMergeGridOptions = {};
        _this.componentId = 'tradesListToMergeGrid';
        _this.hasGridSharing = false;
        _this.dataLength = 0;
        _this.sectionIds = [];
        _this.sectionsSelectedToMerge = [];
        _this.locking = [];
        _this.unlocking = [];
        _this.resourcesInformation = new Array();
        _this.contractVariable = 'Contract';
        _this.mergeFromsectionIdWithCost = [];
        _this.mergeFromsectionIdWithInvoiced = [];
        _this.mergeFromContractLabel = [];
        _this.message = false;
        _this.mergeOption = _shared_enums_trade_merge_options_enum__WEBPACK_IMPORTED_MODULE_11__["ContractMergeOptions"].ContractHeader;
        _this.warningListForDiffFields = '';
        return _this;
    }
    TradesListComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.company = this.route.snapshot.params['company'];
        this.masterdata = this.route.snapshot.data.masterdata;
        this.sectionId = this.route.snapshot.params['currentSection.sectionId'];
        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;
        this.atlasAgGridParam = this.gridService.getAgGridParam();
        this.getContractsFamily(this.sectionId);
        this.initializeGridColumns();
        this.securityService.isSecurityReady().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["concatMap"])(function () {
            return _this.gridConfigurationProvider.getConfiguration(_this.company, _this.componentId);
        })).subscribe(function (configuration) {
            _this.hasGridSharing = configuration.hasMultipleViewsPerUser;
        });
        this.sectionIdMergeTo = this.sectionId;
        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe());
    };
    TradesListComponent.prototype.onGridReady = function (params) {
        var _this = this;
        this.gridApi = params.api;
        params.columnDefs = this.tradesListToMergeGridColumns;
        this.tradesListToMergeGridOptions = params;
        this.gridColumnApi = params.columnApi;
        this.gridColumnApi.autoSizeAllColumns();
        window.onresize = function () {
            _this.gridColumnApi.autoSizeAllColumns();
        };
        this.gridApi.showNoRowsOverlay();
        this.autoSizeContractsGrid();
    };
    TradesListComponent.prototype.autoSizeContractsGrid = function () {
        if (this.gridColumnApi) {
            var allColumnIds_1 = [];
            if (this.tradesListToMergeGridColumns) {
                this.tradesListToMergeGridColumns.forEach(function (columnDefs) {
                    allColumnIds_1.push(columnDefs.field);
                });
            }
            this.gridColumnApi.autoSizeColumns(allColumnIds_1);
        }
    };
    TradesListComponent.prototype.initializeGridColumns = function () {
        this.tradesListToMergeGridOptions = {
            context: this.gridContext,
            getRowStyle: this.isContractToMergeRowStyle.bind(this),
            isRowSelectable: this.isMergeAllowed.bind(this),
        };
        this.tradesListToMergeGridColumns = [
            {
                headerCheckboxSelection: true,
                checkboxSelection: true,
            },
            {
                headerName: 'Contract Ref',
                field: 'contractSectionCode',
                colId: 'contractSectionCode',
                tooltip: function (node) {
                    if (!node.data.isMergeAllowed) {
                        return 'contract cannot be merged because: ' + node.data.message;
                    }
                },
            },
            {
                headerName: 'Parent Contract',
                field: 'parentContract',
                colId: 'parentContract',
            },
            {
                headerName: 'Department ',
                field: 'departmentCode',
                colId: 'departmentCode',
            },
            {
                headerName: 'Allocated',
                field: 'allocatedContract',
                colId: 'allocatedContract',
            },
            {
                headerName: 'CounterParty',
                field: 'counterpartyCode',
                colId: 'counterpartyCode',
            },
            {
                headerName: 'Quantity Code',
                colId: 'weightCode',
                field: 'weightCode',
            },
            {
                headerName: 'Quantity',
                colId: 'quantity',
                field: 'quantity',
                type: 'numericColumn',
            },
            {
                headerName: 'Cmy1',
                headerTooltip: 'Cmy1',
                field: 'principalCommodity',
                colId: 'principalCommodity',
            },
            {
                headerName: 'Cmy2',
                headerTooltip: 'Cmy2',
                field: 'part2',
                colId: 'part2',
            },
            {
                headerName: 'Cmy3',
                field: 'part3',
                colId: 'part3',
            },
            {
                headerName: 'Cmy4',
                field: 'part4',
                colId: 'part4',
            },
            {
                headerName: 'Cmy5',
                field: 'part5',
                colId: 'part5',
            },
            {
                headerName: 'Price Currency',
                field: 'currencyCode',
                colId: 'currencyCode',
            },
            {
                headerName: 'Price Code',
                field: 'priceCode',
                colId: 'priceCode',
            },
            {
                headerName: 'Price',
                colId: 'price',
                field: 'price',
                type: 'numericColumn',
            },
            {
                headerName: 'BL date',
                colId: 'bLDate',
                field: 'bLDate',
                valueFormatter: this.uiService.dateFormatter,
                cellEditor: 'atrDate',
            },
            {
                headerName: 'Charter Reference',
                colId: 'charterCode',
                field: 'charterCode',
            },
            {
                headerName: 'Price Premium/Discount',
                field: 'premiumDiscountValue',
                colId: 'premiumDiscountValue',
            },
            {
                headerName: 'Price Premium/Discount Currency',
                field: 'premiumDiscountCurrency',
                colId: 'premiumDiscountCurrency',
            },
            {
                headerName: 'Price Premium/Discount Rate/Amount',
                field: 'premiumDiscountCode',
                colId: 'premiumDiscountCode',
            },
            {
                headerName: 'Shipping Period',
                field: 'shippingPeriod',
                colId: 'shippingPeriod',
            },
            {
                headerName: 'Shipping Start Date',
                field: 'deliveryPeriodStart',
                colId: 'deliveryPeriodStart',
                valueFormatter: this.uiService.dateFormatter,
                cellEditor: 'atrDate',
            },
            {
                headerName: 'Shipping End Date',
                field: 'deliveryPeriodEnd',
                colId: 'deliveryPeriodEnd',
                valueFormatter: this.uiService.dateFormatter,
                cellEditor: 'atrDate',
            },
            {
                headerName: 'Port of origin',
                colId: 'portOriginCode',
                field: 'portOriginCode',
            },
            {
                headerName: 'Port of destination',
                colId: 'portDestinationCode',
                field: 'portDestinationCode',
            },
            {
                headerName: 'Contract Terms',
                colId: 'contractTermCode',
                field: 'contractTermCode',
            },
            {
                headerName: 'Payment Terms',
                colId: 'paymentTermCode',
                field: 'paymentTermCode',
            },
            {
                headerName: 'Arbitration Code',
                field: 'arbitrationCode',
                colId: 'arbitrationCode',
            },
        ];
    };
    TradesListComponent.prototype.onAddOrDeleteColumn = function (event) {
        this.userPreferencesComponent.onChangeColumnVisibility(event);
    };
    TradesListComponent.prototype.onSelectionChanged = function (event) {
        this.grantLock(Number(event.data.sectionId), event.node);
        if (this.gridApi.getSelectedRows().length === 0) {
            this.noRowsSelected.emit();
        }
        if (!event.node.isSelected()) {
            this.removeCardOnUnCheck.emit(event.data.sectionId);
        }
        else {
            this.selectedContractsForMerge = this.gridApi.getSelectedRows();
            if (this.selectedContractsForMerge.length === 1) {
                this.firstSelectedSplit = this.selectedContractsForMerge.map(function (contract) { return contract.sectionId; })[0];
            }
            if (this.selectedContractsForMerge && this.selectedContractsForMerge.length > 0) {
                this.sectionIds = this.selectedContractsForMerge.map(function (contract) { return contract.sectionId; });
                this.sectionIds.splice(0, 0, this.sectionIdMergeTo);
                this.selectedSectionIds.emit({
                    sectiondIds: this.sectionIds,
                });
                var contractLabels = this.selectedContractsForMerge.map(function (contract) { return contract.contractSectionCode; }).join(',');
                this.selectedContractLabels.emit(contractLabels);
                if (this.mergeOption) {
                    this.onMergeOptionSelected(this.mergeOption);
                }
            }
            else {
                this.noRowsSelected.emit();
            }
        }
    };
    TradesListComponent.prototype.disableSelectedRowClick = function (sectionId) {
        if (sectionId) {
            this.gridApi.forEachNode(function (node) {
                if (node.data.sectionId === sectionId) {
                    node.setSelected(false);
                }
            });
        }
    };
    TradesListComponent.prototype.isContractToMergeRowStyle = function (node) {
        if (!node.data.isMergeAllowed) {
            return { background: 'rgba(199, 194, 196, 0.5)', color: '#928D8F' };
        }
    };
    TradesListComponent.prototype.isMergeAllowed = function (node) {
        if (node.data.isMergeAllowed) {
            if (node.data.parentContract === null) {
                return false;
            }
            else {
                return true;
            }
        }
        else {
            return (!node.data.isMergeAllowed) ? false : true;
        }
    };
    TradesListComponent.prototype.getContractsFamily = function (sectionId) {
        var _this = this;
        var getContractFamilySubscription = this.tradingService.getContractFamilyOfSectionToMerge(sectionId, this.dataVersionId).
            subscribe(function (data) {
            data.value.forEach(function (contract) {
                contract.departmentCode = _this.getDepartmentCodeFromId(contract.departmentId);
                contract.weightCode = _this.getWeightUnitCodeFromId(contract.weightUnitId);
                contract.priceCode = _this.getPriceCodeFromId(contract.priceUnitId);
                contract.premiumDiscountCode = _this.getPremiumDiscountCodeFromId(contract.premiumDiscountTypeId);
                contract.portOriginCode = _this.getPortOriginCodeFromId(contract.portOriginId);
                contract.portDestinationCode = _this.getPortDestinationCodeFromId(contract.portDestinationId);
                contract.contractTermCode = _this.getContractTermCodeFromId(contract.contractTermId);
                contract.paymentTermCode = _this.getPaymentTermCodeFromId(contract.paymentTermId);
                contract.arbitrationCode = _this.getArbitrationCodeFromId(contract.arbitrationId);
                contract.counterpartyCode = _this.getCounterpartyCodeFromId(contract.counterparty);
            });
            _this.tradesListToMergeGridRows = data.value;
            _this.dataLength = _this.tradesListToMergeGridRows.length;
        });
        this.subscriptions.push(getContractFamilySubscription);
    };
    TradesListComponent.prototype.getDepartmentCodeFromId = function (id) {
        var departmentCode = this.masterdata.departments.find(function (deparment) { return deparment.departmentId === id; });
        return departmentCode ? departmentCode.departmentCode : null;
    };
    TradesListComponent.prototype.getWeightUnitCodeFromId = function (id) {
        var weightCode = this.masterdata.weightUnits.find(function (weight) { return weight.weightUnitId === id; });
        return weightCode ? weightCode.weightCode : null;
    };
    TradesListComponent.prototype.getPriceCodeFromId = function (id) {
        var priceCode = this.masterdata.priceUnits.find(function (e) { return e.priceUnitId === id; });
        return priceCode ? priceCode.priceCode : '';
    };
    TradesListComponent.prototype.getPremiumDiscountCodeFromId = function (id) {
        var premiumDiscountCode = _shared_enums_discount_type_enum__WEBPACK_IMPORTED_MODULE_10__["DiscountTypes"][id];
        return premiumDiscountCode ? premiumDiscountCode : null;
    };
    TradesListComponent.prototype.getPortOriginCodeFromId = function (id) {
        var portOriginCode = this.masterdata.ports.find(function (e) { return e.portId === id; });
        return portOriginCode ? portOriginCode.portCode : '';
    };
    TradesListComponent.prototype.getPortDestinationCodeFromId = function (id) {
        var portDestinationCode = this.masterdata.ports.find(function (e) { return e.portId === id; });
        return portDestinationCode ? portDestinationCode.portCode : '';
    };
    TradesListComponent.prototype.getArbitrationCodeFromId = function (id) {
        var arbitrationCode = this.masterdata.arbitrations.find(function (e) { return e.arbitrationId === id; });
        return arbitrationCode ? arbitrationCode.arbitrationCode : '';
    };
    TradesListComponent.prototype.getContractTermCodeFromId = function (id) {
        var contractTermCode = this.masterdata.contractTerms.find(function (e) { return e.contractTermId === id; });
        return contractTermCode ? contractTermCode.contractTermCode : '';
    };
    TradesListComponent.prototype.getPaymentTermCodeFromId = function (id) {
        var paymentTermCode = this.masterdata.paymentTerms.find(function (e) { return e.paymentTermsId === id; });
        return paymentTermCode ? paymentTermCode.paymentTermCode : '';
    };
    TradesListComponent.prototype.getFormGroup = function () {
        return _super.prototype.getFormGroup.call(this);
    };
    TradesListComponent.prototype.onMergeOptionSelected = function (event) {
        var _this = this;
        this.mergeOption = event;
        this.sectionIdSelectedToMerge = new _shared_entities_merge_contracts_entity__WEBPACK_IMPORTED_MODULE_9__["MergeContracts"]();
        this.sectionsSelectedToMerge = [];
        var selectedContractsToSave = this.gridApi.getSelectedRows();
        if (event === _shared_enums_trade_merge_options_enum__WEBPACK_IMPORTED_MODULE_11__["ContractMergeOptions"].ContractHeader) {
            this.sectionIdSelectedToMerge.mergeFromSectionIds = selectedContractsToSave.map(function (contract) { return contract.sectionId; });
            var rowNode = this.gridApi.getDisplayedRowAtIndex(0);
            if (rowNode) {
                this.sectionIdSelectedToMerge.mergeToSectionId = rowNode.data.sectionId;
                this.sectionIdMergeTo = rowNode.data.sectionId;
            }
            this.getContractLabelFromId(this.sectionIdSelectedToMerge.mergeToSectionId);
        }
        else if (event === _shared_enums_trade_merge_options_enum__WEBPACK_IMPORTED_MODULE_11__["ContractMergeOptions"].ContractParent) {
            var parentSections_1 = [];
            if (selectedContractsToSave && selectedContractsToSave.length > 0) {
                selectedContractsToSave.forEach(function (contract) {
                    if (!parentSections_1.includes(contract.parentContract)) {
                        parentSections_1.push(contract.parentContract);
                    }
                });
                parentSections_1.forEach(function (parentSection) {
                    var selectedSectionToMerge = new _shared_entities_merge_contracts_entity__WEBPACK_IMPORTED_MODULE_9__["MergeContracts"]();
                    var parentContractSectionCode = _this.tradesListToMergeGridRows.find(function (contract) {
                        return contract.contractSectionCode === parentSection;
                    });
                    if (parentContractSectionCode) {
                        selectedSectionToMerge.mergeToSectionId = parentContractSectionCode.sectionId;
                        selectedSectionToMerge.mergeFromSectionIds = selectedContractsToSave.filter(function (contract) {
                            return contract.parentContract === parentSection && contract.sectionId !== parentContractSectionCode.sectionId;
                        })
                            .map(function (selectedContract) { return selectedContract.sectionId; });
                        selectedSectionToMerge.mergeOption = event;
                        _this.sectionsSelectedToMerge.push(selectedSectionToMerge);
                        _this.sectionIds = selectedContractsToSave.filter(function (contract) {
                            return contract.parentContract === parentSection && contract.sectionId !== parentContractSectionCode.sectionId;
                        })
                            .map(function (selectedContract) { return selectedContract.sectionId; });
                        _this.sectionIds.splice(0, 0, selectedSectionToMerge.mergeToSectionId);
                        _this.selectedSectionIds.emit({
                            sectiondIds: _this.sectionIds,
                        });
                    }
                });
                this.getSaveMessageForMergeOption();
            }
        }
        else if (event === _shared_enums_trade_merge_options_enum__WEBPACK_IMPORTED_MODULE_11__["ContractMergeOptions"].FirstSelectedSplit) {
            var filterSelectedContracts = selectedContractsToSave.filter(function (contract) { return contract.sectionId !== _this.firstSelectedSplit; });
            this.sectionIdSelectedToMerge.mergeFromSectionIds = filterSelectedContracts.map(function (contract) { return contract.sectionId; });
            this.sectionIdSelectedToMerge.mergeToSectionId = this.firstSelectedSplit;
            this.sectionIds = filterSelectedContracts.map(function (contract) { return contract.sectionId; });
            this.sectionIds.splice(0, 0, this.sectionIdSelectedToMerge.mergeToSectionId);
            if (this.sectionIds && this.sectionIds.length > 0) {
                if (this.sectionIds.length < 2) {
                    var messageText = 'Select atleast 2 splits to merge.';
                    this.snackbarService.informationSnackBar(messageText);
                }
                else {
                    this.selectedSectionIds.emit({
                        sectiondIds: this.sectionIds,
                    });
                }
            }
            if (this.sectionIdSelectedToMerge.mergeToSectionId) {
                this.getContractLabelFromId(this.sectionIdSelectedToMerge.mergeToSectionId);
            }
        }
    };
    TradesListComponent.prototype.getContractLabelFromId = function (mergeToSectionId) {
        var sectionId = this.tradesListToMergeGridRows.find(function (trade) {
            return trade.sectionId === Number(mergeToSectionId);
        });
        if (sectionId) {
            this.contractLabel = sectionId.contractSectionCode;
            this.mergeToContractLabel.emit(this.contractLabel);
        }
    };
    TradesListComponent.prototype.onDisplayWarningMessage = function (selectedSectionId) {
        var _this = this;
        var mergeToSectionId;
        var mergeFromSectionIds = [];
        if (selectedSectionId && selectedSectionId.length > 1) {
            selectedSectionId.forEach(function (element) {
                mergeToSectionId = element.mergeToSectionId;
                element.mergeFromSectionIds.forEach(function (sectionId) {
                    mergeFromSectionIds.push(sectionId);
                });
            });
        }
        else if (selectedSectionId && selectedSectionId.length === 1) {
            mergeToSectionId = selectedSectionId[0].mergeToSectionId;
            selectedSectionId[0].mergeFromSectionIds.forEach(function (sectionId) {
                mergeFromSectionIds.push(sectionId);
            });
        }
        var sectionIdMergeTo = this.tradesListToMergeGridRows.find(function (trade) { return trade.sectionId === Number(mergeToSectionId); });
        mergeFromSectionIds.forEach(function (sectionId) {
            var tradeList = _this.tradesListToMergeGridRows.find(function (trade) { return trade.sectionId === sectionId; });
            if (tradeList) {
                if (tradeList.hasCost) {
                    _this.mergeFromsectionIdWithCost.push(String(tradeList.sectionId));
                    _this.mergeFromsectionIdWithCost.forEach(function (contractId) {
                        var id = _this.tradesListToMergeGridRows.find(function (trade) { return trade.sectionId === Number(contractId); });
                        if (id) {
                            _this.mergeFromContractLabel.push(id.contractSectionCode);
                            _this.mergeFromContractLabel = Array.from(new Set(_this.mergeFromContractLabel.map(function (contract) { return contract; })));
                        }
                    });
                }
                if (tradeList.hasCost && tradeList.isInvoiced) {
                    _this.mergeFromsectionIdWithInvoiced.push(String(tradeList.sectionId));
                    _this.mergeFromsectionIdWithInvoiced.forEach(function (contractId) {
                        var id = _this.tradesListToMergeGridRows.find(function (trade) { return trade.sectionId === Number(contractId); });
                        if (id) {
                            _this.mergeFromContractLabel.push(id.contractSectionCode);
                        }
                    });
                }
            }
        });
        if (sectionIdMergeTo) {
            this.mergeToHasCost = sectionIdMergeTo.hasCost;
        }
        if (this.mergeToHasCost && this.mergeFromsectionIdWithCost.length < 1) {
            var costWarningDialog = this.dialog.open(_cost_impact_warning_dialog_cost_impact_warning_dialog_component__WEBPACK_IMPORTED_MODULE_20__["CostImpactWarningDialogComponent"], {
                width: '40%',
                height: '40%',
                data: {
                    confirmationMessage: 'The cost of the following contracts will be dropped, please check the cost estimates and P&L impact',
                    contractReference: this.mergeFromContractLabel,
                    warningList: this.warningListForDiffFields,
                },
            });
            var confirmationSubscription = costWarningDialog.afterClosed().subscribe(function (result) {
                if (result) {
                    _this.message = result ? true : false;
                    _this.successMsg.emit(_this.message);
                    return;
                }
            });
            this.subscriptions.push(confirmationSubscription);
        }
        if (!this.mergeToHasCost && this.mergeFromsectionIdWithCost.length > 0) {
            var costWarningDialog = this.dialog.open(_cost_impact_warning_dialog_cost_impact_warning_dialog_component__WEBPACK_IMPORTED_MODULE_20__["CostImpactWarningDialogComponent"], {
                width: '40%',
                height: '40%',
                data: {
                    confirmationMessage: 'The cost of the following contracts will be dropped, please check the cost estimates and P&L impact',
                    contractReference: this.mergeFromContractLabel,
                    warningList: this.warningListForDiffFields,
                },
            });
            costWarningDialog.afterClosed().subscribe(function (result) {
                if (result) {
                    _this.message = result ? true : false;
                    _this.successMsg.emit(_this.message);
                    return;
                }
            });
        }
        if (!this.mergeToHasCost && this.mergeFromsectionIdWithInvoiced.length > 0) {
            var costWarningDialog = this.dialog.open(_cost_impact_warning_dialog_cost_impact_warning_dialog_component__WEBPACK_IMPORTED_MODULE_20__["CostImpactWarningDialogComponent"], {
                width: '40%',
                height: '40%',
                data: {
                    confirmationMessage: 'The cost of the following contracts will be updated, please check the cost estimates and P&L impact',
                    contractReference: this.mergeFromContractLabel,
                    warningList: this.warningListForDiffFields,
                },
            });
            costWarningDialog.afterClosed().subscribe(function (result) {
                if (result) {
                    _this.message = result ? true : false;
                    _this.successMsg.emit(_this.message);
                    return;
                }
            });
        }
        if (this.mergeToHasCost && this.mergeFromsectionIdWithCost.length > 0 ||
            !this.mergeToHasCost && this.mergeFromsectionIdWithCost.length < 1) {
            this.successMsg.emit(true);
        }
    };
    TradesListComponent.prototype.populateEntity = function (entity) {
        if (this.mergeOption === _shared_enums_trade_merge_options_enum__WEBPACK_IMPORTED_MODULE_11__["ContractMergeOptions"].ContractParent) {
            return this.sectionsSelectedToMerge;
        }
        else {
            var selectedContracts = entity;
            this.sectionIdSelectedToMerge.mergeOption = this.mergeOption;
            selectedContracts.push(this.sectionIdSelectedToMerge);
            return selectedContracts;
        }
    };
    TradesListComponent.prototype.grantLock = function (sectionId, node) {
        var _this = this;
        if (node.isSelected()) {
            if (!this.locking.includes(sectionId)) {
                this.locking.push(sectionId);
                this.subscriptions.push(this.lockService.isLockedContract(sectionId).subscribe(function (lock) {
                    if (lock.isLocked) {
                        _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_6__["ConfirmationDialogComponent"], {
                            data: {
                                title: 'Lock',
                                text: lock.message,
                                okButton: 'Got it',
                            },
                        });
                        _this.tradesListToMergeGridOptions.api.deselectNode(node);
                        _this.locking = _this.locking.filter(function (id) { return id !== sectionId; });
                    }
                    else {
                        _this.subscriptions.push(_this.lockService.lockContract(sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_7__["LockFunctionalContext"].TradeMerge)
                            .subscribe(function () {
                            _this.refeshResourceInformation();
                            _this.locking = _this.locking.filter(function (id) { return id !== sectionId; });
                        }));
                    }
                }));
            }
            else {
                if (!this.unlocking.includes(sectionId)) {
                    this.unlocking.push(sectionId);
                    this.refeshResourceInformation();
                    var sectionInfo = this.resourcesInformation.filter(function (rsc) { return rsc.resourceId === sectionId; });
                    if (sectionInfo && sectionInfo.length === 0) {
                        this.subscriptions.push(this.lockService.unlockContract(sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_7__["LockFunctionalContext"].TradeMerge)
                            .subscribe(function () {
                            node.setRowSelectable(true);
                            _this.unlocking = _this.unlocking.filter(function (id) { return id !== sectionId; });
                        }));
                    }
                    else {
                        node.setRowSelectable(true);
                        this.unlocking = this.unlocking.filter(function (id) { return id !== sectionId; });
                    }
                }
            }
        }
    };
    TradesListComponent.prototype.warningMessageForDiffFields = function (warningList) {
        if (this.warningListForDiffFields) {
            if (this.warningListForDiffFields.length > 0) {
                this.warningListForDiffFields = this.warningListForDiffFields + ' , ' + warningList;
            }
            else {
                this.warningListForDiffFields = this.warningListForDiffFields + warningList;
            }
        }
        else {
            this.warningListForDiffFields = warningList;
        }
    };
    TradesListComponent.prototype.refeshResourceInformation = function () {
        var _this = this;
        this.resourcesInformation = new Array();
        this.tradesListToMergeGridOptions.api.forEachNode(function (node) {
            if (node.isSelected()) {
                var resourceInformation = new _shared_entities_lock_resource_information_entity__WEBPACK_IMPORTED_MODULE_8__["LockResourceInformation"]();
                resourceInformation.resourceType = _this.contractVariable;
                resourceInformation.resourceId = node.data.sectionId;
                resourceInformation.resourceCode = node.data.contractReference;
                _this.resourcesInformation.push(resourceInformation);
            }
        });
    };
    TradesListComponent.prototype.ngOnDestroy = function () {
        var _this = this;
        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe(function () {
            _this.subscriptions.forEach(function (subscription) {
                subscription.unsubscribe();
            });
        }));
    };
    TradesListComponent.prototype.getSaveMessageForMergeOption = function () {
        var _this = this;
        var mergeFromContractReference = [];
        var message = '';
        var mergeToSectionReference = '';
        if (this.sectionsSelectedToMerge) {
            this.sectionsSelectedToMerge.forEach(function (section) {
                mergeToSectionReference = _this.tradesListToMergeGridRows.find(function (trade) {
                    return trade.sectionId === Number(section.mergeToSectionId);
                }).contractSectionCode;
                if (section.mergeFromSectionIds) {
                    mergeFromContractReference = [];
                    section.mergeFromSectionIds.forEach(function (contract) {
                        mergeFromContractReference.push(_this.tradesListToMergeGridRows.find(function (trade) {
                            return trade.sectionId === Number(contract);
                        }).contractSectionCode);
                    });
                }
                message = message + 'The Trade ' + mergeFromContractReference.toString() +
                    ' is merged to ' + mergeToSectionReference + '. ';
            });
            this.multipleMergeSelected.emit(message);
        }
    };
    TradesListComponent.prototype.getCounterpartyCodeFromId = function (id) {
        var counterpartyCode = this.masterdata.counterparties.find(function (counterParty) { return counterParty.counterpartyID === id; });
        return counterpartyCode ? counterpartyCode.counterpartyCode : null;
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('userPreferences'),
        __metadata("design:type", _shared_components_ag_grid_user_preferences_ag_grid_user_preferences_component__WEBPACK_IMPORTED_MODULE_4__["AgGridUserPreferencesComponent"])
    ], TradesListComponent.prototype, "userPreferencesComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], TradesListComponent.prototype, "selectedSectionIds", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], TradesListComponent.prototype, "selectedContractLabels", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], TradesListComponent.prototype, "mergeToContractLabel", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], TradesListComponent.prototype, "noRowsSelected", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], TradesListComponent.prototype, "multipleMergeSelected", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], TradesListComponent.prototype, "successMsg", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], TradesListComponent.prototype, "removeCardOnUnCheck", void 0);
    TradesListComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-trades-list',
            template: __webpack_require__(/*! ./trades-list.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trades-list/trades-list.component.html"),
            styles: [__webpack_require__(/*! ./trades-list.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trades-list/trades-list.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_13__["FormConfigurationProviderService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialog"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_12__["AgGridService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _shared_services_security_service__WEBPACK_IMPORTED_MODULE_17__["SecurityService"],
            _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_19__["UiService"],
            _shared_services_grid_configuration_provider_service__WEBPACK_IMPORTED_MODULE_14__["GridConfigurationProviderService"],
            _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_15__["LockService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_16__["TradingService"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_18__["SnackbarService"]])
    ], TradesListComponent);
    return TradesListComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/tranche-split-grid/tranche-split-grid.component.html":
/*!**************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/tranche-split-grid/tranche-split-grid.component.html ***!
  \**************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card>\r\n    <div fxLayout=\"row\"\r\n         fxLayoutAlign=\"start none\"\r\n         class=\"search\">\r\n        <mat-form-field>\r\n            <input matInput\r\n                   [formControl]=\"searchValueCtrl\"\r\n                   placeholder=\"First Criteria\"\r\n                   (keydown.enter)=\"onSearchButtonClick()\"\r\n                   #message>\r\n        </mat-form-field>\r\n        <button mat-raised-button\r\n                (click)=\"onSearchButtonClick()\"\r\n                class=\"heroGradient\">\r\n            <mat-icon aria-label=\"Search\"\r\n                      class=\"search-icon\">search</mat-icon>\r\n        </button>\r\n    </div>\r\n</mat-card>\r\n\r\n<atlas-list-and-search class=\"default-height\" *ngIf=\"!isLoading\"\r\n                       [gridCode]=\"gridCode\"\r\n                       [gridTitle]=\"(childSectionsSearchResult ? childSectionsSearchResult.length + ' ' : '') + 'Tranche & Split Found'\"\r\n                       [company]=\"company\"\r\n                       [additionalFilters]=\"additionalFilters\"\r\n                       [dataLoader]=\"dataLoader\"\r\n                       [isFilterSetDisplay]=\"false\"\r\n                       [dataVersionId]=\"dataVersionId\"\r\n                       #listAndSearchComponent>\r\n</atlas-list-and-search>\r\n<atlas-invoice-status #invoiceStatusComponent\r\n                      [hidden]=\"true\"></atlas-invoice-status>\r\n<atlas-invoicing-form-component #invoiceFormComponent\r\n                                [hidden]=\"true\"></atlas-invoicing-form-component>\r\n<atlas-allocation-info-form-component #allocationInfoComponent\r\n                                      [hidden]=\"true\"></atlas-allocation-info-form-component>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/tranche-split-grid/tranche-split-grid.component.scss":
/*!**************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/tranche-split-grid/tranche-split-grid.component.scss ***!
  \**************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".atr-grid-option {\n  height: 500px; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/form-components/tranche-split-grid/tranche-split-grid.component.ts":
/*!************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/form-components/tranche-split-grid/tranche-split-grid.component.ts ***!
  \************************************************************************************************************************************/
/*! exports provided: TrancheSplitGridComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TrancheSplitGridComponent", function() { return TrancheSplitGridComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_ag_grid_user_preferences_ag_grid_user_preferences_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component */ "./Client/app/shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_components_list_and_search_list_and_search_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/components/list-and-search/list-and-search.component */ "./Client/app/shared/components/list-and-search/list-and-search.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_list_and_search_list_and_search_filter_entity__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/entities/list-and-search/list-and-search-filter.entity */ "./Client/app/shared/entities/list-and-search/list-and-search-filter.entity.ts");
/* harmony import */ var _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/enums/contract-type.enum */ "./Client/app/shared/enums/contract-type.enum.ts");
/* harmony import */ var _shared_enums_list_and_search_filter_type_enum__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/enums/list-and-search-filter-type.enum */ "./Client/app/shared/enums/list-and-search-filter-type.enum.ts");
/* harmony import */ var _shared_enums_position_month_type_enum__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/enums/position-month-type.enum */ "./Client/app/shared/enums/position-month-type.enum.ts");
/* harmony import */ var _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/services/ag-grid.service */ "./Client/app/shared/services/ag-grid.service.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_list_and_search_childSections_data_loader__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../../shared/services/list-and-search/childSections-data-loader */ "./Client/app/shared/services/list-and-search/childSections-data-loader.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _invoice_marking_tab_components_invoice_status_invoice_status_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../invoice-marking-tab/components/invoice-status/invoice-status.component */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-status/invoice-status.component.ts");
/* harmony import */ var _allocation_info_form_component_allocation_info_form_component_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../allocation-info-form-component/allocation-info-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/allocation-info-form-component/allocation-info-form-component.component.ts");
/* harmony import */ var _invoicing_form_component_invoicing_form_component_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../invoicing-form-component/invoicing-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/invoicing-form-component/invoicing-form-component.component.ts");
/* harmony import */ var _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./../../../../../shared/enums/contract-status.enum */ "./Client/app/shared/enums/contract-status.enum.ts");
/* harmony import */ var _shared_enums_pricing_method_enum__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./../../../../../shared/enums/pricing-method.enum */ "./Client/app/shared/enums/pricing-method.enum.ts");
/* harmony import */ var _services_trade_actions_service__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./../../../../services/trade-actions.service */ "./Client/app/trading/services/trade-actions.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __values = (undefined && undefined.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};

























var TrancheSplitGridComponent = /** @class */ (function (_super) {
    __extends(TrancheSplitGridComponent, _super);
    function TrancheSplitGridComponent(formConfigurationProvider, formBuilder, masterdataService, companyManager, utilService, router, route, tradingService, dataLoader, tradeActionsService, ngZone, gridService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.formBuilder = formBuilder;
        _this.masterdataService = masterdataService;
        _this.companyManager = companyManager;
        _this.utilService = utilService;
        _this.router = router;
        _this.route = route;
        _this.tradingService = tradingService;
        _this.dataLoader = dataLoader;
        _this.tradeActionsService = tradeActionsService;
        _this.ngZone = ngZone;
        _this.gridService = gridService;
        _this.gridCode = 'tradeChildSectionListGrid';
        _this.additionalFilters = [];
        _this.isFilterDisplay = false;
        _this.dataLength = 0;
        _this.isLoading = true;
        _this.searchValueCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_8__["AtlasFormControl"]('SearchTrade');
        _this.toggleClicked = false;
        _this.contractStatus = null;
        _this.gridOptions = {};
        _this.componentId = 'trancheSplitList';
        return _this;
    }
    TrancheSplitGridComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));
        this.masterdata = this.route.snapshot.data.masterdata;
        this.gridContext = this;
        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;
        // Override getData because data is already loaded
        this.dataLoader.getData = this.getData.bind(this);
        var filter = new _shared_entities_list_and_search_list_and_search_filter_entity__WEBPACK_IMPORTED_MODULE_9__["ListAndSearchFilter"]();
        filter.fieldId = 0;
        filter.fieldName = 'sectionId';
        filter.predicate = {
            filterType: _shared_enums_list_and_search_filter_type_enum__WEBPACK_IMPORTED_MODULE_11__["ListAndSearchFilterType"].Text,
            operator: 'eq',
            value1: String(this.sectionId),
        };
        filter.isActive = true;
        this.additionalFilters.push(filter);
    };
    TrancheSplitGridComponent.prototype.getData = function (filters, offset, limit) {
        var _this = this;
        var e_1, _a;
        var current = this.getChildSectionSearchResultFromSection(this.parentModel);
        var list = [];
        if (this.childSectionsSearchResult) {
            list = this.childSectionsSearchResult;
        }
        list.unshift(current);
        list = list.sort(function (section1, section2) { return section1.contractLabel < section2.contractLabel ? -1 : 1; });
        if (this.searchValueCtrl.value) {
            list = list.filter(function (section) {
                return section.contractLabel.toUpperCase().startsWith((_this.searchValueCtrl.value.toString().toUpperCase()));
            });
        }
        if (this.contractStatus) {
            // only approve child sections
            var sectionOriginId = list.find(function (item) { return item.sectionId === _this.sectionId; }).sectionOriginId;
            try {
                for (var list_1 = __values(list), list_1_1 = list_1.next(); !list_1_1.done; list_1_1 = list_1.next()) {
                    var val = list_1_1.value;
                    if (!sectionOriginId || sectionOriginId === 0) {
                        val.status = this.contractStatus;
                    }
                    else {
                        if (val.sectionId === this.sectionId || val.sectionOriginId === this.sectionId) {
                            val.status = this.contractStatus;
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (list_1_1 && !list_1_1.done && (_a = list_1.return)) _a.call(list_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["of"])(list);
    };
    TrancheSplitGridComponent.prototype.ngOnDestroy = function () {
        if (this.getSectionSubscription) {
            this.getSectionSubscription.unsubscribe();
        }
    };
    TrancheSplitGridComponent.prototype.getChildSectionSearchResultFromSection = function (section) {
        var department = this.masterdata.departments.find(function (dep) { return dep.departmentId === section.departmentId; });
        var commodity = this.masterdata.commodities.find(function (com) { return com.commodityId === section.commodityId; });
        var weightUnit = this.masterdata.weightUnits.find(function (unit) { return unit.weightUnitId === section.weightUnitId; });
        var priceUnit = this.masterdata.priceUnits.find(function (unit) { return unit.priceUnitId === section.priceUnitId; });
        var arbitration = this.masterdata.arbitrations.find(function (unit) { return unit.arbitrationCode === section.arbitration; });
        var portOrigin = this.masterdata.ports.find(function (unit) { return unit.portCode === section.portOfOrigin; });
        var portDestination = this.masterdata.ports.find(function (unit) { return unit.portCode === section.portOfDestination; });
        var periodType = this.masterdata.periodTypes.find(function (unit) { return unit.periodTypeCode === section.periodTypeCode; });
        var invoiceStatus = this.masterdata.invoiceStatus.find(function (unit) {
            return Number(unit.code) === section.invoicingStatusId;
        });
        var sectionResult = {
            contractLabel: section.contractLabel,
            sectionId: section.sectionId,
            status: section.status || section.status === 0 ? _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"][section.status] : null,
            blDate: section.blDate,
            allocatedTo: section.allocatedTo ? section.allocatedTo.contractLabel : '',
            assignedCharterReference: section.assignedCharterReference,
            department: department ? department.description : '',
            departmentCode: department ? department.departmentCode : '',
            counterpartyReference: section.counterpartyReference,
            contractTerm: section.contractTerms,
            contractTermsLocation: section.contractTermsLocation,
            commodityCode: commodity ? commodity.commodityType : '',
            commodityOrigin: commodity ? commodity.commodityOrigin : '',
            commodityGrade: commodity ? commodity.commodityGrade : '',
            commodityLvl4: commodity ? commodity.commodityLvl4 : '',
            commodityLvl5: commodity ? commodity.commodityLvl5 : '',
            weightUnit: weightUnit ? weightUnit.weightCode : '',
            quantity: section.quantity,
            currency: section.currencyCode,
            priceUnit: priceUnit ? priceUnit.priceCode : '',
            price: section.price,
            paymentTerm: section.paymentTerms,
            deliveryPeriodStartDate: section.deliveryPeriodStartDate,
            positionMonthIndex: section.positionMonthIndex,
            contractDate: section.header ? section.header.contractDate : section.contractDate,
            pricingMethod: section.pricingMethod || section.pricingMethod === 0 ? _shared_enums_pricing_method_enum__WEBPACK_IMPORTED_MODULE_23__["PricingMethods"][section.pricingMethod] : null,
            lastModifiedBy: section.lastModifiedBy,
            physicalContractId: section.physicalContractId,
            createdDateTime: section.creationDate,
            createdBy: section.createdBy,
            modifiedDateTime: section.lastModifiedDate,
            modifiedBy: section.lastModifiedBy,
            contractType: section.contractType,
            contractId: section.contractId,
            sectionNumber: section.sectionNumber,
            firstApprovalDateTime: section.firstApprovalDateTime,
            departmentId: section.departmentId,
            buyerCode: section.buyerCode,
            buyerDescription: section.buyerDescription,
            charterDescription: section.charterDescription,
            sellerDescription: section.sellerDescription,
            paymentTermDescription: section.paymentTermDescription,
            contractTermLocationDescription: section.contractTermLocationDescription,
            currencyDescription: section.currencyDescription,
            weightUnitDescription: section.weightUnitDescription,
            priceUnitDescription: section.priceUnitDescription,
            traderDisplayName: section.traderDisplayName,
            companyId: section.companyId,
            contractTermDescription: section.contractTermDescription,
            sellerCode: section.sellerCode,
            counterparty: section.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_10__["ContractTypes"].Purchase
                ? section.sellerCode : section.buyerCode,
            commodityId: section.commodityId,
            originalQuantity: section.originalQuantity,
            weightUnitId: section.weightUnitId,
            toleranceMin: null,
            toleranceMax: null,
            portOriginCode: section.portOfOrigin,
            portDestinationCode: section.portOfDestination,
            positionMonthType: section.positionMonthType,
            allocationDate: section.allocationDate,
            charterAssignmentDate: section.charterAssignmentDate,
            creationDate: section.creationDate,
            lastModifiedDate: section.lastModifiedDate,
            finalInvoiceRequired: false,
            cropYear: section.cropYear,
            packingCode: section.packingCode,
            paymentTermCode: section.paymentTerms,
            contractTermCode: section.contractTerms,
            periodTypeCode: periodType ? periodType.periodTypeDescription : '',
            priceUnitId: section.priceUnitId,
            priceCode: priceUnit.priceCode,
            arbitrationCode: section.arbitration,
            premiumDiscountTypeId: section.premiumDiscountTypeId,
            premiumDiscountValue: section.premiumDiscountValue,
            premiumDiscountCurrency: section.premiumDiscountCurrency,
            premiumDiscountBasis: section.premiumDiscountBasis,
            contractedValue: section.contractedValue,
            sectionTypeId: section.sectionTypeId,
            portOfOrigin: portOrigin ? portOrigin.description : '',
            portOfDestination: portDestination ? portDestination.description : '',
            deliveryPeriodEndDate: section.deliveryPeriodEndDate,
            contractTerms: section.contractTerms,
            periodType: periodType ? periodType.periodTypeDescription : '',
            paymentTerms: section.paymentTerms,
            cropYearTo: section.cropYearTo,
            arbitration: section.arbitration,
            positionMonth: section.positionMonth,
            charterId: section.charterId,
            invoiceReference: section.invoiceReference,
            otherReference: section.otherReference,
            shippingPeriod: section.shippingPeriod,
            periodTypeId: section.periodTypeId,
            invoicingStatusId: section.invoicingStatusId,
            invoiceTypeId: section.invoiceTypeId,
            sectionOriginId: section.sectionOriginId,
            contractValue: Number(section.contractedValue),
            memo: section.memorandum,
            commodityDescription: commodity ? commodity.commodityDescription : '',
            arbitrationDescription: arbitration ? arbitration.description : '',
            positionType: _shared_enums_position_month_type_enum__WEBPACK_IMPORTED_MODULE_12__["PositionMonthTypes"][section.positionMonthType],
            portOfOriginDescription: portOrigin ? portOrigin.description : '',
            portOfDestinationDescription: portDestination ? portDestination.description : '',
            groupingNumber: this.allocationInfoComponent.groupingNumberCtrl.value,
            mainInvoiceReference: section.invoiceReference,
            mainInvoiceDate: section.invoiceDate,
            percentageInvoiced: section.totalInvoicePercent,
            invoiceValue: section.totalInvoiceValue,
            paymentDate: null,
            quantityInvoiced: section.totalInvoiceQuantity,
            invoicingStatus: invoiceStatus ? invoiceStatus.description : '',
            amendedBy: section.lastModifiedBy,
            amendedOn: section.lastModifiedDate,
            vesselName: null,
            bLReference: '',
            charterManager: '',
            counterpartyRef: section.counterpartyReference,
            contractIssuedOn: section.lastDocumentIssuedDate,
            contractTypeCode: _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_10__["ContractTypes"][section.contractType],
            quantityCodeInvoiced: weightUnit ? weightUnit.weightCode : '',
            allocatedSectionId: section.allocatedTo ? section.allocatedTo.sectionId : null,
            estimatedMaturityDate: section.estimatedMaturityDate,
        };
        return sectionResult;
    };
    TrancheSplitGridComponent.prototype.initForm = function (entity, isEdit) {
        this.parentModel = entity;
        this.childSections = entity.childSections;
        this.dataLength = this.childSections ? this.childSections.length : 0;
        if (this.dataLength > 0) {
            this.trancheAndSplitRows = this.childSections.map(function (o) { return o; });
        }
        this.isLoading = false;
        return entity;
    };
    TrancheSplitGridComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({});
        return _super.prototype.getFormGroup.call(this);
    };
    TrancheSplitGridComponent.prototype.onSearchButtonClick = function () {
        this.listAndSearchComponent.loadData(true);
    };
    TrancheSplitGridComponent.prototype.contractStatusChanged = function (contractStatus) {
        this.contractStatus = _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"][contractStatus];
        this.listAndSearchComponent.loadData(true);
    };
    TrancheSplitGridComponent.prototype.onTabActive = function () {
        this.gridService.sizeColumns(this.listAndSearchComponent.agGridOptions);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('userPreferences'),
        __metadata("design:type", _shared_components_ag_grid_user_preferences_ag_grid_user_preferences_component__WEBPACK_IMPORTED_MODULE_5__["AgGridUserPreferencesComponent"])
    ], TrancheSplitGridComponent.prototype, "userPreferencesComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('listAndSearchComponent'),
        __metadata("design:type", _shared_components_list_and_search_list_and_search_component__WEBPACK_IMPORTED_MODULE_7__["ListAndSearchComponent"])
    ], TrancheSplitGridComponent.prototype, "listAndSearchComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('invoiceStatusComponent'),
        __metadata("design:type", _invoice_marking_tab_components_invoice_status_invoice_status_component__WEBPACK_IMPORTED_MODULE_19__["InvoiceStatusComponent"])
    ], TrancheSplitGridComponent.prototype, "invoiceStatusComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('invoiceFormComponent'),
        __metadata("design:type", _invoicing_form_component_invoicing_form_component_component__WEBPACK_IMPORTED_MODULE_21__["InvoicingFormComponentComponent"])
    ], TrancheSplitGridComponent.prototype, "invoiceFormComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('allocationInfoComponent'),
        __metadata("design:type", _allocation_info_form_component_allocation_info_form_component_component__WEBPACK_IMPORTED_MODULE_20__["AllocationInfoFormComponentComponent"])
    ], TrancheSplitGridComponent.prototype, "allocationInfoComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Array)
    ], TrancheSplitGridComponent.prototype, "childSectionsSearchResult", void 0);
    TrancheSplitGridComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-tranche-split-grid',
            providers: [_shared_services_list_and_search_childSections_data_loader__WEBPACK_IMPORTED_MODULE_17__["ChildSectionsDataLoader"]],
            template: __webpack_require__(/*! ./tranche-split-grid.component.html */ "./Client/app/trading/components/contract-physical-capture/form-components/tranche-split-grid/tranche-split-grid.component.html"),
            styles: [__webpack_require__(/*! ./tranche-split-grid.component.scss */ "./Client/app/trading/components/contract-physical-capture/form-components/tranche-split-grid/tranche-split-grid.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_14__["FormConfigurationProviderService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_15__["MasterdataService"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_4__["CompanyManagerService"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_18__["UtilService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_16__["TradingService"],
            _shared_services_list_and_search_childSections_data_loader__WEBPACK_IMPORTED_MODULE_17__["ChildSectionsDataLoader"],
            _services_trade_actions_service__WEBPACK_IMPORTED_MODULE_24__["TradeActionsService"],
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_13__["AgGridService"]])
    ], TrancheSplitGridComponent);
    return TrancheSplitGridComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_6__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/interco-trade-dialog.component.html":
/*!**************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/interco-trade-dialog.component.html ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card>\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h3>Inter Company Transfer</h3>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n\r\n    <mat-card-content>\r\n        <div style=\"margin-bottom: 10px\">\r\n            You selected LDC companies both as buyer and seller\r\n        </div>\r\n        <div fxLayout=\"column\">\r\n            <div fxFlex=\"100%\"\r\n                 fxLayout=\"row\"\r\n                 fxLayoutAlign=\"space-between center\">\r\n                <mat-slide-toggle mat-raised-button\r\n                                  [checked]=\"isInterco\"\r\n                                  (change)=\"toggleIntercoTrade()\">Create an Inter-company contract</mat-slide-toggle>\r\n            </div>\r\n\r\n            <div fxFlex=\"100%\"\r\n                 fxLayout=\"row\"\r\n                 *ngIf=\"isInterco\">\r\n                <mat-divider class=\"divider\"></mat-divider>\r\n                <div fxFlex=\"100%\"\r\n                     class=\"dropdown-height\">\r\n                     <div class=\"dropdown-width\">\r\n                    <atlas-dropdown-select fxFlex='30%'\r\n                                           fxLayout=\"row\"\r\n                                           fxLayoutAlign=\"start left\"\r\n                                           label=\"Company\"\r\n                                           [fieldControl]=\"companyCtrl\"\r\n                                           isEditable=true\r\n                                           [options]=\"companyList\"\r\n                                           [selectProperties]=\"company\"\r\n                                           [displayProperty]=\"companyDisplay\"\r\n                                           (optionSelected)=\"bindDepartments($event)\"\r\n                                           [required]=\"companyCtrl.isRequired\">\r\n                    </atlas-dropdown-select>\r\n                </div>\r\n                    <atlas-dropdown-select fxLayout=\"row\"\r\n                                           fxFlex='30%'\r\n                                           label=\"Department\"\r\n                                           [fieldControl]=\"departmentCtrl\"\r\n                                           isEditable=true\r\n                                           [options]=\"filteredDepartmentList\"\r\n                                           selected=\"true\"\r\n                                           [isAutocompleteActivated]=\"true\"\r\n                                           [displayProperty]=\"departmentDisplay\"\r\n                                           (optionSelected)=\"bindTraders($event)\"\r\n                                           [selectProperties]=\"department\">\r\n                    </atlas-dropdown-select>\r\n                    <atlas-dropdown-select fxLayout=\"row\"\r\n                                           fxFlex='30%'\r\n                                           label=\"Trader\"\r\n                                           [fieldControl]=\"traderCtrl\"\r\n                                           isEditable=true\r\n                                           [readonly]=\"true\"\r\n                                           [options]=\"filteredTraderList\"\r\n                                           selected=\"true\"\r\n                                           [selectProperties]=\"trader\"\r\n                                           [isAutocompleteActivated]=\"true\"\r\n                                           [displayProperty]=\"traderDisplay\">\r\n                    </atlas-dropdown-select>\r\n                </div>\r\n            </div>\r\n            <atlas-intero-state-banner *ngIf=\"isInterco\"\r\n                                       [title]=\"bannerTitle\"\r\n                                       [description]=\"bannerDescription\"\r\n                                       [state]=\"bannerState\"></atlas-intero-state-banner>\r\n\r\n            <mat-card *ngIf=\"isInterco &&  isValueMissing\">\r\n                <mat-card-header>\r\n                    <mat-card-title>\r\n                        <h2>Values to set up</h2>\r\n                    </mat-card-title>\r\n                </mat-card-header>\r\n                <mat-card-content>\r\n                    <div ag-grid=\"\"\r\n                         class=\"ag-theme-material pointer-cursor\">\r\n                        <ag-grid-angular style=\" height:100%;\"\r\n                                         class=\"ag-theme-material\"\r\n                                         [columnDefs]=\"interoGridCols\"\r\n                                         [rowData]=\"intercoMissingData\"\r\n                                         [gridOptions]=\"\"\r\n                                         domLayout=\"autoHeight\"\r\n                                         (gridReady)=\"onGridReady($event)\"\r\n                                         (rowSelected)=\"onSelectionChanged($event)\"\r\n                                         [suppressRowClickSelection]=\"true\"\r\n                                         [enableSorting]=\"true\"\r\n                                         [enableColResize]=\"true\"\r\n                                         enableFilter\r\n                                         [pagination]=\"true\"\r\n                                         [paginationPageSize]=\"5\">\r\n                        </ag-grid-angular>\r\n                    </div>\r\n                </mat-card-content>\r\n            </mat-card>\r\n        </div>\r\n        <div class=\"btn-container\">\r\n            <div fxFlex=\"50\"\r\n                 fxLayout=\"row\"\r\n                 fxAlignLayout=\"start start\">\r\n                <button *ngIf=\"isInterco\"\r\n                        mat-button\r\n                        type=\"button\"\r\n                        (click)=\"onDiscardButtonClicked()\">\r\n                    Discard\r\n                </button>\r\n            </div>\r\n            <div fxFlex=\"50\"\r\n                 fxLayout=\"row\"\r\n                 fxAlignLayout=\"start end\">\r\n                <span class=\"fill-space\"></span>\r\n                <button *ngIf=\"!isInterco\"\r\n                        mat-button\r\n                        type=\"button\"\r\n                        (click)=\"onCancelButtonClicked()\">\r\n                    Cancel\r\n                </button>\r\n                <button mat-raised-button\r\n                        type=\"button\"\r\n                        [disabled]=\"disableSaveButton\"\r\n                        (click)=\"onSaveButtonClicked()\">\r\n                    save\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/interco-trade-dialog.component.scss":
/*!**************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/interco-trade-dialog.component.scss ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".divider {\n  margin: auto !important; }\n\n.dropdown-height {\n  margin-top: 15px !important; }\n\ndiv.dropdown-width {\n  width: 100%; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/interco-trade-dialog.component.ts":
/*!************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/interco-trade-dialog.component.ts ***!
  \************************************************************************************************************************/
/*! exports provided: IntercoTradeDialogComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntercoTradeDialogComponent", function() { return IntercoTradeDialogComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_ag_grid_hyperlink_ag_grid_hyperlink_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../shared/components/ag-grid-hyperlink/ag-grid-hyperlink.component */ "./Client/app/shared/components/ag-grid-hyperlink/ag-grid-hyperlink.component.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../shared/directives/autocomplete-dropdown.directive */ "./Client/app/shared/directives/autocomplete-dropdown.directive.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../shared/entities/masterdata-props.entity */ "./Client/app/shared/entities/masterdata-props.entity.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _intero_state_banner_intero_state_banner_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./intero-state-banner/intero-state-banner.component */ "./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/intero-state-banner/intero-state-banner.component.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};















var IntercoTradeDialogComponent = /** @class */ (function (_super) {
    __extends(IntercoTradeDialogComponent, _super);
    function IntercoTradeDialogComponent(thisDialogRef, data, masterdataService, tradingService, formBuilder, utilService, formConfigurationProvider, snackbarservice, route) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.thisDialogRef = thisDialogRef;
        _this.data = data;
        _this.masterdataService = masterdataService;
        _this.tradingService = tradingService;
        _this.formBuilder = formBuilder;
        _this.utilService = utilService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.snackbarservice = snackbarservice;
        _this.route = route;
        _this.isInterco = false;
        _this.companyCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__["AtlasFormControl"]('Company');
        _this.departmentCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__["AtlasFormControl"]('Department');
        _this.traderCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_7__["AtlasFormControl"]('Trader');
        _this.company = ['companyId'];
        _this.department = ['departmentCode', 'description'];
        _this.selectPropertiesDept = ['departmentCode'];
        _this.trader = ['samAccountName', 'displayName'];
        _this.traderDisplay = 'samAccountName';
        _this.departmentDisplay = 'departmentCode';
        _this.companyList = [];
        _this.departmentList = [];
        _this.filteredDepartmentList = [];
        _this.traderList = [];
        _this.filteredTraderList = [];
        _this.filteredCompany = [];
        _this.masterdataList = [
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_8__["MasterDataProps"].Companies,
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_8__["MasterDataProps"].Traders,
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_8__["MasterDataProps"].Departments,
        ];
        _this.isValueMissing = false;
        _this.rowData = [];
        _this.intercoTradeData = {};
        _this.intercoMissingData = [];
        thisDialogRef.disableClose = true;
        _this.companyList = data.counterpartyCompanies;
        _this.intercoValidation = data.intercoValidation;
        return _this;
    }
    IntercoTradeDialogComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.tradingService.getAllTraders()
            .subscribe(function (traders) {
            _this.traderList = traders.value;
            _this.filteredTraderList = _this.traderList;
            _this.traderCtrl.valueChanges.subscribe(function (input) {
                _this.filteredTraderList = _this.utilService.filterListforAutocomplete(input, _this.traderList, ['samAccountName', 'displayName']);
            });
            _this.setValidators();
        });
        this.initIntercoGridColumns();
        this.masterdataService.getMasterData(this.masterdataList).subscribe(function (masterData) {
            _this.masterdata = masterData;
        });
    };
    IntercoTradeDialogComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            companyCtrl: this.companyCtrl,
            departmentCtrl: this.departmentCtrl,
            traderCtrl: this.traderCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    IntercoTradeDialogComponent.prototype.handleCancel = function (isCancel) {
        this.intercoTradeData.isInterco = false;
        this.intercoTradeData.isCancelled = isCancel;
        this.thisDialogRef.close(this.intercoTradeData);
    };
    IntercoTradeDialogComponent.prototype.onCancelButtonClicked = function () {
        this.handleCancel(true);
    };
    IntercoTradeDialogComponent.prototype.onDiscardButtonClicked = function () {
        this.handleCancel(true);
    };
    IntercoTradeDialogComponent.prototype.onSaveButtonClicked = function () {
        var _this = this;
        if (this.formBuilder) {
            if (this.isInterco) {
                this.intercoTradeData.companyId = this.companyCtrl.value.companyId;
                var department = this.departmentList.find(function (dep) {
                    return (dep.departmentCode === _this.departmentCtrl.value.departmentCode &&
                        dep.companyId === _this.companyCtrl.value.id);
                });
                if (department) {
                    this.intercoTradeData.departmentId = department.departmentId;
                }
                else {
                    var intercoCompany = this.masterdata.companies.find(function (e) {
                        return e.id === _this.companyCtrl.value.id;
                    });
                    this.intercoTradeData.departmentId = intercoCompany.defaultDepartmentId;
                }
                var trader = this.filteredTraderList.find(function (trade) { return trade.samAccountName === _this.traderCtrl.value.samAccountName; });
                if (trader) {
                    this.intercoTradeData.traderId = trader.userId;
                }
                else {
                    this.intercoTradeData.traderId = null;
                }
                this.intercoTradeData.isInterco = true;
                this.intercoTradeData.isCancelled = false;
                this.thisDialogRef.close(this.intercoTradeData);
            }
            else {
                this.handleCancel(false);
            }
        }
    };
    IntercoTradeDialogComponent.prototype.toggleIntercoTrade = function () {
        this.isInterco = !this.isInterco;
        if (!this.isInterco) {
            this.selectedCompany = null;
            this.intercoMissingData = [];
            this.isValueMissing = false;
        }
        if (this.companyList && this.companyList.length > 0 && this.isInterco) {
            this.disableSaveButton = true;
            this.companyCtrl.patchValue(this.companyList[0]);
            this.bindDepartments(this.companyCtrl.value);
        }
        if (this.isInterco && !this.selectedCompany) {
            this.disableSaveButton = true;
        }
        else if (!this.isInterco) {
            this.disableSaveButton = false;
        }
    };
    IntercoTradeDialogComponent.prototype.onGridReady = function () {
    };
    IntercoTradeDialogComponent.prototype.setValidators = function () {
        this.companyCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required,
            Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_6__["inDropdownListValidator"])(this.companyList, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_13__["nameof"])('companyId')),
        ]));
        this.traderCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([
            Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_6__["inDropdownListValidator"])(this.traderList, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_13__["nameof"])('samAccountName')),
        ]));
    };
    IntercoTradeDialogComponent.prototype.bindDepartments = function (event) {
        var _this = this;
        this.selectedCompany = event;
        this.masterdataService.getDepartmentsByCompanyIdInterco(event.companyId)
            .subscribe(function (data) {
            _this.departmentList = data.value;
            _this.filteredDepartmentList = _this.departmentList;
            _this.departmentCtrl.valueChanges.subscribe(function (input) {
                _this.filteredDepartmentList = _this.utilService.filterListforAutocomplete(input, _this.departmentList, ['departmentCode', 'description']);
            });
            if (_this.departmentList) {
                _this.departmentCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([
                    Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_6__["inDropdownListValidator"])(_this.departmentList, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_13__["nameof"])('departmentCode')),
                ]));
            }
        });
        this.intercoValidation.companyId = this.selectedCompany.companyId;
        this.tradingService.validateIntercoFields(this.intercoValidation)
            .subscribe(function (data) {
            if (_this.isInterco) {
                _this.disableSaveButton = false;
                _this.isValueMissing = false;
                if (data && data.intercoFields && data.intercoFields.length > 0) {
                    _this.intercoMissingData = data.intercoFields;
                    _this.intercoMissingData.forEach(function (missingData) {
                        missingData.setValue = 'Set up value';
                    });
                    _this.isValueMissing = true;
                }
                if (_this.isValueMissing) {
                    _this.bannerState = _intero_state_banner_intero_state_banner_component__WEBPACK_IMPORTED_MODULE_14__["BannerStates"].Error;
                    _this.bannerTitle = 'Missing values';
                    _this.bannerDescription = 'The following values has not been set up for this company \"' +
                        _this.selectedCompany.companyId + '\". Unable to create Interco contract.';
                    _this.disableSaveButton = true;
                }
                else {
                    _this.bannerState = _intero_state_banner_intero_state_banner_component__WEBPACK_IMPORTED_MODULE_14__["BannerStates"].Success;
                    _this.bannerTitle = 'All values are set!';
                    _this.bannerDescription = 'You can save your Interco contract';
                    _this.disableSaveButton = false;
                }
            }
        });
    };
    IntercoTradeDialogComponent.prototype.bindTraders = function (event) {
        this.filteredTraderList = this.traderList;
    };
    IntercoTradeDialogComponent.prototype.initIntercoGridColumns = function () {
        this.interoGridCols = [
            {
                headerName: 'Type',
                colId: 'type',
                field: 'type',
            },
            {
                headerName: 'Name',
                colId: 'name',
                field: 'name',
            },
            {
                headerName: 'Value',
                colId: 'value',
                field: 'value',
            },
            {
                headerName: 'Action',
                colId: 'setValue',
                field: 'setValue',
                cellRendererFramework: _shared_components_ag_grid_hyperlink_ag_grid_hyperlink_component__WEBPACK_IMPORTED_MODULE_4__["AgGridHyperlinkComponent"],
                cellRendererParams: {
                    context: {
                        componentParent: this,
                    },
                },
            },
        ];
    };
    IntercoTradeDialogComponent.prototype.hyperlinkClicked = function (rowSelected, event) {
        this.snackbarservice.informationSnackBar('This feature is not available.');
        event.preventDefault();
    };
    IntercoTradeDialogComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-interco-trade-dialog',
            template: __webpack_require__(/*! ./interco-trade-dialog.component.html */ "./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/interco-trade-dialog.component.html"),
            styles: [__webpack_require__(/*! ./interco-trade-dialog.component.scss */ "./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/interco-trade-dialog.component.scss")],
        }),
        __param(1, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_2__["MAT_DIALOG_DATA"])),
        __metadata("design:paramtypes", [_angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialogRef"], Object, _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_10__["MasterdataService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_11__["TradingService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_13__["UtilService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_9__["FormConfigurationProviderService"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_12__["SnackbarService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"]])
    ], IntercoTradeDialogComponent);
    return IntercoTradeDialogComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/intero-state-banner/intero-state-banner.component.html":
/*!*********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/intero-state-banner/intero-state-banner.component.html ***!
  \*********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div>\r\n    <mat-card class=\"state-banner-card\">\r\n        <div fxLayout=\"column\">\r\n            <div fxFlex=\"20%\"\r\n                 fxLayout=\"row\">\r\n                <div [ngClass]=\"circleIconClass\">\r\n                    <mat-icon>{{icon}}</mat-icon>\r\n                </div>\r\n\r\n                <div fxFlex=\"80%\"\r\n                     fxLayout=\"column\">\r\n                    <div fxFlex=\"40%\"\r\n                         fxLayout=\"column\">\r\n                        <h3>{{title}}</h3>\r\n                    </div>\r\n                    <div fxFlex=\"40%\"\r\n                         fxLayout=\"column\">\r\n                        {{description}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </mat-card>\r\n</div>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/intero-state-banner/intero-state-banner.component.scss":
/*!*********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/intero-state-banner/intero-state-banner.component.scss ***!
  \*********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".error-circle-icon {\n  color: red !important;\n  position: relative;\n  top: 2px;\n  margin-right: 10px; }\n\n.done {\n  color: #53c234 !important;\n  position: relative;\n  top: 2px;\n  margin-right: 10px; }\n\n:host ::ng-deep .mat-icon {\n  width: 36px !important; }\n\n:host ::ng-deep.material-icons {\n  font-size: 39px !important; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/intero-state-banner/intero-state-banner.component.ts":
/*!*******************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/intero-state-banner/intero-state-banner.component.ts ***!
  \*******************************************************************************************************************************************/
/*! exports provided: BannerStates, InteroStateBannerComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BannerStates", function() { return BannerStates; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InteroStateBannerComponent", function() { return InteroStateBannerComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var BannerStates;
(function (BannerStates) {
    BannerStates[BannerStates["Success"] = 0] = "Success";
    BannerStates[BannerStates["Error"] = 1] = "Error";
    BannerStates[BannerStates["Warning"] = 2] = "Warning";
    BannerStates[BannerStates["Information"] = 3] = "Information";
})(BannerStates || (BannerStates = {}));
var InteroStateBannerComponent = /** @class */ (function () {
    function InteroStateBannerComponent() {
    }
    InteroStateBannerComponent.prototype.ngOnInit = function () {
        this.setBannerStyle();
    };
    InteroStateBannerComponent.prototype.setBannerStyle = function () {
        switch (this.state) {
            case BannerStates.Success:
                this.icon = 'check_circle';
                this.circleIconClass = 'done';
                break;
            case BannerStates.Warning:
                this.icon = 'warning_outline';
                this.circleIconClass = 'warning-circle-icon';
                break;
            case BannerStates.Error:
                this.icon = 'remove_circle';
                this.circleIconClass = 'error-circle-icon';
                break;
            case BannerStates.Information:
                this.icon = 'info';
                this.circleIconClass = 'info-circle-icon';
                break;
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Number)
    ], InteroStateBannerComponent.prototype, "state", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", String)
    ], InteroStateBannerComponent.prototype, "title", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", String)
    ], InteroStateBannerComponent.prototype, "description", void 0);
    InteroStateBannerComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-intero-state-banner',
            template: __webpack_require__(/*! ./intero-state-banner.component.html */ "./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/intero-state-banner/intero-state-banner.component.html"),
            styles: [__webpack_require__(/*! ./intero-state-banner.component.scss */ "./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/intero-state-banner/intero-state-banner.component.scss")]
        }),
        __metadata("design:paramtypes", [])
    ], InteroStateBannerComponent);
    return InteroStateBannerComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/detailed-view/detailed-view.component.html":
/*!*******************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/detailed-view/detailed-view.component.html ***!
  \*******************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card>\r\n    <div fxLayout=\"row\"\r\n         fxLayout.xs=\"column\"\r\n         fxLayoutAlign=\"space-between left\"\r\n         fxLayoutWrap\r\n         fxLayoutGap=\"5px\"\r\n         class=\"atlas-grid-card-header\">\r\n        <h3 class=\"atlas-grid-card-title\">\r\n            {{translationKeyPrefix + 'TITLE' | translate}}</h3>\r\n        <div fxLayout=\"row\">\r\n            <atlas-ag-grid-user-preferences *ngIf=\"invoiceMarkingGridOptions && invoiceMarkingGridOptions.columnDefs\"\r\n                                            [gridOptions]=\"invoiceMarkingGridOptions\"\r\n                                            [company]=\"company\"\r\n                                            [gridId]=\"componentId\"\r\n                                            [sharingEnabled]=\"hasGridSharing\"\r\n                                            #userPreferences>\r\n            </atlas-ag-grid-user-preferences>\r\n            <atlas-grid-enlargement [gridOptions]=\"invoiceMarkingGridOptions\"\r\n                                    [userPreferencesParameters]=\"gridPreferences\"\r\n                                    (rowClicked)=\"onDetailedViewRowClicked($event)\">\r\n            </atlas-grid-enlargement>\r\n        </div>\r\n    </div>\r\n    <div ag-grid=\"invoiceMarkingGridOptions\"\r\n         class=\"ag-theme-material pointer-cursor\"\r\n         style=\"width: 100%; height:100%\">\r\n        <ag-grid-angular style=\" height:100%;\"\r\n                         class=\"ag-theme-material\"\r\n                         [gridOptions]=\"invoiceMarkingGridOptions\"\r\n                         [rowData]=\"invoiceMarkingGridRows\"\r\n                         [columnDefs]=\"invoicemarkingcolumnDefs\"\r\n                         domLayout=autoHeight\r\n                         [pagination]=\"true\"\r\n                         (gridReady)=\"onGridReady($event)\"\r\n                         [paginationPageSize]=\"10\"\r\n                         [enableSorting]=\"true\"\r\n                         [enableFilter]=\"true\"\r\n                         [enableColResize]=\"false\"\r\n                         [frameworkComponents]=\"gridComponents\"\r\n                         (rowClicked)=\"onDetailedViewRowClicked($event)\"\r\n                         [rowHeight]=atlasAgGridParam.rowHeight\r\n                         [headerHeight]=\"atlasAgGridParam.headerHeight\"\r\n                         (columnVisible)=\"onColumnVisibilityChanged($event)\">\r\n        </ag-grid-angular>\r\n    </div>\r\n</mat-card>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/detailed-view/detailed-view.component.scss":
/*!*******************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/detailed-view/detailed-view.component.scss ***!
  \*******************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".mat-icon {\n  width: 32px;\n  height: 32px;\n  color: #605c5e; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/detailed-view/detailed-view.component.ts":
/*!*****************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/detailed-view/detailed-view.component.ts ***!
  \*****************************************************************************************************************************************/
/*! exports provided: DetailedViewComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DetailedViewComponent", function() { return DetailedViewComponent; });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _core_services_atlas_translation_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../../core/services/atlas-translation.service */ "./Client/app/core/services/atlas-translation.service.ts");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_components_ag_contextual_menu_ag_contextual_menu_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component */ "./Client/app/shared/components/ag-contextual-menu/ag-contextual-menu.component.ts");
/* harmony import */ var _shared_components_ag_grid_checkbox_ag_grid_checkbox_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component */ "./Client/app/shared/components/ag-grid-checkbox/ag-grid-checkbox.component.ts");
/* harmony import */ var _shared_components_ag_grid_user_preferences_ag_grid_user_preferences_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component */ "./Client/app/shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_components_cell_editor_date_picker_cell_editor_date_picker_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../../shared/components/cell-editor-date-picker/cell-editor-date-picker.component */ "./Client/app/shared/components/cell-editor-date-picker/cell-editor-date-picker.component.ts");
/* harmony import */ var _shared_components_cell_editor_numeric_cell_editor_numeric_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component */ "./Client/app/shared/components/cell-editor-numeric/cell-editor-numeric.component.ts");
/* harmony import */ var _shared_components_cell_editor_select_cell_editor_select_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../../shared/components/cell-editor-select/cell-editor-select.component */ "./Client/app/shared/components/cell-editor-select/cell-editor-select.component.ts");
/* harmony import */ var _shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../../shared/components/confirmation-dialog/confirmation-dialog.component */ "./Client/app/shared/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony import */ var _shared_entities_invoice_markings_entity__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../../../shared/entities/invoice-markings.entity */ "./Client/app/shared/entities/invoice-markings.entity.ts");
/* harmony import */ var _shared_entities_masterdata_entity__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../../../shared/entities/masterdata.entity */ "./Client/app/shared/entities/masterdata.entity.ts");
/* harmony import */ var _shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../../../shared/enums/invoice-type.enum */ "./Client/app/shared/enums/invoice-type.enum.ts");
/* harmony import */ var _shared_enums_posting_status_enum__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../../../../shared/enums/posting-status.enum */ "./Client/app/shared/enums/posting-status.enum.ts");
/* harmony import */ var _shared_enums_view_document_type_enum__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../../../../shared/enums/view-document-type.enum */ "./Client/app/shared/enums/view-document-type.enum.ts");
/* harmony import */ var _shared_enums_view_mode_behaviour_enum__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../../../../../shared/enums/view-mode-behaviour.enum */ "./Client/app/shared/enums/view-mode-behaviour.enum.ts");
/* harmony import */ var _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../../../../../shared/models/section-complete-display-view */ "./Client/app/shared/models/section-complete-display-view.ts");
/* harmony import */ var _shared_numberMask__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../../../../../shared/numberMask */ "./Client/app/shared/numberMask.ts");
/* harmony import */ var _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../../../../../shared/services/ag-grid.service */ "./Client/app/shared/services/ag-grid.service.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_grid_configuration_provider_service__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../../../../../shared/services/grid-configuration-provider.service */ "./Client/app/shared/services/grid-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../../../../../../shared/services/http-services/execution.service */ "./Client/app/shared/services/http-services/execution.service.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../../../../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../../../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../../../../../../shared/services/ui.service */ "./Client/app/shared/services/ui.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./../../../../../../shared/enums/permission-level.enum */ "./Client/app/shared/enums/permission-level.enum.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __values = (undefined && undefined.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};

































var DetailedViewComponent = /** @class */ (function (_super) {
    __extends(DetailedViewComponent, _super);
    function DetailedViewComponent(route, formBuilder, utilService, executionService, formConfigurationProvider, uiService, dialog, snackbarService, router, authorizationService, datePipe, gridService, securityService, gridConfigurationProvider, atlasTranslationService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.route = route;
        _this.formBuilder = formBuilder;
        _this.utilService = utilService;
        _this.executionService = executionService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.uiService = uiService;
        _this.dialog = dialog;
        _this.snackbarService = snackbarService;
        _this.router = router;
        _this.authorizationService = authorizationService;
        _this.datePipe = datePipe;
        _this.gridService = gridService;
        _this.securityService = securityService;
        _this.gridConfigurationProvider = gridConfigurationProvider;
        _this.atlasTranslationService = atlasTranslationService;
        _this.setCashMatchDate = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        _this.translationKeyPrefix = 'TRADING.TRADE_CAPTURE.INVOICE_MARKING_TAB.DETAILED_VIEW.';
        _this.deleteStringKey = _this.translationKeyPrefix + 'DELETE';
        _this.invoiceMarkingDeletionStringKey = _this.translationKeyPrefix + 'INVOICE_MARKING_DELETION';
        _this.irreversibleDeletionStringKey = _this.translationKeyPrefix + 'IRREVERSIBLE_DELETION';
        _this.deleteAnywayStringKey = _this.translationKeyPrefix + 'DELETE_ANYWAY';
        _this.cancelStringKey = _this.translationKeyPrefix + 'CANCEL';
        _this.rowDeletedStringKey = _this.translationKeyPrefix + 'ROW_DELETED';
        _this.toDeleteSelectionStringKey = _this.translationKeyPrefix + 'TO_DELETE_SELECTION';
        _this.warningNullQuantityStringKey = _this.translationKeyPrefix + 'WARNING_NULL_QUANTITY';
        _this.warningInvoicePercantageTooHighStringKey = _this.translationKeyPrefix + 'WARNING_INVOICE_PERCENTAGE_TOO_HIGH';
        _this.warningPaidPercentageTooHighStringKey = _this.translationKeyPrefix + 'WARNING_PAID_PERCENTAGE_TOO_HIGH';
        // ressource map => keys = translation keys | values = translations in the current application language
        _this.translationRessourceMap = new Map([
            [_this.deleteStringKey, ''],
            [_this.invoiceMarkingDeletionStringKey, ''],
            [_this.irreversibleDeletionStringKey, ''],
            [_this.deleteAnywayStringKey, ''],
            [_this.cancelStringKey, ''],
            [_this.rowDeletedStringKey, ''],
            [_this.toDeleteSelectionStringKey, ''],
            [_this.warningNullQuantityStringKey, ''],
            [_this.warningInvoicePercantageTooHighStringKey, ''],
            [_this.warningPaidPercentageTooHighStringKey, ''],
        ]);
        _this.invoiceMarkingGridOptions = {};
        _this.defaultDate = 'Mon Jan 01 0001';
        _this.quantityCellEdited = false;
        _this.invoiceAmountCellEdited = false;
        _this.deleted = 'Deleted';
        _this.isDeleted = false;
        _this.childFlag = 0;
        _this.decimalOptionValue = 2;
        _this.formatType = 'en-US';
        _this.totalValuesCalculated = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        _this.invoiceMarkingMenuActions = {
            deleteinvoiceMarking: 'delete',
        };
        _this.masterdata = new _shared_entities_masterdata_entity__WEBPACK_IMPORTED_MODULE_17__["MasterData"]();
        _this.hasGridSharing = false;
        _this.componentId = 'invoiceMarkingsInContract';
        _this.gridContext = {
            editMode: false,
        };
        _this.gridComponents = {
            atlasSelect: _shared_components_cell_editor_select_cell_editor_select_component__WEBPACK_IMPORTED_MODULE_14__["CellEditorSelectComponent"],
            atlasNumeric: _shared_components_cell_editor_numeric_cell_editor_numeric_component__WEBPACK_IMPORTED_MODULE_13__["CellEditorNumericComponent"],
            atrDate: _shared_components_cell_editor_date_picker_cell_editor_date_picker_component__WEBPACK_IMPORTED_MODULE_12__["CellEditorDatePickerComponent"],
            atlasCheckbox: _shared_components_ag_grid_checkbox_ag_grid_checkbox_component__WEBPACK_IMPORTED_MODULE_9__["AgGridCheckboxComponent"],
        };
        _this.atlasAgGridParam = _this.gridService.getAgGridParam();
        _this.isLoading = true;
        _this.userActiveDirectoryName = _this.authorizationService.getCurrentUser().samAccountName;
        return _this;
    }
    DetailedViewComponent.prototype.ngOnInit = function () {
        this.atlasTranslationService.getTranslatedRessourceMap(this.translationRessourceMap);
        this.invoiceMarkingGridContextualMenuActions = [
            {
                icon: 'delete',
                text: this.translationRessourceMap[this.deleteStringKey],
                action: this.invoiceMarkingMenuActions.deleteInvoiceMarking,
                disabled: this.isDeleteDisabled.bind(this),
            },
        ];
        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));
        this.company = this.route.snapshot.paramMap.get('company');
        this.masterdata = this.route.snapshot.data['masterdata'];
        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;
        this.bindConfiguration();
        this.getInvoiceDetailsBySection(this.childFlag);
        this.initializeGridColumns();
        this.init();
    };
    DetailedViewComponent.prototype.initForm = function (entity, isEdit) {
        this.tradeRecord = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_22__["SectionCompleteDisplayView"](entity);
        this.gridContext.editMode = false;
        this.calculateTotalValue();
    };
    DetailedViewComponent.prototype.onGridReady = function (params) {
        var _this = this;
        this.gridApi = this.invoiceMarkingGridOptions.api;
        this.gridColumnApi = this.invoiceMarkingGridOptions.columnApi;
        this.gridService.sizeColumns(this.invoiceMarkingGridOptions);
        this.invoiceMarkingGridOptions.columnDefs = this.invoicemarkingcolumnDefs;
        this.atlasTranslationService.translateGridOptionsColDefs(this.invoiceMarkingGridOptions)
            .subscribe(function () { return _this.gridApi.refreshHeader(); });
    };
    DetailedViewComponent.prototype.onGridSizeChanged = function (params) {
        this.gridColumnApi = params.columnApi;
        this.gridService.sizeColumns(params);
    };
    DetailedViewComponent.prototype.onTabActive = function () {
        this.gridService.sizeColumns(this.invoiceMarkingGridOptions);
    };
    DetailedViewComponent.prototype.toInvoiceMarking = function (rawData) {
        var invoiceMarking = {
            cashMatchDate: rawData.cashMatchDate,
            companyId: this.company,
            contractReference: rawData.contractReference,
            costType: rawData.costType,
            currencyCode: rawData.currencyCode,
            customerReference: rawData.customerReference,
            documentType: rawData.documentType,
            dueDate: rawData.dueDate,
            invoiceAmount: rawData.invoiceAmount,
            invoiceDate: rawData.invoiceDate,
            invoiceLineId: rawData.invoiceLineId,
            invoiceMarkingId: rawData.invoiceMarkingId,
            invoicePercent: rawData.invoicePercent,
            costId: null,
            contractValue: 0,
            invoiceReference: rawData.invoiceReference,
            paidAmount: null,
            paidPercentage: rawData.paidPercentage,
            paymentTermCode: rawData.paymentTermCode,
            postingStatusId: rawData.postingStatusId,
            price: rawData.price,
            quantity: rawData.invoicedQuantity,
            remainingAmount: null,
            sectionId: rawData.sectionId,
            sectionType: rawData.sectionType,
        };
        return invoiceMarking;
    };
    DetailedViewComponent.prototype.getGridData = function () {
        var _this = this;
        var invoices = new Array();
        this.gridApi.forEachNode(function (rowData) {
            if (rowData.data.sectionId) {
                rowData.data.sectionId = _this.sectionId;
                invoices.push(_this.toInvoiceMarking(rowData.data));
            }
        });
        return invoices;
    };
    DetailedViewComponent.prototype.handleAction = function (action, invoiceMarkings) {
        switch (action) {
            case this.invoiceMarkingMenuActions.deleteInvoiceMarking:
                this.onRemoveSelectedButtonClicked(invoiceMarkings);
                break;
            default:
                break;
        }
    };
    DetailedViewComponent.prototype.onRemoveSelectedButtonClicked = function (invoiceMarkings) {
        var _this = this;
        if (invoiceMarkings.invoiceMarkingId) {
            var confirmDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_15__["ConfirmationDialogComponent"], {
                data: {
                    title: this.translationRessourceMap[this.invoiceMarkingDeletionStringKey],
                    text: this.translationRessourceMap[this.irreversibleDeletionStringKey],
                    okButton: this.translationRessourceMap[this.deleteAnywayStringKey],
                    cancelButton: this.translationRessourceMap[this.cancelStringKey],
                },
            });
            confirmDialog.afterClosed().subscribe(function (answer) {
                if (answer) {
                    if (invoiceMarkings.invoiceMarkingId) {
                        _this.subscriptions.push(_this.executionService.deleteInvoiceMarking(invoiceMarkings.invoiceMarkingId).subscribe(function () {
                            _this.snackbarService.informationSnackBar(_this.translationRessourceMap[_this.rowDeletedStringKey]);
                            _this.gridApi.updateRowData({ remove: [invoiceMarkings] });
                        }));
                    }
                    else {
                        _this.gridApi.updateRowData({ remove: [invoiceMarkings] });
                    }
                    _this.calculateTotalValue();
                }
            });
        }
        else {
            this.snackbarService.informationSnackBar(this.translationRessourceMap[this.toDeleteSelectionStringKey]);
        }
    };
    DetailedViewComponent.prototype.createNewRowData = function () {
        var newData = new _shared_entities_invoice_markings_entity__WEBPACK_IMPORTED_MODULE_16__["InvoiceMarkings"]();
        newData.contractReference = this.tradeRecord.reference;
        return newData;
    };
    DetailedViewComponent.prototype.populateEntity = function (entity) {
        var _this = this;
        var physicalFixedPricedContract = entity;
        this.securityService.isSecurityReady().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["concatMap"])(function () {
            return _this.gridConfigurationProvider.getConfiguration(_this.company, _this.componentId);
        })).subscribe(function (configuration) {
            _this.hasGridSharing = configuration.hasMultipleViewsPerUser;
            physicalFixedPricedContract.invoices = _this.getGridData();
            _this.gridPreferences = {
                company: _this.company,
                gridId: _this.componentId,
                gridOptions: _this.invoiceMarkingGridOptions,
                sharingEnabled: _this.hasGridSharing,
            };
        });
        return physicalFixedPricedContract;
    };
    DetailedViewComponent.prototype.isDateNull = function (date) {
        return !date || date.toDateString() === this.defaultDate;
    };
    DetailedViewComponent.prototype.getInvoiceDetailsBySection = function (childFlag) {
        var _this = this;
        this.childFlag = childFlag;
        this.subscriptions.push(this.executionService.getInvoiceDetailsBySection(this.sectionId, this.childFlag, this.dataVersionId)
            .subscribe(function (data) {
            var e_1, _a;
            _this.invoiceMarkingGridRows = _this.getDocumentTypeForGrid(data.value);
            try {
                for (var _b = __values(_this.invoiceMarkingGridRows), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var rows = _c.value;
                    rows.cashMatchDate = _this.isDateNull(rows.cashMatchDate) ? null : rows.cashMatchDate;
                    if (rows.cashMatchDate) {
                        _this.setCashMatchDate.emit(rows.cashMatchDate.toDateString());
                    }
                    rows.dueDate = _this.isDateNull(rows.dueDate) ? null : rows.dueDate;
                    rows.invoiceDate = _this.isDateNull(rows.invoiceDate) ? null : rows.invoiceDate;
                    rows.invoiceReference = rows.isDeleted ? _this.deleted : rows.invoiceReference;
                    if (rows.isDeleted) {
                        _this.isDeleted = true;
                    }
                    _this.invoiceStatusId = rows.invoicingStatusId;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            _this.calculateTotalValue();
            _this.isLoading = false;
        }));
    };
    DetailedViewComponent.prototype.postingStatusFormatter = function (params) {
        if (params.value) {
            return _shared_enums_posting_status_enum__WEBPACK_IMPORTED_MODULE_19__["PostingStatus"][params.value].toString();
        }
        return '';
    };
    DetailedViewComponent.prototype.onQuantityValueChanged = function (params) {
        if (params.data.quantity) {
            this.quantityCellEdited = true;
            this.calculateTotalValue();
        }
    };
    DetailedViewComponent.prototype.onInvoiceValueChanged = function (params) {
        if (params.data.invoiceAmount) {
            this.invoiceAmountCellEdited = true;
            this.calculateTotalValue();
        }
    };
    DetailedViewComponent.prototype.init = function () {
        this.invoiceMarkingGridContextualMenuActions = [
            {
                icon: 'delete',
                text: this.translationRessourceMap[this.deleteStringKey],
                action: this.invoiceMarkingMenuActions.deleteInvoiceMarking,
                disabled: this.isDeleteDisabled,
            },
        ];
    };
    DetailedViewComponent.prototype.isDeleteDisabled = function (params) {
        if (this.authorizationService.isUserAllowedForCompany(this.company)) {
            var userPermissionLevel = this.authorizationService.getPermissionLevel(this.company, 'DeleteInvoiceMarking', 'InvoiceCreation', 'Invoices');
            if (userPermissionLevel >= _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_32__["PermissionLevels"].Read) {
                return false;
            }
        }
        return true;
    };
    DetailedViewComponent.prototype.initializeGridColumns = function () {
        var _this = this;
        this.invoiceMarkingGridOptions = {
            context: this.gridContext,
            rowSelection: 'single',
        };
        this.invoicemarkingcolumnDefs = [
            {
                headerName: 'Section Id',
                colId: this.translationKeyPrefix + 'SECTION_ID',
                field: 'sectionId',
                hide: true,
            },
            {
                headerName: 'Contract Reference',
                colId: this.translationKeyPrefix + 'CONTRACT_REFERENCE',
                field: 'contractReference',
                minWidth: 150,
                maxWidth: 150,
            },
            {
                headerName: 'Invoice Reference',
                colId: this.translationKeyPrefix + 'INVOICE_REFERENCE',
                field: 'invoiceReference',
            },
            {
                headerName: 'Invoice Date',
                colId: this.translationKeyPrefix + 'INVOICE_DATE',
                field: 'invoiceDate',
                valueFormatter: this.uiService.dateFormatter,
                cellEditor: 'atrDate',
            },
            {
                headerName: 'Posting Status',
                colId: this.translationKeyPrefix + 'POSTING_STATUS',
                field: 'postingStatusId',
                valueFormatter: this.postingStatusFormatter.bind(this),
            },
            {
                headerName: 'Invoice Quantity',
                colId: this.translationKeyPrefix + 'INVOICE_QUANTITY',
                field: 'invoicedQuantity',
                type: 'numericColumn',
                cellEditor: 'atlasNumeric',
                valueFormatter: function (params) { return (_this.decimalFormatter((!params.node.group ? params.data.invoicedQuantity : params.value), _this.decimalOptionValue, _this.formatType)); },
                cellEditorParams: {
                    displayMask: Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_23__["CustomNumberMask"])(12, 10, false),
                    isRightAligned: false,
                },
                tooltip: function () {
                    return _this.translationRessourceMap[_this.warningNullQuantityStringKey];
                },
                onCellValueChanged: this.onQuantityValueChanged.bind(this),
            },
            {
                headerName: 'Currency',
                colId: this.translationKeyPrefix + 'CURRENCY',
                field: 'currencyCode',
                cellEditor: 'agRichSelectCellEditor',
                cellEditorParams: {
                    values: this.masterdata.currencies.map(function (currencies) { return currencies.currencyCode; }),
                },
            },
            {
                headerName: 'Invoice Value',
                colId: this.translationKeyPrefix + 'INVOICE_VALUE',
                field: 'invoiceAmount',
                type: 'numericColumn',
                cellEditor: 'atlasNumeric',
                valueFormatter: function (params) { return (_this.decimalFormatter((!params.node.group ? params.data.invoiceAmount : params.value), _this.decimalOptionValue, _this.formatType)); },
                cellEditorParams: {
                    displayMask: Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_23__["CustomNumberMask"])(12, 10, false),
                    isRightAligned: false,
                },
                onCellValueChanged: this.onInvoiceValueChanged.bind(this),
            },
            {
                headerName: 'Percentage Invoice',
                colId: this.translationKeyPrefix + 'PERCENTAGE_INVOICE',
                field: 'invoicePercent',
                type: 'numericColumn',
                cellEditor: 'atlasNumeric',
                cellEditorParams: {
                    displayMask: Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_23__["CustomNumberMask"])(3, 3, false),
                    isRightAligned: false,
                },
                tooltip: function () {
                    return _this.translationRessourceMap[_this.warningInvoicePercantageTooHighStringKey];
                },
            },
            {
                headerName: 'Document Type',
                colId: this.translationKeyPrefix + 'DOC_TYPE',
                field: 'documentType',
            },
            {
                headerName: 'Due Date',
                colId: this.translationKeyPrefix + 'DUE_DATE',
                field: 'dueDate',
                valueFormatter: this.uiService.dateFormatter,
                cellEditor: 'atrDate',
            },
            {
                headerName: 'Payment Terms',
                colId: this.translationKeyPrefix + 'PAYMENT_TERMS',
                field: 'paymentTermCode',
                cellEditor: 'agRichSelectCellEditor',
                cellEditorParams: {
                    values: this.masterdata.paymentTerms.map(function (paymentTerms) { return paymentTerms.paymentTermCode; }),
                },
            },
            {
                headerName: 'Customer Reference',
                colId: this.translationKeyPrefix + 'CUSTOMER_REF',
                field: 'customerReference',
            },
            {
                headerName: 'Main Invoice',
                colId: this.translationKeyPrefix + 'MAIN_INVOICE',
                field: 'mainInvoice',
                cellRenderer: 'atlasCheckbox',
                cellRendererParams: {
                    disabled: true,
                    params: this.gridContext,
                },
            },
            {
                headerName: 'Paid Percentage',
                colId: this.translationKeyPrefix + 'PAID_PERCENTAGE',
                field: 'paidPercentage',
                type: 'numericColumn',
                cellEditor: 'atlasNumeric',
                cellEditorParams: {
                    displayMask: Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_23__["CustomNumberMask"])(3, 2, false),
                    isRightAligned: false,
                },
                tooltip: function () {
                    return _this.translationRessourceMap[_this.warningPaidPercentageTooHighStringKey];
                },
            },
            {
                headerName: 'Cash Match Date',
                colId: this.translationKeyPrefix + 'CASH_MATCH_DATE',
                field: 'cashMatchDate',
                valueFormatter: this.uiService.dateFormatter,
                cellEditor: 'atrDate',
            },
            {
                headerName: '',
                cellRendererFramework: _shared_components_ag_contextual_menu_ag_contextual_menu_component__WEBPACK_IMPORTED_MODULE_8__["AgContextualMenuComponent"],
                cellRendererParams: {
                    context: {
                        componentParent: this,
                        actionContext: this.gridContext,
                    },
                    menuActions: this.invoiceMarkingGridContextualMenuActions,
                },
                cellClass: 'ag-contextual-menu',
                maxWidth: 80,
            },
        ];
    };
    DetailedViewComponent.prototype.decimalFormatter = function (input, decimalOption, format) {
        var formattedInput = new Intl.NumberFormat(format, { minimumFractionDigits: decimalOption }).format(input);
        return formattedInput.toLocaleString();
    };
    DetailedViewComponent.prototype.getDocumentTypeForGrid = function (contracts) {
        var _this = this;
        contracts.forEach(function (contract) {
            var selectedDocumentType = _this.masterdata.invoiceTypes.find(function (invoice) {
                return invoice.name === contract.documentType;
            });
            if (selectedDocumentType) {
                if (selectedDocumentType.invoiceTypeId === _shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_18__["InvoiceTypes"].GoodsCostPurchase ||
                    selectedDocumentType.invoiceTypeId === _shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_18__["InvoiceTypes"].GoodsCostSales) {
                    contract.documentType = _shared_enums_view_document_type_enum__WEBPACK_IMPORTED_MODULE_20__["ViewDocumentType"].Commercial;
                }
            }
        });
        return contracts;
    };
    DetailedViewComponent.prototype.calculateTotalValue = function () {
        var _this = this;
        var totalInvoicedQuantity = 0;
        this.totalQuantityPercent = 0;
        this.totalInvoiceValue = 0;
        this.totalInvoiceValuePercent = 0;
        if (this.invoiceMarkingGridRows) {
            if (this.invoiceMarkingGridRows.length > 0) {
                if (this.documentTypeFilter && this.documentTypeFilter !== _shared_enums_view_document_type_enum__WEBPACK_IMPORTED_MODULE_20__["ViewDocumentType"]['All']) {
                    this.invoiceMarkingGridRows = this.invoiceMarkingGridRows.filter(function (val) { return val.documentType === _this.documentTypeFilter; });
                }
                var filterinvoiceMarkingGridRows = [];
                if (this.tradeRecord) {
                    filterinvoiceMarkingGridRows =
                        this.invoiceMarkingGridRows.filter(function (val) { return val.contractReference === _this.tradeRecord.reference; });
                    filterinvoiceMarkingGridRows.forEach(function (row) {
                        if (row.invoiceReference !== _this.deleted) {
                            totalInvoicedQuantity += row.invoicedQuantity;
                            _this.totalInvoiceValue += row.invoiceAmount;
                        }
                    });
                    this.totalQuantityPercent = (totalInvoicedQuantity / this.tradeRecord.quantity) * 100;
                    this.totalInvoiceValuePercent = (this.totalInvoiceValue /
                        (this.tradeRecord.price * this.tradeRecord.quantity *
                            (filterinvoiceMarkingGridRows.length > 0 ?
                                filterinvoiceMarkingGridRows[0].priceConversionFactor
                                    * filterinvoiceMarkingGridRows[0].weightConversionFactor
                                : 0))) * 100;
                }
                /* below code has to be removed once the SP changes are done to
                 update invoice marking table invoice line amount while reversal - start*/
                if (totalInvoicedQuantity === 0) {
                    this.totalInvoiceValue = 0;
                    this.totalInvoiceValuePercent = 0;
                }
            }
        }
        this.totalValuesCalculated.emit({
            totalQuantity: totalInvoicedQuantity,
            totalQuantityPercent: this.totalQuantityPercent,
            totalInvoiceValue: this.totalInvoiceValue,
            totalInvoiceValuePercent: this.totalInvoiceValuePercent,
            isDeleted: this.isDeleted,
            invoiceStatusId: this.invoiceStatusId,
        });
    };
    DetailedViewComponent.prototype.ngOnChanges = function (changes) {
        if (changes.documentType) {
            if (changes.documentType.currentValue && changes.documentType.currentValue.length > 1) {
                this.viewModeFilter = changes.documentType.currentValue[0];
                this.documentTypeFilter = changes.documentType.currentValue[1];
            }
            if (this.sectionId) {
                this.getInvoiceDetailsBySection(_shared_enums_view_mode_behaviour_enum__WEBPACK_IMPORTED_MODULE_21__["ViewModeBehaviour"][this.viewModeFilter]);
            }
        }
        if (this.sectionId) {
            this.getInvoiceDetailsBySection(this.childFlag);
        }
    };
    DetailedViewComponent.prototype.onDetailedViewRowClicked = function (event) {
        this.router.navigate([
            '/' + this.company +
                '/financial/accounting/entries/'
                + encodeURIComponent(event.data.invoiceReference)
        ]);
    };
    DetailedViewComponent.prototype.onRefreshButtonClicked = function () {
        var _this = this;
        if (this.gridColumnApi) {
            this.gridColumnApi.resetColumnState();
            this.invoicemarkingcolumnDefs.forEach(function (colf) {
                colf.hide = !_this.gridColumnApi.getColumn(colf.colId).isVisible();
            });
            this.gridService.sizeColumns(this.invoiceMarkingGridOptions);
        }
    };
    DetailedViewComponent.prototype.showOrHideColum = function (event, col) {
        var cols = this.invoicemarkingcolumnDefs.filter(function (colf) { return colf.colId === col.colId; });
        if (cols.length === 1) {
            cols[0].hide = !(col.hide || false);
            this.gridColumnApi.setColumnVisible(col.colId, !cols[0].hide);
        }
        event.stopPropagation();
        return false;
    };
    DetailedViewComponent.prototype.onExportButtonClickedAsExcel = function () {
        var screenName;
        screenName = 'Invoice' + '' + 'Marking';
        var now = new Date();
        var todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();
        var params = {
            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.xlsx',
        };
        this.gridApi.exportDataAsExcel(params);
    };
    DetailedViewComponent.prototype.onExportButtonClickedAsCSV = function () {
        var screenName = 'Invoice' + '' + 'Marking';
        var now = new Date();
        var todayDate = this.datePipe.transform(now, 'yyyyMMdd_hhmm').toString().toUpperCase();
        var params = {
            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.csv',
        };
        this.gridApi.exportDataAsCsv(params);
    };
    DetailedViewComponent.prototype.onColumnVisibilityChanged = function (col) {
        this.userPreferencesComponent.onChangeColumnVisibility(col);
        this.autoSizeContractsGrid();
    };
    DetailedViewComponent.prototype.autoSizeContractsGrid = function () {
        if (this.invoiceMarkingGridOptions) {
            this.gridService.sizeColumns(this.invoiceMarkingGridOptions);
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('userPreferences'),
        __metadata("design:type", _shared_components_ag_grid_user_preferences_ag_grid_user_preferences_component__WEBPACK_IMPORTED_MODULE_10__["AgGridUserPreferencesComponent"])
    ], DetailedViewComponent.prototype, "userPreferencesComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
        __metadata("design:type", Object)
    ], DetailedViewComponent.prototype, "setCashMatchDate", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        __metadata("design:type", String)
    ], DetailedViewComponent.prototype, "documentType", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        __metadata("design:type", Boolean)
    ], DetailedViewComponent.prototype, "isEditToggle", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
        __metadata("design:type", Object)
    ], DetailedViewComponent.prototype, "totalValuesCalculated", void 0);
    DetailedViewComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'atlas-detailed-view',
            template: __webpack_require__(/*! ./detailed-view.component.html */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/detailed-view/detailed-view.component.html"),
            styles: [__webpack_require__(/*! ./detailed-view.component.scss */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/detailed-view/detailed-view.component.scss")],
            providers: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DatePipe"]],
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_4__["ActivatedRoute"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_31__["UtilService"],
            _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_27__["ExecutionService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_25__["FormConfigurationProviderService"],
            _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_30__["UiService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatDialog"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_29__["SnackbarService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_7__["AuthorizationService"],
            _angular_common__WEBPACK_IMPORTED_MODULE_0__["DatePipe"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_24__["AgGridService"],
            _shared_services_security_service__WEBPACK_IMPORTED_MODULE_28__["SecurityService"],
            _shared_services_grid_configuration_provider_service__WEBPACK_IMPORTED_MODULE_26__["GridConfigurationProviderService"],
            _core_services_atlas_translation_service__WEBPACK_IMPORTED_MODULE_6__["AtlasTranslationService"]])
    ], DetailedViewComponent);
    return DetailedViewComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_11__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-status/invoice-status.component.html":
/*!*********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-status/invoice-status.component.html ***!
  \*********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card style=\"width: 100%\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h3>{{translationKeyPrefix + 'TITLE' | translate}}</h3>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"none center\">\r\n            <div>\r\n                <mat-form-field fxFlex=\"100%\">\r\n                    <mat-select placeholder=\"{{translationKeyPrefix + 'PLACEHOLDER' | translate}}\"\r\n                                [formControl]=\"invoiceStatusCtrl\"\r\n                                [disabled]=\"!(isEdit && this.editPrivileges.statusEditable)\">\r\n                        <mat-option *ngFor=\"let status of invoiceStatusOptions\"\r\n                                    [value]=\"status.code\">{{status.description}}</mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-status/invoice-status.component.scss":
/*!*********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-status/invoice-status.component.scss ***!
  \*********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-status/invoice-status.component.ts":
/*!*******************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-status/invoice-status.component.ts ***!
  \*******************************************************************************************************************************************/
/*! exports provided: InvoiceStatusComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InvoiceStatusComponent", function() { return InvoiceStatusComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../../shared/entities/masterdata-props.entity */ "./Client/app/shared/entities/masterdata-props.entity.ts");
/* harmony import */ var _shared_enums_invoice_status_enum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../../shared/enums/invoice-status.enum */ "./Client/app/shared/enums/invoice-status.enum.ts");
/* harmony import */ var _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../../shared/enums/permission-level.enum */ "./Client/app/shared/enums/permission-level.enum.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











var InvoiceStatusComponent = /** @class */ (function (_super) {
    __extends(InvoiceStatusComponent, _super);
    function InvoiceStatusComponent(formBuilder, masterdataService, route, authorizationService, formConfigurationProvider) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.masterdataService = masterdataService;
        _this.route = route;
        _this.authorizationService = authorizationService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.translationKeyPrefix = 'TRADING.TRADE_CAPTURE.INVOICE_MARKING_TAB.INVOICING_STATUS.';
        _this.invoiceStatusCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('invoiceStatus');
        _this.masterdataList = [
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_6__["MasterDataProps"].InvoiceStatus,
        ];
        _this.isEdit = false;
        _this.editEstimatedColumnsPrivilege = {
            profileId: null,
            privilegeName: 'Invoices',
            permission: _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_8__["PermissionLevels"].ReadWrite,
            privilegeParentLevelOne: 'InvoiceCreation',
            privilegeParentLevelTwo: 'EditInvoicingMarkingStatus',
        };
        _this.superTradeEditionPrivilege = {
            profileId: null,
            privilegeName: 'SuperTradeEdition',
            permission: _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_8__["PermissionLevels"].Read,
            privilegeParentLevelOne: 'Physicals',
            privilegeParentLevelTwo: 'Trades',
        };
        _this.editPrivileges = {
            statusEditable: false,
            superTradeEdition: false,
        };
        return _this;
    }
    InvoiceStatusComponent.prototype.ngOnInit = function () {
        this.masterdata = this.route.snapshot.data.masterdata;
        this.invoiceStatusOptions = this.masterdata.invoiceStatus;
        this.company = this.route.snapshot.paramMap.get('company');
        this.editPrivileges.statusEditable = this.checkIfUserHasRequiredPrivileges(this.editEstimatedColumnsPrivilege);
        this.editPrivileges.superTradeEdition = this.checkIfUserHasRequiredPrivileges(this.superTradeEditionPrivilege);
    };
    InvoiceStatusComponent.prototype.initForm = function (entity, isEdit) {
        var _this = this;
        this.isEdit = isEdit;
        this.invoiceStatusCtrl.patchValue(entity.invoicingStatusId.toString());
        this.defaultInvoiceStatus = this.invoiceStatusCtrl.value;
        // If value is not available, add it
        if (!this.invoiceStatusOptions.find(function (invoiceStatus) { return invoiceStatus.code === _this.invoiceStatusCtrl.value; })) {
            var currentInvoiceStatus = this.masterdata.invoiceStatus
                .find(function (invoiceStatus) { return invoiceStatus.code === _this.invoiceStatusCtrl.value; });
            if (currentInvoiceStatus) {
                this.invoiceStatusOptions.push(currentInvoiceStatus);
            }
        }
        return entity;
    };
    InvoiceStatusComponent.prototype.populateEntity = function (entity) {
        entity.invoiceStatus = this.invoiceStatusCtrl.value;
        return entity;
    };
    InvoiceStatusComponent.prototype.filterOptionList = function (model) {
        var _this = this;
        // If user has super trade edition privilege, he can put any invoice marking status
        if (this.editPrivileges.superTradeEdition) {
            return;
        }
        // Not invoiced
        if (!model.totalInvoiceValuePercent || model.totalInvoiceValuePercent === 0) {
            this.invoiceStatusOptions = this.masterdata.invoiceStatus.
                filter(function (invoiceStatus) { return invoiceStatus.code === _shared_enums_invoice_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoiceStatus"].NotInvoiced.toString()
                || invoiceStatus.code === _this.invoiceStatusCtrl.value; });
        }
        else if (model.totalInvoiceValuePercent < 100) {
            this.invoiceStatusOptions = this.masterdata.invoiceStatus.
                filter(function (invoiceStatus) { return invoiceStatus.code !== _shared_enums_invoice_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoiceStatus"].NotInvoiced.toString()
                || invoiceStatus.code === _this.invoiceStatusCtrl.value; });
        }
        else {
            // Fully invoiced
            this.invoiceStatusOptions = this.masterdata.invoiceStatus.
                filter(function (invoiceStatus) { return invoiceStatus.code === _shared_enums_invoice_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoiceStatus"].FullyInvoiced.toString()
                || invoiceStatus.code === _this.invoiceStatusCtrl.value; });
        }
    };
    InvoiceStatusComponent.prototype.setInvoiceStatusOnChange = function (totalValues) {
        if (totalValues.isDeleted) {
            this.setReversalInvoiceStatus(totalValues.totalQuantity, totalValues.isDeleted);
        }
        else {
            if (!this.invoiceStatusCtrl.value) {
                if (!totalValues.totalInvoiceValuePercent || totalValues.totalInvoiceValuePercent === 0) {
                    this.invoiceStatusCtrl.patchValue(_shared_enums_invoice_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoiceStatus"].NotInvoiced.toString());
                }
                else if (totalValues.totalInvoiceValuePercent < 100) {
                    // Has been invoiced, but not fully
                    this.invoiceStatusCtrl.patchValue(_shared_enums_invoice_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoiceStatus"].NotFullyInvoiced.toString());
                }
                else {
                    // Fully invoiced
                    this.invoiceStatusCtrl.patchValue(_shared_enums_invoice_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoiceStatus"].FullyInvoiced.toString());
                }
            }
            this.defaultInvoiceStatus = this.invoiceStatusCtrl.value;
            this.invoicedQuantityPercent = totalValues.totalQuantityPercent;
        }
        this.filterOptionList(totalValues);
    };
    InvoiceStatusComponent.prototype.setInvoiceStatusOnPageLoad = function (totalValues) {
        this.invoicedQuantityPercent = totalValues.totalQuantityPercent;
        this.filterOptionList(totalValues);
    };
    InvoiceStatusComponent.prototype.setReversalInvoiceStatus = function (totalQuantity, isDeleted) {
        if (isDeleted && !this.invoiceStatusCtrl.value) { // Value should come from backend, not calculated
            var finalInvoiceStatus = this.invoiceStatusCtrl.value;
            if (finalInvoiceStatus === _shared_enums_invoice_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoiceStatus"].NotFullyInvoiced.toString() ||
                finalInvoiceStatus === _shared_enums_invoice_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoiceStatus"].FullyInvoiced.toString()) {
                if (totalQuantity === 0) {
                    this.invoiceStatusCtrl.patchValue(_shared_enums_invoice_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoiceStatus"].NotInvoiced.toString());
                }
                else {
                    this.invoiceStatusCtrl.patchValue(_shared_enums_invoice_status_enum__WEBPACK_IMPORTED_MODULE_7__["InvoiceStatus"].NotFullyInvoiced.toString());
                }
            }
        }
    };
    InvoiceStatusComponent.prototype.checkIfUserHasRequiredPrivileges = function (userCompanyPrivilege) {
        var userPermissionLevel = this.authorizationService.getPermissionLevel(this.company, userCompanyPrivilege.privilegeName, userCompanyPrivilege.privilegeParentLevelOne, userCompanyPrivilege.privilegeParentLevelTwo);
        if (userPermissionLevel >= userCompanyPrivilege.permission) {
            return true;
        }
        return false;
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Boolean)
    ], InvoiceStatusComponent.prototype, "isEditToggle", void 0);
    InvoiceStatusComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-invoice-status',
            template: __webpack_require__(/*! ./invoice-status.component.html */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-status/invoice-status.component.html"),
            styles: [__webpack_require__(/*! ./invoice-status.component.scss */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-status/invoice-status.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_10__["MasterdataService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__["AuthorizationService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_9__["FormConfigurationProviderService"]])
    ], InvoiceStatusComponent);
    return InvoiceStatusComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-totals/invoice-totals.component.html":
/*!*********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-totals/invoice-totals.component.html ***!
  \*********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card style=\"width: 100%\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h3>{{translationKeyPrefix + 'TITLE' | translate}}</h3>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"5%\">\r\n            <div fxLayout=\"column\"\r\n                 fxLayoutAlign=\"space-between start\">\r\n                <span class=\"subtotal-title\">{{translationKeyPrefix + 'QTY' | translate}}</span>\r\n                <span>{{totalQuantity |number:'1.2-3'}}</span>\r\n            </div>\r\n            <div fxLayout=\"column\"\r\n                 fxLayoutAlign=\"space-between start\">\r\n                <span class=\"subtotal-title\">{{translationKeyPrefix + 'QTY%' | translate}}</span>\r\n                <span>{{totalQuantityPercent|number:'1.2-2'}}</span>\r\n            </div>\r\n            <div fxLayout=\"column\"\r\n                 fxLayoutAlign=\"space-between start\">\r\n                <span class=\"subtotal-title\">{{translationKeyPrefix + 'INVOICE_VALUE' | translate}}</span>\r\n                <span>{{totalInvoiceValue|number:'1.2-2'}}</span>\r\n            </div>\r\n            <div fxLayout=\"column\"\r\n                 fxLayoutAlign=\"space-between start\">\r\n                <span class=\"subtotal-title\">{{translationKeyPrefix + 'INVOICE_VALUE' | translate}}%</span>\r\n                <span>{{totalInvoiceValuePercent|number:'1.2-2'}}</span>\r\n            </div>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-totals/invoice-totals.component.scss":
/*!*********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-totals/invoice-totals.component.scss ***!
  \*********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".mat-card {\n  width: 100%; }\n\n.subtotal-title {\n  margin-bottom: 5px; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-totals/invoice-totals.component.ts":
/*!*******************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-totals/invoice-totals.component.ts ***!
  \*******************************************************************************************************************************************/
/*! exports provided: InvoiceTotalsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InvoiceTotalsComponent", function() { return InvoiceTotalsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var InvoiceTotalsComponent = /** @class */ (function (_super) {
    __extends(InvoiceTotalsComponent, _super);
    function InvoiceTotalsComponent(formBuilder, formConfigurationProvider) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.translationKeyPrefix = 'TRADING.TRADE_CAPTURE.INVOICE_MARKING_TAB.TOTALS.';
        _this.totalQuantity = 0;
        _this.totalQuantityPercent = 0;
        _this.totalInvoiceValue = 0;
        _this.totalInvoiceValuePercent = 0;
        return _this;
    }
    InvoiceTotalsComponent.prototype.ngOnInit = function () {
        this.bindConfiguration();
    };
    InvoiceTotalsComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({});
        return _super.prototype.getFormGroup.call(this);
    };
    InvoiceTotalsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-invoice-totals',
            template: __webpack_require__(/*! ./invoice-totals.component.html */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-totals/invoice-totals.component.html"),
            styles: [__webpack_require__(/*! ./invoice-totals.component.scss */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-totals/invoice-totals.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_3__["FormConfigurationProviderService"]])
    ], InvoiceTotalsComponent);
    return InvoiceTotalsComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_2__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-view-mode/invoice-view-mode.component.html":
/*!***************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-view-mode/invoice-view-mode.component.html ***!
  \***************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row wrap\">\r\n            <div fxFlex=\"50\">\r\n                <mat-card-header>\r\n                    <mat-card-title>\r\n                        <h3>{{'TRADING.TRADE_CAPTURE.INVOICE_MARKING_TAB.VIEW_MODE.VIEW_MODE_TITLE' | translate}}</h3>\r\n                    </mat-card-title>\r\n                </mat-card-header>\r\n                <mat-card-content>\r\n                    <mat-form-field>\r\n                        <mat-select [formControl]=\"showDetailsCtrl\"\r\n                                    (selectionChange)=\"onViewModeChange($event)\">\r\n                            <mat-option *ngFor=\"let detail of viewModeTrades\"\r\n                                        [value]=\"detail\">\r\n                                {{detail}}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n                </mat-card-content>\r\n            </div>\r\n            <div fxFlex=\"50\">\r\n                <mat-card-header>\r\n                    <mat-card-title>\r\n                        <h3>{{translationKeyPrefix + 'DOC_TYPE_TITLE' | translate}}</h3>\r\n                    </mat-card-title>\r\n                </mat-card-header>\r\n                <mat-card-content>\r\n                    <mat-form-field>\r\n                        <mat-select [formControl]=\"viewDocumentTypeCtrl\"\r\n                                    (selectionChange)=\"onDocumentTypeChange($event)\">\r\n                            <mat-option *ngFor=\"let document of viewDocumentTypes\"\r\n                                        [value]=\"document\">\r\n                                {{document}}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n                </mat-card-content>\r\n            </div>\r\n        </div>\r\n    </mat-card-content>\r\n    <mat-slide-toggle (change)=\"onChange($event)\"\r\n                      [disabled]=\"!editPrivileges.buttonEditable || !isEdit\">\r\n        {{translationKeyPrefix + 'EDIT_MODE' | translate}} {{toggleText | translate}}\r\n    </mat-slide-toggle>\r\n</mat-card>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-view-mode/invoice-view-mode.component.scss":
/*!***************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-view-mode/invoice-view-mode.component.scss ***!
  \***************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".mat-card {\n  width: 100%; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-view-mode/invoice-view-mode.component.ts":
/*!*************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-view-mode/invoice-view-mode.component.ts ***!
  \*************************************************************************************************************************************************/
/*! exports provided: InvoiceViewModeComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InvoiceViewModeComponent", function() { return InvoiceViewModeComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../../shared/enums/permission-level.enum */ "./Client/app/shared/enums/permission-level.enum.ts");
/* harmony import */ var _shared_enums_view_document_type_enum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../../shared/enums/view-document-type.enum */ "./Client/app/shared/enums/view-document-type.enum.ts");
/* harmony import */ var _shared_enums_view_mode_enum__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../../shared/enums/view-mode.enum */ "./Client/app/shared/enums/view-mode.enum.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











var InvoiceViewModeComponent = /** @class */ (function (_super) {
    __extends(InvoiceViewModeComponent, _super);
    function InvoiceViewModeComponent(route, formBuilder, utilService, authorizationService, formConfigurationProvider) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.route = route;
        _this.formBuilder = formBuilder;
        _this.utilService = utilService;
        _this.authorizationService = authorizationService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.translationKeyPrefix = 'TRADING.TRADE_CAPTURE.INVOICE_MARKING_TAB.VIEW_MODE.';
        _this.documentTypeSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.editToggleChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.showDetailsCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('showDetailsCtrl');
        _this.viewDocumentTypeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('viewDocumentTypeCtrl');
        _this.toggleText = _this.translationKeyPrefix + 'INACTIVE';
        _this.isEdit = false;
        _this.editEstimatedColumnsPrivilege = {
            profileId: null,
            privilegeName: 'Trades',
            permission: _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_6__["PermissionLevels"].ReadWrite,
            privilegeParentLevelOne: 'Physical',
            privilegeParentLevelTwo: null,
        };
        _this.editPrivileges = {
            buttonEditable: true,
        };
        return _this;
    }
    InvoiceViewModeComponent.prototype.ngOnInit = function () {
        this.masterdata = this.route.snapshot.data.masterdata;
        this.bindConfiguration();
        this.viewDocumentTypes = this.getDocumentTypesEnumArray();
        this.viewModeTrades = this.getViewModeEnumArray();
        this.viewDocumentTypeCtrl.patchValue(_shared_enums_view_document_type_enum__WEBPACK_IMPORTED_MODULE_7__["ViewDocumentType"].All);
        this.showDetailsCtrl.patchValue(_shared_enums_view_mode_enum__WEBPACK_IMPORTED_MODULE_8__["ViewMode"].ThisTrade);
        this.company = this.route.snapshot.paramMap.get('company');
    };
    InvoiceViewModeComponent.prototype.getDocumentTypesEnumArray = function () {
        var viewModeEnum = Object.values(_shared_enums_view_document_type_enum__WEBPACK_IMPORTED_MODULE_7__["ViewDocumentType"]);
        return viewModeEnum;
    };
    InvoiceViewModeComponent.prototype.getViewModeEnumArray = function () {
        var viewModeObjectEnum = Object.values(_shared_enums_view_mode_enum__WEBPACK_IMPORTED_MODULE_8__["ViewMode"]);
        return viewModeObjectEnum;
    };
    InvoiceViewModeComponent.prototype.onDocumentTypeChange = function (value) {
        this.viewModeFilters = [this.showDetailsCtrl.value, value.source.triggerValue];
        this.documentTypeSelected.emit(this.viewModeFilters);
    };
    InvoiceViewModeComponent.prototype.onViewModeChange = function (value) {
        this.viewModeFilters = [value.source.triggerValue, this.viewDocumentTypeCtrl.value];
        this.documentTypeSelected.emit(this.viewModeFilters);
    };
    InvoiceViewModeComponent.prototype.initForm = function (entity, isEdit) {
        this.isEdit = isEdit;
        this.editPrivileges.buttonEditable = this.checkIfUserHasRequiredPrivileges(this.editEstimatedColumnsPrivilege);
        return entity;
    };
    InvoiceViewModeComponent.prototype.checkIfUserHasRequiredPrivileges = function (userCompanyPrivilege) {
        if (this.authorizationService.isUserAllowedForCompany(this.company)) {
            var userPermissionLevel = this.authorizationService.getPermissionLevel(this.company, userCompanyPrivilege.privilegeName, userCompanyPrivilege.privilegeParentLevelOne, userCompanyPrivilege.privilegeParentLevelTwo);
            if (userPermissionLevel >= userCompanyPrivilege.permission) {
                return true;
            }
        }
        return false;
    };
    InvoiceViewModeComponent.prototype.onChange = function (value) {
        if (value.checked) {
            this.toggleText = this.translationKeyPrefix + 'ACTIVE';
            this.editToggleChanged.emit(true);
        }
        else {
            this.toggleText = this.translationKeyPrefix + 'INACTIVE';
            this.editToggleChanged.emit(false);
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], InvoiceViewModeComponent.prototype, "documentTypeSelected", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], InvoiceViewModeComponent.prototype, "editToggleChanged", void 0);
    InvoiceViewModeComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-invoice-view-mode',
            template: __webpack_require__(/*! ./invoice-view-mode.component.html */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-view-mode/invoice-view-mode.component.html"),
            styles: [__webpack_require__(/*! ./invoice-view-mode.component.scss */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-view-mode/invoice-view-mode.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_10__["UtilService"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__["AuthorizationService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_9__["FormConfigurationProviderService"]])
    ], InvoiceViewModeComponent);
    return InvoiceViewModeComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/top-card/top-card.component.html":
/*!*********************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/top-card/top-card.component.html ***!
  \*********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card>\r\n    <mat-card-content>\r\n        <div class=\"atlas-invoice-top-card\"\r\n             fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\">\r\n            <mat-form-field class=\"mat-read-only-field\"\r\n                            fxFlex=\"70%\">\r\n                <input matInput\r\n                       placeholder=\"{{translationKeyPrefix + 'COMMODITY_DESCRIPTION' | translate}}\"\r\n                       autocomplete=\"off\"\r\n                       [formControl]='commodityDescrCtrl'\r\n                       readonly>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field class=\"mat-read-only-field\"\r\n                            fxFlex=\"30%\">\r\n                <input matInput\r\n                       placeholder=\"{{translationKeyPrefix + 'CPY_CODE'| translate}}\"\r\n                       autocomplete=\"off\"\r\n                       [formControl]='counterPartyCodeCtrl'\r\n                       readonly>\r\n            </mat-form-field>\r\n\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\">\r\n            <mat-form-field class=\"mat-read-only-field\"\r\n                            fxFlex=\"20%\">\r\n                <input matInput\r\n                       placeholder=\"{{translationKeyPrefix + 'QTY' | translate}}\"\r\n                       autocomplete=\"off\"\r\n                       [formControl]='quantityCtrl'\r\n                       readonly>\r\n            </mat-form-field>\r\n            <mat-form-field class=\"mat-read-only-field\"\r\n                            fxFlex=\"20%\">\r\n                <input matInput\r\n                       placeholder=\"{{translationKeyPrefix + 'PRICING' | translate}}\"\r\n                       autocomplete=\"off\"\r\n                       [formControl]='pricingCtrl'\r\n                       readonly>\r\n            </mat-form-field>\r\n            <mat-form-field class=\"mat-read-only-field\"\r\n                            fxFlex=\"60%\">\r\n                <input matInput\r\n                       placeholder=\"{{translationKeyPrefix + 'SHIPPING_PERIOD' | translate}}\"\r\n                       autocomplete=\"off\"\r\n                       [formControl]='shippingPeriodCtrl'\r\n                       readonly>\r\n            </mat-form-field>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/top-card/top-card.component.scss":
/*!*********************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/top-card/top-card.component.scss ***!
  \*********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".atlas-invoice-top-card {\n  margin: 3% 0 4% 0; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/top-card/top-card.component.ts":
/*!*******************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/top-card/top-card.component.ts ***!
  \*******************************************************************************************************************************/
/*! exports provided: TopCardComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopCardComponent", function() { return TopCardComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../../shared/entities/masterdata-props.entity */ "./Client/app/shared/entities/masterdata-props.entity.ts");
/* harmony import */ var _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../../shared/enums/contract-type.enum */ "./Client/app/shared/enums/contract-type.enum.ts");
/* harmony import */ var _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../../shared/models/section-complete-display-view */ "./Client/app/shared/models/section-complete-display-view.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};










var TopCardComponent = /** @class */ (function (_super) {
    __extends(TopCardComponent, _super);
    function TopCardComponent(formBuilder, masterdataService, route, formConfigurationProvider) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.masterdataService = masterdataService;
        _this.route = route;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.translationKeyPrefix = 'TRADING.TRADE_CAPTURE.INVOICE_MARKING_TAB.TOP_CARD.';
        _this.commodityDescrCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('invoiceMarkingCommodityDescr');
        _this.counterPartyCodeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('invoiceMarkingCounterPartyCode');
        _this.quantityCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('invoiceMarkingQuantity');
        _this.pricingCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('invoiceMarkingPricing');
        _this.shippingPeriodCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('invoiceMarkingShippingPeriod');
        _this.masterdataList = [_shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_5__["MasterDataProps"].Commodities];
        return _this;
    }
    TopCardComponent.prototype.ngOnInit = function () {
        this.masterdata = this.route.snapshot.data.masterdata;
    };
    TopCardComponent.prototype.ngOnDestroy = function () {
        if (this.masterDataSubscription) {
            this.masterDataSubscription.unsubscribe();
        }
    };
    TopCardComponent.prototype.initForm = function (entity, isEdit) {
        var _this = this;
        this.tradeRecord = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_7__["SectionCompleteDisplayView"](entity);
        if (this.tradeRecord.type === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_6__["ContractTypes"][_shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_6__["ContractTypes"].Purchase]) {
            this.counterPartyCodeCtrl.patchValue(this.tradeRecord.sellerCode);
        }
        else if (this.tradeRecord.type === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_6__["ContractTypes"][_shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_6__["ContractTypes"].Sale]) {
            this.counterPartyCodeCtrl.patchValue(this.tradeRecord.buyerCode);
        }
        this.quantityCtrl.patchValue(this.tradeRecord.quantity);
        this.formattedQuantity = this.formatValue(this.tradeRecord.quantity, 3, 3);
        this.shippingPeriodCtrl.patchValue(this.tradeRecord.shippingPeriod);
        var filteredCommodities = this.masterdata.commodities.filter(function (c) { return c.commodityId === _this.tradeRecord.commodityId; });
        if (filteredCommodities.length > 0) {
            this.commodityDescrCtrl.patchValue(filteredCommodities[0].commodityDescription);
        }
        var filteredWeightUnit = this.masterdata.weightUnits.filter(function (weight) { return weight.weightUnitId === _this.tradeRecord.weightUnitId; });
        if (filteredWeightUnit.length > 0) {
            this.quantityCtrl.patchValue(this.formattedQuantity + '' + filteredWeightUnit[0].weightCode);
        }
        var filteredPriceCode = this.masterdata.priceUnits.filter(function (price) { return price.priceUnitId === _this.tradeRecord.priceUnitId; });
        if (filteredPriceCode.length > 0) {
            this.formattedPrice = this.formatValue(this.tradeRecord.price, 2, 2);
            this.pricingCtrl.patchValue((this.tradeRecord.currency) + '' + (this.formattedPrice) + '' +
                (filteredPriceCode[0].priceCode));
        }
    };
    TopCardComponent.prototype.formatValue = function (amount, minimumFractionDigits, maximumFractionDigits) {
        if (isNaN(amount) || amount === null) {
            return '';
        }
        return new Intl.NumberFormat('en-US', {
            minimumFractionDigits: minimumFractionDigits, maximumFractionDigits: maximumFractionDigits
        }).format(amount);
    };
    TopCardComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            commodityDescrCtrl: this.commodityDescrCtrl,
            counterPartyCodeCtrl: this.counterPartyCodeCtrl,
            quantityCtrl: this.quantityCtrl,
            pricingCtrl: this.pricingCtrl,
            shippingPeriodCtrl: this.shippingPeriodCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    TopCardComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-physical-contract-capture-invoice-marking-top-card',
            template: __webpack_require__(/*! ./top-card.component.html */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/top-card/top-card.component.html"),
            styles: [__webpack_require__(/*! ./top-card.component.scss */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/top-card/top-card.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_9__["MasterdataService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_8__["FormConfigurationProviderService"]])
    ], TopCardComponent);
    return TopCardComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/physical-contract-capture-form-invoice-marking-tab.component.html":
/*!*******************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/physical-contract-capture-form-invoice-marking-tab.component.html ***!
  \*******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<form [formGroup]=\"invoiceMarkingForm\">\r\n    <div fxLayoutAlign=\"center\"\r\n         fxLayout=\"row wrap\"\r\n         fxLayoutAlign=\"space-between\"\r\n         class=\"cards-fxLayout\">\r\n        <atlas-invoice-view-mode #invoiceViewModeComponent\r\n                                 (documentTypeSelected)=\"documentTypeSelected($event)\"\r\n                                 (editToggleChanged)=\"editToggleChanged($event)\"\r\n                                 fxFlex=\"calc(50% - 16px)\"\r\n                                 fxFlex.lt-md=\"100\"\r\n                                 class=\"flex-item\">\r\n        </atlas-invoice-view-mode>\r\n\r\n        <atlas-physical-contract-capture-invoice-marking-top-card #topCardComponent\r\n                                                                  fxFlex=\"calc(50% - 16px)\"\r\n                                                                  fxFlex.lt-md=\"100\">\r\n        </atlas-physical-contract-capture-invoice-marking-top-card>\r\n\r\n        <atlas-detailed-view #detailedViewComponent\r\n                             [documentType]=\"documentType\"\r\n                             [isEditToggle]=\"isEditToggle\"\r\n                             (totalValuesCalculated)=\"onTotalValuesCalculated($event)\"\r\n                             (setCashMatchDate)=\"onGetCashMatchDate($event)\"\r\n                             fxFlex=\"100\">\r\n        </atlas-detailed-view>\r\n        <atlas-invoice-totals #invoiceTotalsComponent\r\n                              fxFlex=\"calc(50% - 16px)\"\r\n                              fxFlex.lt-sm=\"100\"\r\n                              class=\"flex-item\">\r\n        </atlas-invoice-totals>\r\n        <atlas-invoice-status #invoiceStatusComponent\r\n                              fxFlex=\"calc(50% - 16px)\"\r\n                              fxFlex.lt-sm=\"100\"\r\n                              class=\"flex-item\"\r\n                              [isEditToggle]=\"isEditToggle\">\r\n        </atlas-invoice-status>\r\n    </div>\r\n</form>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/physical-contract-capture-form-invoice-marking-tab.component.scss":
/*!*******************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/physical-contract-capture-form-invoice-marking-tab.component.scss ***!
  \*******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/physical-contract-capture-form-invoice-marking-tab.component.ts":
/*!*****************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/physical-contract-capture-form-invoice-marking-tab.component.ts ***!
  \*****************************************************************************************************************************************************/
/*! exports provided: PhysicalContractCaptureFormInvoiceMarkingTabComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PhysicalContractCaptureFormInvoiceMarkingTabComponent", function() { return PhysicalContractCaptureFormInvoiceMarkingTabComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _components_detailed_view_detailed_view_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/detailed-view/detailed-view.component */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/detailed-view/detailed-view.component.ts");
/* harmony import */ var _components_invoice_status_invoice_status_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/invoice-status/invoice-status.component */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-status/invoice-status.component.ts");
/* harmony import */ var _components_invoice_totals_invoice_totals_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/invoice-totals/invoice-totals.component */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-totals/invoice-totals.component.ts");
/* harmony import */ var _components_invoice_view_mode_invoice_view_mode_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/invoice-view-mode/invoice-view-mode.component */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-view-mode/invoice-view-mode.component.ts");
/* harmony import */ var _components_top_card_top_card_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/top-card/top-card.component */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/top-card/top-card.component.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









var PhysicalContractCaptureFormInvoiceMarkingTabComponent = /** @class */ (function (_super) {
    __extends(PhysicalContractCaptureFormInvoiceMarkingTabComponent, _super);
    function PhysicalContractCaptureFormInvoiceMarkingTabComponent(formBuilder, formConfigurationProvider) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.setCashMatchDate = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.totalInvoicePercent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.totalValuesCalculated = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.formComponents = [];
        _this.isEditToggle = false;
        return _this;
    }
    PhysicalContractCaptureFormInvoiceMarkingTabComponent.prototype.ngOnInit = function () {
        this.invoiceMarkingForm = this.formBuilder.group({
            detailedViewComponent: this.detailedViewComponent.getFormGroup(),
            invoiceTotalsComponent: this.invoiceTotalsComponent.getFormGroup(),
            invoiceStatusComponent: this.invoiceStatusComponent.getFormGroup(),
            topCardComponent: this.topCardComponent.getFormGroup(),
            invoiceViewModeComponent: this.invoiceViewModeComponent.getFormGroup(),
        });
        this.formComponents.push(this.detailedViewComponent, this.invoiceTotalsComponent, this.invoiceStatusComponent, this.topCardComponent, this.invoiceViewModeComponent);
    };
    PhysicalContractCaptureFormInvoiceMarkingTabComponent.prototype.initForm = function (entity, isEdit) {
        this.formComponents.forEach(function (comp) {
            comp.initForm(entity, isEdit);
        });
    };
    PhysicalContractCaptureFormInvoiceMarkingTabComponent.prototype.populateEntity = function (entity) {
        this.formComponents.forEach(function (comp) {
            entity = comp.populateEntity(entity);
        });
        return entity;
    };
    PhysicalContractCaptureFormInvoiceMarkingTabComponent.prototype.onTotalValuesCalculated = function (model) {
        this.invoiceTotalsComponent.totalQuantity = model.totalQuantity;
        this.invoiceTotalsComponent.totalQuantityPercent = model.totalQuantityPercent;
        this.invoiceTotalsComponent.totalInvoiceValue = model.totalInvoiceValue;
        this.invoiceTotalsComponent.totalInvoiceValuePercent = model.totalInvoiceValuePercent;
        (this.isEditToggle) ? this.invoiceStatusComponent.setInvoiceStatusOnChange(model) :
            this.invoiceStatusComponent.setInvoiceStatusOnPageLoad(model);
        this.totalValuesCalculated.emit(model);
        this.totalInvoicePercent.emit({ totalInvoiceValuePercent: this.invoiceTotalsComponent.totalInvoiceValuePercent });
    };
    PhysicalContractCaptureFormInvoiceMarkingTabComponent.prototype.documentTypeSelected = function (documentTypeValue) {
        this.documentType = documentTypeValue;
    };
    PhysicalContractCaptureFormInvoiceMarkingTabComponent.prototype.editToggleChanged = function (value) {
        this.isEditToggle = value;
    };
    PhysicalContractCaptureFormInvoiceMarkingTabComponent.prototype.onGetCashMatchDate = function (cashMatchDate) {
        this.setCashMatchDate.emit(cashMatchDate);
    };
    PhysicalContractCaptureFormInvoiceMarkingTabComponent.prototype.onTabSelected = function () {
        this.detailedViewComponent.onTabActive();
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], PhysicalContractCaptureFormInvoiceMarkingTabComponent.prototype, "setCashMatchDate", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('detailedViewComponent'),
        __metadata("design:type", _components_detailed_view_detailed_view_component__WEBPACK_IMPORTED_MODULE_4__["DetailedViewComponent"])
    ], PhysicalContractCaptureFormInvoiceMarkingTabComponent.prototype, "detailedViewComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('invoiceTotalsComponent'),
        __metadata("design:type", _components_invoice_totals_invoice_totals_component__WEBPACK_IMPORTED_MODULE_6__["InvoiceTotalsComponent"])
    ], PhysicalContractCaptureFormInvoiceMarkingTabComponent.prototype, "invoiceTotalsComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('invoiceStatusComponent'),
        __metadata("design:type", _components_invoice_status_invoice_status_component__WEBPACK_IMPORTED_MODULE_5__["InvoiceStatusComponent"])
    ], PhysicalContractCaptureFormInvoiceMarkingTabComponent.prototype, "invoiceStatusComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('invoiceViewModeComponent'),
        __metadata("design:type", _components_invoice_view_mode_invoice_view_mode_component__WEBPACK_IMPORTED_MODULE_7__["InvoiceViewModeComponent"])
    ], PhysicalContractCaptureFormInvoiceMarkingTabComponent.prototype, "invoiceViewModeComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('topCardComponent'),
        __metadata("design:type", _components_top_card_top_card_component__WEBPACK_IMPORTED_MODULE_8__["TopCardComponent"])
    ], PhysicalContractCaptureFormInvoiceMarkingTabComponent.prototype, "topCardComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], PhysicalContractCaptureFormInvoiceMarkingTabComponent.prototype, "totalInvoicePercent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], PhysicalContractCaptureFormInvoiceMarkingTabComponent.prototype, "totalValuesCalculated", void 0);
    PhysicalContractCaptureFormInvoiceMarkingTabComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-physical-contract-capture-form-invoice-marking-tab',
            template: __webpack_require__(/*! ./physical-contract-capture-form-invoice-marking-tab.component.html */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/physical-contract-capture-form-invoice-marking-tab.component.html"),
            styles: [__webpack_require__(/*! ./physical-contract-capture-form-invoice-marking-tab.component.scss */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/physical-contract-capture-form-invoice-marking-tab.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"], _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_3__["FormConfigurationProviderService"]])
    ], PhysicalContractCaptureFormInvoiceMarkingTabComponent);
    return PhysicalContractCaptureFormInvoiceMarkingTabComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_2__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/main-tab/physical-contract-capture-form-main-tab.component.html":
/*!*********************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/main-tab/physical-contract-capture-form-main-tab.component.html ***!
  \*********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<!-- container -->\r\n<div fxLayout=\"column wrap\"\r\n     fxLayoutAlign=\"start\"\r\n     class=\"container-flex\">\r\n\r\n    <atlas-counterparty-form-component #CounterpartyComponent\r\n                                       class=\"flex-item\"></atlas-counterparty-form-component>\r\n    <atlas-commodity-form-component #CommodityComponent\r\n                                    (commodityCodeSelected)=\"commodityCodeSelected($event)\"\r\n                                    (commBlockWarnMessage)=\"commBlockWarnMessage($event)\"\r\n                                    class=\"flex-item\"></atlas-commodity-form-component>\r\n    <atlas-custom-quantity-form-component #QuantityFormComponent\r\n                                          (quantitySelected)=\"quantitySelected($event)\"\r\n                                          (quantityCodeSelected)=\"quantityCodeSelected($event)\"\r\n                                          class=\"flex-item\"></atlas-custom-quantity-form-component>\r\n    <atlas-terms-form-component #TermsFormComponent\r\n                                class=\"flex-item\"></atlas-terms-form-component>\r\n    <atlas-price-form-component #PriceFormComponent\r\n                                class=\"flex-item\"></atlas-price-form-component>\r\n\r\n    <div class=\"shipment-location-section\"\r\n         fxLayout=\"column\"\r\n         class=\"flex-item\">\r\n        <atlas-shipment-period-form #ShipmentPeriodFormComponent></atlas-shipment-period-form>\r\n        <atlas-location-form-component #LocationFormComponent\r\n                                       (portsWarningMessage)=\"portsWarningMessage($event)\">\r\n        </atlas-location-form-component>\r\n    </div>\r\n    <atlas-memo-form-component #MemoComponent\r\n                               class=\"flex-item\"></atlas-memo-form-component>\r\n</div>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/main-tab/physical-contract-capture-form-main-tab.component.scss":
/*!*********************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/main-tab/physical-contract-capture-form-main-tab.component.scss ***!
  \*********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".container-flex {\n  display: flex;\n  flex-flow: column wrap;\n  align-content: flex-start;\n  height: 100%; }\n\n/* 3 columns */\n\n@media screen and (min-width: 1590px) {\n  .container-flex {\n    /* Your container needs a fixed height, and it \r\n        * needs to be taller than your tallest column. */\n    max-height: 765px; }\n  .flex-item {\n    width: 32%; }\n  /* Re-order items into 3 rows */\n  .flex-item:nth-child(3n+1) {\n    order: 1; }\n  .flex-item:nth-child(3n+2) {\n    order: 2; }\n  .flex-item:nth-child(3n) {\n    order: 3; }\n  /* Force new columns */\n  .container-flex::before,\n  .container-flex::after {\n    content: \"\";\n    flex-basis: 100%;\n    width: 0;\n    order: 2; } }\n\n/* 2 columns */\n\n@media screen and (max-width: 1590px) {\n  .container-flex {\n    max-height: 1028px; }\n  .flex-item {\n    width: 49%; }\n  /* Re-order items into 3 rows */\n  .flex-item:nth-child(2n+1) {\n    order: 1; }\n  .flex-item:nth-child(2n+2) {\n    order: 2; } }\n\n/* 1 column */\n\n@media screen and (max-width: 850px) {\n  .container-flex {\n    max-height: none; }\n  .flex-item {\n    width: 98%;\n    order: 1; } }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/main-tab/physical-contract-capture-form-main-tab.component.ts":
/*!*******************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/main-tab/physical-contract-capture-form-main-tab.component.ts ***!
  \*******************************************************************************************************************************/
/*! exports provided: PhysicalContractCaptureFormMainTabComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PhysicalContractCaptureFormMainTabComponent", function() { return PhysicalContractCaptureFormMainTabComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _form_components_commodity_form_component_commodity_form_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../form-components/commodity-form-component/commodity-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/commodity-form-component/commodity-form-component.component.ts");
/* harmony import */ var _form_components_counterparty_form_component_counterparty_form_component_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../form-components/counterparty-form-component/counterparty-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/counterparty-form-component/counterparty-form-component.component.ts");
/* harmony import */ var _form_components_location_form_component_location_form_component_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../form-components/location-form-component/location-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/location-form-component/location-form-component.component.ts");
/* harmony import */ var _form_components_memo_form_component_memo_form_component_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../form-components/memo-form-component/memo-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/memo-form-component/memo-form-component.component.ts");
/* harmony import */ var _form_components_price_form_component_price_form_component_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../form-components/price-form-component/price-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/price-form-component/price-form-component.component.ts");
/* harmony import */ var _form_components_quantity_form_component_quantity_form_component_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../form-components/quantity-form-component/quantity-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/quantity-form-component/quantity-form-component.component.ts");
/* harmony import */ var _form_components_terms_form_component_terms_form_component_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../form-components/terms-form-component/terms-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/terms-form-component/terms-form-component.component.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











var PhysicalContractCaptureFormMainTabComponent = /** @class */ (function (_super) {
    __extends(PhysicalContractCaptureFormMainTabComponent, _super);
    function PhysicalContractCaptureFormMainTabComponent(formBuilder, formConfigurationProvider) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.updateTrafficTabQuantity = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.commodityBlockOrWarnMessage = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.portWarningMessage = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.formComponents = [];
        return _this;
    }
    PhysicalContractCaptureFormMainTabComponent.prototype.ngOnInit = function () {
        this.formComponents.push(this.counterpartyComponent, this.commodityComponent, this.quantityComponent, this.termsComponent, this.priceComponent, this.shipmentPeriodComponent, this.locationFormComponent, this.memoComponent);
    };
    PhysicalContractCaptureFormMainTabComponent.prototype.contractTypeSelected = function (contractType) {
        this.counterpartyComponent.contractTypeSelected(contractType);
    };
    PhysicalContractCaptureFormMainTabComponent.prototype.contractDateSelected = function (contractDate) {
        this.commodityComponent.contractDateSelected(contractDate);
    };
    PhysicalContractCaptureFormMainTabComponent.prototype.commodityCodeSelected = function (commodity) {
        this.priceComponent.commodityCodeSelected(commodity);
        this.termsComponent.commodityCodeSelected(commodity);
    };
    PhysicalContractCaptureFormMainTabComponent.prototype.commBlockWarnMessage = function (isBlocking) {
        this.commodityBlockOrWarnMessage.emit(isBlocking);
    };
    PhysicalContractCaptureFormMainTabComponent.prototype.portsWarningMessage = function (isPortWarning) {
        this.portWarningMessage.emit(isPortWarning);
    };
    PhysicalContractCaptureFormMainTabComponent.prototype.initForm = function (entity, isEdit) {
        this.formComponents.forEach(function (comp) {
            entity = comp.initForm(entity, isEdit);
        });
        return entity;
    };
    PhysicalContractCaptureFormMainTabComponent.prototype.populateEntity = function (entity) {
        this.formComponents.forEach(function (comp) {
            entity = comp.populateEntity(entity);
        });
        return entity;
    };
    PhysicalContractCaptureFormMainTabComponent.prototype.quantitySelected = function (quantity) {
        this.priceComponent.quantityVal = quantity;
        this.priceComponent.setContractValue();
        this.updateTrafficTabQuantity.emit(quantity);
    };
    PhysicalContractCaptureFormMainTabComponent.prototype.quantityCodeSelected = function (quantityCode) {
        this.priceComponent.weightUnit = quantityCode;
        this.priceComponent.setContractValue();
    };
    PhysicalContractCaptureFormMainTabComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            memoComponent: this.memoComponent.getFormGroup(),
            counterpartyGroup: this.counterpartyComponent.getFormGroup(),
            termsGroup: this.termsComponent.getFormGroup(),
            quantityGroup: this.quantityComponent.getFormGroup(),
            locationFormComponent: this.locationFormComponent.getFormGroup(),
            shipmentPeriodFormComponent: this.shipmentPeriodComponent.getFormGroup(),
            commodityGroup: this.commodityComponent.getFormGroup(),
            priceGroup: this.priceComponent.getFormGroup(),
        });
        return _super.prototype.getFormGroup.call(this);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('CounterpartyComponent'),
        __metadata("design:type", _form_components_counterparty_form_component_counterparty_form_component_component__WEBPACK_IMPORTED_MODULE_5__["CounterpartyFormComponent"])
    ], PhysicalContractCaptureFormMainTabComponent.prototype, "counterpartyComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('CommodityComponent'),
        __metadata("design:type", _form_components_commodity_form_component_commodity_form_component_component__WEBPACK_IMPORTED_MODULE_4__["CommodityFormComponent"])
    ], PhysicalContractCaptureFormMainTabComponent.prototype, "commodityComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('QuantityFormComponent'),
        __metadata("design:type", _form_components_quantity_form_component_quantity_form_component_component__WEBPACK_IMPORTED_MODULE_9__["QuantityFormComponent"])
    ], PhysicalContractCaptureFormMainTabComponent.prototype, "quantityComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('TermsFormComponent'),
        __metadata("design:type", _form_components_terms_form_component_terms_form_component_component__WEBPACK_IMPORTED_MODULE_10__["TermsFormComponent"])
    ], PhysicalContractCaptureFormMainTabComponent.prototype, "termsComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('PriceFormComponent'),
        __metadata("design:type", _form_components_price_form_component_price_form_component_component__WEBPACK_IMPORTED_MODULE_8__["PriceFormComponent"])
    ], PhysicalContractCaptureFormMainTabComponent.prototype, "priceComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('ShipmentPeriodFormComponent'),
        __metadata("design:type", _form_components_terms_form_component_terms_form_component_component__WEBPACK_IMPORTED_MODULE_10__["TermsFormComponent"])
    ], PhysicalContractCaptureFormMainTabComponent.prototype, "shipmentPeriodComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('LocationFormComponent'),
        __metadata("design:type", _form_components_location_form_component_location_form_component_component__WEBPACK_IMPORTED_MODULE_6__["LocationFormComponent"])
    ], PhysicalContractCaptureFormMainTabComponent.prototype, "locationFormComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('MemoComponent'),
        __metadata("design:type", _form_components_memo_form_component_memo_form_component_component__WEBPACK_IMPORTED_MODULE_7__["MemoFormComponent"])
    ], PhysicalContractCaptureFormMainTabComponent.prototype, "memoComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], PhysicalContractCaptureFormMainTabComponent.prototype, "updateTrafficTabQuantity", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], PhysicalContractCaptureFormMainTabComponent.prototype, "commodityBlockOrWarnMessage", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], PhysicalContractCaptureFormMainTabComponent.prototype, "portWarningMessage", void 0);
    PhysicalContractCaptureFormMainTabComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-physical-contract-capture-form-main-tab',
            template: __webpack_require__(/*! ./physical-contract-capture-form-main-tab.component.html */ "./Client/app/trading/components/contract-physical-capture/main-tab/physical-contract-capture-form-main-tab.component.html"),
            styles: [__webpack_require__(/*! ./physical-contract-capture-form-main-tab.component.scss */ "./Client/app/trading/components/contract-physical-capture/main-tab/physical-contract-capture-form-main-tab.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_3__["FormConfigurationProviderService"]])
    ], PhysicalContractCaptureFormMainTabComponent);
    return PhysicalContractCaptureFormMainTabComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_2__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/save-as-favourite-dialog/save-as-favourite-dialog.component.html":
/*!**********************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/save-as-favourite-dialog/save-as-favourite-dialog.component.html ***!
  \**********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div fxLayoutAlign=\"space-between center\">\r\n    <h1 class=\"no-margin\">Save {{dialogData.title}} As Favourite</h1>\r\n</div>\r\n\r\n<mat-dialog-content [FormGroup]=\"formGroup\">\r\n    <div fxLayout=\"row\"\r\n         fxLayoutAlign=\"left start\"\r\n         fxLayoutGap=\"30px\">\r\n        <div fxFlex=\"40%\"\r\n             [class.isEmpty]=\"!nameCtrl.value\"\r\n             [class.required-field]=\"nameCtrl.isRequired\">\r\n            <mat-form-field>\r\n                <input matInput\r\n                       placeholder=\"Name\"\r\n                       [formControl]=\"nameCtrl\"\r\n                       autocomplete=\"off\"\r\n                       matTooltip=\"Name of the Favourite\"\r\n                       required=\"nameCtrl.isRequired\"\r\n                       (change)=\"onNameChanged($event)\">\r\n                <mat-hint class=\"required-field\">Required *</mat-hint>\r\n                <mat-error *ngIf=\"nameCtrl.hasError('required')\">Name is Required</mat-error>\r\n                <mat-error *ngIf=\"nameCtrl.hasError('maxlength')\">\r\n                    Name cannot be more than 50 characters\r\n                </mat-error>\r\n                <mat-hint align=\"end\"\r\n                          *ngIf=\"nameCtrl.hasError('notUnique')\">\r\n                    Name already used\r\n                </mat-hint>\r\n            </mat-form-field>\r\n        </div>\r\n        <div fxFlex=\"60%\">\r\n            <mat-form-field>\r\n                <input matInput\r\n                       placeholder=\"Description\"\r\n                       [formControl]=\"descriptionCtrl\"\r\n                       autocomplete=\"off\"\r\n                       matTooltip=\"Description of the Favourite\">\r\n                <mat-error *ngIf=\"descriptionCtrl.hasError('maxlength')\">\r\n                    Description can not be more than 150 characters\r\n                </mat-error>\r\n            </mat-form-field>\r\n        </div>\r\n    </div>\r\n</mat-dialog-content>\r\n\r\n<mat-dialog-actions>\r\n    <div fxFlex=\"50\"\r\n         fxLayout=\"row\"\r\n         fxAlignLayout=\"start start\">\r\n        <button mat-button\r\n                (click)=\"onCloseButtonClicked()\">DISCARD</button>\r\n    </div>\r\n    <div fxFlex=\"50\"\r\n         fxLayout=\"row\"\r\n         fxAlignLayout=\"start end\">\r\n        <span class=\"fill-space\"></span>\r\n        <button mat-button\r\n                (click)=\"onSaveAsFavouriteButtonClicked()\">{{saveButtonText}}</button>\r\n    </div>\r\n</mat-dialog-actions>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/save-as-favourite-dialog/save-as-favourite-dialog.component.scss":
/*!**********************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/save-as-favourite-dialog/save-as-favourite-dialog.component.scss ***!
  \**********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".required-field {\n  color: #00a9c6; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/save-as-favourite-dialog/save-as-favourite-dialog.component.ts":
/*!********************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/save-as-favourite-dialog/save-as-favourite-dialog.component.ts ***!
  \********************************************************************************************************************************/
/*! exports provided: SaveAsFavouriteDialogComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SaveAsFavouriteDialogComponent", function() { return SaveAsFavouriteDialogComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../shared/components/confirmation-dialog/confirmation-dialog.component */ "./Client/app/shared/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _entities_tradeFavoriteDetail_entity__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../entities/tradeFavoriteDetail.entity */ "./Client/app/trading/entities/tradeFavoriteDetail.entity.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};









var SaveAsFavouriteDialogComponent = /** @class */ (function () {
    function SaveAsFavouriteDialogComponent(thisDialogRef, utilService, tradingService, dialog, snackbarService, formBuilder, data) {
        this.thisDialogRef = thisDialogRef;
        this.utilService = utilService;
        this.tradingService = tradingService;
        this.dialog = dialog;
        this.snackbarService = snackbarService;
        this.formBuilder = formBuilder;
        this.data = data;
        this.nameCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('Name');
        this.descriptionCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('Description');
        this.saveButtonText = 'Save As Favourite';
        this.dialogData = data;
        this.company = this.dialogData.companyId;
    }
    SaveAsFavouriteDialogComponent.prototype.ngOnInit = function () {
        this.setValidators();
        this.formGroup = this.formBuilder.group({
            nameCtrl: this.nameCtrl,
            descriptionCtrl: this.descriptionCtrl,
        });
    };
    SaveAsFavouriteDialogComponent.prototype.setValidators = function () {
        this.nameCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required,
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].maxLength(50),
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].pattern(/^[a-zA-Z0-9!@#$%^&*()-_ ~`"'|]+$/),
        ]));
        this.descriptionCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].maxLength(150),
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].pattern(/^[a-zA-Z0-9!@#$%^&*()-_ ~`"'|]+$/),
        ]));
    };
    SaveAsFavouriteDialogComponent.prototype.onNameChanged = function ($event) {
        var _this = this;
        if ($event.target.value) {
            this.tradingService.checkTradeFavoriteNameExists($event.target.value)
                .subscribe(function (result) {
                if (result) {
                    var confirmOverwriteDialog_1 = _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_3__["ConfirmationDialogComponent"], {
                        data: {
                            title: 'Favorite Name already exits',
                            text: 'The Name is already taken, please provide another name or ' +
                                'do you want to override the existing favorite trade ? ',
                            okButton: 'Overwrite',
                            cancelButton: 'Cancel',
                        },
                    });
                    confirmOverwriteDialog_1.afterClosed().subscribe(function (answer) {
                        if (answer) {
                            _this.saveButtonText = 'Overwrite';
                            confirmOverwriteDialog_1.close();
                        }
                    });
                }
            });
        }
    };
    SaveAsFavouriteDialogComponent.prototype.onCloseButtonClicked = function () {
        this.thisDialogRef.close();
    };
    SaveAsFavouriteDialogComponent.prototype.onSaveAsFavouriteButtonClicked = function () {
        var _this = this;
        if (this.formGroup.valid) {
            var tradeFavorite = new _entities_tradeFavoriteDetail_entity__WEBPACK_IMPORTED_MODULE_8__["TradeFavoriteDetail"]();
            tradeFavorite.name = this.formGroup.value.nameCtrl;
            tradeFavorite.description = this.formGroup.value.descriptionCtrl;
            tradeFavorite.sectionId = this.dialogData.sectionId;
            this.tradingService.createTradeFavorite(tradeFavorite).subscribe(function (result) {
                if (result) {
                    _this.snackbarService.informationSnackBar('The trade has been successfully saved as favorite');
                    _this.onCloseButtonClicked();
                }
            });
        }
    };
    SaveAsFavouriteDialogComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-save-as-favourite-dialog',
            template: __webpack_require__(/*! ./save-as-favourite-dialog.component.html */ "./Client/app/trading/components/contract-physical-capture/save-as-favourite-dialog/save-as-favourite-dialog.component.html"),
            styles: [__webpack_require__(/*! ./save-as-favourite-dialog.component.scss */ "./Client/app/trading/components/contract-physical-capture/save-as-favourite-dialog/save-as-favourite-dialog.component.scss")],
        }),
        __param(6, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_2__["MAT_DIALOG_DATA"])),
        __metadata("design:paramtypes", [_angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialogRef"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_7__["UtilService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_5__["TradingService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialog"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_6__["SnackbarService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"], Object])
    ], SaveAsFavouriteDialogComponent);
    return SaveAsFavouriteDialogComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-ag-grid/new-tranche-split-ag-grid.component.html":
/*!************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-ag-grid/new-tranche-split-ag-grid.component.html ***!
  \************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             class=\" table-title\">\r\n            <span class=\"fill-space\"></span>\r\n            <atlas-ag-grid-user-preferences *ngIf=\"trancheGridOptions && trancheGridOptions.columnDefs\"\r\n                                            [gridOptions]=\"trancheGridOptions\"\r\n                                            [company]=\"company\"\r\n                                            [sharingEnabled]=\"hasGridSharing\"\r\n                                            [gridId]=\"componentId\"\r\n                                            #userPreferences>\r\n            </atlas-ag-grid-user-preferences>\r\n        </div>\r\n        <div ag-grid=\"trancheGridOptions\"\r\n             class=\"ag-theme-material pointer-cursor\">\r\n            <ag-grid-angular class=\"ag-theme-material atlas-ag-grid\"\r\n                             [rowData]=\"childSectionList\"\r\n                             [columnDefs]=\"trancheGridCols\"\r\n                             (gridReady)=\"onGridReady($event)\"\r\n                             [pagination]=\"true\"\r\n                             [paginationPageSize]=\"10\"\r\n                             [enableSorting]=\"true\"\r\n                             [enableColResize]=\"true\"\r\n                             [context]=\"gridContext\"\r\n                             (cellValueChanged)=\"onCellValueChanged($event)\"\r\n                             (columnVisible)=\"onColumnVisibilityChanged($event)\"\r\n                             [frameworkComponents]=\"gridComponents\"\r\n                             [singleClickEdit]=true\r\n                             [suppressRowClickSelection]=\"true\"\r\n                             [rowHeight]=\"atlasAgGridParam.rowHeight\">\r\n            </ag-grid-angular>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-ag-grid/new-tranche-split-ag-grid.component.scss":
/*!************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-ag-grid/new-tranche-split-ag-grid.component.scss ***!
  \************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".atlas-ag-grid {\n  height: 350px; }\n\n.atlas-ag-grid-angular {\n  max-height: 300px; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-ag-grid/new-tranche-split-ag-grid.component.ts":
/*!**********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-ag-grid/new-tranche-split-ag-grid.component.ts ***!
  \**********************************************************************************************************************************************/
/*! exports provided: NewTrancheSplitAgGridComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NewTrancheSplitAgGridComponent", function() { return NewTrancheSplitAgGridComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _execution_services_execution_cash_common_methods__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../execution/services/execution-cash-common-methods */ "./Client/app/execution/services/execution-cash-common-methods.ts");
/* harmony import */ var _shared_components_ag_grid_user_preferences_ag_grid_user_preferences_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component */ "./Client/app/shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_components_cell_editor_date_picker_cell_editor_date_picker_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/components/cell-editor-date-picker/cell-editor-date-picker.component */ "./Client/app/shared/components/cell-editor-date-picker/cell-editor-date-picker.component.ts");
/* harmony import */ var _shared_components_cell_editor_select_cell_editor_select_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/components/cell-editor-select/cell-editor-select.component */ "./Client/app/shared/components/cell-editor-select/cell-editor-select.component.ts");
/* harmony import */ var _shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/components/confirmation-dialog/confirmation-dialog.component */ "./Client/app/shared/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony import */ var _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-number.entity */ "./Client/app/shared/entities/atlas-number.entity.ts");
/* harmony import */ var _shared_entities_section_entity__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/entities/section.entity */ "./Client/app/shared/entities/section.entity.ts");
/* harmony import */ var _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/enums/contract-status.enum */ "./Client/app/shared/enums/contract-status.enum.ts");
/* harmony import */ var _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../shared/enums/invoicing-status.enum */ "./Client/app/shared/enums/invoicing-status.enum.ts");
/* harmony import */ var _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../shared/enums/section-type.enum */ "./Client/app/shared/enums/section-type.enum.ts");
/* harmony import */ var _shared_models_tranche_split_display_view__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../../shared/models/tranche-split-display-view */ "./Client/app/shared/models/tranche-split-display-view.ts");
/* harmony import */ var _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../../shared/services/ag-grid.service */ "./Client/app/shared/services/ag-grid.service.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_grid_configuration_provider_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../../../shared/services/grid-configuration-provider.service */ "./Client/app/shared/services/grid-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../../../../shared/services/ui.service */ "./Client/app/shared/services/ui.service.ts");
/* harmony import */ var _shared_components_ag_contextual_menu_ag_contextual_menu_component__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component */ "./Client/app/shared/components/ag-contextual-menu/ag-contextual-menu.component.ts");
/* harmony import */ var _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./../../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component */ "./Client/app/shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component.ts");
/* harmony import */ var _shared_entities_window_injection_token__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./../../../../../shared/entities/window-injection-token */ "./Client/app/shared/entities/window-injection-token.ts");
/* harmony import */ var _shared_services_split_create_and_allocate_service__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./../../../../../shared/services/split-create-and-allocate.service */ "./Client/app/shared/services/split-create-and-allocate.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};



























var moment = moment__WEBPACK_IMPORTED_MODULE_3__;
var NewTrancheSplitAgGridComponent = /** @class */ (function (_super) {
    __extends(NewTrancheSplitAgGridComponent, _super);
    function NewTrancheSplitAgGridComponent(route, formConfigurationProvider, splitCreateAndAllocateService, companyManager, dialog, tradingService, snackbarService, window, gridConfigurationProvider, uiService, gridService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.route = route;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.splitCreateAndAllocateService = splitCreateAndAllocateService;
        _this.companyManager = companyManager;
        _this.dialog = dialog;
        _this.tradingService = tradingService;
        _this.snackbarService = snackbarService;
        _this.window = window;
        _this.gridConfigurationProvider = gridConfigurationProvider;
        _this.uiService = uiService;
        _this.gridService = gridService;
        _this.isGridEditable = false;
        _this.isGridEditableOnCondition = false;
        _this.childQuantityTranched = new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_11__["AtlasNumber"]('0');
        _this.rowModifiedIndex = [];
        _this.shippingUserAction = 'shipping';
        _this.quantityColumn = 'quantity';
        _this.gridRowInvalidCount = 0;
        _this.shippingStartColumn = 'deliveryPeriodStartDate';
        _this.shippingEndColumn = 'deliveryPeriodEndDate';
        _this.isSplitAllocated = false;
        _this.childQuantityConsumedEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.enableProceedButton = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.newTrancheGridMenuActions = {
            addNewTranche: 'addLine',
            deleteTranche: 'delete',
        };
        _this.childSectionList = [];
        _this.componentId = 'tranchesAndSplitsGrid';
        _this.hasGridSharing = false;
        _this.maxLetter = 'Z';
        _this.recordId = 0;
        _this.quantityStyleChange = false;
        _this.disableAddNewLine = false;
        _this.isWeightConverted = false;
        _this.gridComponents = {
            atrDate: _shared_components_cell_editor_date_picker_cell_editor_date_picker_component__WEBPACK_IMPORTED_MODULE_8__["CellEditorDatePickerComponent"],
            atrSelect: _shared_components_cell_editor_select_cell_editor_select_component__WEBPACK_IMPORTED_MODULE_9__["CellEditorSelectComponent"],
        };
        return _this;
    }
    NewTrancheSplitAgGridComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.masterdata = this.route.snapshot.data.masterdata;
        this.atlasAgGridParam = this.gridService.getAgGridParam();
        this.company = this.companyManager.getCurrentCompanyId();
        this.gridContext = this;
        this.setMenuAction();
        this.childSectionList = [];
        this.recordId = 0;
        this.gridConfigurationProvider.getConfiguration(this.company, this.componentId)
            .subscribe(function (configuration) {
            // -- used later if this will become L&S maybe
            // this.columnConfiguration = configuration.columns;
            // this.configurationLoaded.emit();
            // this.initColumns(this.columnConfiguration);
            _this.hasGridSharing = configuration.hasMultipleViewsPerUser;
        });
    };
    NewTrancheSplitAgGridComponent.prototype.setMenuAction = function () {
        this.newTrancheGridContextualMenuActions = [
            {
                icon: 'delete',
                text: 'Delete',
                action: this.newTrancheGridMenuActions.deleteTranche,
            },
            {
                icon: 'add',
                text: 'Add New Line',
                disabled: this.disableAddNewLine,
                action: this.newTrancheGridMenuActions.addLine,
            },
        ];
    };
    NewTrancheSplitAgGridComponent.prototype.assignValue = function (sectionModel, sectionType) {
        this.isGridEditable = (sectionModel.allocatedTo === null);
        this.isGridEditableOnCondition = (sectionModel.allocatedTo === null);
        if ((sectionModel.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Finalized
            || sectionModel.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].FinalInvoiceRequired)
            && sectionModel.allocatedTo === null) {
            this.isGridEditable = false;
            this.isGridEditableOnCondition = true;
        }
        this.sectionType = sectionType;
        this.sectionModel = sectionModel;
        this.childSectionList = [];
        this.initTrancheSplitGridCols();
        this.parentContractId = this.sectionModel.contractId;
        this.enableProceedButton.emit(true);
        this.trancheGridOptions.api.setRowData(this.childSectionList);
    };
    NewTrancheSplitAgGridComponent.prototype.generateSectionNumberForTranche = function (latestSectionId) {
        var firstCharacter;
        var alphabetToIncrement = 'A';
        var index = 4;
        firstCharacter = latestSectionId.charAt(0);
        if (firstCharacter !== '0') {
            var incrementNumber = firstCharacter.charCodeAt(0);
            incrementNumber = incrementNumber + 1;
            alphabetToIncrement = String.fromCharCode(incrementNumber);
        }
        if (alphabetToIncrement <= 'Z') {
            return alphabetToIncrement.padEnd(index, '0');
        }
        return '';
    };
    NewTrancheSplitAgGridComponent.prototype.generateSectionNumberForSplit = function (latestSectionId) {
        var startIndex = 1;
        var endIndex = 4;
        var numberToGenerate = Number(latestSectionId.substring(startIndex, endIndex)) + 1;
        var digitsToIncrement = numberToGenerate.toString();
        digitsToIncrement = digitsToIncrement.padStart(endIndex - startIndex, '0');
        return numberToGenerate > 999 ? '' : latestSectionId.charAt(0) + digitsToIncrement;
    };
    NewTrancheSplitAgGridComponent.prototype.populateEntity = function (entity, childSections) {
        var section = entity;
        this.isValid = true;
        // tslint:disable-next-line:prefer-conditional-expression
        if (childSections) {
            section.childSections = this.getSection(this.populateChildSection(entity, childSections));
        }
        else {
            section.childSections = this.getSection(this.populateChildSection());
        }
        return section;
    };
    NewTrancheSplitAgGridComponent.prototype.populateChildSection = function (allocation, allocatedChildSections) {
        var _this = this;
        var section = allocation ? allocation : this.sectionModel;
        var child = allocatedChildSections ? allocatedChildSections : this.childSections;
        var physicalContractId = section.contractLabel.split('.')[0];
        var validationCount = 0;
        if (!this.isSplitAllocated) {
            this.childSectionList = this.childSectionList.filter(function (childSection) { return childSection.isTouched === true; });
            if (this.childSectionList.length > 0) {
                validationCount = this.childSectionList.filter(function (chidSection) {
                    return chidSection.deliveryPeriodStartDate > chidSection.deliveryPeriodEndDate;
                }).length;
            }
        }
        var childContractLabelId;
        var childSectionNumberId;
        if (validationCount === 0) {
            var sectionNumberId_1 = this.sectionType === _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_15__["SectionTypes"].Tranche ?
                this.splitCreateAndAllocateService.findLatestContractLabelForTranche(section, child) :
                this.splitCreateAndAllocateService.findLatestContractLabelForSplit(section, child);
            this.childSectionList.forEach(function (childSection) {
                childSectionNumberId = _this.sectionType === _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_15__["SectionTypes"].Tranche ?
                    _this.generateSectionNumberForTranche(sectionNumberId_1) : _this.generateSectionNumberForSplit(sectionNumberId_1);
                if (childSectionNumberId.length > 0) {
                    childContractLabelId = physicalContractId + '.' + childSectionNumberId;
                    childSection.contractLabel = childContractLabelId;
                    childSection.sectionNumber = childSectionNumberId;
                    childSection.originalQuantity = childSection.quantity;
                    sectionNumberId_1 = childSectionNumberId;
                }
                else {
                    _this.errorMessage = _this.sectionType === _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_15__["SectionTypes"].Tranche ?
                        'More than 26 Tranches not allowed' :
                        'More than 999 Split not allowed';
                    _this.isValid = false;
                }
            });
        }
        else {
            this.isValid = false;
        }
        return this.childSectionList;
    };
    NewTrancheSplitAgGridComponent.prototype.reset = function () {
        this.childSectionList = [];
        this.onCellValueChanged(this);
    };
    NewTrancheSplitAgGridComponent.prototype.ngOnDestroy = function () {
        if (this.physicalContractSectionSubscription) {
            this.physicalContractSectionSubscription.unsubscribe();
        }
    };
    NewTrancheSplitAgGridComponent.prototype.getLetterFromNumber = function (letter) {
        return letter.toLowerCase().charCodeAt(0) - 96;
    };
    NewTrancheSplitAgGridComponent.prototype.addSplitOrTranches = function (numberOfLine, userAction, isSplitAllocated, allocation, allocatedChildSections) {
        this.setMenuAction();
        this.initTrancheSplitGridCols();
        var childQuantity = 0;
        this.isSplitAllocated = isSplitAllocated;
        var trancheLength;
        // tslint:disable-next-line:prefer-conditional-expression
        if (this.isSplitAllocated) {
            trancheLength = this.splitCreateAndAllocateService.findLatestContractLabelForTranche(allocation, allocatedChildSections);
        }
        else {
            trancheLength = this.splitCreateAndAllocateService.findLatestContractLabelForTranche(this.sectionModel, this.childSections);
        }
        if (this.sectionType === _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_15__["SectionTypes"].Tranche && trancheLength.charAt(0) > this.maxLetter) {
            this.snackbarService.informationSnackBar('More than ' + this.getLetterFromNumber(this.maxLetter) +
                ' Tranches not allowed');
            return;
        }
        if (userAction === this.shippingUserAction && this.sectionType === _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_15__["SectionTypes"].Tranche) {
            this.selectedUserAction = userAction;
            childQuantity = Math.floor((this.sectionModel.quantity / numberOfLine) * 100) / 100;
        }
        var startDeliveryDate = moment(this.sectionModel.deliveryPeriodStartDate);
        for (var count = 1; count <= numberOfLine; count++) {
            if (userAction === this.shippingUserAction && count === numberOfLine && this.sectionType === _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_15__["SectionTypes"].Tranche) {
                var remainingQuantity = (this.sectionModel.quantity) - (childQuantity * (numberOfLine - 1));
                childQuantity = Math.round(remainingQuantity * 100) / 100;
            }
            this.recordId = this.recordId + 1;
            var rowDataItem = new _shared_models_tranche_split_display_view__WEBPACK_IMPORTED_MODULE_16__["TrancheSplitView"](this.sectionModel, childQuantity, this.recordId, this.sectionType);
            if (userAction === this.shippingUserAction) {
                rowDataItem.isTouched = true;
                if (count === numberOfLine) {
                    rowDataItem.deliveryPeriodStartDate = moment(rowDataItem.deliveryPeriodEndDate).startOf('month').toDate();
                }
                else if (count === 1) {
                    rowDataItem.deliveryPeriodEndDate = moment(rowDataItem.deliveryPeriodStartDate).endOf('month').toDate();
                }
                else {
                    startDeliveryDate = startDeliveryDate.add(1, 'months');
                    rowDataItem.deliveryPeriodEndDate = startDeliveryDate.endOf('month').toDate();
                    rowDataItem.deliveryPeriodStartDate = startDeliveryDate.startOf('month').toDate();
                }
            }
            this.childSectionList.push(rowDataItem);
            this.trancheGridOptions.api.updateRowData({ add: [rowDataItem] });
            this.trancheGridOptions.columnApi.autoSizeAllColumns();
        }
        if (userAction === this.shippingUserAction) {
            this.onCellValueChanged(this);
        }
    };
    NewTrancheSplitAgGridComponent.prototype.numberParser = function (params) {
        if (params.newValue) {
            var newValue = params.newValue.length > 0 ? parseFloat(params.newValue) : null;
            if (newValue) {
                return newValue;
            }
            params.newValue = 0;
            return 0;
        }
        return null;
    };
    NewTrancheSplitAgGridComponent.prototype.quantityValidation = function (val) {
        var _this = this;
        this.childQuantityTranched = new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_11__["AtlasNumber"]('0');
        this.childSectionList.forEach(function (element) {
            if (_this.sectionModel.weightUnitId === element.weightUnitId) {
                _this.childQuantityTranched.plus(new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_11__["AtlasNumber"](element.quantity.toString()));
            }
            else {
                var conversionFactor = _this.masterdata.weightUnits.find(function (commodities) {
                    return commodities.weightUnitId === element.weightUnitId;
                }).conversionFactor;
                var parentConversionFactor = _this.masterdata.weightUnits.find(function (commodities) {
                    return commodities.weightUnitId === _this.sectionModel.weightUnitId;
                }).conversionFactor;
                var convertedWeight = (element.quantity * conversionFactor) / parentConversionFactor;
                _this.childQuantityTranched.plus(new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_11__["AtlasNumber"](convertedWeight.toString()));
            }
        });
        if (this.selectedUserAction === this.shippingUserAction) {
            this.childQuantityTranched = new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_11__["AtlasNumber"](this.childQuantityTranched.toString());
        }
        var conditionToHighlight = this.sectionModel.quantity - Number(this.childQuantityTranched);
        this.quantityStyleChange = true;
        if (val === 0) {
            return 'Quantity should not be 0';
        }
        else if (this.sectionModel.quantity < Number(this.childQuantityTranched)) {
            this.quantityStyleChange = true;
            return 'Child quantity cannot be more than the parent quantity';
        }
        else if (conditionToHighlight < 0) {
            this.quantityStyleChange = true;
            return 'Total child quantity cannot be more than the parent quantity';
        }
        else {
            this.quantityStyleChange = false;
            return null;
        }
    };
    NewTrancheSplitAgGridComponent.prototype.onGridReady = function (params) {
        var _this = this;
        this.trancheGridOptions = params;
        this.trancheGridOptions.columnDefs = this.trancheGridCols;
        this.trancheGridOptions.columnApi.autoSizeAllColumns();
        window.onresize = function () {
            _this.trancheGridOptions.columnApi.autoSizeAllColumns();
        };
    };
    NewTrancheSplitAgGridComponent.prototype.onGridSizeChanged = function (params) {
        this.trancheGridOptions.columnApi.autoSizeAllColumns();
    };
    NewTrancheSplitAgGridComponent.prototype.onCellValueChanged = function (event) {
        var rowIndex = event.rowIndex;
        if (event.colDef) {
            this.childSectionList[rowIndex].isTouched = true;
            var newValue = event.newValue;
            var columnChanged = event.colDef.field;
            var oldValue = this.sectionModel[columnChanged];
            if (columnChanged !== this.quantityColumn && columnChanged !== this.shippingStartColumn && newValue !== oldValue) {
                this.childSectionList[rowIndex].status = _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_13__["ContractStatus"].Unapproved;
            }
            if ((columnChanged === this.shippingStartColumn || columnChanged === this.shippingEndColumn) && newValue !== oldValue) {
                if (this.childSectionList[rowIndex].deliveryPeriodStartDate > this.childSectionList[rowIndex].deliveryPeriodEndDate) {
                    this.snackbarService.throwErrorSnackBar('Shipping Start Date cannot be greater than Shipping End Date');
                }
            }
        }
        this.childQuantityValidation();
        if (this.rowModifiedIndex.indexOf(rowIndex) === -1) {
            this.rowModifiedIndex.push(rowIndex);
        }
    };
    NewTrancheSplitAgGridComponent.prototype.childQuantityValidation = function () {
        var _this = this;
        this.childQuantityTranched = new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_11__["AtlasNumber"]('0');
        this.childSectionList.forEach(function (element) {
            if (_this.sectionModel.weightUnitId === element.weightUnitId) {
                _this.childQuantityTranched.plus(new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_11__["AtlasNumber"](element.quantity.toString()));
            }
            else {
                var conversionFactor = _this.masterdata.weightUnits.find(function (commodities) { return commodities.weightUnitId === element.weightUnitId; }).conversionFactor;
                var parentConversionFactor = _this.masterdata.weightUnits.find(function (commodities) { return commodities.weightUnitId === _this.sectionModel.weightUnitId; }).conversionFactor;
                var convertedWeight = (element.quantity * conversionFactor) / parentConversionFactor;
                _this.childQuantityTranched.plus(new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_11__["AtlasNumber"](convertedWeight.toString()));
                _this.isWeightConverted = (Number(_this.childQuantityTranched) > _this.sectionModel.quantity) ? false : true;
            }
        });
        if (this.selectedUserAction === this.shippingUserAction) {
            this.childQuantityTranched = new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_11__["AtlasNumber"](this.childQuantityTranched.toString());
        }
        if (Number(this.childQuantityTranched) > this.sectionModel.quantity) {
            this.snackbarService.throwErrorSnackBar(this.sectionType === _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_15__["SectionTypes"].Tranche ?
                'Cannot tranche more quantity than available parent quantity' :
                'Cannot split more quantity than available parent quantity');
        }
        this.disableAddNewLine = false;
        if ((this.sectionModel.quantity - Number(this.childQuantityTranched)) <= 0) {
            this.disableAddNewLine = true;
        }
        this.setMenuAction();
        this.initTrancheSplitGridCols();
        this.childQuantityConsumedEvent.emit({
            childQuantityConsumed: Number(this.childQuantityTranched),
            isWeightConverted: this.isWeightConverted,
        });
    };
    NewTrancheSplitAgGridComponent.prototype.onQuantityCodeChanged = function (params) {
        var selectedQuantity = this.masterdata.weightUnits.find(function (e) { return e.weightUnitId === params.data.weightUnitId; });
        if (selectedQuantity) {
            this.childQuantityValidation();
        }
    };
    NewTrancheSplitAgGridComponent.prototype.initTrancheSplitGridCols = function () {
        var _this = this;
        this.trancheGridCols = [
            {
                headerName: 'Quantity',
                colId: 'quantity',
                field: 'quantity',
                type: 'numericColumn',
                editable: true,
                valueFormatter: this.quantityFormatter.bind(this),
                valueParser: this.numberParser,
                cellClassRules: {
                    'ag-grid-invalid-mandatory-field': (function () { return _this.quantityStyleChange; }),
                    'ag-grid-valid-mandatory-field': (function () { return !_this.quantityStyleChange; }),
                },
                tooltip: function (params) {
                    return _this.quantityValidation(params.value);
                },
            },
            {
                headerName: 'Quantity Code',
                colId: 'quantityCode',
                field: 'weightUnitId',
                cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_24__["AgGridAutocompleteComponent"],
                cellRendererParams: {
                    context: {
                        componentParent: this,
                        gridEditable: this.isGridEditable,
                    },
                    options: this.masterdata.weightUnits,
                    valueProperty: 'weightUnitId',
                    codeProperty: 'weightCode',
                    displayProperty: 'description',
                    displayCode: true,
                    valueIsId: true,
                    isRequired: true,
                },
                onCellValueChanged: this.onQuantityCodeChanged.bind(this),
            },
            {
                headerName: 'Shipping Period Type',
                colId: 'periodTypeCode',
                field: 'periodTypeCode',
                editable: this.isGridEditableOnCondition,
                cellEditor: 'agRichSelectCellEditor',
                cellRenderer: this.periodTypeFormatter.bind(this),
                cellEditorParams: function (params) {
                    return {
                        values: _this.masterdata.periodTypes.map(function (periodTypes) { return periodTypes.periodTypeDescription; }),
                        displayPropertyName: 'periodTypeDescription',
                        valuePropertyName: 'periodTypeCode',
                        displayFormat: 'periodTypeDescription',
                    };
                },
            },
            {
                headerName: 'Shipping Start Date',
                colId: 'shippingStartDate',
                field: 'deliveryPeriodStartDate',
                editable: this.isGridEditable,
                valueFormatter: this.uiService.dateFormatter,
                cellEditor: 'atrDate',
            },
            {
                headerName: 'Shipping End Date',
                colId: 'shippingEndDate',
                field: 'deliveryPeriodEndDate',
                editable: this.isGridEditable,
                valueFormatter: this.uiService.dateFormatter,
                cellEditor: 'atrDate',
            },
            {
                headerName: 'Commodity 1',
                colId: 'commodity',
                field: 'commodityId',
                cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_24__["AgGridAutocompleteComponent"],
                cellRendererParams: {
                    context: {
                        componentParent: this,
                        gridEditable: this.isGridEditable,
                    },
                    options: this.masterdata.commodities,
                    valueProperty: 'commodityId',
                    codeProperty: 'commodityCode',
                    displayProperty: 'commodityDescription',
                    isRequired: true,
                    displayCode: true,
                    valueIsId: true,
                },
                onCellValueChanged: function (params) {
                    params.api.refreshCells();
                },
            },
            {
                headerName: 'Commodity 2',
                field: 'commodityId',
                colId: 'commodityOrigin',
                editable: false,
                valueFormatter: this.commoditys2ValueFormatter,
            },
            {
                headerName: 'Commodity 3',
                field: 'commodityId',
                colId: 'commodityGrade',
                editable: false,
                valueFormatter: this.commoditys3ValueFormatter,
            },
            {
                headerName: 'Commodity 4',
                field: 'commodityId',
                colId: 'commodityLvl4',
                valueFormatter: this.commoditys4ValueFormatter,
                editable: false,
            },
            {
                headerName: 'Commodity 5',
                field: 'commodityId',
                colId: 'commodityLvl5',
                valueFormatter: this.commoditys5ValueFormatter,
                editable: false,
            },
            {
                headerName: 'Crop Year',
                colId: 'cropYear',
                field: 'cropYear',
                type: 'numericColumn',
                editable: this.isGridEditableOnCondition,
            },
            {
                headerName: 'Currency',
                colId: 'currency',
                field: 'currency',
                cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_24__["AgGridAutocompleteComponent"],
                cellRendererParams: {
                    context: {
                        componentParent: this,
                        gridEditable: this.isGridEditable,
                    },
                    options: this.masterdata.currencies,
                    valueProperty: 'currencyCode',
                    codeProperty: 'currencyCode',
                    displayProperty: 'description',
                    displayCode: true,
                    isRequired: true,
                },
                onCellValueChanged: function (params) {
                },
            },
            {
                headerName: 'Price Code',
                colId: 'priceCode',
                field: 'priceUnitId',
                cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_24__["AgGridAutocompleteComponent"],
                cellRendererParams: {
                    context: {
                        componentParent: this,
                        gridEditable: this.isGridEditable,
                    },
                    options: this.masterdata.priceUnits,
                    valueProperty: 'priceUnitId',
                    codeProperty: 'priceCode',
                    displayProperty: 'description',
                    displayCode: true,
                    isRequired: true,
                    valueIsId: true,
                },
                onCellValueChanged: function (params) {
                },
            },
            {
                headerName: 'Price',
                colId: 'price',
                field: 'price',
                type: 'numericColumn',
                editable: this.isGridEditable,
                valueFormatter: this.amountFormatter.bind(this),
            },
            {
                headerName: 'Port of origin',
                colId: 'portOrigin',
                field: 'portOfOrigin',
                cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_24__["AgGridAutocompleteComponent"],
                cellRendererParams: {
                    context: {
                        componentParent: this,
                        gridEditable: this.isGridEditableOnCondition,
                    },
                    options: this.masterdata.ports,
                    valueProperty: 'portCode',
                    codeProperty: 'portCode',
                    displayProperty: 'description',
                    displayCode: true,
                    isRequired: false,
                },
                onCellValueChanged: function (params) {
                },
            },
            {
                headerName: 'Port of destination',
                colId: 'portDestination',
                field: 'portOfDestination',
                cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_24__["AgGridAutocompleteComponent"],
                cellRendererParams: {
                    context: {
                        componentParent: this,
                        gridEditable: this.isGridEditableOnCondition,
                    },
                    options: this.masterdata.ports,
                    valueProperty: 'portCode',
                    codeProperty: 'portCode',
                    displayProperty: 'description',
                    displayCode: true,
                    isRequired: false,
                },
                onCellValueChanged: function (params) {
                },
            },
            {
                headerName: 'Contract Term',
                colId: 'contractTerm',
                field: 'contractTerms',
                cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_24__["AgGridAutocompleteComponent"],
                cellRendererParams: {
                    context: {
                        componentParent: this,
                        gridEditable: this.isGridEditable,
                    },
                    options: this.masterdata.contractTerms,
                    valueProperty: 'contractTermCode',
                    codeProperty: 'contractTermCode',
                    displayProperty: 'description',
                    displayCode: true,
                    isRequired: false,
                },
                onCellValueChanged: function (params) {
                },
            },
            {
                headerName: 'Contract Terms port',
                colId: 'contractTermsLocation',
                field: 'contractTermsLocation',
                cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_24__["AgGridAutocompleteComponent"],
                cellRendererParams: {
                    context: {
                        componentParent: this,
                        gridEditable: this.isGridEditableOnCondition,
                    },
                    options: this.masterdata.ports,
                    valueProperty: 'portCode',
                    codeProperty: 'portCode',
                    displayProperty: 'description',
                    displayCode: true,
                    isRequired: true,
                },
                onCellValueChanged: function (params) {
                },
            },
            {
                headerName: 'Arbitration',
                colId: 'arbitration',
                field: 'arbitration',
                cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_24__["AgGridAutocompleteComponent"],
                cellRendererParams: {
                    context: {
                        componentParent: this,
                        gridEditable: this.isGridEditableOnCondition,
                    },
                    options: this.masterdata.arbitrations,
                    valueProperty: 'arbitrationCode',
                    codeProperty: 'arbitrationCode',
                    displayProperty: 'description',
                    displayCode: true,
                },
                onCellValueChanged: function (params) {
                },
            },
            {
                headerName: 'Payment Term',
                colId: 'paymentTerms',
                field: 'paymentTerms',
                cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_24__["AgGridAutocompleteComponent"],
                cellRendererParams: {
                    context: {
                        componentParent: this,
                        gridEditable: this.isGridEditableOnCondition,
                    },
                    options: this.masterdata.paymentTerms,
                    valueProperty: 'paymentTermCode',
                    codeProperty: 'paymentTermCode',
                    displayProperty: 'description',
                    displayCode: true,
                    isRequired: true,
                },
                onCellValueChanged: function (params) {
                },
            },
            {
                headerName: 'Market Zone',
                colId: 'marketZone',
                field: 'marketSectorId',
                cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_24__["AgGridAutocompleteComponent"],
                cellRendererParams: {
                    context: {
                        componentParent: this,
                        gridEditable: this.isGridEditableOnCondition,
                    },
                    options: this.masterdata.businessSectors,
                    valueProperty: 'sectorId',
                    codeProperty: 'sectorCode',
                    displayProperty: 'description',
                    displayCode: true,
                    isRequired: false,
                    valueIsId: true,
                },
                onCellValueChanged: function (params) {
                },
            },
            {
                headerName: 'Client Reference',
                colId: 'clientReference',
                field: 'counterpartyReference',
                type: 'numericColumn',
                editable: this.isGridEditableOnCondition,
            },
            {
                headerName: '',
                cellRendererFramework: _shared_components_ag_contextual_menu_ag_contextual_menu_component__WEBPACK_IMPORTED_MODULE_23__["AgContextualMenuComponent"],
                cellRendererParams: {
                    context: {
                        componentParent: this,
                    },
                    menuActions: this.newTrancheGridContextualMenuActions,
                },
                cellClass: 'ag-contextual-menu',
                width: 80,
            },
        ];
    };
    NewTrancheSplitAgGridComponent.prototype.handleAction = function (action, tranche) {
        var _this = this;
        switch (action) {
            case this.newTrancheGridMenuActions.addLine:
                var confirmAddLineDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_10__["ConfirmationDialogComponent"], {
                    data: {
                        title: this.sectionType === _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_15__["SectionTypes"].Tranche ? 'Tranche Addition' : 'Split Addition',
                        text: this.sectionType === _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_15__["SectionTypes"].Tranche ?
                            'Are you sure you want to add a new tranche?' : 'Are you sure you want to add a new split?',
                        okButton: 'Add Line',
                        cancelButton: 'Cancel',
                    },
                });
                confirmAddLineDialog.afterClosed().subscribe(function (answer) {
                    if (answer) {
                        _this.addSplitOrTranches(1, 'addLines', false);
                    }
                });
                break;
            case this.newTrancheGridMenuActions.deleteTranche:
                var confirmDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_10__["ConfirmationDialogComponent"], {
                    data: {
                        title: this.sectionType === _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_15__["SectionTypes"].Tranche ? 'Tranche Deletion' : 'Split Deletion',
                        text: this.sectionType === _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_15__["SectionTypes"].Tranche ?
                            'Are you sure you want to delete this tranche?' : 'Are you sure you want to delete this split?',
                        okButton: 'Delete anyway',
                        cancelButton: 'Cancel',
                    },
                });
                confirmDialog.afterClosed().subscribe(function (answer) {
                    if (answer) {
                        _this.trancheGridOptions.api.updateRowData({ remove: [tranche] });
                        _this.childSectionList = _this.childSectionList.filter(function (element) { return tranche.id !== element.id; });
                        _this.onCellValueChanged(_this);
                    }
                });
                break;
            default:
                break;
        }
    };
    NewTrancheSplitAgGridComponent.prototype.getSection = function (trancheSplitList) {
        var childSectionList;
        childSectionList = [];
        trancheSplitList.forEach(function (section) {
            var childSection = new _shared_entities_section_entity__WEBPACK_IMPORTED_MODULE_12__["Section"]();
            childSection.contractType = section.contractType;
            childSection.contractLabel = section.contractLabel;
            childSection.contractId = section.contractId;
            childSection.commodityId = section.commodityId;
            childSection.sectionNumber = section.sectionNumber;
            childSection.status = section.status;
            childSection.firstApprovalDateTime = section.firstApprovalDateTime;
            childSection.departmentId = section.departmentId;
            childSection.buyerCode = section.buyerCode;
            childSection.sellerCode = section.sellerCode;
            childSection.counterpartyReference = section.counterpartyReference;
            childSection.originalQuantity = section.originalQuantity;
            childSection.quantity = section.quantity;
            childSection.portOfOrigin = section.portOfOrigin;
            childSection.portOfDestination = section.portOfDestination;
            childSection.deliveryPeriodStartDate = section.deliveryPeriodStartDate;
            childSection.deliveryPeriodEndDate = section.deliveryPeriodEndDate;
            childSection.positionMonthType = section.positionMonthType;
            childSection.positionMonthIndex = section.positionMonthIndex;
            childSection.cropYear = section.cropYear;
            childSection.packingCode = section.packingCode;
            childSection.periodTypeId = section.periodTypeId;
            childSection.contractTerms = section.contractTerms;
            childSection.contractTermsLocation = section.contractTermsLocation;
            childSection.periodTypeId = section.periodTypeId;
            childSection.arbitration = section.arbitration;
            childSection.pricingMethod = section.pricingMethod;
            childSection.paymentTerms = section.paymentTerms;
            childSection.currencyCode = section.currency;
            childSection.price = section.price;
            childSection.blDate = section.blDate;
            childSection.allocatedToId = section.allocatedToId;
            childSection.allocatedTo = section.allocatedTo;
            childSection.allocationDate = section.allocationDate;
            childSection.assignedCharterReference = section.assignedCharterReference;
            childSection.charterAssignmentDate = section.charterAssignmentDate;
            childSection.createdBy = section.createdBy;
            childSection.creationDate = section.creationDate;
            childSection.lastModifiedBy = section.lastModifiedBy;
            childSection.lastModifiedDate = section.lastModifiedDate;
            childSection.header = section.header;
            childSection.sectionOriginId = section.sectionOriginId;
            childSection.contractLabelOrigin = section.contractLabelOrigin;
            childSection.premiumDiscountValue = section.premiumDiscountValue;
            childSection.premiumDiscountCurrency = section.premiumDiscountCurrency;
            childSection.premiumDiscountBasis = section.premiumDiscountBasis;
            childSection.memorandum = section.memorandum;
            childSection.contractedValue = section.contractedValue;
            childSection.weightUnitId = section.weightUnitId;
            childSection.priceUnitId = section.priceUnitId;
            childSection.marketSectorId = section.marketSectorId;
            childSection.sectionTypeId = section.sectionTypeId;
            childSection.costs = section.costs;
            childSection.currency = section.currency;
            childSectionList.push(childSection);
        });
        return childSectionList;
    };
    NewTrancheSplitAgGridComponent.prototype.weightUnitDescriptionValueFormatter = function (params) {
        if (params) {
            var weightUnit = this.masterdata.weightUnits.find(function (weightUnits) {
                return weightUnits.weightUnitId === params;
            });
            return weightUnit.description;
        }
    };
    NewTrancheSplitAgGridComponent.prototype.periodTypeFormatter = function (params) {
        if (params.value && params.value.length === 1) {
            var periodType = params.context.masterdata.periodTypes.find(function (periodTypes) {
                return periodTypes.periodTypeCode === params.value;
            });
            params.value = (periodType ? periodType.periodTypeDescription : '');
        }
        return params.value;
    };
    NewTrancheSplitAgGridComponent.prototype.commoditys2ValueFormatter = function (params) {
        if (params.value) {
            var commodity = params.context.masterdata.commodities.find(function (commodities) {
                return commodities.commodityId === params.value;
            });
            params.value = (commodity ? commodity.commodityOrigin : '');
        }
        return params.value;
    };
    NewTrancheSplitAgGridComponent.prototype.commoditys3ValueFormatter = function (params) {
        if (params.value) {
            var commodity = params.context.masterdata.commodities.find(function (commodities) {
                return commodities.commodityId === params.value;
            });
            params.value = (commodity ? commodity.commodityGrade : '');
        }
        return params.value;
    };
    NewTrancheSplitAgGridComponent.prototype.commoditys4ValueFormatter = function (params) {
        if (params.value) {
            var commodity = params.context.masterdata.commodities.find(function (commodities) {
                return commodities.commodityId === params.value;
            });
            params.value = (commodity ? commodity.commodityLvl4 : '');
        }
        return params.value;
    };
    NewTrancheSplitAgGridComponent.prototype.commoditys5ValueFormatter = function (params) {
        if (params.value) {
            var commodity = params.context.masterdata.commodities.find(function (commodities) {
                return commodities.commodityId === params.value;
            });
            params.value = (commodity ? commodity.commodityLvl5 : '');
        }
        return params.value;
    };
    NewTrancheSplitAgGridComponent.prototype.amountFormatter = function (param) {
        if (param.value) {
            var commonMethods = new _execution_services_execution_cash_common_methods__WEBPACK_IMPORTED_MODULE_5__["CommonMethods"]();
            return commonMethods.getFormattedNumberValue(param.value, 2);
        }
    };
    NewTrancheSplitAgGridComponent.prototype.quantityFormatter = function (param) {
        if (param.value) {
            var commonMethods = new _execution_services_execution_cash_common_methods__WEBPACK_IMPORTED_MODULE_5__["CommonMethods"]();
            return commonMethods.getFormattedNumberValue(param.value, 3);
        }
    };
    NewTrancheSplitAgGridComponent.prototype.onColumnVisibilityChanged = function (col) {
        this.userPreferencesComponent.onChangeColumnVisibility(col);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('userPreferences'),
        __metadata("design:type", _shared_components_ag_grid_user_preferences_ag_grid_user_preferences_component__WEBPACK_IMPORTED_MODULE_6__["AgGridUserPreferencesComponent"])
    ], NewTrancheSplitAgGridComponent.prototype, "userPreferencesComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Array)
    ], NewTrancheSplitAgGridComponent.prototype, "childSections", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], NewTrancheSplitAgGridComponent.prototype, "childQuantityConsumedEvent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], NewTrancheSplitAgGridComponent.prototype, "enableProceedButton", void 0);
    NewTrancheSplitAgGridComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-new-tranche-split-ag-grid',
            template: __webpack_require__(/*! ./new-tranche-split-ag-grid.component.html */ "./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-ag-grid/new-tranche-split-ag-grid.component.html"),
            styles: [__webpack_require__(/*! ./new-tranche-split-ag-grid.component.scss */ "./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-ag-grid/new-tranche-split-ag-grid.component.scss")],
        }),
        __param(7, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"])(_shared_entities_window_injection_token__WEBPACK_IMPORTED_MODULE_25__["WINDOW"])),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_18__["FormConfigurationProviderService"],
            _shared_services_split_create_and_allocate_service__WEBPACK_IMPORTED_MODULE_26__["SplitCreateAndAllocateService"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_4__["CompanyManagerService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialog"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_20__["TradingService"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_21__["SnackbarService"],
            Window,
            _shared_services_grid_configuration_provider_service__WEBPACK_IMPORTED_MODULE_19__["GridConfigurationProviderService"],
            _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_22__["UiService"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_17__["AgGridService"]])
    ], NewTrancheSplitAgGridComponent);
    return NewTrancheSplitAgGridComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_7__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-footer/new-tranche-split-footer.component.html":
/*!**********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-footer/new-tranche-split-footer.component.html ***!
  \**********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\">\r\n            <atlas-form-input fxFlex=\"30%\"\r\n                              class=\"side-nav-footer-components\"\r\n                              [fieldControl]=\"parentContractNumberCtrl\"\r\n                              [isEditable]=\"isInputField\"\r\n                              label='Parent Contract Number:'>\r\n            </atlas-form-input>\r\n            <atlas-form-input fxFlex=\"30%\"\r\n                              class=\"side-nav-footer-components\"\r\n                              [fieldControl]=\"quantityConsumedCtrl\"\r\n                              [isEditable]=\"isInputField\"\r\n                              label={{quantityConsumedLabel}}>\r\n            </atlas-form-input>\r\n            <atlas-form-input fxFlex=\"30%\"\r\n                              class=\"side-nav-footer-components\"\r\n                              [fieldControl]=\"quantityAvailableCtrl\"\r\n                              [isEditable]=\"isInputField\"\r\n                              label='Quantity Available:'>\r\n            </atlas-form-input>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-footer/new-tranche-split-footer.component.scss":
/*!**********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-footer/new-tranche-split-footer.component.scss ***!
  \**********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".side-nav-footer-components {\n  color: black; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-footer/new-tranche-split-footer.component.ts":
/*!********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-footer/new-tranche-split-footer.component.ts ***!
  \********************************************************************************************************************************************/
/*! exports provided: NewTrancheSplitFooterComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NewTrancheSplitFooterComponent", function() { return NewTrancheSplitFooterComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../shared/enums/section-type.enum */ "./Client/app/shared/enums/section-type.enum.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var NewTrancheSplitFooterComponent = /** @class */ (function () {
    function NewTrancheSplitFooterComponent() {
        this.parentContractNumberCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('ParentContract');
        this.quantityConsumedCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('QuantityConsumed');
        this.isInputField = false;
        this.quantityAvailableCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('QuantityAvailable');
    }
    NewTrancheSplitFooterComponent.prototype.ngOnInit = function () {
        this.parentContractNumberCtrl.disable();
        this.quantityConsumedCtrl.disable();
        this.quantityAvailableCtrl.disable();
    };
    NewTrancheSplitFooterComponent.prototype.assignValue = function (sectionModel, sectionType) {
        this.quantityConsumedLabel = sectionType === _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_2__["SectionTypes"].Tranche ? 'Quantity Tranched:' : 'Quantity Splitted:';
        var childQuantityConsumed = 0;
        this.sectionModel = sectionModel;
        this.parentContractNumberCtrl.patchValue(this.sectionModel.contractLabel);
        this.quantityConsumedCtrl.patchValue(this.formatQuantity(childQuantityConsumed));
        this.quantityAvailableCtrl.patchValue(this.formatQuantity(this.sectionModel.quantity));
    };
    NewTrancheSplitFooterComponent.prototype.formatQuantity = function (value) {
        if (value) {
            return new Intl.NumberFormat('en-US', { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(value);
        }
        return value;
    };
    NewTrancheSplitFooterComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-new-tranche-split-footer',
            template: __webpack_require__(/*! ./new-tranche-split-footer.component.html */ "./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-footer/new-tranche-split-footer.component.html"),
            styles: [__webpack_require__(/*! ./new-tranche-split-footer.component.scss */ "./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-footer/new-tranche-split-footer.component.scss")],
        }),
        __metadata("design:paramtypes", [])
    ], NewTrancheSplitFooterComponent);
    return NewTrancheSplitFooterComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-header/new-tranche-split-header.component.html":
/*!**********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-header/new-tranche-split-header.component.html ***!
  \**********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div fxLayout=\"row\"\r\n     fxLayoutAlign=\"space-between center\">\r\n    <div fxLayout=\"column\"\r\n         fxLayoutAlign=\"start start\">\r\n        <h1>{{title}} Creation</h1>\r\n    </div>\r\n    <div *ngIf=\"isSectionTypeTranche\"\r\n         fxLayout=\"column\"\r\n         fxLayoutAlign=\"start end\">\r\n        <div fxLayout=\"row \"\r\n             fxLayoutAlign=\"end start \">\r\n            <div class=\"toggle\">\r\n                <span class=\"atlas-toggle-span\">Automatically tranche based on shipping delivery</span>\r\n                <mat-slide-toggle mat-raised-button\r\n                                  (change)=\"toggleBasedOnShippingDelivery()\">\r\n                </mat-slide-toggle>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div fxLayout=\"row\"\r\n     fxLayoutAlign=\"start center\"\r\n     fxLayoutGap=\"10px\"\r\n     class=\"add-line-container\">\r\n    <div fxLayout=\"column\"\r\n         fxLayoutAlign=\"start start\">\r\n        <h6 class=\"no-margin\">Add new lines:</h6>\r\n    </div>\r\n    <div fxLayout=\"column\"\r\n         fxLayoutAlign=\"start start\"\r\n         fxFlex=\"4\">\r\n        <mat-form-field>\r\n            <input matInput\r\n                   [formControl]=\"addNewLineCtrl\">\r\n        </mat-form-field>\r\n    </div>\r\n    <div fxLayout=\"column\"\r\n         fxLayoutAlign=\"start start\">\r\n        <button mat-button\r\n                [disabled]=\"!showAddline\"\r\n                (click)=\"onProceedButtonClicked()\">Proceed</button>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-header/new-tranche-split-header.component.scss":
/*!**********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-header/new-tranche-split-header.component.scss ***!
  \**********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".atlas-toggle-span {\n  margin-right: 12px; }\n\nmat-card > .toggle {\n  float: right; }\n\nh1 {\n  -webkit-margin-before: 0em !important;\n          margin-block-start: 0em !important;\n  -webkit-margin-after: 0em !important;\n          margin-block-end: 0em !important; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-header/new-tranche-split-header.component.ts":
/*!********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-header/new-tranche-split-header.component.ts ***!
  \********************************************************************************************************************************************/
/*! exports provided: NewTrancheSplitHeaderComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NewTrancheSplitHeaderComponent", function() { return NewTrancheSplitHeaderComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../shared/enums/section-type.enum */ "./Client/app/shared/enums/section-type.enum.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var NewTrancheSplitHeaderComponent = /** @class */ (function () {
    function NewTrancheSplitHeaderComponent() {
        this.addSplitOrTranchesEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.newTrancheShippingEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.addNewLineCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('', 1);
        this.toggleShippingDeliveryCtrl = false;
        this.isSectionTypeTranche = false;
        this.showAddline = false;
    }
    NewTrancheSplitHeaderComponent.prototype.ngOnInit = function () {
    };
    NewTrancheSplitHeaderComponent.prototype.assignSectionType = function (sectionType) {
        this.title = 'Split';
        this.isSectionTypeTranche = false;
        if (sectionType === _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_2__["SectionTypes"].Tranche) {
            this.isSectionTypeTranche = true;
            this.title = 'Tranche';
        }
    };
    NewTrancheSplitHeaderComponent.prototype.toggleBasedOnShippingDelivery = function () {
        this.toggleShippingDeliveryCtrl = !this.toggleShippingDeliveryCtrl;
        this.newTrancheShippingEvent.emit(this.toggleShippingDeliveryCtrl);
    };
    NewTrancheSplitHeaderComponent.prototype.onProceedButtonClicked = function () {
        this.addSplitOrTranchesEvent.emit(this.addNewLineCtrl.value);
        this.addNewLineCtrl.patchValue('');
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], NewTrancheSplitHeaderComponent.prototype, "addSplitOrTranchesEvent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], NewTrancheSplitHeaderComponent.prototype, "newTrancheShippingEvent", void 0);
    NewTrancheSplitHeaderComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-new-tranche-split-header',
            template: __webpack_require__(/*! ./new-tranche-split-header.component.html */ "./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-header/new-tranche-split-header.component.html"),
            styles: [__webpack_require__(/*! ./new-tranche-split-header.component.scss */ "./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-header/new-tranche-split-header.component.scss")],
        }),
        __metadata("design:paramtypes", [])
    ], NewTrancheSplitHeaderComponent);
    return NewTrancheSplitHeaderComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/section-tab/physical-contract-capture-form-section-tab.component.html":
/*!***************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/section-tab/physical-contract-capture-form-section-tab.component.html ***!
  \***************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div fxLayout=\"row\"\r\n     fxLayout.md=\"column\"\r\n     fxLayoutAlign=\"end\">\r\n\r\n    <div fxLayout=\"row\"\r\n         fxLayoutAlign=\"end\"\r\n         fxFlex=\"32\">\r\n        <span matTooltip={{toolTipMerge}}>\r\n            <button mat-button\r\n                    *ifAuthorized=\"'Trades.Physicals.Merge',company:this.company\"\r\n                    [disabled]=\"disableTradeMerge\"\r\n                    (click)=\"onMergeButtonClicked()\">MERGE\r\n            </button>\r\n        </span>\r\n        <span matTooltip={{toolTipSplit}}>\r\n            <button mat-button\r\n                    *ngIf=\"!isCreateMode\"\r\n                    [disabled]=\"disableCreateSplit || isSnapshot\"\r\n                    (click)=\"onUpdateSplitTranchesButtonClicked()\">UPDATE\r\n                SPLITS & TRANCHES</button>\r\n        </span>\r\n        <span matTooltip={{toolTipSplit}}>\r\n            <button mat-button\r\n                    *ifAuthorized=\"'Trades.Physicals.CreateTrancheSplit',company:this.company\"\r\n                    [disabled]=\"disableCreateSplit || isSnapshot ||!trancheSplitPrivilege\"\r\n                    (click)=\"onSplitSideNavOpenClicked();\">CREATE\r\n                SPLIT</button>\r\n        </span>\r\n        <span matTooltip={{toolTipTranche}}>\r\n            <button mat-button\r\n                    *ifAuthorized=\"'Trades.Physicals.CreateTrancheSplit',company:this.company\"\r\n                    [disabled]=\"disableCreateTranche || isSnapshot||!trancheSplitPrivilege\"\r\n                    (click)=\"onTrancheSideNavOpenClicked();\">CREATE\r\n                TRANCHE</button>\r\n        </span>\r\n    </div>\r\n</div>\r\n<atlas-tranche-split-grid [childSectionsSearchResult]=\"childSectionsSearchResult\"\r\n                          #TranceSplitGridFormComponent></atlas-tranche-split-grid>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/section-tab/physical-contract-capture-form-section-tab.component.scss":
/*!***************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/section-tab/physical-contract-capture-form-section-tab.component.scss ***!
  \***************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".physical-section-tab {\n  padding-top: 16px; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/section-tab/physical-contract-capture-form-section-tab.component.ts":
/*!*************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/section-tab/physical-contract-capture-form-section-tab.component.ts ***!
  \*************************************************************************************************************************************/
/*! exports provided: PhysicalContractCaptureFormSectionTabComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PhysicalContractCaptureFormSectionTabComponent", function() { return PhysicalContractCaptureFormSectionTabComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../shared/enums/invoice-type.enum */ "./Client/app/shared/enums/invoice-type.enum.ts");
/* harmony import */ var _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../shared/enums/invoicing-status.enum */ "./Client/app/shared/enums/invoicing-status.enum.ts");
/* harmony import */ var _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../shared/enums/section-type.enum */ "./Client/app/shared/enums/section-type.enum.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
/* harmony import */ var _services_trade_actions_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../services/trade-actions.service */ "./Client/app/trading/services/trade-actions.service.ts");
/* harmony import */ var _form_components_tranche_split_grid_tranche_split_grid_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../form-components/tranche-split-grid/tranche-split-grid.component */ "./Client/app/trading/components/contract-physical-capture/form-components/tranche-split-grid/tranche-split-grid.component.ts");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};













var PhysicalContractCaptureFormSectionTabComponent = /** @class */ (function (_super) {
    __extends(PhysicalContractCaptureFormSectionTabComponent, _super);
    function PhysicalContractCaptureFormSectionTabComponent(route, formConfigurationProvider, formBuilder, router, tradeActionsService, tradingService, securityService, authorizationService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.route = route;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.formBuilder = formBuilder;
        _this.router = router;
        _this.tradeActionsService = tradeActionsService;
        _this.tradingService = tradingService;
        _this.securityService = securityService;
        _this.authorizationService = authorizationService;
        _this.disableCreateSplit = false;
        _this.disableCreateTranche = false;
        _this.disableTradeMerge = false;
        _this.isSnapshot = false;
        _this.isCreateMode = true;
        _this.toolTipSplit = '';
        _this.toolTipTranche = '';
        _this.toolTipMerge = '';
        _this.newSplitTrancheSideNavEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.formComponents = [];
        _this.trancheSplitPrivilege = false;
        return _this;
    }
    PhysicalContractCaptureFormSectionTabComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.company = this.route.snapshot.params['company'];
        var dataVersionId = this.route.snapshot.params['dataVersionId'];
        if (dataVersionId) {
            this.isSnapshot = true;
        }
        this.subscriptions.push(this.tradeActionsService.trancheSectionSubject.subscribe(function () {
            _this.onTrancheSideNavOpenClicked();
        }));
        this.subscriptions.push(this.tradeActionsService.splitSectionSubject.subscribe(function () {
            _this.onSplitSideNavOpenClicked();
        }));
        this.formComponents.push(this.TranceSplitGridFormComponent);
        this.checkTradePrivilege();
    };
    PhysicalContractCaptureFormSectionTabComponent.prototype.checkTradePrivilege = function () {
        var _this = this;
        this.securityService.isSecurityReady().subscribe(function () {
            if (_this.authorizationService.isPrivilegeAllowed(_this.company, 'Trades')
                && _this.authorizationService.isPrivilegeAllowed(_this.company, 'Physicals')) {
                _this.trancheSplitPrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'CreateTrancheSplit');
            }
        });
    };
    PhysicalContractCaptureFormSectionTabComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            tranceSplitGridFormComponent: this.TranceSplitGridFormComponent.getFormGroup(),
        });
        return _super.prototype.getFormGroup.call(this);
    };
    PhysicalContractCaptureFormSectionTabComponent.prototype.initForm = function (entity, isEdit) {
        var _this = this;
        this.isCreateMode = false;
        this.formComponents.forEach(function (comp) {
            entity = comp.initForm(entity, isEdit);
        });
        this.model = entity;
        if (this.model.quantity <= 0) {
            this.disableCreateSplit = true;
            this.toolTipSplit = 'Contract cannot be splitted when quantity is equal to 0';
        }
        if (this.model.quantity <= 0) {
            this.disableCreateTranche = true;
            this.toolTipTranche = 'Contract cannot be tranched when quantity is equal to 0';
        }
        if (this.model.allocatedToId != null) {
            this.disableCreateTranche = true;
            this.toolTipTranche = 'Contract cannot be tranched when it is allocated';
        }
        if (this.model.allocatedTo &&
            this.model.invoiceReference &&
            this.model.invoiceTypeId === _shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_4__["InvoiceTypes"].Washout &&
            this.model.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_5__["InvoicingStatus"].Finalized &&
            this.model.allocatedTo.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_5__["InvoicingStatus"].Finalized) {
            this.disableCreateSplit = true;
            this.toolTipSplit = 'Contract cannot be splitted when it is allocated and Washout Invoiced';
        }
        if (this.model.sectionId && this.model.dataVersionId) {
            this.subscriptions.push(this.tradingService.getContextualDataForContractMerge(this.model.sectionId, this.model.dataVersionId).subscribe(function (data) {
                if (data) {
                    _this.disableTradeMerge = !(data.isAllowed);
                    _this.toolTipMerge = data.message;
                }
            }));
        }
        if ((this.model.quantity > 0) && (this.model.isClosed)) {
            this.disableCreateSplit = true;
            this.disableCreateTranche = true;
        }
        return entity;
    };
    PhysicalContractCaptureFormSectionTabComponent.prototype.onTrancheSideNavOpenClicked = function () {
        this.sideNavOpened = _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_6__["SectionTypes"].Tranche;
        this.newSplitTrancheSideNavEvent.emit(this.sideNavOpened);
    };
    PhysicalContractCaptureFormSectionTabComponent.prototype.onSplitSideNavOpenClicked = function () {
        this.sideNavOpened = _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_6__["SectionTypes"].Split;
        this.newSplitTrancheSideNavEvent.emit(this.sideNavOpened);
    };
    PhysicalContractCaptureFormSectionTabComponent.prototype.contractStatusChanged = function (contractStatus) {
        this.TranceSplitGridFormComponent.contractStatusChanged(contractStatus);
    };
    PhysicalContractCaptureFormSectionTabComponent.prototype.onTabSelected = function () {
        this.TranceSplitGridFormComponent.onTabActive();
    };
    PhysicalContractCaptureFormSectionTabComponent.prototype.onMergeButtonClicked = function () {
        this.router.navigate(['/' + this.company + '/trades/tradeMerge/'
                + encodeURIComponent(String(this.model.sectionId))]);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Array)
    ], PhysicalContractCaptureFormSectionTabComponent.prototype, "childSectionsSearchResult", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], PhysicalContractCaptureFormSectionTabComponent.prototype, "newSplitTrancheSideNavEvent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('TranceSplitGridFormComponent'),
        __metadata("design:type", _form_components_tranche_split_grid_tranche_split_grid_component__WEBPACK_IMPORTED_MODULE_11__["TrancheSplitGridComponent"])
    ], PhysicalContractCaptureFormSectionTabComponent.prototype, "TranceSplitGridFormComponent", void 0);
    PhysicalContractCaptureFormSectionTabComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-physical-contract-capture-form-section-tab',
            template: __webpack_require__(/*! ./physical-contract-capture-form-section-tab.component.html */ "./Client/app/trading/components/contract-physical-capture/section-tab/physical-contract-capture-form-section-tab.component.html"),
            styles: [__webpack_require__(/*! ./physical-contract-capture-form-section-tab.component.scss */ "./Client/app/trading/components/contract-physical-capture/section-tab/physical-contract-capture-form-section-tab.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"], _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_7__["FormConfigurationProviderService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            _services_trade_actions_service__WEBPACK_IMPORTED_MODULE_10__["TradeActionsService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_8__["TradingService"],
            _shared_services_security_service__WEBPACK_IMPORTED_MODULE_9__["SecurityService"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_12__["AuthorizationService"]])
    ], PhysicalContractCaptureFormSectionTabComponent);
    return PhysicalContractCaptureFormSectionTabComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/status-tab/physical-contract-capture-form-status-tab.component.html":
/*!*************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/status-tab/physical-contract-capture-form-status-tab.component.html ***!
  \*************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<!-- Layout divided by column -->\r\n<!-- container -->\r\n<div fxLayout=\"row\"\r\n     fxLayout.md=\"column\"\r\n     fxLayoutAlign=\"space-around start\"\r\n     class=\"status-tab-main\">\r\n    <!--left-->\r\n    <div fxLayout=\"column\"\r\n         fxLayoutAlign=\"start left\"\r\n         fxFlex=\"48\">\r\n        <atlas-allocation-info-form-component #AllocationInfoFormComponentComponent></atlas-allocation-info-form-component>\r\n        <atlas-cash-against-invoice-form-component #CashAgainstInvoiceFormComponentComponent></atlas-cash-against-invoice-form-component>\r\n        <atlas-document-status-form-component #DocumentStatusFormComponentComponent></atlas-document-status-form-component>\r\n    </div>\r\n    <div fxLayout=\"column\"\r\n         fxLayoutAlign=\"start right\"\r\n         fxFlex=\"48\">\r\n        <atlas-invoicing-form-component #InvoicingFormComponentComponent></atlas-invoicing-form-component>\r\n        <atlas-charter-form-component #CharterFormComponentComponent></atlas-charter-form-component>\r\n        <atlas-amendment-audit-form-component #AmendmentAuditFormComponentComponent></atlas-amendment-audit-form-component>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/status-tab/physical-contract-capture-form-status-tab.component.scss":
/*!*************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/status-tab/physical-contract-capture-form-status-tab.component.scss ***!
  \*************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".status-tab-main::ng-deep .mat-form-field-underline {\n  display: none; }\n\n.status-tab-main h6 {\n  margin: 0; }\n\n.status-tab-main h4 {\n  margin: 0; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/status-tab/physical-contract-capture-form-status-tab.component.ts":
/*!***********************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/status-tab/physical-contract-capture-form-status-tab.component.ts ***!
  \***********************************************************************************************************************************/
/*! exports provided: PhysicalContractCaptureFormStatusTabComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PhysicalContractCaptureFormStatusTabComponent", function() { return PhysicalContractCaptureFormStatusTabComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _form_components_allocation_info_form_component_allocation_info_form_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../form-components/allocation-info-form-component/allocation-info-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/allocation-info-form-component/allocation-info-form-component.component.ts");
/* harmony import */ var _form_components_amendment_audit_form_component_amendment_audit_form_component_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../form-components/amendment-audit-form-component/amendment-audit-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/amendment-audit-form-component/amendment-audit-form-component.component.ts");
/* harmony import */ var _form_components_cash_against_invoice_form_component_cash_against_invoice_form_component_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../form-components/cash-against-invoice-form-component/cash-against-invoice-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/cash-against-invoice-form-component/cash-against-invoice-form-component.component.ts");
/* harmony import */ var _form_components_charter_form_component_charter_form_component_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../form-components/charter-form-component/charter-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/charter-form-component/charter-form-component.component.ts");
/* harmony import */ var _form_components_document_status_form_component_document_status_form_component_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../form-components/document-status-form-component/document-status-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/document-status-form-component/document-status-form-component.component.ts");
/* harmony import */ var _form_components_invoicing_form_component_invoicing_form_component_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../form-components/invoicing-form-component/invoicing-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/invoicing-form-component/invoicing-form-component.component.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};










var PhysicalContractCaptureFormStatusTabComponent = /** @class */ (function (_super) {
    __extends(PhysicalContractCaptureFormStatusTabComponent, _super);
    function PhysicalContractCaptureFormStatusTabComponent(formConfigurationProvider, formBuilder) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.formBuilder = formBuilder;
        _this.formComponents = [];
        return _this;
    }
    PhysicalContractCaptureFormStatusTabComponent.prototype.ngOnInit = function () {
        this.formComponents.push(this.charterComponent, this.allocationInfoComponent, this.amendmentAuditComponent, this.documentStatusComponent, this.invoicingComponent, this.cashAgainstInvoiceComponent);
    };
    PhysicalContractCaptureFormStatusTabComponent.prototype.initForm = function (entity, isEdit) {
        this.formComponents.forEach(function (comp) {
            comp.initForm(entity, isEdit);
        });
        return entity;
    };
    PhysicalContractCaptureFormStatusTabComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            charterGroup: this.charterComponent.getFormGroup(),
            allocationGroup: this.allocationInfoComponent.getFormGroup(),
            amendmentGroup: this.amendmentAuditComponent.getFormGroup(),
            cashGroup: this.cashAgainstInvoiceComponent.getFormGroup(),
            documentGroup: this.documentStatusComponent.getFormGroup(),
            invoiceGroup: this.invoicingComponent.getFormGroup(),
        });
        return _super.prototype.getFormGroup.call(this);
    };
    PhysicalContractCaptureFormStatusTabComponent.prototype.populateEntity = function (entity) {
        this.formComponents.forEach(function (comp) {
            entity = comp.populateEntity(entity);
        });
        return entity;
    };
    PhysicalContractCaptureFormStatusTabComponent.prototype.totalValuesCalculated = function (model) {
        this.invoicingComponent.totalValuesCalculated(model);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('AllocationInfoFormComponentComponent'),
        __metadata("design:type", _form_components_allocation_info_form_component_allocation_info_form_component_component__WEBPACK_IMPORTED_MODULE_4__["AllocationInfoFormComponentComponent"])
    ], PhysicalContractCaptureFormStatusTabComponent.prototype, "allocationInfoComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('AmendmentAuditFormComponentComponent'),
        __metadata("design:type", _form_components_amendment_audit_form_component_amendment_audit_form_component_component__WEBPACK_IMPORTED_MODULE_5__["AmendmentAuditFormComponentComponent"])
    ], PhysicalContractCaptureFormStatusTabComponent.prototype, "amendmentAuditComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('CashAgainstInvoiceFormComponentComponent'),
        __metadata("design:type", _form_components_cash_against_invoice_form_component_cash_against_invoice_form_component_component__WEBPACK_IMPORTED_MODULE_6__["CashAgainstInvoiceFormComponentComponent"])
    ], PhysicalContractCaptureFormStatusTabComponent.prototype, "cashAgainstInvoiceComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('CharterFormComponentComponent'),
        __metadata("design:type", _form_components_charter_form_component_charter_form_component_component__WEBPACK_IMPORTED_MODULE_7__["CharterFormComponentComponent"])
    ], PhysicalContractCaptureFormStatusTabComponent.prototype, "charterComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('DocumentStatusFormComponentComponent'),
        __metadata("design:type", _form_components_document_status_form_component_document_status_form_component_component__WEBPACK_IMPORTED_MODULE_8__["DocumentStatusFormComponentComponent"])
    ], PhysicalContractCaptureFormStatusTabComponent.prototype, "documentStatusComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('InvoicingFormComponentComponent'),
        __metadata("design:type", _form_components_invoicing_form_component_invoicing_form_component_component__WEBPACK_IMPORTED_MODULE_9__["InvoicingFormComponentComponent"])
    ], PhysicalContractCaptureFormStatusTabComponent.prototype, "invoicingComponent", void 0);
    PhysicalContractCaptureFormStatusTabComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-physical-contract-capture-form-status-tab',
            template: __webpack_require__(/*! ./physical-contract-capture-form-status-tab.component.html */ "./Client/app/trading/components/contract-physical-capture/status-tab/physical-contract-capture-form-status-tab.component.html"),
            styles: [__webpack_require__(/*! ./physical-contract-capture-form-status-tab.component.scss */ "./Client/app/trading/components/contract-physical-capture/status-tab/physical-contract-capture-form-status-tab.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_3__["FormConfigurationProviderService"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"]])
    ], PhysicalContractCaptureFormStatusTabComponent);
    return PhysicalContractCaptureFormStatusTabComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_2__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/trade-capture-page.component.html":
/*!***************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/trade-capture-page.component.html ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-sidenav-container>\r\n    <mat-sidenav #sidenav\r\n                 class=\"side-nav-screen\"\r\n                 position=\"end\"\r\n                 mode=\"over\"\r\n                 [(opened)]=\"sideNavOpened\"\r\n                 (openedChange)=\"onSplitTranchesSideNavOpenedChanged($event)\">\r\n        <div class=\"atr-sidenav-margin\">\r\n            <atlas-new-tranche-split-header #newTrancheSplitHeaderComponent\r\n                                            (addSplitOrTranchesEvent)=\"addSplitOrTranchesCalled($event)\"\r\n                                            (newTrancheShippingEvent)=\"newTrancheShippingCalled($event)\">\r\n            </atlas-new-tranche-split-header>\r\n            <atlas-new-tranche-split-ag-grid #newTrancheSplitAgGridComponent\r\n                                             [childSections]=\"childSectionsSearchResult\"\r\n                                             (childQuantityConsumedEvent)=\"childQuantityConsumedCalled($event)\"\r\n                                             (enableProceedButton)=\"enableProceedButtonCalled($event)\">\r\n            </atlas-new-tranche-split-ag-grid>\r\n            <atlas-new-tranche-split-footer #newTrancheSplitFooterComponent></atlas-new-tranche-split-footer>\r\n\r\n            <div fxLayout=\"row\"\r\n                 fxLayoutAlign=\"space-between center\">\r\n                <div fxLayout=\"column\"\r\n                     fxLayoutAlign=\"start start\">\r\n                    <button mat-button\r\n                            type=\"button\"\r\n                            (click)=\"onDiscardButtonClick()\">\r\n                        DISCARD\r\n                    </button>\r\n                </div>\r\n                <div fxLayout=\"column\"\r\n                     fxLayoutAlign=\"start end\">\r\n                    <div fxLayout=\"row\"\r\n                         fxLayoutAlign=\"end start\">\r\n                        <button mat-raised-button\r\n                                type=\"button\"\r\n                                (click)=\"onSideNavSaveButtonClick()\">\r\n                            SAVE\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </mat-sidenav>\r\n\r\n    <mat-sidenav-content>\r\n        <div *ngIf=\"isLoading\">\r\n\r\n            <mat-card>\r\n                <h2>Loading</h2>\r\n                <div class=\"custom-line-title\"></div>\r\n\r\n                <div fxLayout=\"row\"\r\n                     fxLayoutAlign=\"center center\"\r\n                     fxLayoutWrap\r\n                     fxLayoutGap=\"20px\">\r\n                    <mat-spinner color=\"accent\"></mat-spinner>\r\n                </div>\r\n            </mat-card>\r\n        </div>\r\n        <form [ngClass]=\"{'hidden-during-loading':isLoading}\"\r\n              [formGroup]=\"captureFormGroup\">\r\n            <atlas-header-form-component (contractTypeSelected)=\"contractTypeSelected($event)\"\r\n                                         (contractDateSelected)=\"contractDateSelected($event)\"\r\n                                         #headerComponent></atlas-header-form-component>\r\n\r\n            <atlas-trade-management-menu-bar *ngIf=\"isShow\"\r\n                                             [currentSection]=\"sectionModel\"\r\n                                             [menuDisable]=\"isEdit || !editAllowed\"\r\n                                             [(index)]=\"selectedTab\"\r\n                                             #tradeManagementMenuBarComponent\r\n                                             (showDiscard)=\"onShowDiscard()\"\r\n                                             (showSave)=\"onShowSave()\"\r\n                                             [isIntercoCounterparty]=\"isValidIntercoCounterparty\"\r\n                                             [companiesForInterco]=\"counterpartyCompaniesForManaulInterco\"\r\n                                             (manualIntercoCreation)=\"onManualIntercoCreation($event)\">\r\n            </atlas-trade-management-menu-bar>\r\n            <atlas-floating-action-button [fabTitle]=\"fabTitle\"\r\n                                          [fabType]=\"fabType\"\r\n                                          [fabActions]=\"fabMenuActions\"\r\n                                          [isParentLoaded]=\"!isLoading\"\r\n                                          [fabActionsDisabled]=\"saveInProgress\"\r\n                                          (fabActionClicked)=\"onFabActionClicked($event)\">\r\n            </atlas-floating-action-button>\r\n\r\n            <div class=\"main-container\">\r\n                <main>\r\n                    <div *ifAuthorized=\"'Trades.Physicals.AllocateDeallocate',company:company\">\r\n                        <mat-card *ngIf=\"isApprovalBannerDisplayed\"\r\n                                  class=\"trade-approval-success-banner information-banner-card\"\r\n                                  fxLayoutAlign=\"start center\">\r\n                            <div class=\"success-circle-icon\">\r\n                                <mat-icon>check</mat-icon>\r\n                            </div>\r\n                            <mat-card-header fxFlex=\"fill\">\r\n                                <mat-card-title>\r\n                                    Your contract has been approved\r\n                                </mat-card-title>\r\n                                <mat-card-subtitle\r\n                                                   *ifAuthorized=\"'Trades.Physicals.GenerateContractAdvice',company:company\">\r\n                                    Do you want to generate a contract advice ?\r\n                                </mat-card-subtitle>\r\n                            </mat-card-header>\r\n                            <div class=\"button-container\"\r\n                                 fxFlex=\"280px\"\r\n                                 fxLayoutGap=\"8px\"\r\n                                 *ifAuthorized=\"'Trades.Physicals.GenerateContractAdvice',company:company\">\r\n                                <button mat-button\r\n                                        type=\"button\"\r\n                                        (click)=\"onGenerateButtonClicked()\">generate</button>\r\n                                <button mat-button\r\n                                        type=\"button\"\r\n                                        (click)=\"onCloseApprovalBannerClicked()\">no thanks</button>\r\n                            </div>\r\n                        </mat-card>\r\n                    </div>\r\n\r\n                    <mat-tab-group dynamicHeight\r\n                                   (selectedTabChange)=\"getPosition($event)\"\r\n                                   [(selectedIndex)]=selectedTab\r\n                                   class=\"bright-tab\">\r\n                        <mat-tab label=\"MAIN\"\r\n                                 [disabled]=\"(isClosed && isEdit) || (isSectionCancelled  && isEdit)\">\r\n                            <atlas-physical-contract-capture-form-main-tab #mainTabComponent\r\n                                                                           (updateTrafficTabQuantity)=\"updateTrafficTabQuantity($event)\"\r\n                                                                           (commodityBlockOrWarnMessage)=\"commodityBlockOrWarnMessage($event)\"\r\n                                                                           (portWarningMessage)=\"portWarningMessage($event)\">\r\n                            </atlas-physical-contract-capture-form-main-tab>\r\n                        </mat-tab>\r\n                        <mat-tab label=\"COSTS\"\r\n                                 [disabled]=\"(isClosed && isEdit)\">\r\n                            <atlas-physical-contract-capture-form-costs-tab #costsTabComponent\r\n                                                                            (noOfZeroCostRow)=\"zeroCosRowWarning($event)\"\r\n                                                                            [commodityFormGroup]=\"captureFormGroup\"\r\n                                                                            (costInvoiced)=\"invoicePercentOfCost($event)\">\r\n                            </atlas-physical-contract-capture-form-costs-tab>\r\n                        </mat-tab>\r\n                        <mat-tab label=\"STATUS\"\r\n                                 [disabled]=\"(!isShow && !isEdit)|| isTradeImage || (isClosed && isEdit) || (isSectionCancelled  && isEdit)\">\r\n                            <atlas-physical-contract-capture-form-status-tab #statusTabComponent>\r\n                            </atlas-physical-contract-capture-form-status-tab>\r\n                        </mat-tab>\r\n                        <mat-tab label=\"TRAFFIC\"\r\n                                 [disabled]=\"(!isShow && !isEdit) || isTradeImage || (isClosed && isEdit) || (isSectionCancelled  && isEdit)\">\r\n                            <atlas-physical-contract-capture-form-traffic-tab #trafficTabComponent\r\n                                                                              (quantityValueUpdate)=\"quantityValueUpdate($event)\"\r\n                                                                              (blDateUpdate)=\"onBlDateUpdated($event)\"\r\n                                                                              (shipmentStatusUpdate)=\"onShipmentStatusUpdate($event)\">\r\n                            </atlas-physical-contract-capture-form-traffic-tab>\r\n                        </mat-tab>\r\n                        <mat-tab label=\"SECTION\"\r\n                                 [disabled]=\"(!isShow && !isEdit)  || isTradeImage || (isClosed && isEdit) || (isSectionCancelled  && isEdit)\">\r\n                            <atlas-physical-contract-capture-form-section-tab #sectionTabComponent\r\n                                                                              (newSplitTrancheSideNavEvent)=\"sideNavChangeCalled($event)\"\r\n                                                                              [childSectionsSearchResult]=\"childSectionsSearchResult\">\r\n                            </atlas-physical-contract-capture-form-section-tab>\r\n                        </mat-tab>\r\n                        <mat-tab label=\"INVOICE MARKING\"\r\n                                 [disabled]=\"(!isShow && !isEdit) ||isTradeImage || (isClosed && isEdit) || (isSectionCancelled  && isEdit)\">\r\n                            <atlas-physical-contract-capture-form-invoice-marking-tab #invoiceMarkingTabComponent\r\n                                                                                      (setCashMatchDate)=\"setCashMatchDate($event)\"\r\n                                                                                      (totalValuesCalculated)=\"onTotalValuesCalculated($event)\"\r\n                                                                                      (totalInvoicePercent)=\"onTotalInvoiceValue($event)\">\r\n                            </atlas-physical-contract-capture-form-invoice-marking-tab>\r\n                        </mat-tab>\r\n                    </mat-tab-group>\r\n                </main>\r\n\r\n            </div>\r\n        </form>\r\n    </mat-sidenav-content>\r\n    <atlas-lock-interval [resourcesInformation]=\"resourcesInformation\">\r\n    </atlas-lock-interval>\r\n</mat-sidenav-container>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/trade-capture-page.component.scss":
/*!***************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/trade-capture-page.component.scss ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".example-card {\n  max-width: 100%; }\n\n.no-margin {\n  margin: 0; }\n\n.data-label {\n  color: #928D8F; }\n\n.side-nav-screen {\n  width: calc(100% - 64px);\n  height: calc(100vh - 53px);\n  top: 56px; }\n\n.atr-sidenav-margin {\n  margin: 16px; }\n\n.isLoading {\n  width: 0;\n  height: 0; }\n\n.trade-approval-success-banner button {\n  margin: 0; }\n\n.trade-approval-success-banner .mat-card-title {\n  margin-bottom: 8px; }\n\n.trade-approval-success-banner .mat-card-subtitle {\n  margin-bottom: 0px; }\n\n.mat-toolbar {\n  margin-top: 13px; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/trade-capture-page.component.ts":
/*!*************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/trade-capture-page.component.ts ***!
  \*************************************************************************************************/
/*! exports provided: TradeCapturePageComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeCapturePageComponent", function() { return TradeCapturePageComponent; });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var text_mask_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! text-mask-core */ "./node_modules/text-mask-core/dist/textMaskCore.js");
/* harmony import */ var text_mask_core__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(text_mask_core__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../shared/components/confirmation-dialog/confirmation-dialog.component */ "./Client/app/shared/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony import */ var _shared_components_floating_action_button_floating_action_button_type_enum__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../shared/components/floating-action-button/floating-action-button-type.enum */ "./Client/app/shared/components/floating-action-button/floating-action-button-type.enum.ts");
/* harmony import */ var _shared_entities_allocate_section_entity__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../shared/entities/allocate-section.entity */ "./Client/app/shared/entities/allocate-section.entity.ts");
/* harmony import */ var _shared_entities_interco_validation_entity__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../shared/entities/interco-validation.entity */ "./Client/app/shared/entities/interco-validation.entity.ts");
/* harmony import */ var _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../shared/entities/lock-functional-context.entity */ "./Client/app/shared/entities/lock-functional-context.entity.ts");
/* harmony import */ var _shared_entities_lock_resource_information_entity__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../shared/entities/lock-resource-information.entity */ "./Client/app/shared/entities/lock-resource-information.entity.ts");
/* harmony import */ var _shared_entities_section_traffic_entity__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../shared/entities/section-traffic.entity */ "./Client/app/shared/entities/section-traffic.entity.ts");
/* harmony import */ var _shared_entities_section_entity__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../shared/entities/section.entity */ "./Client/app/shared/entities/section.entity.ts");
/* harmony import */ var _shared_enums_allocate_trade_option_enum__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../shared/enums/allocate-trade-option-enum */ "./Client/app/shared/enums/allocate-trade-option-enum.ts");
/* harmony import */ var _shared_enums_charter_status_enum__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../shared/enums/charter-status.enum */ "./Client/app/shared/enums/charter-status.enum.ts");
/* harmony import */ var _shared_enums_contract_invoice_type_enum__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../../shared/enums/contract-invoice-type.enum */ "./Client/app/shared/enums/contract-invoice-type.enum.ts");
/* harmony import */ var _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../../shared/enums/contract-status.enum */ "./Client/app/shared/enums/contract-status.enum.ts");
/* harmony import */ var _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../../shared/enums/contract-type.enum */ "./Client/app/shared/enums/contract-type.enum.ts");
/* harmony import */ var _shared_enums_current_trade_option_enum__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../../shared/enums/current-trade-option-enum */ "./Client/app/shared/enums/current-trade-option-enum.ts");
/* harmony import */ var _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../../shared/enums/permission-level.enum */ "./Client/app/shared/enums/permission-level.enum.ts");
/* harmony import */ var _shared_enums_pricing_method_enum__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../../shared/enums/pricing-method.enum */ "./Client/app/shared/enums/pricing-method.enum.ts");
/* harmony import */ var _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../../../shared/enums/section-type.enum */ "./Client/app/shared/enums/section-type.enum.ts");
/* harmony import */ var _shared_pipes_format_date_pipe_pipe__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../../../shared/pipes/format-date-pipe.pipe */ "./Client/app/shared/pipes/format-date-pipe.pipe.ts");
/* harmony import */ var _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../../../shared/services/http-services/execution.service */ "./Client/app/shared/services/http-services/execution.service.ts");
/* harmony import */ var _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../../../shared/services/http-services/lock.service */ "./Client/app/shared/services/http-services/lock.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _shared_services_title_service__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../../../shared/services/title.service */ "./Client/app/shared/services/title.service.ts");
/* harmony import */ var _dialog_boxes_blocker_warning_message_blocker_warning_message_component__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../../dialog-boxes/blocker-warning-message/blocker-warning-message.component */ "./Client/app/trading/dialog-boxes/blocker-warning-message/blocker-warning-message.component.ts");
/* harmony import */ var _dialog_boxes_trade_deallocation_trade_deallocation_dialog_component_component__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../../dialog-boxes/trade-deallocation/trade-deallocation-dialog-component.component */ "./Client/app/trading/dialog-boxes/trade-deallocation/trade-deallocation-dialog-component.component.ts");
/* harmony import */ var _entities_physical_fixed_priced_contract_entity__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../../entities/physical-fixed-priced-contract.entity */ "./Client/app/trading/entities/physical-fixed-priced-contract.entity.ts");
/* harmony import */ var _entities_section_reference__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../../entities/section-reference */ "./Client/app/trading/entities/section-reference.ts");
/* harmony import */ var _entities_section_tab_index__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../../entities/section-tab-index */ "./Client/app/trading/entities/section-tab-index.ts");
/* harmony import */ var _services_trade_actions_service__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ../../services/trade-actions.service */ "./Client/app/trading/services/trade-actions.service.ts");
/* harmony import */ var _services_trade_data_service__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ../../services/trade-data.service */ "./Client/app/trading/services/trade-data.service.ts");
/* harmony import */ var _contract_physical_capture_save_as_favourite_dialog_save_as_favourite_dialog_component__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ../contract-physical-capture/save-as-favourite-dialog/save-as-favourite-dialog.component */ "./Client/app/trading/components/contract-physical-capture/save-as-favourite-dialog/save-as-favourite-dialog.component.ts");
/* harmony import */ var _contract_physical_capture_trade_image_dialog_trade_image_dialog_component__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ../contract-physical-capture/trade-image-dialog/trade-image-dialog.component */ "./Client/app/trading/components/contract-physical-capture/trade-image-dialog/trade-image-dialog.component.ts");
/* harmony import */ var _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./../../../shared/entities/atlas-number.entity */ "./Client/app/shared/entities/atlas-number.entity.ts");
/* harmony import */ var _shared_entities_invoice_line_record_entity__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./../../../shared/entities/invoice-line-record.entity */ "./Client/app/shared/entities/invoice-line-record.entity.ts");
/* harmony import */ var _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./../../../shared/enums/cost-direction.enum */ "./Client/app/shared/enums/cost-direction.enum.ts");
/* harmony import */ var _shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./../../../shared/enums/discount-basis.enum */ "./Client/app/shared/enums/discount-basis.enum.ts");
/* harmony import */ var _shared_enums_discount_type_enum__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./../../../shared/enums/discount-type.enum */ "./Client/app/shared/enums/discount-type.enum.ts");
/* harmony import */ var _shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./../../../shared/enums/invoice-type.enum */ "./Client/app/shared/enums/invoice-type.enum.ts");
/* harmony import */ var _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./../../../shared/enums/invoicing-status.enum */ "./Client/app/shared/enums/invoicing-status.enum.ts");
/* harmony import */ var _shared_enums_posting_status_enum__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./../../../shared/enums/posting-status.enum */ "./Client/app/shared/enums/posting-status.enum.ts");
/* harmony import */ var _shared_enums_quantity_to_invoice_enum__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./../../../shared/enums/quantity-to-invoice.enum */ "./Client/app/shared/enums/quantity-to-invoice.enum.ts");
/* harmony import */ var _shared_enums_shipping_type_enum__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./../../../shared/enums/shipping-type-enum */ "./Client/app/shared/enums/shipping-type-enum.ts");
/* harmony import */ var _shared_enums_transaction_document_type_enum__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./../../../shared/enums/transaction-document-type.enum */ "./Client/app/shared/enums/transaction-document-type.enum.ts");
/* harmony import */ var _shared_numberMask__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./../../../shared/numberMask */ "./Client/app/shared/numberMask.ts");
/* harmony import */ var _shared_services_execution_dtos_child_sections_to_split__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./../../../shared/services/execution/dtos/child-sections-to-split */ "./Client/app/shared/services/execution/dtos/child-sections-to-split.ts");
/* harmony import */ var _shared_services_execution_dtos_invoice_record__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./../../../shared/services/execution/dtos/invoice-record */ "./Client/app/shared/services/execution/dtos/invoice-record.ts");
/* harmony import */ var _shared_services_http_services_document_service__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./../../../shared/services/http-services/document.service */ "./Client/app/shared/services/http-services/document.service.ts");
/* harmony import */ var _shared_services_http_services_freeze_service__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./../../../shared/services/http-services/freeze.service */ "./Client/app/shared/services/http-services/freeze.service.ts");
/* harmony import */ var _shared_services_http_services_preaccounting_service__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./../../../shared/services/http-services/preaccounting.service */ "./Client/app/shared/services/http-services/preaccounting.service.ts");
/* harmony import */ var _shared_services_split_create_and_allocate_service__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./../../../shared/services/split-create-and-allocate.service */ "./Client/app/shared/services/split-create-and-allocate.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _cancel_trade_dialog_cancel_trade_dialog_component__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./cancel-trade-dialog/cancel-trade-dialog.component */ "./Client/app/trading/components/contract-physical-capture/cancel-trade-dialog/cancel-trade-dialog.component.ts");
/* harmony import */ var _costs_tab_physical_contract_capture_form_costs_tab_component__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./costs-tab/physical-contract-capture-form-costs-tab.component */ "./Client/app/trading/components/contract-physical-capture/costs-tab/physical-contract-capture-form-costs-tab.component.ts");
/* harmony import */ var _form_components_header_form_component_header_form_component_component__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./form-components/header-form-component/header-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/header-form-component/header-form-component.component.ts");
/* harmony import */ var _interco_trade_dialog_interco_trade_dialog_component__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./interco-trade-dialog/interco-trade-dialog.component */ "./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/interco-trade-dialog.component.ts");
/* harmony import */ var _invoice_marking_tab_physical_contract_capture_form_invoice_marking_tab_component__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./invoice-marking-tab/physical-contract-capture-form-invoice-marking-tab.component */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/physical-contract-capture-form-invoice-marking-tab.component.ts");
/* harmony import */ var _main_tab_physical_contract_capture_form_main_tab_component__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./main-tab/physical-contract-capture-form-main-tab.component */ "./Client/app/trading/components/contract-physical-capture/main-tab/physical-contract-capture-form-main-tab.component.ts");
/* harmony import */ var _section_tab_new_tranche_split_ag_grid_new_tranche_split_ag_grid_component__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./section-tab/new-tranche-split-ag-grid/new-tranche-split-ag-grid.component */ "./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-ag-grid/new-tranche-split-ag-grid.component.ts");
/* harmony import */ var _section_tab_new_tranche_split_footer_new_tranche_split_footer_component__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./section-tab/new-tranche-split-footer/new-tranche-split-footer.component */ "./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-footer/new-tranche-split-footer.component.ts");
/* harmony import */ var _section_tab_new_tranche_split_header_new_tranche_split_header_component__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./section-tab/new-tranche-split-header/new-tranche-split-header.component */ "./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-header/new-tranche-split-header.component.ts");
/* harmony import */ var _section_tab_physical_contract_capture_form_section_tab_component__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./section-tab/physical-contract-capture-form-section-tab.component */ "./Client/app/trading/components/contract-physical-capture/section-tab/physical-contract-capture-form-section-tab.component.ts");
/* harmony import */ var _status_tab_physical_contract_capture_form_status_tab_component__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./status-tab/physical-contract-capture-form-status-tab.component */ "./Client/app/trading/components/contract-physical-capture/status-tab/physical-contract-capture-form-status-tab.component.ts");
/* harmony import */ var _trade_management_menu_bar_trade_management_menu_bar_component__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./trade-management-menu-bar/trade-management-menu-bar.component */ "./Client/app/trading/components/contract-physical-capture/trade-management-menu-bar/trade-management-menu-bar.component.ts");
/* harmony import */ var _traffic_tab_physical_contract_capture_form_traffic_tab_component__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./traffic-tab/physical-contract-capture-form-traffic-tab.component */ "./Client/app/trading/components/contract-physical-capture/traffic-tab/physical-contract-capture-form-traffic-tab.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __values = (undefined && undefined.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};











































































var moment = moment__WEBPACK_IMPORTED_MODULE_5__;
var TradeCapturePageComponent = /** @class */ (function () {
    function TradeCapturePageComponent(executionService, cdr, route, formBuilder, snackbarService, tradingService, companyManager, router, tradeActionsService, dialog, utilService, location, lockService, freezeService, preaccountingService, formatDate, titleService, splitCreateAndAllocateService, tradeDataService, documentService, authorizationService, dateLocale) {
        this.executionService = executionService;
        this.cdr = cdr;
        this.route = route;
        this.formBuilder = formBuilder;
        this.snackbarService = snackbarService;
        this.tradingService = tradingService;
        this.companyManager = companyManager;
        this.router = router;
        this.tradeActionsService = tradeActionsService;
        this.dialog = dialog;
        this.utilService = utilService;
        this.location = location;
        this.lockService = lockService;
        this.freezeService = freezeService;
        this.preaccountingService = preaccountingService;
        this.formatDate = formatDate;
        this.titleService = titleService;
        this.splitCreateAndAllocateService = splitCreateAndAllocateService;
        this.tradeDataService = tradeDataService;
        this.documentService = documentService;
        this.authorizationService = authorizationService;
        this.dateLocale = dateLocale;
        this.formComponents = [];
        this.invoiceMarking = [];
        this.selectedTab = 0;
        this.isDiscard = true;
        this.subscriptions = [];
        this.saveInProgress = false;
        this.isShow = false;
        this.isEdit = false;
        this.isTradeImage = false;
        this.isLoading = true;
        this.onValidationState = false;
        this.contractRefs = new Array();
        this.isApprovalBannerDisplayed = false;
        this.blockCommodityMessage = false;
        this.warnCommodityMessage = false;
        this.isChangedPortOfOrigin = false;
        this.isChangedPortOfDestination = false;
        this.portOfOriginColumnName = '';
        this.portOfDestinationCoulmnName = '';
        this.CommodityPart1Name = '';
        this.CommodityPart2Name = '';
        this.CommodityPart3Name = '';
        this.CommodityPart4Name = '';
        this.CommodityPart5Name = '';
        this.editAllowed = true;
        this.resourcesInformation = new Array();
        this.isSave = false;
        this.childFlag = 0;
        this.childQuantity = 0;
        this.copyCostInChild = false;
        this.totalInvoiceValuePercent = 0;
        this.isFirstApproval = false;
        this.isMenuBarVisible = true;
        this.isWeightConvertedForSplit = false;
        this.isimageAllocate = false;
        this.isEditOnAllocate = false;
        this.isInterco = false;
        this.isValidIntercoCounterparty = false;
        this.sectionToClose = new Array();
        this.isClosed = undefined;
        this.isSectionCancelled = false;
        this.quantityToBeCompared = 0;
        this.tradeCanBeApproved = true;
        // -- FAB Management
        this.createTradeActionPrivilege = {
            profileId: null,
            privilegeName: 'CreateTrade',
            permission: _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_25__["PermissionLevels"].ReadWrite,
            privilegeParentLevelOne: 'Trades',
            privilegeParentLevelTwo: 'Physicals',
        };
        this.editTradeActionPrivilege = {
            profileId: null,
            privilegeName: 'Physicals',
            permission: _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_25__["PermissionLevels"].ReadWrite,
            privilegeParentLevelOne: 'Trades',
            privilegeParentLevelTwo: null,
        };
        this.fabMenuActions = [];
        this.isSaveActionDisabled = this.saveInProgress || (this.isShow && !this.isEdit && !this.isTradeImage);
        this.isSplitSaveDisabled = false;
    }
    TradeCapturePageComponent.prototype.ngOnInit = function () {
        var _this = this;
        // trade actions subscriptions
        this.company = this.route.snapshot.paramMap.get('company');
        this.masterdata = this.route.snapshot.data.masterdata;
        this.subscriptions.push(this.tradeActionsService.deallocateSectionSubject.subscribe(function () {
            _this.onDeallocateTradeButtonClicked();
        }), this.tradeActionsService.approveSectionSubject.subscribe(function () {
            _this.onApproveSectionButtonClicked();
        }), this.tradeActionsService.unApproveSectionSubject.subscribe(function () {
            _this.onUnApproveSectionButtonClicked();
        }), this.tradeActionsService.tradeImageSubject.subscribe(function () {
            _this.onImageButtonClicked();
        }), this.tradeActionsService.tradeSaveAsFavouriteSubject.subscribe(function () {
            _this.onSaveAsFavoriteClicked();
        }), this.tradeActionsService.deleteSectionSubject.subscribe(function () {
            _this.onDeleteSectionButtonClicked();
        }), this.tradeActionsService.reOpenSectionSubject.subscribe(function () {
            _this.onReopenSectionButtonClicked();
        }), this.tradeActionsService.closeSectionSubject.subscribe(function () {
            _this.onCloseSectionButtonClicked(null, null, false, null);
        }), this.tradeActionsService.cancelSectionSubject.subscribe(function () {
            _this.onCancelTradeButtonClicked();
        }), this.tradeActionsService.reverseCancelSectionSubject.subscribe(function () {
            _this.onReverseCancelTradeButtonClicked();
        }));
        this.captureFormGroup = this.formBuilder.group({
            headerGroup: this.headerComponent.getFormGroup(),
            mainTabComponent: this.mainTabComponent.getFormGroup(),
            invoiceMarkingTabComponent: this.invoiceMarkingTabComponent.getFormGroup(),
            statusTabComponent: this.statusTabComponent.getFormGroup(),
            sectionTabComponent: this.sectionTabComponent.getFormGroup(),
            trafficTabComponent: this.trafficTabComponent.getFormGroup(),
            newTrancheHeaderComponent: this.sectionTabComponent.getFormGroup(),
            newTrancheAgGridComponent: this.sectionTabComponent.getFormGroup(),
            newTrancheFooterComponent: this.sectionTabComponent.getFormGroup(),
            costsTabComponent: this.costsTabComponent.getFormGroup(),
        });
        this.formComponents.push(this.headerComponent, this.mainTabComponent, this.sectionTabComponent, this.statusTabComponent, this.trafficTabComponent, this.invoiceMarkingTabComponent, this.costsTabComponent);
        this.cdr.detectChanges();
        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));
        this.dataVersionId = this.route.snapshot.paramMap.get('dataVersionId')
            ? Number(this.route.snapshot.paramMap.get('dataVersionId'))
            : null;
        this.tradeDataService.setSectionData(this.sectionId, this.dataVersionId);
        if (this.dataVersionId) {
            this.editAllowed = false;
            this.subscriptions.push(Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["forkJoin"])([
                this.freezeService.getFreezeByDataVersionId(this.dataVersionId).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["map"])(function (freeze) {
                    return moment(freeze.freezeDate);
                })),
                this.preaccountingService.getAccountingSetupDetails().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["map"])(function (setup) {
                    return moment(setup.lastMonthClosed);
                })),
            ]).subscribe(function (result) {
                var freezeDate = result[0];
                var closedMonthDate = result[1];
                _this.editAllowed =
                    freezeDate.year() > closedMonthDate.year() ||
                        (freezeDate.year() === closedMonthDate.year() &&
                            freezeDate.month() > closedMonthDate.month());
            }));
        }
        this.getTradeFavoriteDetails();
        if (this.sectionId !== 0) {
            this.viewEditTrade();
        }
        else {
            this.initFABActions(); // This method !! cannot !! be called anywhere; please cherche for comment A001
            this.isLoading = false;
            this.isMenuBarVisible = true;
            this.titleService.setTitle('Trade Capture');
        }
    };
    TradeCapturePageComponent.prototype.onShipmentStatusUpdate = function (shippingStatus) {
        if (shippingStatus === 'Cancelled') {
            this.statusTabComponent.charterComponent.updateOnlyShippingState();
        }
    };
    TradeCapturePageComponent.prototype.getTradeFavoriteDetails = function () {
        var _this = this;
        var favoriteId = Number(this.route.snapshot.queryParams.favoriteId);
        if (favoriteId) {
            this.subscriptions.push(this.tradingService
                .getTradeFavoriteById(favoriteId)
                .subscribe(function (data) {
                var favouriteData = data;
                _this.contractTypeSelected(favouriteData.contractType);
                _this.formComponents.forEach(function (comp) {
                    comp.initForm(favouriteData, true);
                });
            }));
        }
    };
    TradeCapturePageComponent.prototype.canDeactivate = function () {
        if (this.isSave === false) {
            if (this.captureFormGroup.dirty ||
                this.isTradeImage ||
                this.invoiceMarkingTabComponent.invoiceViewModeComponent
                    .viewDocumentTypeCtrl.dirty) {
                return window.confirm('Leave an unsave form? \nYour changes won\'t be applied!');
            }
            this.costsTabComponent.gridApi.forEachNode(function (rowData) {
                if (rowData.data && rowData.data.isDirty) {
                    return window.confirm('Leave an unsave form? \nYour changes won\'t be applied!');
                }
            });
            this.trafficTabComponent.formComponents.forEach(function (comp) {
                if (comp.formGroup && comp.formGroup.dirty) {
                    return window.confirm('Leave an unsave form? \nYour changes won\'t be applied!');
                }
            });
        }
        return true;
    };
    TradeCapturePageComponent.prototype.unloadNotification = function ($event) {
        if (this.captureFormGroup.dirty ||
            this.isTradeImage ||
            this.invoiceMarkingTabComponent.invoiceViewModeComponent
                .viewDocumentTypeCtrl.dirty) {
            $event.returnValue = true;
        }
        this.costsTabComponent.gridApi.forEachNode(function (rowData) {
            if (rowData.data && rowData.data.isDirty) {
                $event.returnValue = true;
            }
        });
        this.trafficTabComponent.formComponents.forEach(function (comp) {
            if (comp.formGroup && comp.formGroup.dirty) {
                $event.returnValue = true;
            }
        });
    };
    TradeCapturePageComponent.prototype.viewEditTrade = function () {
        var _this = this;
        if (this.route.snapshot.data.isEdit) {
            this.isEdit = true;
            this.isMenuBarVisible = true;
            this.startLockRefresh();
            this.tabValue = this.route.snapshot.paramMap.get('tabIndex');
            if (this.tabValue) {
                this.selectedTab = Number(this.tabValue);
            }
        }
        else if (this.route.snapshot.data['isImage'] === true) {
            var allocateContract = JSON.parse(this.route.snapshot.queryParams.allocateContract);
            this.isimageAllocate = allocateContract;
            this.isEdit = true;
            this.isTradeImage = true;
            this.stopLockRefresh();
        }
        if (this.isEdit && !this.isTradeImage) {
            this.isMenuBarVisible = false;
            this.subscriptions.push(this.lockService
                .lockContract(this.sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_15__["LockFunctionalContext"].TradeEdit)
                .subscribe(function (data) {
                _this.loadTradeData();
            }, function (err) {
                var confirmDialog = _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Lock',
                        text: err.error.detail,
                        okButton: 'Got it',
                    },
                });
                _this.tradeActionsService.displaySectionAfterEditSubject.next(new _entities_section_tab_index__WEBPACK_IMPORTED_MODULE_38__["SectionTabIndex"](_this.sectionId, _this.selectedTab));
            }));
        }
        else {
            this.isMenuBarVisible = false;
            this.loadTradeData();
        }
    };
    TradeCapturePageComponent.prototype.updateTrafficTabQuantity = function (quantity) {
        this.tradeQuantity = quantity;
        this.trafficTabComponent.adjustWeightComponent.updateQuantityValue(quantity);
        this.setContractAmountToCostTab(quantity);
    };
    TradeCapturePageComponent.prototype.setContractAmountToCostTab = function (quantity) {
        var _this = this;
        this.costsTabComponent.zeroQuantity = true;
        this.costsTabComponent.contractAmountOnSelect = quantity;
        if (this.isEdit) {
            if (this.sectionModel.costs) {
                var costFilteredByAmount_1 = this.sectionModel.costs.filter(function (cost) {
                    return cost.rateTypeId === 1 &&
                        cost.invoicePercent === 0 &&
                        !(cost.rate === 0);
                });
                if (Number(quantity) === 0 &&
                    this.sectionModel.costs.length > 0 &&
                    costFilteredByAmount_1.length > 0 &&
                    this.isEdit &&
                    this.costsTabComponent.zeroQuantity) {
                    var confirmDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                        data: {
                            title: 'Update Cost',
                            text: 'Do you want to update the estimates for Amount as well  ?',
                            okButton: 'Yes',
                            cancelButton: 'No',
                        },
                    });
                    confirmDialog.afterClosed().subscribe(function (answer) {
                        if (answer) {
                            costFilteredByAmount_1.forEach(function (cost) {
                                cost.rate = quantity;
                            });
                            _this.costsTabComponent.gridApi.forEachNode(function (rowNode) {
                                if (rowNode.data.rateTypeCode === 'Amount' &&
                                    !(rowNode.data.invoicePercent === 100)) {
                                    var data = rowNode.data;
                                    data.rate = quantity;
                                }
                            });
                        }
                        else {
                            _this.mainTabComponent.quantityComponent.quantityCtrl.patchValue(null);
                        }
                    });
                }
                else {
                    this.costsTabComponent.gridApi.refreshCells();
                }
            }
        }
    };
    TradeCapturePageComponent.prototype.commodityBlockOrWarnMessage = function (block) {
        this.blockCommodityMessage = block.isCommodityBlockerChanged;
        this.warnCommodityMessage = block.isCommodityWarningChanged;
        this.CommodityPart1Name = block.isChangedCmyPart1;
        this.CommodityPart2Name = block.isChangedCmyPart2;
        this.CommodityPart3Name = block.isChangedCmyPart3;
        this.CommodityPart4Name = block.isChangedCmyPart4;
        this.CommodityPart5Name = block.isChangedCmyPart5;
    };
    TradeCapturePageComponent.prototype.portWarningMessage = function (portWarn) {
        this.isChangedPortOfOrigin = portWarn.portOfOriginChanged;
        this.isChangedPortOfDestination = portWarn.portOfDestinationChanged;
        this.portOfOriginColumnName = portWarn.portOfOriginColumn;
        this.portOfDestinationCoulmnName = portWarn.portOfDestinationColumn;
    };
    TradeCapturePageComponent.prototype.loadTradeData = function () {
        var _this = this;
        this.tabValue = this.route.snapshot.paramMap.get('tabIndex');
        if (this.tabValue) {
            this.selectedTab = Number(this.tabValue);
        }
        var getSection = this.dataVersionId
            ? this.tradingService.getSection(this.sectionId, 0, this.dataVersionId)
            : this.tradingService.getSection(this.sectionId, 0);
        this.subscriptions.push(getSection.subscribe(function (data) {
            _this.sectionModel = data;
            if (_this.sectionModel) {
                _this.isSectionCancelled = _this.sectionModel.isCancelled;
            }
            if (!_this.isTradeImage) {
                if (_this.isSectionCancelled && _this.route.snapshot.data.isEdit) {
                    _this.selectedTab = 1;
                }
                if (_this.sectionModel.isClosed === true) {
                    _this.isClosed = true;
                }
            }
            else {
                _this.sectionModel.isCancelled = false;
                _this.sectionModel.isClosed = false;
                _this.sectionModel.blDate = null;
            }
            _this.originalQuantity = data.quantity;
            _this.quantityTrafficSplit = data.quantity;
            _this.contractId = data.contractId;
            _this.contractLabel = data.contractLabel;
            if (data.firstApprovalDateTime === null) {
                _this.isFirstApproval = true;
            }
            if (_this.sectionModel.allocatedTo &&
                _this.sectionModel.allocatedTo.sectionId) {
                _this.tradingService
                    .getSection(_this.sectionModel.allocatedTo.sectionId, _shared_enums_pricing_method_enum__WEBPACK_IMPORTED_MODULE_26__["PricingMethods"].Priced, _this.dataVersionId)
                    .subscribe(function (targetData) {
                    _this.tragetSectionModel = targetData;
                });
            }
            // disabling condition for SuperTradeEdition for Cost Invoice
            if (data.invoiceReference &&
                (data.invoiceTypeId === _shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_48__["InvoiceTypes"].Cost ||
                    data.invoiceTypeId === _shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_48__["InvoiceTypes"].CostReceivable ||
                    data.invoiceTypeId === _shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_48__["InvoiceTypes"].CostCreditNote ||
                    data.invoiceTypeId === _shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_48__["InvoiceTypes"].CostDebitNote)) {
                data.invoiceReference = null;
            }
            _this.tradingService
                .getChildSections(_this.sectionId, _this.dataVersionId)
                .subscribe(function (childSections) {
                _this.childSectionsSearchResult = childSections;
                _this.sectionModel.childSections = childSections.map(function (childSectionResult) {
                    var childSection = new _shared_entities_section_entity__WEBPACK_IMPORTED_MODULE_18__["Section"]();
                    childSection.setSectionFromChildSectionsSearchResult(childSectionResult, _this.sectionModel.sectionId);
                    return childSection;
                });
                if (_this.isEdit) {
                    _this.startLockRefresh();
                }
                if (_this.isTradeImage) {
                    _this.stopLockRefresh();
                    _this.titleService.setTitle(_this.contractLabel + ' - Imaging');
                }
                else if (_this.isEdit && !_this.isTradeImage) {
                    _this.stopLockRefresh();
                    _this.titleService.setTitle(_this.contractLabel + ' - Edit Trade');
                }
                else {
                    _this.titleService.setTitle(_this.contractLabel + ' - Trade View');
                }
                if (_this.route.snapshot.queryParams.showTradeImage) {
                    _this.openTradeImageDialog();
                }
                if (_this.route.snapshot.queryParams.showSaveTradeAsFavourite) {
                    _this.openSaveAsFavouriteDialog();
                }
                _this.formComponents.forEach(function (comp) {
                    comp.initForm(data, _this.isEdit);
                });
                _this.isShow = true;
                var selectedCounterparty = _this.mainTabComponent
                    .counterpartyComponent.selectedCounterparty;
                if (selectedCounterparty) {
                    _this.companyManager
                        .getConfiguration(selectedCounterparty.counterpartyID)
                        .subscribe(function (data) {
                        if (data.length > 0 && data[0].isCounterpartyGroupAccount) {
                            _this.isValidIntercoCounterparty = true;
                            _this.counterpartyCompaniesForManaulInterco = data;
                        }
                    });
                }
                _this.initFABActions(); // This method !! cannot !! be called anywhere; please cherche for comment A001
                _this.isLoading = false;
            });
            _this.contractTypeSelected(_this.sectionModel.contractType);
            _this.checkIntercoTrade(_this.sectionModel);
            _this.checkIfTradeCanBeApproved(_this.sectionModel);
            _this.statusTabComponent.invoicingComponent.setContractInvoiceType(_this.sectionModel.contractInvoiceTypeId);
        }));
    };
    TradeCapturePageComponent.prototype.checkIfTradeCanBeApproved = function (sectionModel) {
        var currentCompany = this.companyManager.getCurrentCompany();
        this.tradeCanBeApproved = (currentCompany.defaultDepartmentId === sectionModel.departmentId) ?
            false : true;
    };
    TradeCapturePageComponent.prototype.contractTypeSelected = function (contractType) {
        this.mainTabComponent.contractTypeSelected(contractType);
    };
    TradeCapturePageComponent.prototype.onSaveButtonClicked = function () {
        this.save();
    };
    TradeCapturePageComponent.prototype.save = function () {
        var _this = this;
        this.isSave = true;
        this.onValidationState = true;
        this.utilService.updateFormGroupValidity(this.captureFormGroup);
        if (this.captureFormGroup.pending) {
            this.captureFormGroup.statusChanges.subscribe(function () {
                if (_this.onValidationState) {
                    _this.onValidationState = false;
                    _this.handleSave();
                }
            });
        }
        else {
            this.onValidationState = false;
            this.handleSave();
        }
    };
    TradeCapturePageComponent.prototype.handleSave = function () {
        if (!this.captureFormGroup.valid) {
            this.snackbarService.throwErrorSnackBar('Form is invalid. Please resolve the errors.');
            return;
        }
        if (!this.costsTabComponent.validate()) {
            this.snackbarService.throwErrorSnackBar('Cost is invalid. Please review the cost tab to resolve the errors.');
            return;
        }
        if (this.isEdit && !this.isTradeImage) {
            var isAnyCurrentToggleSelected = false;
            var isAnyAllocationCardCheckFailed = false;
            var local = this.dateLocale || moment.locale();
            var blDate = this.trafficTabComponent.blInfoComponent.blDateCtrl.value ? moment(this.trafficTabComponent.blInfoComponent.blDateCtrl.value, 'YYYY-MM-DD').toDate() : null;
            var bldate = (blDate) ? moment.utc(moment.parseZone(blDate).format('YYYY-MM-DD')).locale(local).toDate() : null;
            this.trafficTabComponent.blInfoComponent.blDateCtrl.setValue(bldate);
            isAnyCurrentToggleSelected = this.trafficTabComponent.currentTradeComponent.checkAnyToggleSelected();
            isAnyAllocationCardCheckFailed = this.trafficTabComponent.allocationComponent.allocationSelectionChecked();
            if (isAnyCurrentToggleSelected && isAnyAllocationCardCheckFailed) {
                this.snackbarService.throwErrorSnackBar('Please select an option for the allocated trade.');
                return;
            }
        }
        this.saveInProgress = true;
        this.getPhysicalContractInfo();
        this.checkIfIntercoCounterpartyChanged(this.model);
    };
    TradeCapturePageComponent.prototype.saveTrade = function () {
        var _this = this;
        var currentCompany = this.companyManager.getCurrentCompany();
        if (this.isEdit && (this.model.departmentId === currentCompany.defaultDepartmentId)) {
            this.snackbarService.throwErrorSnackBar('Please change the department.');
            return;
        }
        if (this.model.allocatedTo && !this.isTradeImage) {
            if ((this.warnCommodityMessage ||
                this.isChangedPortOfDestination ||
                this.isChangedPortOfOrigin ||
                this.blockCommodityMessage) &&
                this.model.allocatedTo.sectionId !== this.sectionId) {
                var confirmDialog = this.dialog.open(_dialog_boxes_blocker_warning_message_blocker_warning_message_component__WEBPACK_IMPORTED_MODULE_34__["BlockerWarningMessageComponent"], {
                    data: {
                        messageBlocker: this.blockCommodityMessage
                            ? ' The field ' +
                                this.CommodityPart1Name +
                                ' ' +
                                this.CommodityPart2Name +
                                ' ' +
                                ' you are changing has to be same within the allocation, do you want to update allocated trade ? '
                            : null,
                        messageWarning: this.isChangedPortOfOrigin ||
                            this.isChangedPortOfDestination ||
                            this.warnCommodityMessage
                            ? ' The following field(s) ' +
                                this.portOfOriginColumnName +
                                ' ' +
                                this.portOfDestinationCoulmnName +
                                ' ' +
                                this.CommodityPart3Name +
                                ' ' +
                                this.CommodityPart4Name +
                                ' ' +
                                this.CommodityPart5Name +
                                ' ' +
                                ' will be different between your two allocated contracts. Do you also want to update the allocated contract?'
                            : null,
                        dyanamicMessageWarning: this.isChangedPortOfOrigin ||
                            this.isChangedPortOfDestination ||
                            this.warnCommodityMessage
                            ? ' The field ' +
                                this.portOfOriginColumnName +
                                ' ' +
                                this.portOfDestinationCoulmnName +
                                ' ' +
                                this.CommodityPart3Name +
                                ' ' +
                                this.CommodityPart4Name +
                                ' ' +
                                this.CommodityPart5Name +
                                ' ' +
                                ' are warning and would not be updated'
                            : null,
                    },
                });
                var confirmationSubscription = confirmDialog
                    .afterClosed()
                    .subscribe(function (answer) {
                    if (!answer) {
                        return;
                    }
                    var blockerMessageAnswer = answer.blockerMessageAnswer;
                    var warningMessageAnswer = answer.warningMessageAnswer;
                    if (warningMessageAnswer === 'discard') {
                        _this.saveInProgress = false;
                        _this.isShow = false;
                        _this.warnCommodityMessage = false;
                        _this.isChangedPortOfDestination = false;
                        _this.isChangedPortOfOrigin = false;
                        _this.blockCommodityMessage = false;
                        return;
                        //  Go to trade edit page  //
                    }
                    else if ((blockerMessageAnswer === 'no' &&
                        warningMessageAnswer === 'ok') ||
                        (blockerMessageAnswer === 'no' && warningMessageAnswer === null)) {
                        _this.tradeActionsService.displaySectionAfterEditSubject.next(new _entities_section_tab_index__WEBPACK_IMPORTED_MODULE_38__["SectionTabIndex"](_this.sectionId, _this.selectedTab));
                        //  Go to trade view page  //
                    }
                    else if (warningMessageAnswer === 'yes') {
                        _this.model.isPortOfDestinationChanged = _this.isChangedPortOfDestination;
                        _this.model.isPortOfOriginChanged = _this.isChangedPortOfOrigin;
                        _this.model.isCommodityChanged =
                            blockerMessageAnswer === 'yes'
                                ? _this.blockCommodityMessage
                                : _this.warnCommodityMessage;
                        _this.callServiceToSave();
                    }
                    else if (blockerMessageAnswer === 'yes' &&
                        (warningMessageAnswer === null || warningMessageAnswer === 'no')) {
                        _this.model.isCommodityChanged = _this.blockCommodityMessage;
                        //  update Blocker in both contracts  //
                        _this.callServiceToSave();
                    }
                    else if (warningMessageAnswer === 'no' &&
                        blockerMessageAnswer === null) {
                        //  one contract update//
                        _this.callServiceToSave();
                    }
                });
                this.subscriptions.push(confirmationSubscription);
            }
            else {
                this.callServiceToSave();
            }
        }
        else if (this.isTradeImage && this.isimageAllocate) {
            this.imageAllocateModel = this.model;
            if (this.warnCommodityMessage ||
                this.isChangedPortOfDestination ||
                this.isChangedPortOfOrigin ||
                this.blockCommodityMessage) {
                var confirmDialog = this.dialog.open(_dialog_boxes_blocker_warning_message_blocker_warning_message_component__WEBPACK_IMPORTED_MODULE_34__["BlockerWarningMessageComponent"], {
                    data: {
                        messageBlocker: this.blockCommodityMessage
                            ? ' The field ' +
                                this.CommodityPart1Name +
                                ' ' +
                                this.CommodityPart2Name +
                                ' ' +
                                ' you are changing has to be same within the allocation, do you want to update allocated trade ? '
                            : null,
                        messageWarning: this.isChangedPortOfOrigin ||
                            this.isChangedPortOfDestination ||
                            this.warnCommodityMessage
                            ? ' The following field(s) ' +
                                this.portOfOriginColumnName +
                                ' ' +
                                this.portOfDestinationCoulmnName +
                                ' ' +
                                this.CommodityPart3Name +
                                ' ' +
                                this.CommodityPart4Name +
                                ' ' +
                                this.CommodityPart5Name +
                                ' ' +
                                ' will be different between your two allocated contracts. Do you also want to update the allocated contract?'
                            : null,
                        dyanamicMessageWarning: this.isChangedPortOfOrigin ||
                            this.isChangedPortOfDestination ||
                            this.warnCommodityMessage
                            ? ' The field ' +
                                this.portOfOriginColumnName +
                                ' ' +
                                this.portOfDestinationCoulmnName +
                                ' ' +
                                this.CommodityPart3Name +
                                ' ' +
                                this.CommodityPart4Name +
                                ' ' +
                                this.CommodityPart5Name +
                                ' ' +
                                ' are warning and would not be updated'
                            : null,
                    },
                });
                var confirmationSubscription = confirmDialog
                    .afterClosed()
                    .subscribe(function (answer) {
                    if (!answer) {
                        return;
                    }
                    var blockerMessageAnswer = answer.blockerMessageAnswer;
                    var warningMessageAnswer = answer.warningMessageAnswer;
                    _this.imageAllocateModel.sectionId = _this.sectionId;
                    if (warningMessageAnswer === 'discard') {
                        _this.saveInProgress = false;
                        _this.isShow = false;
                        _this.warnCommodityMessage = false;
                        _this.isChangedPortOfDestination = false;
                        _this.isChangedPortOfOrigin = false;
                        _this.blockCommodityMessage = false;
                        return;
                        //  Go to trade edit page  //
                    }
                    else if ((blockerMessageAnswer === 'no' &&
                        warningMessageAnswer === 'ok') ||
                        (blockerMessageAnswer === 'no' && warningMessageAnswer === null)) {
                        _this.model.commodityId = _this.sectionModel.commodityId;
                        _this.createImageTrade();
                    }
                    else if (warningMessageAnswer === 'yes') {
                        _this.isEditOnAllocate = true;
                        _this.model.isPortOfDestinationChanged = _this.isChangedPortOfDestination;
                        _this.model.isPortOfOriginChanged = _this.isChangedPortOfOrigin;
                        _this.imageAllocateModel.isPortOfDestinationChanged = _this.isChangedPortOfDestination;
                        _this.imageAllocateModel.isPortOfOriginChanged = _this.isChangedPortOfOrigin;
                        _this.model.isCommodityChanged =
                            blockerMessageAnswer === 'yes'
                                ? _this.blockCommodityMessage
                                : _this.warnCommodityMessage;
                        _this.callServiceToSave();
                    }
                    else if (blockerMessageAnswer === 'yes' &&
                        (warningMessageAnswer === null || warningMessageAnswer === 'no')) {
                        _this.isEditOnAllocate = true;
                        _this.model.isCommodityChanged = _this.blockCommodityMessage;
                        _this.imageAllocateModel.isCommodityChanged = _this.blockCommodityMessage;
                        //  update Blocker in both contracts  //
                        _this.callServiceToSave();
                    }
                    else if (warningMessageAnswer === 'no' &&
                        blockerMessageAnswer === null) {
                        //  one contract update//
                        _this.callServiceToSave();
                    }
                });
                this.subscriptions.push(confirmationSubscription);
            }
            else {
                this.callServiceToSave();
            }
        }
        else {
            this.callServiceToSave();
        }
    };
    TradeCapturePageComponent.prototype.callServiceToSave = function () {
        // call the trading service with correct DTO
        var _this = this;
        if (this.sectionId && !this.isTradeImage) {
            if (Number(this.model.quantity) === 0) {
                var confirmDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                    data: {
                        text: 'Quantity is 0. Do you want to save?',
                        okButton: 'SAVE ANYWAY',
                        cancelButton: 'CANCEL',
                    },
                });
                var confirmationSubscription = confirmDialog
                    .afterClosed()
                    .subscribe(function (answer) {
                    if (answer) {
                        _this.updatePhysicalContract();
                    }
                    else {
                        _this.saveInProgress = false;
                    }
                });
            }
            else {
                this.updatePhysicalContract();
            }
        }
        else if (this.isTradeImage) {
            this.model.numberOfContracts = Number(this.route.snapshot.queryParams.numberOfContract);
            var childSection = this.sectionModel.childSections.length;
            var splitAndTranche = JSON.parse(this.route.snapshot.queryParams.splitAndTranche);
            this.model = this.checkFieldsToBeCopied(this.model);
            if (splitAndTranche && childSection > 0) {
                var quantity = Number(this.model.quantity) + this.childQuantity;
                this.model.quantity = quantity.toString();
                this.model.childSections = this.overwriteSplitAndTranche(this.model.childSections);
            }
            if (this.model.costs.length > 0) {
                this.createImageTrade();
            }
            else {
                var confirmDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Trade without a cost',
                        text: 'No Costs have been added to this contract.',
                        okButton: 'SAVE ANYWAY',
                        cancelButton: 'ADD COSTS',
                    },
                });
                var confirmationSubscription = confirmDialog
                    .afterClosed()
                    .subscribe(function (answer) {
                    if (answer) {
                        _this.createImageTrade();
                    }
                    else {
                        if (Number(_this.model.quantity) > 0) {
                            _this.saveInProgress = false;
                            _this.selectedTab = 1;
                        }
                        else {
                            _this.snackbarService.throwErrorSnackBar('You Cannot Add costs to a contract with Zero Quantity');
                            _this.saveInProgress = false;
                        }
                    }
                });
                this.subscriptions.push(confirmationSubscription);
            }
        }
        else {
            if (this.model.costs.length > 0) {
                var selectedCounterparty = this.mainTabComponent.counterpartyComponent
                    .selectedCounterparty;
                if (selectedCounterparty) {
                    this.companyManager
                        .getConfiguration(selectedCounterparty.counterpartyID)
                        .subscribe(function (data) {
                        if (data.length > 0 && data[0].isCounterpartyGroupAccount) {
                            _this.intercoModel(data);
                        }
                        else {
                            _this.createTrade();
                        }
                    });
                }
                else {
                    this.createTrade();
                }
            }
            else {
                var confirmDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Trade without a cost',
                        text: 'No Costs have been added to this contract.',
                        okButton: 'SAVE ANYWAY',
                        cancelButton: 'ADD COSTS',
                    },
                });
                var confirmationSubscription = confirmDialog
                    .afterClosed()
                    .subscribe(function (answer) {
                    if (answer) {
                        var selectedCounterparty = _this.mainTabComponent
                            .counterpartyComponent.selectedCounterparty;
                        if (selectedCounterparty) {
                            _this.companyManager
                                .getConfiguration(selectedCounterparty.counterpartyID)
                                .subscribe(function (data) {
                                if (data.length > 0 && data[0].isCounterpartyGroupAccount) {
                                    _this.intercoModel(data);
                                }
                                else {
                                    _this.createTrade();
                                }
                            });
                        }
                        else {
                            _this.createTrade();
                        }
                    }
                    else {
                        if (Number(_this.model.quantity) > 0) {
                            _this.saveInProgress = false;
                            _this.selectedTab = 1;
                        }
                        else {
                            _this.snackbarService.throwErrorSnackBar('You Cannot Add costs to a contract with Zero Quantity');
                            _this.saveInProgress = false;
                        }
                    }
                });
                this.subscriptions.push(confirmationSubscription);
            }
        }
    };
    TradeCapturePageComponent.prototype.createImageTrade = function () {
        var _this = this;
        var isAllocateContract = JSON.parse(this.route.snapshot.queryParams.allocateContract);
        if (isAllocateContract && this.isEditOnAllocate) {
            this.tradingService
                .updatePhysicalContract(this.sectionId, this.imageAllocateModel)
                .subscribe(function () {
                _this.subscriptions.push(_this.tradingService
                    .createPhysicalFixedPricedContract(_this.model)
                    .subscribe(function (data) {
                    var e_1, _a;
                    if (!isAllocateContract) {
                        try {
                            for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                                var val = data_1_1.value;
                                _this.contractRefs.push(val['contractLabel']);
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        var contracts = _this.contractRefs.join(', ');
                        _this.snackbarService.informationAndCopySnackBar('The following trades were imaged: ' + contracts, contracts);
                        _this.tradeActionsService.displaySectionSubject.next(data[0]['sectionId']);
                    }
                    else {
                        _this.tradingService
                            .getChildSections(data[0]['sectionId'], _this.dataVersionId)
                            .subscribe(function (childSections) {
                            _this.allocateTrade(data, childSections);
                        });
                    }
                }, function (err) {
                    _this.saveInProgress = false;
                    throw err;
                }));
            });
        }
        else {
            this.subscriptions.push(this.tradingService
                .createPhysicalFixedPricedContract(this.model)
                .subscribe(function (data) {
                var e_2, _a;
                if (!isAllocateContract) {
                    try {
                        for (var data_2 = __values(data), data_2_1 = data_2.next(); !data_2_1.done; data_2_1 = data_2.next()) {
                            var val = data_2_1.value;
                            _this.contractRefs.push(val['contractLabel']);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (data_2_1 && !data_2_1.done && (_a = data_2.return)) _a.call(data_2);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    var contracts = _this.contractRefs.join(', ');
                    _this.snackbarService.informationAndCopySnackBar('The following trades were imaged: ' + contracts, contracts);
                    _this.tradeActionsService.displaySectionSubject.next(data[0]['sectionId']);
                }
                else {
                    _this.tradingService
                        .getChildSections(data[0]['sectionId'], _this.dataVersionId)
                        .subscribe(function (childSections) {
                        _this.allocateTrade(data, childSections);
                    });
                }
            }, function (err) {
                _this.saveInProgress = false;
                throw err;
            }));
        }
    };
    TradeCapturePageComponent.prototype.assignCharterToAllocatedContract = function (sectionId, charterId) {
        var _this = this;
        var assignCharterPromise = [];
        this.executionService
            .GetSectionTrafficDetails(sectionId, this.dataVersionId)
            .subscribe(function (data) {
            if (data) {
                var sectionTrafficList = [];
                sectionTrafficList.push(data);
                if (!_this.dataVersionId) {
                    assignCharterPromise.push(_this.executionService
                        .assignSectionsToCharter(charterId, sectionTrafficList)
                        .toPromise());
                }
            }
        });
    };
    TradeCapturePageComponent.prototype.assignCharter = function (allocationDetails) {
        var _this = this;
        allocationDetails.forEach(function (allocationDetail) {
            _this.tradingService
                .getSection(allocationDetail.sectionId, 0, _this.dataVersionId)
                .subscribe(function (data) {
                if (data && data.charterId) {
                    _this.assignCharterToAllocatedContract(allocationDetail.allocatedSectionId, data.charterId);
                }
            });
        });
    };
    TradeCapturePageComponent.prototype.allocateTrade = function (allocatedTradeData, allocationChildSections) {
        var _this = this;
        var allocationDetails = this.getAllocationDetails(allocatedTradeData, allocationChildSections);
        var contractLabel = this.sectionModel.contractLabel.split('.')[0];
        this.allocateSectionSubscription = this.executionService
            .allocateImageSections(allocationDetails)
            .subscribe(function (data) {
            _this.assignCharter(allocationDetails);
            var message = 'The trade' +
                ' ' +
                allocationDetails[0].allocatedSectionReference +
                ' ' +
                'has been imaged and  allocated to ' +
                ' ' +
                contractLabel +
                ' ' +
                ' with the number ' +
                ' ' +
                data;
            _this.snackbarService.informationAndCopySnackBar(message, message);
            if (_this.dataVersionId) {
                _this.tradeActionsService.displaySectionInSnapshotSubject.next(new _entities_section_reference__WEBPACK_IMPORTED_MODULE_37__["SectionReference"](allocationDetails[0].sectionId, _this.dataVersionId));
            }
            else {
                _this.tradeActionsService.displaySectionSubject.next(allocationDetails[0].allocatedSectionId);
            }
        }, function (err) {
            _this.saveInProgress = false;
            throw err;
        });
    };
    TradeCapturePageComponent.prototype.getAllocationDetails = function (allocatedTradeData, allocationChildSections) {
        var allocateSectionModel = [];
        var allocationDetails = new _shared_entities_allocate_section_entity__WEBPACK_IMPORTED_MODULE_13__["AllocateSection"]();
        allocationDetails.sectionId = this.sectionId;
        allocationDetails.allocatedSectionId = allocatedTradeData[0]['sectionId'];
        allocationDetails.allocatedSectionReference =
            allocatedTradeData[0]['contractLabel'];
        allocationDetails.dataVersionId = this.dataVersionId;
        allocationDetails.quantity = Number(this.model.quantity.toString().replace(/,/g, ''));
        allocationDetails.shippingType = _shared_enums_shipping_type_enum__WEBPACK_IMPORTED_MODULE_52__["ShippingType"].PurchaseToSale;
        allocateSectionModel.push(allocationDetails);
        // Child Allocation Details
        var splitAndTranche = JSON.parse(this.route.snapshot.queryParams.splitAndTranche);
        if (splitAndTranche && allocationChildSections.length > 0) {
            for (var i = 0; i < allocationChildSections.length; i++) {
                var allocateSectionElement = new _shared_entities_allocate_section_entity__WEBPACK_IMPORTED_MODULE_13__["AllocateSection"]();
                allocateSectionElement.sectionId = this.sectionModel.childSections[i].sectionId;
                allocateSectionElement.allocatedSectionId =
                    allocationChildSections[i].sectionId;
                allocateSectionElement.quantity = this.sectionModel.childSections[i].quantity;
                allocateSectionElement.shippingType = _shared_enums_shipping_type_enum__WEBPACK_IMPORTED_MODULE_52__["ShippingType"].PurchaseToSale;
                allocateSectionElement.dataVersionId = this.dataVersionId;
                allocateSectionModel.push(allocateSectionElement);
            }
        }
        return allocateSectionModel;
    };
    TradeCapturePageComponent.prototype.checkFieldsToBeCopied = function (model) {
        var e_3, _a;
        model.status = _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"].Unapproved;
        model.dataVersionId = this.dataVersionId;
        model.blDate = null;
        model.createdBy = null;
        model.creationDate = null;
        model.modifiedByUserId = null;
        model.lastModifiedBy = null;
        model.lastModifiedDate = null;
        model.allocatedTo = null;
        model.allocateTradeOptionId = 0;
        model.invoiceStatus = null;
        model.firstApprovalTime = null;
        if (this.sectionModel.childSections.length > 0) {
            this.childQuantity = 0;
            try {
                for (var _b = __values(this.sectionModel.childSections), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var section = _c.value;
                    this.childQuantity += Number(section.quantity);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        return model;
    };
    TradeCapturePageComponent.prototype.createTrade = function () {
        var _this = this;
        this.model.dataVersionId = this.dataVersionId;
        if (this.model.isInterco) {
            this.model.intercoContractType =
                this.model.type === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_23__["ContractTypes"].Purchase
                    ? _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_23__["ContractTypes"].Sale
                    : _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_23__["ContractTypes"].Purchase;
            this.model.intercoBuyerCode = this.model.sellerCode;
            this.model.intercoSellerCode = this.model.buyerCode;
            var code_1 = this.model.type === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_23__["ContractTypes"].Purchase
                ? this.model.sellerCode
                : this.model.buyerCode;
            this.model.intercoCosts = this.model.costs.filter(function (cost) { return cost.supplierCode === code_1; });
            if (this.model.intercoCosts) {
                this.model.intercoCosts.forEach(function (cost) {
                    cost.costDirectionId = cost.costDirectionId === 1 ? 2 : 1;
                });
            }
        }
        this.subscriptions.push(this.tradingService
            .createPhysicalFixedPricedContract(this.model)
            .subscribe(function (data) {
            var messageText = 'Contract created with reference: ' + data[0]['contractLabel'];
            var copyText = data[0]['contractLabel'];
            if (_this.isInterco) {
                messageText =
                    messageText +
                        ', Interco Contract created with reference: ' +
                        data[1]['contractLabel'];
                copyText = copyText + data[1]['contractLabel'];
            }
            _this.snackbarService.informationAndCopySnackBar(messageText, copyText);
            if (_this.dataVersionId) {
                _this.tradeActionsService.displaySectionInSnapshotSubject.next({
                    sectionId: data[0]['sectionId'],
                    dataVersionId: _this.dataVersionId,
                });
            }
            else {
                _this.tradeActionsService.displaySectionSubject.next(data[0]['sectionId']);
            }
        }, function (err) {
            _this.saveInProgress = false;
            throw err;
        }));
    };
    TradeCapturePageComponent.prototype.overwriteSplitAndTranche = function (childSections) {
        var e_4, _a;
        if (this.route.snapshot.queryParams.costMatrixId) {
            this.copyCostInChild = true;
        }
        this.tradeImageModel = new _entities_physical_fixed_priced_contract_entity__WEBPACK_IMPORTED_MODULE_36__["PhysicalFixedPricedContract"]();
        // comparing the values from original model
        if (this.model.counterpartyReference !==
            this.sectionModel.counterpartyReference) {
            this.tradeImageModel.counterpartyReference = this.model.counterpartyReference;
        }
        if (this.model.sellerCode !== this.sectionModel.sellerCode) {
            this.tradeImageModel.sellerCode = this.model.sellerCode;
        }
        if (this.model.buyerCode !== this.sectionModel.buyerCode) {
            this.tradeImageModel.buyerCode = this.model.buyerCode;
        }
        if (this.model.commodityId !== this.sectionModel.commodityId) {
            this.tradeImageModel.commodityId = this.model.commodityId;
        }
        if (this.model.cropYear !== this.sectionModel.cropYear) {
            this.tradeImageModel.cropYear = this.model.cropYear;
        }
        if (this.model.currencyCode !== this.sectionModel.currencyCode) {
            this.tradeImageModel.currencyCode = this.model.currencyCode;
        }
        if (Number(this.model.priceUnitId) !== this.sectionModel.priceUnitId) {
            this.tradeImageModel.priceUnitId = this.model.priceUnitId;
        }
        if (this.model.price !== this.sectionModel.price) {
            this.tradeImageModel.price = this.model.price;
        }
        if (this.model.traderId !== this.sectionModel.header.traderId) {
            this.tradeImageModel.traderId = this.model.traderId;
        }
        if (this.model.paymentTerms !== this.sectionModel.paymentTerms) {
            this.tradeImageModel.paymentTerms = this.model.paymentTerms;
        }
        if (this.model.discountPremiumValue !== this.sectionModel.premiumDiscountValue) {
            this.tradeImageModel.discountPremiumValue = this.model.discountPremiumValue;
        }
        if (this.model.contractTerms !== this.sectionModel.contractTerms) {
            this.tradeImageModel.contractTerms = this.model.contractTerms;
        }
        if (this.model.contractTermsLocation !==
            this.sectionModel.contractTermsLocation) {
            this.tradeImageModel.contractTermsLocation = this.model.contractTermsLocation;
        }
        if (this.model.arbitration !== this.sectionModel.arbitration) {
            this.tradeImageModel.arbitration = this.model.arbitration;
        }
        if (this.model.periodTypeId !== this.sectionModel.periodTypeId) {
            this.tradeImageModel.periodTypeId = this.model.periodTypeId;
        }
        if (this.model.positionMonthType !== this.sectionModel.positionMonthType) {
            this.tradeImageModel.positionMonthType = this.model.positionMonthType;
        }
        if (this.model.deliveryPeriodStartDate !==
            this.sectionModel.deliveryPeriodStartDate) {
            this.tradeImageModel.deliveryPeriodStartDate = this.model.deliveryPeriodStartDate;
        }
        if (this.model.deliveryPeriodEndDate !==
            this.sectionModel.deliveryPeriodEndDate) {
            this.tradeImageModel.deliveryPeriodEndDate = this.model.deliveryPeriodEndDate;
        }
        if (this.model.portOfOrigin !== this.sectionModel.portOfOrigin) {
            this.tradeImageModel.portOfOrigin = this.model.portOfOrigin;
        }
        if (this.model.portOfDestination !== this.sectionModel.portOfDestination) {
            this.tradeImageModel.portOfDestination = this.model.portOfDestination;
        }
        if (this.model.marketSectorId) {
            if (Number(this.model.marketSectorId) !== this.sectionModel.marketSectorId) {
                this.tradeImageModel.marketSectorId = this.model.marketSectorId;
            }
        }
        if (this.model.memorandum !== this.sectionModel.memorandum) {
            this.tradeImageModel.memorandum = this.model.memorandum;
        }
        childSections = this.sectionModel.childSections;
        try {
            for (var childSections_1 = __values(childSections), childSections_1_1 = childSections_1.next(); !childSections_1_1.done; childSections_1_1 = childSections_1.next()) {
                var section = childSections_1_1.value;
                section.contractType = this.model.type;
                section.counterpartyReference = this.tradeImageModel.counterpartyReference
                    ? this.tradeImageModel.counterpartyReference
                    : null;
                if (this.tradeImageModel.commodityId) {
                    section.commodityId = this.tradeImageModel.commodityId;
                }
                if (this.tradeImageModel.buyerCode) {
                    section.buyerCode = this.tradeImageModel.buyerCode;
                }
                if (this.tradeImageModel.sellerCode) {
                    section.sellerCode = this.tradeImageModel.sellerCode;
                }
                if (this.tradeImageModel.cropYear) {
                    section.cropYear = this.tradeImageModel.cropYear;
                }
                if (this.tradeImageModel.currencyCode) {
                    section.currencyCode = this.tradeImageModel.currencyCode;
                }
                if (this.model.originalQuantity) {
                    section.originalQuantity = this.model.originalQuantity;
                }
                if (this.tradeImageModel.priceUnitId) {
                    section.priceUnitId = Number(this.tradeImageModel.priceUnitId);
                }
                if (this.tradeImageModel.price) {
                    section.price = this.tradeImageModel.price;
                }
                if (this.tradeImageModel.traderId) {
                    section.header.traderId = this.tradeImageModel.traderId;
                }
                if (this.tradeImageModel.paymentTerms) {
                    section.paymentTerms = this.tradeImageModel.paymentTerms;
                }
                if (this.tradeImageModel.contractTerms) {
                    section.contractTerms = this.tradeImageModel.contractTerms;
                }
                if (this.tradeImageModel.contractTermsLocation) {
                    section.contractTermsLocation = this.tradeImageModel.contractTermsLocation;
                }
                if (this.tradeImageModel.arbitration) {
                    section.arbitration = this.tradeImageModel.arbitration;
                }
                if (this.tradeImageModel.periodTypeId) {
                    section.periodTypeId = this.tradeImageModel.periodTypeId;
                }
                if (this.tradeImageModel.positionMonthType) {
                    section.positionMonthType = this.tradeImageModel.positionMonthType;
                }
                if (this.tradeImageModel.deliveryPeriodStartDate) {
                    section.deliveryPeriodStartDate = this.tradeImageModel.deliveryPeriodStartDate;
                }
                if (this.tradeImageModel.deliveryPeriodEndDate) {
                    section.deliveryPeriodEndDate = this.tradeImageModel.deliveryPeriodEndDate;
                }
                if (this.tradeImageModel.portOfOrigin) {
                    section.portOfOrigin = this.tradeImageModel.portOfOrigin;
                }
                if (this.tradeImageModel.portOfDestination) {
                    section.portOfDestination = this.tradeImageModel.portOfDestination;
                }
                if (this.tradeImageModel.marketSectorId) {
                    section.marketSectorId = Number(this.tradeImageModel.marketSectorId);
                }
                if (this.tradeImageModel.memorandum) {
                    section.memorandum = this.tradeImageModel.memorandum;
                }
                if (this.copyCostInChild) {
                    section.costs = this.model.costs;
                }
                section.contractDate = this.model.contractDate;
                section.status = _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"].Unapproved;
                section.blDate = null;
                section.allocatedTo = null;
                section.allocatedToId = null;
                section.allocationDate = null;
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (childSections_1_1 && !childSections_1_1.done && (_a = childSections_1.return)) _a.call(childSections_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return childSections;
    };
    TradeCapturePageComponent.prototype.contractDateSelected = function (contractDate) {
        this.mainTabComponent.contractDateSelected(contractDate);
        this.trafficTabComponent.contractDateSelected(contractDate);
    };
    TradeCapturePageComponent.prototype.getPhysicalContractInfo = function () {
        var _this = this;
        this.model = new _entities_physical_fixed_priced_contract_entity__WEBPACK_IMPORTED_MODULE_36__["PhysicalFixedPricedContract"]();
        this.formComponents.forEach(function (comp) {
            _this.model = comp.populateEntity(_this.model);
        });
        if (!this.isEdit && this.model.isInterco && !this.model.departmentId) {
            var currentCompany = this.masterdata.companies.filter(function (e) { return e.companyId === _this.company; })[0];
            this.model.departmentId = currentCompany.defaultDepartmentId;
        }
        this.model.costs.forEach(function (cost) {
            if (cost.costId) {
                _this.executionService
                    .getInvoiceMarkingsForCost(cost.costId, _this.dataVersionId)
                    .subscribe(function (data) {
                    var invoiceMarkingGridRows = [];
                    invoiceMarkingGridRows = data.value;
                    _this.getTotalInvoiceValue(invoiceMarkingGridRows);
                    var costInvoicePercent = (cost.invoicePercent * 100) / _this.totalInvoicePercent;
                    invoiceMarkingGridRows.forEach(function (costMarkingLines) {
                        costMarkingLines.invoicePercent =
                            (costInvoicePercent * costMarkingLines.invoicePercent) / 100;
                    });
                    cost.costInvoiceMarkingLines = invoiceMarkingGridRows;
                });
            }
        });
    };
    TradeCapturePageComponent.prototype.getTotalInvoiceValue = function (invoiceMarkingGridRows) {
        var _this = this;
        this.totalInvoicePercent = 0;
        if (invoiceMarkingGridRows) {
            invoiceMarkingGridRows.forEach(function (invoiceMarking) {
                _this.totalInvoicePercent += invoiceMarking.invoicePercent;
            });
        }
    };
    TradeCapturePageComponent.prototype.onAddCostsButtonClicked = function () {
        if (this.tradeQuantity > 0) {
            this.isSave = true;
            this.selectedTab = 1;
            this.costsTabComponent.handleAction(this.costsTabComponent.costsMenuActions.addCost);
        }
        else {
            this.snackbarService.throwErrorSnackBar('You Cannot Add costs to a contract with Zero Quantity');
        }
    };
    TradeCapturePageComponent.prototype.sideNavChangeCalled = function (sectionType) {
        this.sideNavOpened = true;
        this.sideNavScreen = sectionType;
        this.newTrancheSplitAgGridComponent.assignValue(this.sectionModel, sectionType);
        this.newTrancheSplitFooterComponent.assignValue(this.sectionModel, sectionType);
        this.newTrancheSplitHeaderComponent.assignSectionType(sectionType);
    };
    TradeCapturePageComponent.prototype.addSplitOrTranchesCalled = function (result) {
        this.newTrancheSplitAgGridComponent.addSplitOrTranches(result, 'addLines', false);
    };
    TradeCapturePageComponent.prototype.newTrancheShippingCalled = function (toggleShippingSelected) {
        if (toggleShippingSelected) {
            var noOfShippments = 0;
            var deliveryPeriodStartDate = moment(this.sectionModel.deliveryPeriodStartDate);
            var deliveryPeriodEndDate = moment(this.sectionModel.deliveryPeriodEndDate);
            noOfShippments =
                deliveryPeriodEndDate.month() -
                    deliveryPeriodStartDate.month() +
                    12 * (deliveryPeriodEndDate.year() - deliveryPeriodStartDate.year());
            this.newTrancheSplitAgGridComponent.addSplitOrTranches(noOfShippments + 1, 'shipping', false);
        }
        else {
            this.newTrancheSplitAgGridComponent.reset();
        }
    };
    TradeCapturePageComponent.prototype.childQuantityConsumedCalled = function (model) {
        if (model) {
            this.newTrancheSplitHeaderComponent.showAddline = true;
            if (this.sectionModel.quantity - model.childQuantityConsumed <= 0) {
                this.newTrancheSplitHeaderComponent.showAddline = false;
            }
            // if the weight code of parent and child trade for split is different
            // then the correct weight of the quantity to be updated in parent trade
            // after weight conversion
            if (model.isWeightConverted) {
                this.isWeightConvertedForSplit = model.isWeightConverted;
                // setting quantity of parent after creating a split with different
                // weight code
                this.childQuantityConsumed = model.childQuantityConsumed;
            }
            this.newTrancheSplitFooterComponent.quantityConsumedCtrl.patchValue(this.formatQuantity(model.childQuantityConsumed));
            this.newTrancheSplitFooterComponent.quantityAvailableCtrl.patchValue(this.formatQuantity(Number(new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_43__["AtlasNumber"](this.sectionModel.quantity.toString())
                .plus(-model.childQuantityConsumed)
                .toString())));
        }
    };
    TradeCapturePageComponent.prototype.formatQuantity = function (value) {
        if (value) {
            return new Intl.NumberFormat('en-US', {
                minimumFractionDigits: 3,
                maximumFractionDigits: 3,
            }).format(value);
        }
        return value;
    };
    TradeCapturePageComponent.prototype.enableProceedButtonCalled = function (enableProceedButton) {
        if (enableProceedButton) {
            this.newTrancheSplitHeaderComponent.showAddline = true;
        }
    };
    TradeCapturePageComponent.prototype.onDiscardButtonClick = function () {
        var _this = this;
        var confirmDiscardDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
            data: {
                title: 'Discard Changes',
                text: 'You have some modification pending. Close and lose changes?',
                okButton: 'Ok',
                cancelButton: 'Cancel',
            },
        });
        confirmDiscardDialog.afterClosed().subscribe(function (answer) {
            if (answer) {
                _this.newTrancheSplitAgGridComponent.disableAddNewLine = false;
                _this.newTrancheSplitHeaderComponent.showAddline = true;
                _this.sideNavOpened = false;
            }
        });
    };
    TradeCapturePageComponent.prototype.onSideNavSaveButtonClick = function () {
        var _this = this;
        if (!this.isSplitSaveDisabled) {
            this.isSplitSaveDisabled = true;
            var quantityAvailable = 0;
            var errorQuantity = 'Form is invalid. Please resolve the errors';
            this.newTrancheSplitAgGridComponent.populateEntity(this.sectionModel);
            if (this.newTrancheSplitAgGridComponent.isValid) {
                quantityAvailable = this.newTrancheSplitFooterComponent
                    .quantityAvailableCtrl.value
                    ? this.newTrancheSplitFooterComponent.quantityAvailableCtrl.value
                        .split(',')
                        .join('')
                    : this.newTrancheSplitFooterComponent.quantityAvailableCtrl.value;
                if (quantityAvailable >= 0) {
                    var quantityCheck = this.sectionModel.childSections.filter(function (childSection) { return childSection.quantity === 0; }).length > 0;
                    var checkNewLineAdded = this.sectionModel.childSections.filter(function (childElement) { return childElement.sectionId === undefined; }).length > 0;
                    if (!quantityCheck) {
                        if (checkNewLineAdded) {
                            if (this.sideNavScreen === _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_27__["SectionTypes"].Split) {
                                this.executionService
                                    .getAllocationBySectionId(this.sectionId, this.dataVersionId)
                                    .subscribe(function (data) {
                                    if (data) {
                                        _this.allocationModel = data;
                                        _this.splitAllocation();
                                    }
                                    else {
                                        _this.createTrancheSplit();
                                    }
                                });
                            }
                            else {
                                this.createTrancheSplit();
                            }
                        }
                    }
                    else {
                        this.snackbarService.informationSnackBar(errorQuantity);
                        this.isSplitSaveDisabled = false;
                    }
                }
                else {
                    this.snackbarService.informationSnackBar(errorQuantity);
                    this.isSplitSaveDisabled = false;
                }
            }
            else {
                this.snackbarService.throwErrorSnackBar(this.newTrancheSplitAgGridComponent.errorMessage
                    ? this.newTrancheSplitAgGridComponent.errorMessage
                    : errorQuantity);
                this.isSplitSaveDisabled = false;
            }
        }
    };
    TradeCapturePageComponent.prototype.createTrancheSplit = function () {
        var _this = this;
        this.sectionModel.dataVersionId = this.dataVersionId;
        this.sectionModel.childSections.forEach(function (element) {
            element.contractedValue = _this.setContractValue(element, element.quantity);
        });
        this.subscriptions.push(this.tradingService
            .createTrancheSplit(this.sectionModel, this.sideNavScreen)
            .subscribe(function (data) {
            _this.lockService
                .unlockContract(_this.sectionId, _this.getLockFunctionalContext())
                .subscribe();
            if (_this.allocationModel) {
                _this.allocateSections(data);
            }
            _this.tradeActionsService.displaySectionAfterEditSubject.next(new _entities_section_tab_index__WEBPACK_IMPORTED_MODULE_38__["SectionTabIndex"](data.map(function (result) { return result.sectionId; })[0], _this.selectedTab));
            if (_this.isWeightConvertedForSplit) {
                _this.sectionModel.quantity =
                    _this.sectionModel.quantity - _this.childQuantityConsumed;
                _this.tradingService
                    .updatePhysicalContract(_this.contractId, _this.convertToPhysicalFixedPricedContract(_this.sectionModel), _this.isWeightConvertedForSplit)
                    .subscribe();
            }
        }, function (error) {
            console.error(error);
            _this.isSplitSaveDisabled = false;
            _this.snackbarService.throwErrorSnackBar('Oops! An error ocurred');
        }));
    };
    TradeCapturePageComponent.prototype.setContractValue = function (sectionModel, quantityValue) {
        var quantityVal;
        quantityVal = quantityValue;
        var mask = Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_54__["CustomNumberMask"])(12, 10, true);
        if (this.masterdata === undefined) {
            return;
        }
        var weightCodeConversion = this.masterdata.weightUnits.find(function (weightUnit) { return weightUnit.weightUnitId === sectionModel.weightUnitId; }).conversionFactor;
        var selectedPriceUnit = this.masterdata.priceUnits.filter(function (priceUnit) { return priceUnit.priceUnitId === sectionModel.priceUnitId; });
        var priceCodeConversion = selectedPriceUnit.length > 0
            ? selectedPriceUnit[0].conversionFactor
            : undefined;
        if (!weightCodeConversion ||
            !priceCodeConversion ||
            !quantityValue ||
            !sectionModel.price) {
            sectionModel.contractedValue = '';
            return;
        }
        var contractPrice = sectionModel.price.toString().replace(/,/g, '');
        var contractPriceDecimal = new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_43__["AtlasNumber"](contractPrice);
        var quantity = quantityVal.toString().replace(/,/g, '');
        var quantityDecimal = new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_43__["AtlasNumber"](quantity);
        if (sectionModel.premiumDiscountTypeId !== undefined &&
            sectionModel.currencyCode !== sectionModel.premiumDiscountCurrency &&
            sectionModel.premiumDiscountTypeId !== undefined) {
            // discountPremiumValue exists
            var discountPremiumContractedPrice = 0;
            var discountPremiumSign = sectionModel.premiumDiscountTypeId ===
                _shared_enums_discount_type_enum__WEBPACK_IMPORTED_MODULE_47__["DiscountTypes"].Discount
                ? -1
                : 1;
            if (sectionModel.premiumDiscountBasis ===
                _shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_46__["DiscountBasis"].Rate) {
                discountPremiumContractedPrice =
                    sectionModel.premiumDiscountValue * discountPremiumSign;
            }
            else if (sectionModel.premiumDiscountBasis ===
                _shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_46__["DiscountBasis"].Percent) {
                discountPremiumContractedPrice = contractPriceDecimal.times((sectionModel.premiumDiscountValue * discountPremiumSign) / 100);
            }
            contractPriceDecimal = contractPriceDecimal.plus(discountPremiumContractedPrice);
        }
        var contractValue = contractPriceDecimal
            .times(quantityDecimal)
            .times(weightCodeConversion * priceCodeConversion)
            .toString();
        var contractValueFormatted = Object(text_mask_core__WEBPACK_IMPORTED_MODULE_8__["conformToMask"])(contractValue, mask, {
            guide: false,
        }).conformedValue;
        sectionModel.contractedValue = contractValueFormatted;
        return sectionModel.contractedValue;
    };
    TradeCapturePageComponent.prototype.getContractValue = function (sectionModelOrig, quantityValue) {
        var sectionModel = sectionModelOrig;
        var quantityVal;
        quantityVal = quantityValue;
        var mask = Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_54__["CustomNumberMask"])(12, 10, true);
        if (this.masterdata === undefined) {
            return;
        }
        var weightCodeConversion = this.masterdata.weightUnits.find(function (weightUnit) { return weightUnit.weightUnitId === sectionModel.weightUnitId; }).conversionFactor;
        var selectedPriceUnit = this.masterdata.priceUnits.filter(function (priceUnit) { return priceUnit.priceUnitId === sectionModel.priceUnitId; });
        var priceCodeConversion = selectedPriceUnit.length > 0
            ? selectedPriceUnit[0].conversionFactor
            : undefined;
        if (!weightCodeConversion ||
            !priceCodeConversion ||
            !quantityValue ||
            !sectionModel.price) {
            sectionModel.contractedValue = '';
            return;
        }
        var contractPrice = sectionModel.price.toString().replace(/,/g, '');
        var contractPriceDecimal = new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_43__["AtlasNumber"](contractPrice);
        var quantity = quantityVal.toString().replace(/,/g, '');
        var quantityDecimal = new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_43__["AtlasNumber"](quantity);
        if (sectionModel.premiumDiscountTypeId !== undefined &&
            sectionModel.currencyCode !== sectionModel.premiumDiscountCurrency &&
            sectionModel.premiumDiscountTypeId !== undefined) {
            // discountPremiumValue exists
            var discountPremiumContractedPrice = 0;
            var discountPremiumSign = sectionModel.premiumDiscountTypeId ===
                _shared_enums_discount_type_enum__WEBPACK_IMPORTED_MODULE_47__["DiscountTypes"].Discount
                ? -1
                : 1;
            if (sectionModel.premiumDiscountBasis ===
                _shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_46__["DiscountBasis"].Rate) {
                discountPremiumContractedPrice =
                    sectionModel.premiumDiscountValue * discountPremiumSign;
            }
            else if (sectionModel.premiumDiscountBasis ===
                _shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_46__["DiscountBasis"].Percent) {
                discountPremiumContractedPrice = contractPriceDecimal.times((sectionModel.premiumDiscountValue * discountPremiumSign) / 100);
            }
            contractPriceDecimal = contractPriceDecimal.plus(discountPremiumContractedPrice);
        }
        var contractValue = contractPriceDecimal
            .times(quantityDecimal)
            .times(weightCodeConversion * priceCodeConversion)
            .toString();
        var contractValueFormatted = Object(text_mask_core__WEBPACK_IMPORTED_MODULE_8__["conformToMask"])(contractValue, mask, {
            guide: false,
        }).conformedValue;
        sectionModel.contractedValue = contractValueFormatted;
        return sectionModel.contractedValue;
    };
    TradeCapturePageComponent.prototype.getPosition = function (event) {
        this.selectedTab = event.index;
        if (event.tab.textLabel === 'CONTRACT STATUS') {
            var index = event.index;
            var eleRef = document.getElementsByClassName('mat-tab-label-content');
            var el = eleRef[index].parentElement;
            this.offsetLeft = el.offsetLeft;
            this.offsetLeft = this.offsetLeft - 50;
        }
        switch (this.selectedTab) {
            case 1:
                this.costsTabComponent.onTabSelected();
                break;
            case 4:
                this.sectionTabComponent.onTabSelected();
                break;
            case 5:
                this.invoiceMarkingTabComponent.onTabSelected();
                break;
        }
        return { offsetLeft: this.offsetLeft };
    };
    TradeCapturePageComponent.prototype.splitAllocation = function () {
        var _this = this;
        var allocatedSectionModel;
        this.subscriptions.push(this.tradingService
            .getSection(this.allocationModel.allocatedSectionId, 0, this.dataVersionId)
            .subscribe(function (data) {
            allocatedSectionModel = data;
            if (allocatedSectionModel) {
                _this.tradingService
                    .getChildSections(_this.allocationModel.allocatedSectionId, _this.dataVersionId)
                    .subscribe(function (allocatedChildSections) {
                    _this.newTrancheSplitAgGridComponent.assignValue(allocatedSectionModel, _this.sideNavScreen);
                    _this.newTrancheSplitAgGridComponent.addSplitOrTranches(_this.sectionModel.childSections.length, 'addLines', true, allocatedSectionModel, allocatedChildSections);
                    _this.newTrancheSplitAgGridComponent.populateEntity(allocatedSectionModel, allocatedChildSections);
                    var index = 0;
                    _this.sectionModel.childSections.forEach(function (obj) {
                        allocatedSectionModel.childSections[index].quantity =
                            obj.quantity;
                        allocatedSectionModel.childSections[index].originalQuantity = obj.quantity;
                        index++;
                    });
                    allocatedSectionModel.childSections.forEach(function (childSection) {
                        return _this.sectionModel.childSections.push(childSection);
                    });
                    _this.createTrancheSplit();
                });
            }
            else {
                allocatedSectionModel.childSections.forEach(function (childSection) {
                    return _this.sectionModel.childSections.push(childSection);
                });
                _this.createTrancheSplit();
            }
        }));
    };
    TradeCapturePageComponent.prototype.allocateSections = function (result) {
        var _this = this;
        var midLength = result.length / 2;
        var allocateSectionModel = [];
        for (var i = 0; i < midLength; i++) {
            var allocateSectionElement = new _shared_entities_allocate_section_entity__WEBPACK_IMPORTED_MODULE_13__["AllocateSection"]();
            allocateSectionElement.sectionId = result[i].sectionId;
            allocateSectionElement.allocatedSectionId =
                result[i + midLength].sectionId;
            allocateSectionElement.quantity = this.sectionModel.childSections[i + midLength].quantity;
            allocateSectionElement.shippingType = this.allocationModel.transferShippingOptionId;
            allocateSectionElement.dataVersionId = this.dataVersionId;
            allocateSectionModel.push(allocateSectionElement);
        }
        this.executionService
            .allocateSections(allocateSectionModel)
            .subscribe(function () {
            _this.snackbarService.informationSnackBar('Split Allocated Successfully');
        });
    };
    TradeCapturePageComponent.prototype.contractStatusChanged = function (contractStatus) {
        this.headerComponent.contractStatusChanged(contractStatus);
        this.sectionTabComponent.contractStatusChanged(contractStatus);
    };
    TradeCapturePageComponent.prototype.quantityValueUpdate = function (quantity) {
        if (quantity >= 0) {
            this.mainTabComponent.quantityComponent.quantityCtrl.patchValue(quantity);
            this.mainTabComponent.quantityComponent.quantityContractedCtrl.patchValue(quantity);
            this.mainTabComponent.quantityComponent.onQuantityBlur(quantity);
            this.trafficTabQuantity = quantity;
            this.quantityTrafficSplit = quantity;
        }
        var isAnyCurrentToggleSelected = false;
        var isAnyAllocationCardCheckFailed = false;
        var allocatedSectionCode;
        allocatedSectionCode = this.trafficTabComponent.allocationComponent
            .allocatedSectionCode;
        isAnyCurrentToggleSelected = this.trafficTabComponent.currentTradeComponent.checkAnyToggleSelected();
        isAnyAllocationCardCheckFailed = this.trafficTabComponent.allocationComponent.allocationSelectionChecked();
        if (allocatedSectionCode &&
            allocatedSectionCode.toString().trim().length > 0) {
            this.isEdit =
                isAnyCurrentToggleSelected || !isAnyAllocationCardCheckFailed
                    ? true
                    : false;
        }
        else {
            this.isEdit = isAnyCurrentToggleSelected ? true : false;
        }
        if (this.isEdit && !this.isTradeImage) {
            this.startLockRefresh();
        }
        else {
            this.stopLockRefresh();
        }
    };
    // -- (De)Allocation Code
    TradeCapturePageComponent.prototype.onDeallocateTradeButtonClicked = function () {
        this.openDeallocationDialog();
    };
    TradeCapturePageComponent.prototype.openDeallocationDialog = function () {
        var _this = this;
        this.subscriptions.push(this.lockService
            .isLockedContract(this.sectionModel.sectionId)
            .subscribe(function (lock) {
            if (lock.isLocked) {
                _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Lock',
                        text: lock.message,
                        okButton: 'Got it',
                    },
                });
            }
            else {
                _this.subscriptions.push(_this.lockService
                    .lockContract(_this.sectionModel.sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_15__["LockFunctionalContext"].Deallocation)
                    .subscribe(function (lockState) {
                    var dialogRef = _this.dialog.open(_dialog_boxes_trade_deallocation_trade_deallocation_dialog_component_component__WEBPACK_IMPORTED_MODULE_35__["TradeDeallocationDialogComponent"], {
                        disableClose: true,
                    });
                    _this.subscriptions.push(dialogRef.afterClosed().subscribe(function (result) {
                        if (result !== undefined) {
                            _this.subscriptions.push(_this.executionService
                                .deallocateContract(_this.sectionModel.sectionId, result, _this.dataVersionId)
                                .subscribe(function (ok) {
                                if (ok) {
                                    _this.snackbarService.throwErrorSnackBar('Trade has been successfully de-allocated');
                                    _this.tradeManagementMenuBarComponent.updateDeallocationInfo();
                                }
                                _this.lockService.cleanSessionLocks().subscribe();
                            }));
                        }
                        else {
                            _this.lockService.cleanSessionLocks().subscribe();
                        }
                    }));
                }));
            }
        }));
    };
    // -- Approve
    TradeCapturePageComponent.prototype.onApproveSectionButtonClicked = function () {
        var _this = this;
        if (!this.tradeCanBeApproved) {
            this.snackbarService.throwErrorSnackBar('You cannot approve a contract with default department');
            return;
        }
        if (this.dataVersionId) {
            this.snackbarService.informationSnackBar('You cannot approve a contract in a freeze');
            return;
        }
        if (this.isFirstApproval === true && this.isZeroCostRow === true) {
            var confirmDiscardDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                data: {
                    text: 'There are some costs lines with zero values, do you still want to proceed with the first approval of the trade?',
                    okButton: 'YES',
                    cancelButton: 'NO',
                },
            });
            confirmDiscardDialog.afterClosed().subscribe(function (answer) {
                if (answer) {
                    _this.subscriptions.push(_this.tradingService
                        .approveSection(_this.sectionModel.sectionId)
                        .subscribe(function (ok) {
                        if (ok) {
                            _this.sectionModel.status = _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"].Approved;
                            _this.headerComponent.contractStatusChanged(_shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"].Approved);
                            _this.tradeManagementMenuBarComponent.contractStatusChanged(_shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"].Approved);
                            _this.isApprovalBannerDisplayed = true;
                            _this.costsTabComponent.getCosts(_this.sectionModel.sectionId);
                            _this.isFirstApproval = false;
                        }
                    }));
                }
            });
        }
        else {
            this.subscriptions.push(this.tradingService
                .approveSection(this.sectionModel.sectionId)
                .subscribe(function (ok) {
                if (ok) {
                    _this.sectionModel.status = _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"].Approved;
                    _this.headerComponent.contractStatusChanged(_shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"].Approved);
                    _this.sectionTabComponent.contractStatusChanged(_shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"].Approved);
                    _this.tradeManagementMenuBarComponent.contractStatusChanged(_shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"].Approved);
                    _this.isApprovalBannerDisplayed = true;
                    _this.costsTabComponent.getCosts(_this.sectionModel.sectionId);
                }
            }));
        }
    };
    // --UnApprove
    TradeCapturePageComponent.prototype.onUnApproveSectionButtonClicked = function () {
        var _this = this;
        if (this.dataVersionId) {
            this.snackbarService.informationSnackBar('You cannot Unapprove a contract in a freeze');
            return;
        }
        if (this.totalInvoiceValuePercent === 100) {
            var confirmDiscardDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                data: {
                    text: 'Trade is already 100% invoiced. Do you want to Unapprove?',
                    okButton: 'CONFIRM',
                    cancelButton: 'CANCEL',
                },
            });
            confirmDiscardDialog.afterClosed().subscribe(function (answer) {
                if (answer) {
                    _this.subscriptions.push(_this.tradingService
                        .unapproveSection(_this.sectionModel.sectionId)
                        .subscribe(function (ok) {
                        if (ok) {
                            _this.sectionModel.status = _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"].Unapproved;
                            _this.headerComponent.contractStatusChanged(_shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"].Unapproved);
                            _this.tradeManagementMenuBarComponent.contractStatusChanged(_shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"].Unapproved);
                            _this.isApprovalBannerDisplayed = false;
                        }
                    }));
                }
            });
        }
        else {
            this.subscriptions.push(this.tradingService
                .unapproveSection(this.sectionModel.sectionId)
                .subscribe(function (ok) {
                if (ok) {
                    _this.sectionModel.status = _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"].Unapproved;
                    _this.headerComponent.contractStatusChanged(_shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"].Unapproved);
                    _this.tradeManagementMenuBarComponent.contractStatusChanged(_shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"].Unapproved);
                    _this.isApprovalBannerDisplayed = false;
                }
            }));
        }
    };
    // Delete
    TradeCapturePageComponent.prototype.onDeleteSectionButtonClicked = function () {
        var _this = this;
        var tradePopUpTitle = 'Trade Deletion';
        if (this.sectionModel.quantity !== null &&
            this.sectionModel.quantity > 0 &&
            (!this.statusTabComponent.invoicingComponent.invoicePercentage
                || this.statusTabComponent.invoicingComponent.invoicePercentage === 0
                || this.costWithInvoice)) {
            this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                data: {
                    title: tradePopUpTitle,
                    text: 'Not allowed. Quantity is not equal to zero.',
                    okButton: 'Ok',
                },
            });
        }
        else if (this.statusTabComponent.invoicingComponent.invoicePercentage > 0 ||
            this.costWithInvoice) {
            this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                data: {
                    title: tradePopUpTitle,
                    text: 'Not allowed. ' +
                        this.headerComponent.contractReference +
                        ' is invoiced',
                    okButton: 'Ok',
                },
            });
        }
        else if (this.sectionModel.childSections !== null &&
            this.sectionModel.childSections.length > 0 &&
            this.sectionModel.sectionOriginId === 0) {
            this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                data: {
                    title: tradePopUpTitle,
                    text: 'Not allowed to delete a parent trade.',
                    okButton: 'Ok',
                },
            });
        }
        else if (this.sectionModel.allocatedTo !== null &&
            this.sectionModel.allocatedToId !== null) {
            this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                data: {
                    title: tradePopUpTitle,
                    text: 'Not allowed. ' +
                        this.sectionModel.contractLabel +
                        ' is allocated to ' +
                        this.sectionModel.allocatedTo.contractLabel,
                    okButton: 'Ok',
                },
            });
        }
        else {
            var confirmDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                data: {
                    title: tradePopUpTitle,
                    text: 'Trade will be deleted. This action is irreversible. Continue with deletion?',
                    okButton: 'Delete anyway',
                    cancelButton: 'Cancel',
                },
            });
            confirmDialog.afterClosed().subscribe(function (answer) {
                if (answer) {
                    _this.subscriptions.push(_this.tradingService
                        .deleteSection(_this.sectionModel.sectionId)
                        .subscribe(function (ok) {
                        if (ok) {
                            _this.router.navigate([
                                _this.companyManager.getCurrentCompanyId() + '/trades',
                            ]);
                        }
                    }));
                }
            });
        }
    };
    TradeCapturePageComponent.prototype.invoicePercentOfCost = function (costData) {
        this.costWithInvoice = costData.find(function (inv) { return inv.invoicePercent > 0; });
    };
    TradeCapturePageComponent.prototype.onCloseSectionButtonClicked = function (sectionModel, invoiceModel, isAllocatedTrade, sectionCancelDetails) {
        var _this = this;
        var unpostedTradeInvoiceStatusList = new Array();
        var cashUnMatchedInvoiceTradeList = new Array();
        var invoiceMarkingGridRows;
        var allocatedTradeValid = true;
        var closeSectionModel = sectionModel === null ? this.sectionModel : sectionModel;
        invoiceMarkingGridRows =
            invoiceModel === null
                ? this.invoiceMarkingTabComponent.detailedViewComponent
                    .invoiceMarkingGridRows
                : invoiceModel;
        invoiceMarkingGridRows.forEach(function (x) {
            if (x.postingStatusId !== _shared_enums_posting_status_enum__WEBPACK_IMPORTED_MODULE_50__["PostingStatus"].Posted) {
                unpostedTradeInvoiceStatusList.push(x);
            }
            if (x.cashMatchDate === null ||
                x.cashMatchDate.toDateString() ===
                    _this.invoiceMarkingTabComponent.detailedViewComponent.defaultDate) {
                cashUnMatchedInvoiceTradeList.push(x);
            }
        });
        var invoicePercentage = invoiceMarkingGridRows.length > 0
            ? invoiceMarkingGridRows.reduce(function (a, b) {
                return a + b.invoicePercent;
            }, 0)
            : 0;
        var costFilteredByInvoiceStatus = closeSectionModel.costs.filter(function (cost) { return cost.invoiceStatus === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_49__["InvoicingStatus"].Uninvoiced; });
        var confirmPopupData = {};
        var confirmSectionCloseSuccess = true;
        // Trade is invoiced and
        // No cash unmatched invoices, No unposted invoice and No uninvoced trade
        if (invoiceMarkingGridRows.length > 0 &&
            invoicePercentage === 100 &&
            unpostedTradeInvoiceStatusList.length === 0 &&
            cashUnMatchedInvoiceTradeList.length === 0 &&
            (costFilteredByInvoiceStatus === null ||
                costFilteredByInvoiceStatus.length === 0)) {
            confirmPopupData = {
                data: {
                    title: 'Close Trade',
                    text: 'You are about to close this trade. Continue?',
                    okButton: 'YES',
                    cancelButton: 'NO',
                },
            };
        }
        else if (closeSectionModel.quantity === 0 ||
            closeSectionModel.contractInvoiceTypeId ===
                _shared_enums_contract_invoice_type_enum__WEBPACK_IMPORTED_MODULE_21__["ContractInvoiceType"].Cancellation) {
            confirmPopupData = {
                data: {
                    title: 'Close Trade',
                    text: 'You are about to close this trade. Continue?',
                    okButton: 'YES',
                    cancelButton: 'NO',
                },
            };
        }
        else if (closeSectionModel.invoicingStatusId !== _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_49__["InvoicingStatus"].Finalized) {
            confirmPopupData = {
                data: {
                    title: 'Blocking - Close Trade',
                    text: 'Not allowed: Trade is not final invoiced.',
                    okButton: 'Ok',
                },
            };
            confirmSectionCloseSuccess = false;
            if (isAllocatedTrade) {
                allocatedTradeValid = false;
            }
        }
        else if (unpostedTradeInvoiceStatusList.length > 0) {
            confirmPopupData = {
                data: {
                    title: 'Blocking - Close Trade',
                    text: 'Not allowed: invoices are unposted.',
                    okButton: 'Ok',
                },
            };
            confirmSectionCloseSuccess = false;
            if (isAllocatedTrade) {
                allocatedTradeValid = false;
            }
        }
        else if (closeSectionModel.blDate === null ||
            closeSectionModel.blDate.toDateString() ===
                this.invoiceMarkingTabComponent.detailedViewComponent.defaultDate) {
            confirmPopupData = {
                data: {
                    title: 'Blocking - Close Trade',
                    text: 'Not allowed. The trade is unrealized physicals. Make the Quantity 0 or change the shipping status to close it.',
                    okButton: 'Ok',
                },
            };
            confirmSectionCloseSuccess = false;
            if (isAllocatedTrade) {
                allocatedTradeValid = false;
            }
        }
        else if (costFilteredByInvoiceStatus.length > 0) {
            confirmPopupData = {
                data: {
                    title: 'Warning - Close Trade',
                    text: 'Trade has cost accrual. Continue with closure?',
                    okButton: 'YES',
                    cancelButton: 'NO',
                },
            };
        }
        else if (unpostedTradeInvoiceStatusList.length === 0 &&
            cashUnMatchedInvoiceTradeList.length > 0) {
            confirmPopupData = {
                data: {
                    title: 'Warning - Close Trade',
                    text: 'Invoice(s) are not cash matched. Continue with closure?',
                    okButton: 'YES',
                    cancelButton: 'NO',
                },
            };
        }
        if (!confirmSectionCloseSuccess) {
            var alertCloseDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], confirmPopupData);
            if (isAllocatedTrade) {
                alertCloseDialog.afterClosed().subscribe(function (answer) {
                    _this.closeTrades(_this.sectionToClose, sectionCancelDetails);
                });
            }
            else if (sectionCancelDetails !== null &&
                sectionCancelDetails.isSectionClosed) {
                alertCloseDialog.afterClosed().subscribe(function (answer) {
                    _this.cancelTrades(sectionCancelDetails);
                });
            }
        }
        else {
            var confirmCloseDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], confirmPopupData);
            confirmCloseDialog.afterClosed().subscribe(function (answer) {
                if (answer && !isAllocatedTrade) {
                    _this.sectionToClose.push({
                        sectionId: closeSectionModel.sectionId,
                        sectionCode: closeSectionModel.contractLabel,
                    });
                    if (closeSectionModel.allocatedTo !== null &&
                        !closeSectionModel.allocatedTo.isClosed) {
                        var confirmCloseAllocationDialog = _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                            data: {
                                text: 'Do you want to close allocation ' +
                                    closeSectionModel.allocatedTo.contractLabel,
                                okButton: 'YES',
                                cancelButton: 'NO',
                            },
                        });
                        confirmCloseAllocationDialog.afterClosed().subscribe(function (answer) {
                            if (answer) {
                                var allocatedSectionModel_1;
                                var allocatedSectionInvoiceMarkingGridRows_1;
                                _this.subscriptions.push(_this.lockService
                                    .isLockedContract(closeSectionModel.allocatedTo.sectionId)
                                    .subscribe(function (lock) {
                                    if (lock.isLocked) {
                                        var allocationTradeLockPopup = _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                                            data: {
                                                title: 'Lock',
                                                text: lock.message,
                                                okButton: 'Got it',
                                            },
                                        });
                                        allocationTradeLockPopup
                                            .afterClosed()
                                            .subscribe(function (answer) {
                                            _this.closeTrades(_this.sectionToClose, sectionCancelDetails);
                                        });
                                    }
                                    else {
                                        _this.tradingService
                                            .getSection(closeSectionModel.allocatedTo.sectionId, 0, _this.dataVersionId)
                                            .subscribe(function (data) {
                                            allocatedSectionModel_1 = data;
                                            if (data.invoiceReference &&
                                                (data.invoiceTypeId === _shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_48__["InvoiceTypes"].Cost ||
                                                    data.invoiceTypeId ===
                                                        _shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_48__["InvoiceTypes"].CostReceivable ||
                                                    data.invoiceTypeId ===
                                                        _shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_48__["InvoiceTypes"].CostCreditNote ||
                                                    data.invoiceTypeId ===
                                                        _shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_48__["InvoiceTypes"].CostDebitNote)) {
                                                data.invoiceReference = null;
                                            }
                                            _this.executionService
                                                .getInvoiceDetailsBySection(closeSectionModel.allocatedTo.sectionId, _this.childFlag, _this.dataVersionId)
                                                .subscribe(function (data) {
                                                var e_5, _a;
                                                allocatedSectionInvoiceMarkingGridRows_1 = _this.invoiceMarkingTabComponent.detailedViewComponent.getDocumentTypeForGrid(data.value);
                                                try {
                                                    for (var allocatedSectionInvoiceMarkingGridRows_2 = __values(allocatedSectionInvoiceMarkingGridRows_1), allocatedSectionInvoiceMarkingGridRows_2_1 = allocatedSectionInvoiceMarkingGridRows_2.next(); !allocatedSectionInvoiceMarkingGridRows_2_1.done; allocatedSectionInvoiceMarkingGridRows_2_1 = allocatedSectionInvoiceMarkingGridRows_2.next()) {
                                                        var rows = allocatedSectionInvoiceMarkingGridRows_2_1.value;
                                                        rows.cashMatchDate = _this.invoiceMarkingTabComponent.detailedViewComponent.isDateNull(rows.cashMatchDate)
                                                            ? null
                                                            : rows.cashMatchDate;
                                                    }
                                                }
                                                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                                                finally {
                                                    try {
                                                        if (allocatedSectionInvoiceMarkingGridRows_2_1 && !allocatedSectionInvoiceMarkingGridRows_2_1.done && (_a = allocatedSectionInvoiceMarkingGridRows_2.return)) _a.call(allocatedSectionInvoiceMarkingGridRows_2);
                                                    }
                                                    finally { if (e_5) throw e_5.error; }
                                                }
                                                _this.executionService
                                                    .GetSectionTrafficDetails(closeSectionModel.allocatedTo.sectionId, _this.dataVersionId)
                                                    .subscribe(function (data) {
                                                    if (data) {
                                                        _this.onCloseSectionButtonClicked(allocatedSectionModel_1, allocatedSectionInvoiceMarkingGridRows_1, true, null);
                                                    }
                                                });
                                            });
                                        });
                                    }
                                }));
                            }
                            else {
                                _this.closeTrades(_this.sectionToClose, sectionCancelDetails);
                            }
                        });
                    }
                    else {
                        _this.closeTrades(_this.sectionToClose, sectionCancelDetails);
                    }
                }
                else if (answer && allocatedTradeValid) {
                    _this.sectionToClose.push({
                        sectionId: closeSectionModel.sectionId,
                        sectionCode: closeSectionModel.contractLabel,
                    });
                    _this.closeTrades(_this.sectionToClose, sectionCancelDetails);
                }
                else if (sectionCancelDetails !== null &&
                    sectionCancelDetails.isSectionClosed) {
                    _this.cancelTrades(sectionCancelDetails);
                }
            });
        }
    };
    TradeCapturePageComponent.prototype.closeTrades = function (sectionIToClose, sectionCancelDetails) {
        var _this = this;
        var sectionIdsToClose = new Array();
        sectionIToClose.forEach(function (element) {
            sectionIdsToClose.push(element.sectionId);
        });
        this.subscriptions.push(this.tradingService
            .closeSection(sectionIdsToClose, this.childFlag, this.dataVersionId)
            .subscribe(function (ok) {
            if (ok) {
                var title = sectionIToClose.length > 1
                    ? sectionIToClose[0].sectionCode +
                        ' and ' +
                        sectionIToClose[1].sectionCode +
                        ' are now closed.'
                    : sectionIToClose[0].sectionCode + ' is now closed.';
                var closeInfoPopup = _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Trade Closed',
                        text: title,
                        okButton: 'Ok',
                    },
                });
                closeInfoPopup.afterClosed().subscribe(function (answer) {
                    if (!_this.dataVersionId) {
                        if (sectionCancelDetails !== null &&
                            sectionCancelDetails.isSectionClosed) {
                            _this.cancelTrades(sectionCancelDetails);
                        }
                        else {
                            _this.router.navigate([
                                _this.companyManager.getCurrentCompanyId() +
                                    '/trades/display/' +
                                    _this.sectionId,
                            ]);
                        }
                    }
                    else {
                        _this.router.navigate([
                            _this.companyManager.getCurrentCompanyId() +
                                '/trades/snapshot/' +
                                _this.dataVersionId +
                                '/display/' +
                                _this.sectionId,
                        ]);
                    }
                });
            }
        }));
    };
    TradeCapturePageComponent.prototype.onReopenSectionButtonClicked = function () {
        var _this = this;
        if (this.sectionModel.assignedCharterReference === null ||
            this.sectionModel.charterStatusId === null ||
            this.sectionModel.charterStatusId === _shared_enums_charter_status_enum__WEBPACK_IMPORTED_MODULE_20__["CharterStatus"].Open) {
            var sectionsToReOpen_1 = new Array();
            sectionsToReOpen_1.push({
                sectionId: this.sectionModel.sectionId,
                sectionCode: this.sectionModel.contractLabel,
            });
            if (this.sectionModel.allocatedTo != null &&
                this.sectionModel.allocatedTo.isClosed) {
                var confirmReopenDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Reopen Trade',
                        text: 'This contract is allocated to contract ' +
                            this.sectionModel.allocatedTo.contractLabel +
                            ', Do you wish to reopen this contract too? ',
                        okButton: 'YES',
                        cancelButton: 'NO',
                    },
                });
                confirmReopenDialog.afterClosed().subscribe(function (answer) {
                    if (answer) {
                        sectionsToReOpen_1.push({
                            sectionId: _this.sectionModel.allocatedTo.sectionId,
                            sectionCode: _this.sectionModel.allocatedTo.contractLabel,
                        });
                    }
                    _this.reopenTrades(sectionsToReOpen_1);
                });
            }
            else {
                this.reopenTrades(sectionsToReOpen_1);
            }
        }
        else if (this.sectionModel.charterStatusId === _shared_enums_charter_status_enum__WEBPACK_IMPORTED_MODULE_20__["CharterStatus"].Closed) {
            this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                data: {
                    title: 'Blocking - Reopen Trade',
                    text: 'Not allowed. Trade assigned to closed Charter ' +
                        this.sectionModel.assignedCharterReference +
                        '.',
                    okButton: 'Ok',
                },
            });
        }
    };
    TradeCapturePageComponent.prototype.reopenTrades = function (sectionToReopen) {
        var _this = this;
        var sectionIdsToReopen = new Array();
        sectionToReopen.forEach(function (element) {
            sectionIdsToReopen.push(element.sectionId);
        });
        this.subscriptions.push(this.tradingService
            .reOpenSection(sectionIdsToReopen, this.dataVersionId)
            .subscribe(function (ok) {
            if (ok) {
                var title = sectionToReopen.length > 1
                    ? sectionToReopen[0].sectionCode +
                        ' and ' +
                        sectionToReopen[1].sectionCode +
                        ' are now reopend'
                    : sectionToReopen[0].sectionCode + ' is now reopened.';
                var reopenInfoPopup = _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Trade Reopened',
                        text: title,
                        okButton: 'Ok',
                    },
                });
                reopenInfoPopup.afterClosed().subscribe(function (answer) {
                    if (!_this.dataVersionId) {
                        _this.router.navigate([
                            _this.companyManager.getCurrentCompanyId() +
                                '/trades/display/' +
                                _this.sectionId,
                        ]);
                    }
                    else {
                        _this.router.navigate([
                            _this.companyManager.getCurrentCompanyId() +
                                '/trades/snapshot/' +
                                _this.dataVersionId +
                                '/display/' +
                                _this.sectionId,
                        ]);
                    }
                });
            }
        }));
    };
    TradeCapturePageComponent.prototype.onCloseApprovalBannerClicked = function () {
        this.isApprovalBannerDisplayed = false;
    };
    TradeCapturePageComponent.prototype.onGenerateButtonClicked = function () {
        this.tradeActionsService.contractAdviceSubject.next(this.sectionModel.sectionId);
    };
    TradeCapturePageComponent.prototype.ngOnDestroy = function () {
        if (this.isEdit) {
            this.stopLockRefresh();
            this.lockService
                .unlockContract(this.sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_15__["LockFunctionalContext"].TradeEdit)
                .subscribe();
        }
        this.subscriptions.forEach(function (subscription) {
            subscription.unsubscribe();
        });
    };
    TradeCapturePageComponent.prototype.createSplitForDecreaseQuantity = function (tradeSplitCreationOnQuantityAdjust, alloatedTradeSplitCreationOnQuantityAdjust, allocationOfTrades) {
        var _this = this;
        var sectionIds = [];
        var contractedValues = [];
        var splitQuantity = this.originalQuantity - this.quantityTrafficSplit;
        if (tradeSplitCreationOnQuantityAdjust) {
            sectionIds.push(this.model.sectionId);
            contractedValues.push(this.setContractValue(this.sectionModel, splitQuantity));
        }
        if (this.model.allocatedTo && alloatedTradeSplitCreationOnQuantityAdjust) {
            sectionIds.push(this.model.allocatedTo.sectionId);
            contractedValues.push(this.setContractValue(this.tragetSectionModel, splitQuantity));
        }
        this.tradingService
            .createSplitForContract(sectionIds, splitQuantity, this.dataVersionId, contractedValues)
            .subscribe(function (data) {
            if (data) {
                var splitResult_1 = data;
                if (splitResult_1.length > 0) {
                    // Section traffic update
                    if (_this.sectionModel.charterId) {
                        var sectionTrafficList_1 = [];
                        splitResult_1.forEach(function (element) {
                            var sectionTraffic = new _shared_entities_section_traffic_entity__WEBPACK_IMPORTED_MODULE_17__["SectionTraffic"]();
                            sectionTraffic.sectionId = element.sectionId;
                            sectionTraffic.blDate = _this.trafficTabComponent.blInfoComponent
                                .blDateCtrl.value
                                ? new Date(_this.trafficTabComponent.blInfoComponent.blDateCtrl.value)
                                : null;
                            sectionTraffic.blReference = _this.trafficTabComponent.blInfoComponent.blReferenceCtrl.value;
                            sectionTraffic.vesselCode = _this.trafficTabComponent
                                .shipmentInfoComponent.vesselCtrl.value
                                ? _this.trafficTabComponent.shipmentInfoComponent.vesselCtrl
                                    .value.vesselName
                                : null;
                            sectionTraffic.shippingStatusCode = _this.trafficTabComponent
                                .shipmentInfoComponent.shippingStatusCtrl.value
                                ? _this.trafficTabComponent.shipmentInfoComponent.shippingStatus.find(function (shipping) {
                                    return shipping.description ===
                                        _this.trafficTabComponent.shipmentInfoComponent
                                            .shippingStatusCtrl.value;
                                }).shippingStatusCode
                                : null;
                            sectionTraffic.dataVersionId = _this.dataVersionId;
                            sectionTrafficList_1.push(sectionTraffic);
                        });
                        _this.subscriptions.push(_this.executionService
                            .assignSectionsToCharter(_this.sectionModel.charterId, sectionTrafficList_1)
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_7__["map"])(function () { }))
                            .subscribe());
                    }
                    // Section costs
                    var childSections = data.map(function (sectionCreated) {
                        return new _shared_services_execution_dtos_child_sections_to_split__WEBPACK_IMPORTED_MODULE_55__["ChildSectionsToSplit"](sectionCreated.sectionId, splitQuantity);
                    });
                    _this.tradingService
                        .splitCostsForSection(_this.model.sectionId, childSections)
                        .subscribe(function () { });
                    // Section allocated update
                    if (_this.model.allocatedTo) {
                        if (allocationOfTrades) {
                            _this.executionService
                                .getAllocationBySectionId(_this.model.sectionId, _this.dataVersionId)
                                .subscribe(function (allocatedResult) {
                                var allocateSectionModel = [];
                                var allocateSectionElement = new _shared_entities_allocate_section_entity__WEBPACK_IMPORTED_MODULE_13__["AllocateSection"]();
                                allocateSectionElement.sectionId = splitResult_1[0].sectionId;
                                allocateSectionElement.allocatedSectionId =
                                    splitResult_1[1].sectionId;
                                allocateSectionElement.quantity = splitQuantity;
                                allocateSectionElement.shippingType =
                                    allocatedResult.transferShippingOptionId;
                                allocateSectionElement.dataVersionId = _this.dataVersionId;
                                allocateSectionModel.push(allocateSectionElement);
                                _this.executionService
                                    .allocateSections(allocateSectionModel)
                                    .subscribe(function () {
                                    _this.snackbarService.informationSnackBar(splitResult_1[0].contractLabel +
                                        ' and ' +
                                        splitResult_1[1].contractLabel +
                                        ' have been created and allocated ');
                                });
                            });
                        }
                        else if (splitResult_1.length > 1) {
                            var message = splitResult_1[0].contractLabel +
                                ' and ' +
                                splitResult_1[1].contractLabel +
                                ' have been created without allocation ';
                            _this.snackbarService.informationAndCopySnackBar(message, message);
                        }
                        else {
                            _this.snackbarService.informationAndCopySnackBar(splitResult_1[0].contractLabel + ' has been created ', splitResult_1[0].contractLabel);
                        }
                        _this.tradeActionsService.displaySectionAfterEditSubject.next(new _entities_section_tab_index__WEBPACK_IMPORTED_MODULE_38__["SectionTabIndex"](_this.sectionId, _this.selectedTab));
                    }
                    else {
                        _this.snackbarService.informationAndCopySnackBar(splitResult_1[0].contractLabel + ' created not allocated', splitResult_1[0].contractLabel);
                    }
                    _this.tradeActionsService.displaySectionAfterEditSubject.next(new _entities_section_tab_index__WEBPACK_IMPORTED_MODULE_38__["SectionTabIndex"](_this.sectionId, _this.selectedTab));
                }
            }
        });
    };
    // --Trade Image
    TradeCapturePageComponent.prototype.onImageButtonClicked = function () {
        this.openTradeImageDialog();
    };
    // --Save Trade As Favourite
    TradeCapturePageComponent.prototype.onSaveAsFavoriteClicked = function () {
        this.openSaveAsFavouriteDialog();
    };
    TradeCapturePageComponent.prototype.openSaveAsFavouriteDialog = function () {
        var company = this.route.snapshot.paramMap.get('company');
        this.dialog.open(_contract_physical_capture_save_as_favourite_dialog_save_as_favourite_dialog_component__WEBPACK_IMPORTED_MODULE_41__["SaveAsFavouriteDialogComponent"], {
            data: {
                title: this.sectionModel.contractLabel,
                sectionId: this.sectionId,
                companyId: company,
            },
            width: '50%',
        });
    };
    TradeCapturePageComponent.prototype.openTradeImageDialog = function () {
        var _this = this;
        var company = this.route.snapshot.paramMap.get('company');
        var parentSectionNumber = this.sectionModel.sectionNumber === '0000' ? true : false;
        var isAllocateContractDisabled = this.sectionModel.allocatedTo === null &&
            this.sectionModel.quantity !== 0 &&
            this.sectionModel.status !== _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"].Unapproved
            ? false
            : true;
        var tradeImageDialog = this.dialog.open(_contract_physical_capture_trade_image_dialog_trade_image_dialog_component__WEBPACK_IMPORTED_MODULE_42__["TradeImageDialogComponent"], {
            data: {
                title: this.sectionModel.contractLabel,
                type: _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_23__["ContractTypes"][this.sectionModel.contractType],
                companyId: company,
                childContracts: this.childSectionsSearchResult.filter(function (val) { return val.sectionOriginId === _this.sectionModel.sectionId; }).length,
                parentTrade: parentSectionNumber,
                isAllocateContractDisabled: isAllocateContractDisabled,
                childContractDetails: this.sectionModel.childSections,
                isCancelledTrade: this.sectionModel.isCancelled,
            },
            width: '700px',
        });
        this.subscriptions.push(tradeImageDialog.afterClosed().subscribe(function (result) {
            if (result !== undefined) {
                _this.subscriptions.push(_this.tradingService
                    .getSection(_this.sectionId, _shared_enums_pricing_method_enum__WEBPACK_IMPORTED_MODULE_26__["PricingMethods"].Priced)
                    .subscribe(function (data) {
                    _this.formComponents.forEach(function (comp) {
                        comp.initForm(data, _this.isEdit);
                    });
                }));
                if (result.numberOfContracts > 1) {
                    _this.router.navigate([
                        _this.companyManager.getCurrentCompanyId() + '/trades/image',
                        _this.sectionModel.sectionId,
                        result.numberOfContracts,
                    ], {
                        queryParams: {
                            numberOfContract: result.numberOfContracts,
                            type: result.type,
                            splitAndTranche: result.trancheAndSplit,
                            imageEstimates: result.imageEstimates,
                            costMatrixId: result.costMatrixId,
                            tradeImageDetails: JSON.stringify(result.tradeImageField),
                            allocateContract: result.allocateContract,
                        },
                        skipLocationChange: true,
                    });
                }
                else {
                    _this.router.navigate([
                        _this.companyManager.getCurrentCompanyId() + '/trades/image',
                        _this.sectionModel.sectionId,
                    ], {
                        queryParams: {
                            numberOfContract: result.numberOfContracts,
                            type: result.type,
                            splitAndTranche: result.trancheAndSplit,
                            imageEstimates: result.imageEstimates,
                            costMatrixId: result.costMatrixId,
                            tradeImageDetails: JSON.stringify(result.tradeImageField),
                            allocateContract: result.allocateContract,
                        },
                        skipLocationChange: true,
                    });
                }
            }
        }));
    };
    TradeCapturePageComponent.prototype.updateAllocatedTradeQuantity = function () {
        var _this = this;
        if (this.model.allocatedTo) {
            var allocatedSectionId_1 = this.model.allocatedTo.sectionId;
            var allocatedSectionModel_2;
            this.tradingService
                .getSection(allocatedSectionId_1, 0, this.dataVersionId)
                .subscribe(function (data) {
                _this.tradingService
                    .getChildSections(allocatedSectionId_1, _this.dataVersionId)
                    .subscribe(function (childSections) {
                    _this.childSectionsSearchResult = childSections;
                    data.childSections = childSections.map(function (childSectionResult) {
                        var childSection = new _shared_entities_section_entity__WEBPACK_IMPORTED_MODULE_18__["Section"]();
                        childSection.setSectionFromChildSectionsSearchResult(childSectionResult, _this.sectionModel.sectionId);
                        return childSection;
                    });
                    allocatedSectionModel_2 = _this.convertToPhysicalFixedPricedContract(data);
                    _this.tradingService
                        .updatePhysicalContract(data.contractId, allocatedSectionModel_2)
                        .subscribe(function () {
                        _this.tradingService
                            .unapproveSection(allocatedSectionId_1)
                            .subscribe(function (ok) {
                            if (ok) {
                                if (_this.dataVersionId) {
                                    _this.tradeActionsService.displaySectionInSnapshotSubject.next(new _entities_section_reference__WEBPACK_IMPORTED_MODULE_37__["SectionReference"](_this.sectionId, _this.dataVersionId));
                                }
                                else {
                                    _this.tradeActionsService.displaySectionAfterEditSubject.next(new _entities_section_tab_index__WEBPACK_IMPORTED_MODULE_38__["SectionTabIndex"](_this.sectionId, _this.selectedTab));
                                }
                                _this.snackbarService.informationSnackBar(_this.sectionModel.contractLabel +
                                    ' quantity has been adjusted. ' +
                                    data.contractLabel +
                                    ' quantity has been adjusted.');
                            }
                        });
                    });
                });
            });
        }
    };
    TradeCapturePageComponent.prototype.convertToPhysicalFixedPricedContract = function (section) {
        var _this = this;
        var physicalFixedPricedContract = new _entities_physical_fixed_priced_contract_entity__WEBPACK_IMPORTED_MODULE_36__["PhysicalFixedPricedContract"]();
        this.formComponents.forEach(function (comp) {
            comp.initForm(section, _this.isEdit);
        });
        this.formComponents.forEach(function (comp) {
            physicalFixedPricedContract = comp.populateEntity(physicalFixedPricedContract);
        });
        physicalFixedPricedContract.previousQuantity = section.quantity;
        physicalFixedPricedContract.quantity = this.isWeightConvertedForSplit
            ? section.quantity.toString()
            : this.quantityTrafficSplit.toString();
        physicalFixedPricedContract.originalQuantity = this.quantityTrafficSplit;
        physicalFixedPricedContract.sectionId = section.sectionId;
        physicalFixedPricedContract.dataVersionId = this.dataVersionId;
        return physicalFixedPricedContract;
    };
    TradeCapturePageComponent.prototype.onCancelButtonClicked = function () {
        this.isSave = true;
        this.lockService
            .unlockContract(this.sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_15__["LockFunctionalContext"].TradeEdit)
            .subscribe();
        this.location.back();
    };
    TradeCapturePageComponent.prototype.setCashMatchDate = function (cashMatchDate) {
        if (cashMatchDate) {
            cashMatchDate = this.formatDate.transform(cashMatchDate);
            this.statusTabComponent.cashAgainstInvoiceComponent.hasEmptyState = false;
            this.statusTabComponent.cashAgainstInvoiceComponent.cashMatchDateCtrl.patchValue(cashMatchDate);
        }
    };
    TradeCapturePageComponent.prototype.onBlDateUpdated = function (blUpdatedDate) {
        this.statusTabComponent.charterComponent.setBlDate(blUpdatedDate);
    };
    TradeCapturePageComponent.prototype.onSplitTranchesSideNavOpenedChanged = function (event) {
        var _this = this;
        var lockFunctionalContext = this.getLockFunctionalContext();
        if (this.sideNavOpened) {
            this.subscriptions.push(this.lockService
                .lockContract(this.sectionModel.sectionId, lockFunctionalContext)
                .subscribe(function () {
                _this.startLockRefresh();
            }, function (err) {
                var confirmDialog = _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Lock',
                        text: err.error.detail,
                        okButton: 'Got it',
                    },
                });
                _this.tradeActionsService.displaySectionAfterEditSubject.next(new _entities_section_tab_index__WEBPACK_IMPORTED_MODULE_38__["SectionTabIndex"](_this.sectionId, _this.selectedTab));
            }));
        }
        else if (!this.isEdit) {
            this.stopLockRefresh();
            this.subscriptions.push(this.lockService
                .unlockContract(this.sectionModel.sectionId, lockFunctionalContext)
                .subscribe());
        }
    };
    TradeCapturePageComponent.prototype.getLockFunctionalContext = function () {
        var lockFunctionalContext = _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_15__["LockFunctionalContext"].TradeTranche;
        if (this.sideNavScreen === _shared_enums_section_type_enum__WEBPACK_IMPORTED_MODULE_27__["SectionTypes"].Split) {
            lockFunctionalContext = _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_15__["LockFunctionalContext"].TradeSplit;
        }
        return lockFunctionalContext;
    };
    TradeCapturePageComponent.prototype.startLockRefresh = function () {
        this.resourcesInformation = new Array();
        var resourceInformation = new _shared_entities_lock_resource_information_entity__WEBPACK_IMPORTED_MODULE_16__["LockResourceInformation"]();
        resourceInformation.resourceType = 'Contract';
        resourceInformation.resourceId = this.sectionId;
        resourceInformation.resourceCode = this.contractLabel;
        resourceInformation.needRefresh = true;
        this.resourcesInformation.push(resourceInformation);
    };
    TradeCapturePageComponent.prototype.stopLockRefresh = function () {
        this.resourcesInformation = new Array();
    };
    TradeCapturePageComponent.prototype.onTotalInvoiceValue = function (model) {
        this.totalInvoiceValuePercent = 0;
        this.totalInvoiceValuePercent = model.totalInvoiceValuePercent;
    };
    TradeCapturePageComponent.prototype.changeStatusForAllocatedContract = function (allocatedSectionId) {
        this.subscriptions.push(this.tradingService.unapproveSection(allocatedSectionId).subscribe(function (data) { }, function (error) {
            console.error(error);
        }));
    };
    TradeCapturePageComponent.prototype.zeroCosRowWarning = function (model) {
        this.isZeroCostRow = model.isZeroRowExist;
    };
    TradeCapturePageComponent.prototype.onShowDiscard = function () {
        this.isSave = true;
        this.location.back();
    };
    TradeCapturePageComponent.prototype.onShowSave = function () {
        this.save();
    };
    TradeCapturePageComponent.prototype.onDiscardButtonClicked = function () {
        this.onShowDiscard();
    };
    TradeCapturePageComponent.prototype.onTotalValuesCalculated = function (model) {
        this.statusTabComponent.totalValuesCalculated(model);
    };
    // -- Comment A001
    // To initialize this component and have the actions proposed to the user, we need to understand which mode the user is in
    // Creation / Edition-> Save; Cancel
    // View Mode -> Edit, Previous
    // The mode in which the user is in is set IN SPECIFIC PLACES IN THE CODE.
    // This method can only be called AFTER THE MODE HAS BEEN SET
    TradeCapturePageComponent.prototype.initFABActions = function () {
        this.fabTitle = 'Trade Add/Edit FAB mini';
        this.fabType = _shared_components_floating_action_button_floating_action_button_type_enum__WEBPACK_IMPORTED_MODULE_12__["FABType"].MiniFAB;
        var actionItemSave = {
            icon: 'save',
            text: 'Save',
            action: 'save',
            disabled: false,
            index: 2,
        };
        var actionItemCancel = {
            icon: 'keyboard_backspace',
            text: 'Cancel',
            action: 'cancel',
            disabled: false,
            index: 3,
        };
        var actionItemEdit = {
            icon: 'edit',
            text: 'Edit Trade',
            action: 'editTrade',
            index: 0,
            disabled: this.isClosed ? true : false,
        };
        var actionItemCreate = {
            icon: 'add',
            text: 'Create Trade',
            action: 'createTrade',
            index: 1,
            disabled: false,
        };
        if (this.isShow && !this.isEdit) {
            var createTradePrivilegeLevel = this.authorizationService.getPermissionLevel(this.company, this.createTradeActionPrivilege.privilegeName, this.createTradeActionPrivilege.privilegeParentLevelOne, this.createTradeActionPrivilege.privilegeParentLevelTwo);
            var hasCreateTradePrivilege = createTradePrivilegeLevel >= this.createTradeActionPrivilege.permission;
            if (hasCreateTradePrivilege) {
                this.fabMenuActions.push(actionItemCreate);
            }
            var editTradePrivilegeLevel = this.authorizationService.getPermissionLevel(this.company, this.editTradeActionPrivilege.privilegeName, this.editTradeActionPrivilege.privilegeParentLevelOne, this.editTradeActionPrivilege.privilegeParentLevelTwo);
            var hasEditTradePrivilege = editTradePrivilegeLevel >= this.editTradeActionPrivilege.permission;
            if (hasEditTradePrivilege) {
                this.fabMenuActions.push(actionItemEdit);
            }
        }
        else {
            this.fabMenuActions.push(actionItemCancel);
            actionItemSave.disabled = this.isSaveActionDisabled;
            this.fabMenuActions.push(actionItemSave);
        }
    };
    TradeCapturePageComponent.prototype.onFabActionClicked = function (action) {
        switch (action) {
            case 'save': {
                this.onSaveButtonClicked();
                break;
            }
            case 'cancel': {
                this.onCancelButtonClicked();
                break;
            }
            case 'createTrade': {
                this.onNewTradeButtonClicked();
                break;
            }
            case 'editTrade': {
                this.onEditTradeButtonClicked();
                break;
            }
        }
    };
    TradeCapturePageComponent.prototype.onNewTradeButtonClicked = function () {
        if (this.dataVersionId) {
            this.tradeActionsService.newTradeInSnapshotSubject.next(this.dataVersionId);
        }
        else {
            this.tradeActionsService.newTradeSubject.next();
        }
    };
    TradeCapturePageComponent.prototype.onEditTradeButtonClicked = function () {
        var _this = this;
        this.subscriptions.push(this.lockService
            .isLockedContract(this.sectionId)
            .subscribe(function (lock) {
            if (lock.isLocked) {
                _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Lock',
                        text: lock.message,
                        okButton: 'Got it',
                    },
                });
            }
            else {
                if (_this.dataVersionId) {
                    var sectionInformation = new _entities_section_reference__WEBPACK_IMPORTED_MODULE_37__["SectionReference"](_this.sectionId, _this.dataVersionId, _this.selectedTab);
                    _this.tradeActionsService.editSectionInSnapshotSubject.next(sectionInformation);
                }
                else {
                    var sectionInformation = new _entities_section_tab_index__WEBPACK_IMPORTED_MODULE_38__["SectionTabIndex"](_this.sectionId, _this.selectedTab);
                    _this.tradeActionsService.editSectionSubject.next(sectionInformation);
                }
            }
        }));
    };
    TradeCapturePageComponent.prototype.updatePhysicalContract = function () {
        var _this = this;
        var tradeSplitCreationOnQuantityAdjust = false;
        var adjustAllocatedTradeQuantityAdjusted = false;
        var currentTradeQuantityAdjusted = false;
        var alloatedTradeSplitCreationOnQuantityAdjust = false;
        var isSplitCreated = false;
        var allocationOfTrades = false;
        this.subscriptions.push(this.lockService
            .validateContractOperation(_shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_15__["LockFunctionalContext"].TradeEdit, this.sectionModel.sectionId, this.model.allocatedTo)
            .subscribe(function (lockErrors) {
            if (lockErrors != null && lockErrors !== '') {
                _this.saveInProgress = false;
                _this.snackbarService.informationSnackBar(lockErrors);
                return;
            }
            else {
                _this.model.sectionId = _this.sectionId;
                _this.model.invoiceReference = _this.sectionModel.invoiceReference;
                if (_this.trafficTabQuantity) {
                    _this.model.quantity = _this.trafficTabQuantity.toString();
                }
                if (_this.isEdit) {
                    _this.sectionTrafficModel = new _shared_entities_section_traffic_entity__WEBPACK_IMPORTED_MODULE_17__["SectionTraffic"]();
                    _this.sectionTrafficModel.sectionId = _this.sectionId;
                    _this.sectionTrafficModel.contractDate = _this.model.contractDate;
                    _this.sectionTrafficModel.blDate = _this.trafficTabComponent.blInfoComponent.blDateCtrl.value;
                    _this.sectionTrafficModel.blReference = _this.trafficTabComponent.blInfoComponent.blReferenceCtrl.value;
                    var selectedVessel = _this.trafficTabComponent
                        .shipmentInfoComponent.vesselCtrl.value;
                    _this.sectionTrafficModel.vesselCode = selectedVessel
                        ? selectedVessel.vesselName
                        : null;
                    _this.sectionTrafficModel.shippingStatusCode = _this
                        .trafficTabComponent.shipmentInfoComponent.shippingStatusCtrl
                        .value
                        ? _this.trafficTabComponent.shipmentInfoComponent.shippingStatus.find(function (shipping) {
                            return shipping.description ===
                                _this.trafficTabComponent.shipmentInfoComponent
                                    .shippingStatusCtrl.value;
                        }).shippingStatusCode
                        : null;
                    _this.model.previousQuantity = _this.sectionModel.quantity;
                    if (_this.originalQuantity !== Number(_this.model.quantity) &&
                        (_this.model.type === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_23__["ContractTypes"].Purchase ||
                            _this.sectionModel.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_23__["ContractTypes"].Sale)) {
                        if (!_this.model.allocatedTo) {
                            if (_this.model.currentTradeOptionId ===
                                _shared_enums_current_trade_option_enum__WEBPACK_IMPORTED_MODULE_24__["CurrentTradeOption"].CreateUnallocatedResidualSplit) {
                                tradeSplitCreationOnQuantityAdjust = true;
                                _this.model.quantity = _this.originalQuantity.toString();
                            }
                            else if (_this.model.currentTradeOptionId ===
                                _shared_enums_current_trade_option_enum__WEBPACK_IMPORTED_MODULE_24__["CurrentTradeOption"].AdjustContract) {
                                currentTradeQuantityAdjusted = true;
                                adjustAllocatedTradeQuantityAdjusted = false;
                                _this.model.contractedValue = _this.getContractValue(_this.sectionModel, Number(_this.model.quantity));
                            }
                        }
                        else {
                            switch (_this.model.currentTradeOptionId) {
                                case _shared_enums_current_trade_option_enum__WEBPACK_IMPORTED_MODULE_24__["CurrentTradeOption"].AdjustContract:
                                    if (_this.model.allocateTradeOptionId ===
                                        _shared_enums_allocate_trade_option_enum__WEBPACK_IMPORTED_MODULE_19__["AllocateTradeOption"].AdjustAllocation) {
                                        currentTradeQuantityAdjusted = true;
                                        adjustAllocatedTradeQuantityAdjusted = true;
                                        _this.model.contractedValue = _this.getContractValue(_this.sectionModel, Number(_this.model.quantity));
                                    }
                                    else if (_this.model.allocateTradeOptionId ===
                                        _shared_enums_allocate_trade_option_enum__WEBPACK_IMPORTED_MODULE_19__["AllocateTradeOption"].CreateUnallocatedResidualSplit) {
                                        currentTradeQuantityAdjusted = true;
                                        alloatedTradeSplitCreationOnQuantityAdjust = true;
                                    }
                                    break;
                                case _shared_enums_current_trade_option_enum__WEBPACK_IMPORTED_MODULE_24__["CurrentTradeOption"].CreateAllocatedResidualSplit:
                                    if (_this.model.allocateTradeOptionId ===
                                        _shared_enums_allocate_trade_option_enum__WEBPACK_IMPORTED_MODULE_19__["AllocateTradeOption"].LeaveStatus) {
                                        tradeSplitCreationOnQuantityAdjust = true;
                                        alloatedTradeSplitCreationOnQuantityAdjust = true;
                                        allocationOfTrades = true;
                                        _this.model.quantity = _this.originalQuantity.toString();
                                    }
                                    break;
                                case _shared_enums_current_trade_option_enum__WEBPACK_IMPORTED_MODULE_24__["CurrentTradeOption"].CreateUnallocatedResidualSplit:
                                    if (_this.model.allocateTradeOptionId ===
                                        _shared_enums_allocate_trade_option_enum__WEBPACK_IMPORTED_MODULE_19__["AllocateTradeOption"].CreateUnallocatedResidualSplit) {
                                        tradeSplitCreationOnQuantityAdjust = true;
                                        alloatedTradeSplitCreationOnQuantityAdjust = true;
                                        _this.model.quantity = _this.originalQuantity.toString();
                                    }
                                    else if (_this.model.allocateTradeOptionId ===
                                        _shared_enums_allocate_trade_option_enum__WEBPACK_IMPORTED_MODULE_19__["AllocateTradeOption"].AdjustAllocation) {
                                        tradeSplitCreationOnQuantityAdjust = true;
                                        adjustAllocatedTradeQuantityAdjusted = true;
                                        _this.model.quantity = _this.originalQuantity.toString();
                                    }
                                    break;
                            }
                        }
                    }
                    _this.invoiceMarking = _this.model.invoices;
                    _this.invoiceStatusId = _this.model.invoiceStatus;
                    _this.model.dataVersionId = _this.dataVersionId;
                    _this.sectionTrafficModel.dataVersionId = _this.dataVersionId;
                    isSplitCreated =
                        tradeSplitCreationOnQuantityAdjust ||
                            alloatedTradeSplitCreationOnQuantityAdjust;
                    var selectedCounterparty = _this.mainTabComponent
                        .counterpartyComponent.selectedCounterparty;
                    if (selectedCounterparty) {
                        _this.companyManager
                            .getConfiguration(selectedCounterparty.counterpartyID)
                            .subscribe(function (data) {
                            if (data.length > 0 && data[0].isCounterpartyGroupAccount) {
                                _this.intercoModelForEdit(isSplitCreated, currentTradeQuantityAdjusted, adjustAllocatedTradeQuantityAdjusted, tradeSplitCreationOnQuantityAdjust, alloatedTradeSplitCreationOnQuantityAdjust, allocationOfTrades, data);
                            }
                            else {
                                _this.updateContractDetails(isSplitCreated, currentTradeQuantityAdjusted, adjustAllocatedTradeQuantityAdjusted, tradeSplitCreationOnQuantityAdjust, alloatedTradeSplitCreationOnQuantityAdjust, allocationOfTrades);
                            }
                        });
                    }
                    else {
                        _this.updateContractDetails(isSplitCreated, currentTradeQuantityAdjusted, adjustAllocatedTradeQuantityAdjusted, tradeSplitCreationOnQuantityAdjust, alloatedTradeSplitCreationOnQuantityAdjust, allocationOfTrades);
                    }
                }
                else {
                    _this.model.dataVersionId = _this.dataVersionId;
                    _this.subscriptions.push(_this.tradingService
                        .updatePhysicalContract(_this.contractId, _this.model)
                        .subscribe(function (res) {
                        var result = res[0];
                        var messageText = 'Contract updated with reference: ' +
                            _this.contractLabel;
                        var copyText = _this.contractLabel;
                        if (result && result[0] && result[0].contractLabel) {
                            messageText =
                                messageText +
                                    ', Interco Contract created with reference: ' +
                                    result[0].contractLabel;
                            copyText = copyText + result[0].contractLabel;
                        }
                        _this.snackbarService.informationAndCopySnackBar(messageText, copyText);
                        if (_this.dataVersionId) {
                            _this.tradeActionsService.displaySectionInSnapshotSubject.next(new _entities_section_reference__WEBPACK_IMPORTED_MODULE_37__["SectionReference"](_this.sectionId, _this.dataVersionId));
                        }
                        else {
                            _this.tradeActionsService.displaySectionAfterEditSubject.next(new _entities_section_tab_index__WEBPACK_IMPORTED_MODULE_38__["SectionTabIndex"](_this.sectionId, _this.selectedTab));
                        }
                        _this.subscriptions.push(_this.lockService
                            .unlockContract(_this.sectionModel.sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_15__["LockFunctionalContext"].TradeEdit)
                            .subscribe());
                    }, function (err) {
                        _this.saveInProgress = false;
                        throw err;
                    }));
                }
            }
        }));
    };
    TradeCapturePageComponent.prototype.updateContractDetails = function (isSplitCreated, currentTradeQuantityAdjusted, adjustAllocatedTradeQuantityAdjusted, tradeSplitCreationOnQuantityAdjust, alloatedTradeSplitCreationOnQuantityAdjust, allocationOfTrades) {
        var _this = this;
        var updates = [
            this.tradingService.updatePhysicalContract(this.contractId, this.model, isSplitCreated),
            this.executionService.updateSectionTraffic(this.sectionTrafficModel),
            this.executionService.updateInvoiceMarkingDetails(this.sectionModel.sectionId, this.invoiceMarking, this.invoiceStatusId, this.dataVersionId),
        ];
        this.subscriptions.push(Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["forkJoin"])(updates).subscribe(function (res) {
            var result = res[0];
            if (currentTradeQuantityAdjusted && !_this.dataVersionId) {
                _this.subscriptions.push(_this.tradingService
                    .unapproveSection(_this.sectionModel.sectionId)
                    .subscribe(function (ok) {
                    if (ok) {
                        _this.sectionModel.status = _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"].Unapproved;
                        _this.headerComponent.contractStatusChanged(_shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_22__["ContractStatus"].Unapproved);
                        if (_this.sectionModel.allocatedToId && !isSplitCreated) {
                            _this.changeStatusForAllocatedContract(_this.sectionModel.allocatedToId);
                        }
                    }
                }));
            }
            if (_this.originalQuantity !== Number(_this.model.quantity) &&
                (_this.model.type === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_23__["ContractTypes"].Purchase ||
                    _this.sectionModel.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_23__["ContractTypes"].Sale)) {
                if (!adjustAllocatedTradeQuantityAdjusted) {
                    _this.snackbarService.informationAndCopySnackBar(_this.sectionModel.contractLabel +
                        ' quantity has been adjusted.', _this.sectionModel.contractLabel);
                }
            }
            else {
                var messageText = 'Contract updated with reference: ' + _this.contractLabel;
                var copyText = _this.contractLabel;
                if (result && result[0] && result[0].contractLabel) {
                    messageText =
                        messageText +
                            ', Interco Contract created with reference: ' +
                            result[0].contractLabel;
                    copyText = copyText + result[0].contractLabel;
                }
                _this.snackbarService.informationAndCopySnackBar(messageText, copyText);
            }
            if (adjustAllocatedTradeQuantityAdjusted) {
                _this.updateAllocatedTradeQuantity();
                if (tradeSplitCreationOnQuantityAdjust ||
                    alloatedTradeSplitCreationOnQuantityAdjust) {
                    _this.createSplitForDecreaseQuantity(tradeSplitCreationOnQuantityAdjust, alloatedTradeSplitCreationOnQuantityAdjust, allocationOfTrades);
                }
            }
            else if (tradeSplitCreationOnQuantityAdjust ||
                alloatedTradeSplitCreationOnQuantityAdjust) {
                if (_this.model.allocatedTo && !isSplitCreated) {
                    _this.changeStatusForAllocatedContract(_this.model.allocatedTo.sectionId);
                }
                _this.createSplitForDecreaseQuantity(tradeSplitCreationOnQuantityAdjust, alloatedTradeSplitCreationOnQuantityAdjust, allocationOfTrades);
            }
            else {
                if (_this.dataVersionId) {
                    _this.tradeActionsService.displaySectionInSnapshotSubject.next(new _entities_section_reference__WEBPACK_IMPORTED_MODULE_37__["SectionReference"](_this.sectionId, _this.dataVersionId));
                }
                else {
                    _this.tradeActionsService.displaySectionAfterEditSubject.next(new _entities_section_tab_index__WEBPACK_IMPORTED_MODULE_38__["SectionTabIndex"](_this.sectionId, _this.selectedTab));
                }
            }
            _this.subscriptions.push(_this.lockService
                .unlockContract(_this.sectionModel.sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_15__["LockFunctionalContext"].TradeEdit)
                .subscribe());
        }, function (err) {
            _this.saveInProgress = false;
            throw err;
        }));
    };
    TradeCapturePageComponent.prototype.intercoModel = function (companies) {
        var _this = this;
        this.populateIntercoFields(this.model);
        var confirmDialog = this.dialog.open(_interco_trade_dialog_interco_trade_dialog_component__WEBPACK_IMPORTED_MODULE_65__["IntercoTradeDialogComponent"], {
            width: '45%',
            maxHeight: '750px',
            data: {
                counterpartyCompanies: companies,
                intercoValidation: this.intercoValidation,
            },
        });
        var confirmationSubscription = confirmDialog
            .afterClosed()
            .subscribe(function (intercoData) {
            if (intercoData && intercoData.isInterco && !intercoData.isCancelled) {
                _this.isInterco = true;
                _this.model.isInterco = _this.isInterco;
                _this.model.intercoCompanyId = intercoData.companyId;
                _this.model.intercoDepartmentId = intercoData.departmentId;
                _this.model.intercoTraderId = intercoData.traderId;
                _this.createTrade();
            }
            else if (intercoData &&
                !intercoData.isInterco &&
                !intercoData.isCancelled) {
                _this.createTrade();
            }
            else {
                _this.saveInProgress = false;
            }
        });
        this.subscriptions.push(confirmationSubscription);
    };
    TradeCapturePageComponent.prototype.intercoModelForEdit = function (isSplitCreated, currentTradeQuantityAdjusted, adjustAllocatedTradeQuantityAdjusted, tradeSplitCreationOnQuantityAdjust, alloatedTradeSplitCreationOnQuantityAdjust, allocationOfTrades, companies) {
        var _this = this;
        if (!this.sectionModel.isInterCo &&
            this.sectionModel.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_49__["InvoicingStatus"].Uninvoiced &&
            !this.sectionModel.sectionOriginId) {
            this.populateIntercoFields(this.model);
            var confirmDialog = this.dialog.open(_interco_trade_dialog_interco_trade_dialog_component__WEBPACK_IMPORTED_MODULE_65__["IntercoTradeDialogComponent"], {
                width: '45%',
                maxHeight: '750px',
                data: {
                    counterpartyCompanies: companies,
                    intercoValidation: this.intercoValidation,
                },
            });
            var confirmationSubscription = confirmDialog
                .afterClosed()
                .subscribe(function (intercoData) {
                if (intercoData &&
                    intercoData.isInterco &&
                    !intercoData.isCancelled) {
                    _this.isInterco = true;
                    _this.model.isInterco = _this.isInterco;
                    _this.model.intercoCompanyId = intercoData.companyId;
                    _this.model.intercoDepartmentId = intercoData.departmentId;
                    _this.model.intercoTraderId = intercoData.traderId;
                    _this.updateContractDetails(isSplitCreated, currentTradeQuantityAdjusted, adjustAllocatedTradeQuantityAdjusted, tradeSplitCreationOnQuantityAdjust, alloatedTradeSplitCreationOnQuantityAdjust, allocationOfTrades);
                }
                else if (intercoData &&
                    !intercoData.isInterco &&
                    !intercoData.isCancelled) {
                    _this.updateContractDetails(isSplitCreated, currentTradeQuantityAdjusted, adjustAllocatedTradeQuantityAdjusted, tradeSplitCreationOnQuantityAdjust, alloatedTradeSplitCreationOnQuantityAdjust, allocationOfTrades);
                }
                else {
                    _this.saveInProgress = false;
                }
            });
            this.subscriptions.push(confirmationSubscription);
        }
        else {
            this.updateContractDetails(isSplitCreated, currentTradeQuantityAdjusted, adjustAllocatedTradeQuantityAdjusted, tradeSplitCreationOnQuantityAdjust, alloatedTradeSplitCreationOnQuantityAdjust, allocationOfTrades);
        }
    };
    TradeCapturePageComponent.prototype.onManualIntercoCreation = function (event) {
        var _this = this;
        if (event) {
            var selectedCounterparty = this.mainTabComponent.counterpartyComponent
                .selectedCounterparty;
            this.companyManager
                .getConfiguration(selectedCounterparty.counterpartyID)
                .subscribe(function (data) {
                if (data.length > 0 && data[0].isCounterpartyGroupAccount) {
                    _this.populateIntercoFieldsForDetails(_this.sectionModel);
                    var confirmDialog = _this.dialog.open(_interco_trade_dialog_interco_trade_dialog_component__WEBPACK_IMPORTED_MODULE_65__["IntercoTradeDialogComponent"], {
                        width: '45%',
                        maxHeight: '750px',
                        data: {
                            counterpartyCompanies: data,
                            intercoValidation: _this.intercoValidation,
                        },
                    });
                    var confirmationSubscription = confirmDialog
                        .afterClosed()
                        .subscribe(function (intercoData) {
                        if (intercoData &&
                            intercoData.isInterco &&
                            !intercoData.isCancelled) {
                            _this.isInterco = true;
                            var intercoModel = {
                                isInterco: _this.isInterco,
                                intercoCompanyId: intercoData.companyId,
                                intercoDepartmentId: intercoData.departmentId,
                                intercoTraderId: intercoData.traderId,
                                sectionId: _this.sectionModel.sectionId,
                                dataVersionId: _this.sectionModel.dataVersionId,
                            };
                            _this.createIntercoContract(intercoModel);
                        }
                    });
                    _this.subscriptions.push(confirmationSubscription);
                }
            });
        }
    };
    TradeCapturePageComponent.prototype.createIntercoContract = function (intercoModel) {
        var _this = this;
        this.tradingService.createManualInterco(intercoModel).subscribe(function (data) {
            var messageText = 'Interco Contract created with reference: ' +
                intercoModel.intercoCompanyId +
                '/' +
                data[0]['contractLabel'];
            var copyText = data[0]['contractLabel'];
            _this.snackbarService.informationAndCopySnackBar(messageText, copyText);
            data[0]['sectionId'] = intercoModel.sectionId;
            _this.tradeActionsService.displaySectionSubject.next(data[0]['sectionId']);
        }, function (err) {
            _this.saveInProgress = false;
            throw err;
        });
    };
    TradeCapturePageComponent.prototype.populateIntercoFields = function (model) {
        var _this = this;
        this.intercoValidation = new _shared_entities_interco_validation_entity__WEBPACK_IMPORTED_MODULE_14__["IntercoValidation"]();
        this.intercoValidation.companyId = this.company;
        this.intercoValidation.intercoFields = [];
        this.intercoValidation.intercoFields.push({
            groupId: 1,
            type: 'section',
            name: 'CommodityId',
            value: model.commodityId ? model.commodityId.toString() : null,
        });
        this.intercoValidation.intercoFields.push({
            groupId: 1,
            type: 'section',
            name: 'ContractTermId',
            value: model.contractTerms,
        });
        this.intercoValidation.intercoFields.push({
            groupId: 1,
            type: 'section',
            name: 'CurrencyCode',
            value: model.currencyCode,
        });
        this.intercoValidation.intercoFields.push({
            groupId: 1,
            type: 'section',
            name: 'PaymentTermId',
            value: model.paymentTerms,
        });
        this.intercoValidation.intercoFields.push({
            groupId: 1,
            type: 'section',
            name: 'PeriodTypeId',
            value: model.periodTypeId ? model.periodTypeId.toString() : null,
        });
        this.intercoValidation.intercoFields.push({
            groupId: 1,
            type: 'section',
            name: 'Price',
            value: model.price ? model.price.toString() : null,
        });
        this.intercoValidation.intercoFields.push({
            groupId: 1,
            type: 'section',
            name: 'WeightUnitId',
            value: model.weightUnitId ? model.weightUnitId.toString() : null,
        });
        this.intercoValidation.intercoFields.push({
            groupId: 1,
            type: 'section',
            name: 'PriceUnitId',
            value: model.priceUnitId ? model.priceUnitId.toString() : null,
        });
        var groupId = 2;
        var selectedCounterparty = this.mainTabComponent.counterpartyComponent
            .selectedCounterparty;
        var costs = model.costs.filter(function (c) { return c.supplierCode === selectedCounterparty.counterpartyCode; });
        if (costs && costs.length > 0) {
            costs.forEach(function (cost) {
                _this.intercoValidation.intercoFields.push({
                    groupId: groupId,
                    type: 'cost',
                    name: 'CostTypeCode',
                    mappingName: 'costTypeCode',
                    value: cost.costTypeCode ? cost.costTypeCode.toString() : null,
                });
                _this.intercoValidation.intercoFields.push({
                    groupId: groupId,
                    type: 'cost',
                    name: 'CurrencyCode',
                    value: cost.currencyCode,
                });
                groupId++;
            });
        }
    };
    TradeCapturePageComponent.prototype.populateIntercoFieldsForDetails = function (model) {
        var _this = this;
        this.intercoValidation = new _shared_entities_interco_validation_entity__WEBPACK_IMPORTED_MODULE_14__["IntercoValidation"]();
        this.intercoValidation.companyId = this.company;
        this.intercoValidation.intercoFields = [];
        this.intercoValidation.intercoFields.push({
            groupId: 1,
            type: 'section',
            name: 'CommodityId',
            value: model.commodityId ? model.commodityId.toString() : null,
        });
        this.intercoValidation.intercoFields.push({
            groupId: 1,
            type: 'section',
            name: 'ContractTermId',
            value: model.contractTerms,
        });
        this.intercoValidation.intercoFields.push({
            groupId: 1,
            type: 'section',
            name: 'CurrencyCode',
            value: model.currencyCode,
        });
        this.intercoValidation.intercoFields.push({
            groupId: 1,
            type: 'section',
            name: 'PaymentTermId',
            value: model.paymentTerms,
        });
        this.intercoValidation.intercoFields.push({
            groupId: 1,
            type: 'section',
            name: 'PeriodTypeId',
            value: model.periodTypeId ? model.periodTypeId.toString() : null,
        });
        this.intercoValidation.intercoFields.push({
            groupId: 1,
            type: 'section',
            name: 'Price',
            value: model.price ? model.price.toString() : null,
        });
        this.intercoValidation.intercoFields.push({
            groupId: 1,
            type: 'section',
            name: 'WeightUnitId',
            value: model.weightUnitId ? model.weightUnitId.toString() : '',
        });
        this.intercoValidation.intercoFields.push({
            groupId: 1,
            type: 'section',
            name: 'PriceUnitId',
            value: model.priceUnitId ? model.priceUnitId.toString() : null,
        });
        var groupId = 2;
        var selectedCounterparty = this.mainTabComponent.counterpartyComponent
            .selectedCounterparty;
        var costs = model.costs.filter(function (c) { return c.supplierCode === selectedCounterparty.counterpartyCode; });
        if (costs && costs.length > 0) {
            costs.forEach(function (cost) {
                _this.intercoValidation.intercoFields.push({
                    groupId: groupId,
                    type: 'cost',
                    name: 'CostTypeCode',
                    mappingName: 'costTypeCode',
                    value: cost.costTypeCode ? cost.costTypeCode.toString() : null,
                });
                _this.intercoValidation.intercoFields.push({
                    groupId: groupId,
                    type: 'cost',
                    name: 'CurrencyCode',
                    value: cost.currencyCode,
                });
                groupId++;
            });
        }
    };
    TradeCapturePageComponent.prototype.checkIntercoTrade = function (sectionModel) {
        if (sectionModel.isInterCo) {
            this.intercoCounterParty =
                sectionModel.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_23__["ContractTypes"].Purchase
                    ? sectionModel.sellerCode
                    : sectionModel.buyerCode;
        }
    };
    TradeCapturePageComponent.prototype.checkIfIntercoCounterpartyChanged = function (model) {
        var _this = this;
        if (this.intercoCounterParty && this.isEdit && !this.isTradeImage) {
            var newCounterparty = model.type === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_23__["ContractTypes"].Purchase
                ? model.sellerCode
                : model.buyerCode;
            if (this.intercoCounterParty !== newCounterparty) {
                var confirmDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Interco Contract',
                        text: 'This is an interco contract. If you proceed, it would no longer be an interco contract.',
                        okButton: 'Continue',
                        cancelButton: 'Cancel',
                    },
                });
                confirmDialog.afterClosed().subscribe(function (answer) {
                    if (answer) {
                        _this.model.isInterco = true;
                        _this.model.isRemoveInterco = true;
                        _this.sectionModel.isInterCo = true;
                        _this.sectionModel.isRemoveInterco = true;
                        _this.saveTrade();
                    }
                    else {
                        _this.saveInProgress = false;
                    }
                });
            }
            else {
                this.saveTrade();
            }
        }
        else {
            this.saveTrade();
        }
    };
    TradeCapturePageComponent.prototype.onCancelTradeButtonClicked = function () {
        var _this = this;
        var confirmDialog = this.dialog.open(_cancel_trade_dialog_cancel_trade_dialog_component__WEBPACK_IMPORTED_MODULE_62__["CancelTradeDialogComponent"], {
            width: '80%',
            maxHeight: '750px',
            data: {
                sectionModel: this.sectionModel,
            },
        });
        confirmDialog.afterClosed().subscribe(function (cancelTradeModel) {
            if (cancelTradeModel) {
                _this.sectionModel.blDate = cancelTradeModel.cancellationDate;
                if (cancelTradeModel.isSectionClosed) {
                    _this.sectionModel.contractInvoiceTypeId =
                        _shared_enums_contract_invoice_type_enum__WEBPACK_IMPORTED_MODULE_21__["ContractInvoiceType"].Cancellation;
                    _this.onCloseSectionButtonClicked(null, null, false, cancelTradeModel);
                }
                else {
                    _this.cancelTrades(cancelTradeModel);
                }
            }
        });
    };
    TradeCapturePageComponent.prototype.cancelTrades = function (sectionCancelDetails) {
        var _this = this;
        this.tradingService
            .cancelSection([this.sectionModel.sectionId], sectionCancelDetails.cancellationDate, this.childFlag, this.dataVersionId)
            .subscribe(function (ok) {
            if (ok) {
                var title = "Trade " + _this.sectionModel.contractLabel + " is now cancelled";
                _this.dialog
                    .open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Trade Cancelled',
                        text: title,
                        okButton: 'Ok',
                    },
                })
                    .afterClosed()
                    .subscribe(function (answer) {
                    var messageGenerating = 'Generating invoice... Please wait.';
                    _this.snackbarService.informationSnackBar(messageGenerating);
                    _this.generateInvoiceLines(sectionCancelDetails);
                });
            }
        });
    };
    TradeCapturePageComponent.prototype.generateInvoiceLines = function (sectionCancelTradeDetails) {
        var _this = this;
        var invoiceRecord = new _shared_services_execution_dtos_invoice_record__WEBPACK_IMPORTED_MODULE_56__["InvoiceRecord"]();
        invoiceRecord.agreementDate = sectionCancelTradeDetails.cancellationDate;
        invoiceRecord.authorizedForPosting = true;
        invoiceRecord.costDirection =
            sectionCancelTradeDetails.costType === sectionCancelTradeDetails.costTypeForCancellationLoss
                ? _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_45__["CostDirections"].Payable
                : _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_45__["CostDirections"].Receivable;
        invoiceRecord.counterpartyCode = sectionCancelTradeDetails.counterParty;
        invoiceRecord.currency = sectionCancelTradeDetails.currency;
        invoiceRecord.dueDate = sectionCancelTradeDetails.dueDate;
        invoiceRecord.externalInhouse = sectionCancelTradeDetails.externalInternal;
        invoiceRecord.externalInvoiceRef = sectionCancelTradeDetails.narrative;
        invoiceRecord.invoiceDate = sectionCancelTradeDetails.cancellationDate;
        invoiceRecord.invoiceType = _shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_48__["InvoiceTypes"].Cancelled;
        invoiceRecord.paymentTerms = this.sectionModel.paymentTerms;
        invoiceRecord.template = sectionCancelTradeDetails.template;
        invoiceRecord.totalGoodsValue = sectionCancelTradeDetails.quantity;
        invoiceRecord.totalInvoiceValue = 0;
        invoiceRecord.settlementValue = Number(sectionCancelTradeDetails.settlementValue);
        var invoiceLine = new _shared_entities_invoice_line_record_entity__WEBPACK_IMPORTED_MODULE_44__["InvoiceLineRecord"]();
        invoiceLine.contractType = this.sectionModel.contractType;
        invoiceLine.currencyCode = this.sectionModel.currencyCode;
        invoiceLine.invoicePercent = 100;
        invoiceLine.lineAmount = Number(sectionCancelTradeDetails.settlementValue);
        invoiceLine.lineNumber = 1;
        invoiceLine.price = this.sectionModel.price;
        invoiceLine.quantity = sectionCancelTradeDetails.quantity.toString();
        invoiceLine.sectionID = this.sectionId;
        if (this.masterdata.vats && this.masterdata.vats.length > 0) {
            invoiceLine.vatCode = this.masterdata.vats[0].vatCode;
        }
        invoiceRecord.invoiceLines = new Array();
        invoiceRecord.invoiceLines.push(invoiceLine);
        this.executionService
            .createInvoice(invoiceRecord)
            .subscribe(function (invoice) {
            if (invoice) {
                var messageGenerated = 'Invoice ' + invoice.documentReference + ' generated successfully.';
                _this.snackbarService.informationAndCopySnackBar(messageGenerated, messageGenerated);
                _this.router.navigate([
                    _this.companyManager.getCurrentCompanyId() +
                        '/trades/display/' +
                        _this.sectionId,
                ]);
            }
        }, function (error) {
            _this.snackbarService.throwErrorSnackBar(error.error.detail);
        });
    };
    TradeCapturePageComponent.prototype.onReverseCancelTradeButtonClicked = function () {
        var _this = this;
        var invoiceMarkingDetails = this.statusTabComponent.invoicingComponent.invoiceMarkingDetails;
        this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
            data: {
                title: 'Trade Reverse Cancellation',
                text: 'You are about to reverse cancellation. Continue?',
                okButton: 'Yes',
                cancelButton: 'No',
            },
        }).afterClosed().subscribe(function (answer) {
            if (answer) {
                _this.tradingService.reverseCancelSection(_this.sectionModel.sectionId, _this.childFlag, _this.dataVersionId).subscribe(function (ok) {
                    if (ok) {
                        var title = "Trade " + _this.sectionModel.contractLabel + "' is now Reversed";
                        _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["ConfirmationDialogComponent"], {
                            data: {
                                title: 'Trade Reverse Cancelled',
                                text: title,
                                okButton: 'Ok',
                            },
                        }).afterClosed().subscribe(function (answer) {
                            var messageGenerated = 'Reversing invoice...';
                            _this.snackbarService.informationAndCopySnackBar(messageGenerated, messageGenerated);
                            var invoiceRecord = new _shared_services_execution_dtos_invoice_record__WEBPACK_IMPORTED_MODULE_56__["InvoiceRecord"]();
                            invoiceRecord.documentType = _shared_enums_transaction_document_type_enum__WEBPACK_IMPORTED_MODULE_53__["TransactionDocumentTypes"].Original;
                            invoiceRecord.externalInhouse = invoiceMarkingDetails.externalInhouse;
                            invoiceRecord.externalInvoiceRef = 'reverseCancel';
                            invoiceRecord.invoiceDate = invoiceMarkingDetails.invoiceDate;
                            invoiceRecord.documentReference = invoiceMarkingDetails.invoiceCode;
                            invoiceRecord.invoiceType = _shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_48__["InvoiceTypes"].Reversal;
                            invoiceRecord.isDraft = false;
                            invoiceRecord.quantityToInvoice = _shared_enums_quantity_to_invoice_enum__WEBPACK_IMPORTED_MODULE_51__["QuantityToInvoiceType"].Contract;
                            invoiceRecord.transactionDocumentId = invoiceMarkingDetails.transactionDocumentId;
                            invoiceRecord.transactionDocumentTypeId = invoiceMarkingDetails.transactionDocumentTypeId;
                            invoiceRecord.invoiceId = invoiceMarkingDetails.invoiceId;
                            _this.executionService.createInvoice(invoiceRecord).subscribe(function (ok) {
                                if (ok) {
                                    var messageGenerated_1 = 'Invoice reversed successfully.';
                                    _this.snackbarService.informationAndCopySnackBar(messageGenerated_1, messageGenerated_1);
                                    _this.router.navigate([
                                        _this.companyManager.getCurrentCompanyId() +
                                            '/trades/display/' +
                                            _this.sectionId,
                                    ]);
                                }
                            });
                        });
                    }
                });
            }
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('headerComponent'),
        __metadata("design:type", _form_components_header_form_component_header_form_component_component__WEBPACK_IMPORTED_MODULE_64__["HeaderFormComponent"])
    ], TradeCapturePageComponent.prototype, "headerComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('tradeManagementMenuBarComponent'),
        __metadata("design:type", _trade_management_menu_bar_trade_management_menu_bar_component__WEBPACK_IMPORTED_MODULE_73__["TradeManagementMenuBarComponent"])
    ], TradeCapturePageComponent.prototype, "tradeManagementMenuBarComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('invoiceMarkingTabComponent'),
        __metadata("design:type", _invoice_marking_tab_physical_contract_capture_form_invoice_marking_tab_component__WEBPACK_IMPORTED_MODULE_66__["PhysicalContractCaptureFormInvoiceMarkingTabComponent"])
    ], TradeCapturePageComponent.prototype, "invoiceMarkingTabComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('mainTabComponent'),
        __metadata("design:type", _main_tab_physical_contract_capture_form_main_tab_component__WEBPACK_IMPORTED_MODULE_67__["PhysicalContractCaptureFormMainTabComponent"])
    ], TradeCapturePageComponent.prototype, "mainTabComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('trafficTabComponent'),
        __metadata("design:type", _traffic_tab_physical_contract_capture_form_traffic_tab_component__WEBPACK_IMPORTED_MODULE_74__["PhysicalContractCaptureFormTrafficTabComponent"])
    ], TradeCapturePageComponent.prototype, "trafficTabComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('statusTabComponent'),
        __metadata("design:type", _status_tab_physical_contract_capture_form_status_tab_component__WEBPACK_IMPORTED_MODULE_72__["PhysicalContractCaptureFormStatusTabComponent"])
    ], TradeCapturePageComponent.prototype, "statusTabComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('sectionTabComponent'),
        __metadata("design:type", _section_tab_physical_contract_capture_form_section_tab_component__WEBPACK_IMPORTED_MODULE_71__["PhysicalContractCaptureFormSectionTabComponent"])
    ], TradeCapturePageComponent.prototype, "sectionTabComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('newTrancheSplitHeaderComponent'),
        __metadata("design:type", _section_tab_new_tranche_split_header_new_tranche_split_header_component__WEBPACK_IMPORTED_MODULE_70__["NewTrancheSplitHeaderComponent"])
    ], TradeCapturePageComponent.prototype, "newTrancheSplitHeaderComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('newTrancheSplitAgGridComponent'),
        __metadata("design:type", _section_tab_new_tranche_split_ag_grid_new_tranche_split_ag_grid_component__WEBPACK_IMPORTED_MODULE_68__["NewTrancheSplitAgGridComponent"])
    ], TradeCapturePageComponent.prototype, "newTrancheSplitAgGridComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('newTrancheSplitFooterComponent'),
        __metadata("design:type", _section_tab_new_tranche_split_footer_new_tranche_split_footer_component__WEBPACK_IMPORTED_MODULE_69__["NewTrancheSplitFooterComponent"])
    ], TradeCapturePageComponent.prototype, "newTrancheSplitFooterComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('costsTabComponent'),
        __metadata("design:type", _costs_tab_physical_contract_capture_form_costs_tab_component__WEBPACK_IMPORTED_MODULE_63__["PhysicalContractCaptureFormCostsTabComponent"])
    ], TradeCapturePageComponent.prototype, "costsTabComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        __metadata("design:type", Boolean)
    ], TradeCapturePageComponent.prototype, "isClosed", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"])('window:beforeunload', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], TradeCapturePageComponent.prototype, "unloadNotification", null);
    TradeCapturePageComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'atlas-trade-capture-page',
            template: __webpack_require__(/*! ./trade-capture-page.component.html */ "./Client/app/trading/components/contract-physical-capture/trade-capture-page.component.html"),
            styles: [__webpack_require__(/*! ./trade-capture-page.component.scss */ "./Client/app/trading/components/contract-physical-capture/trade-capture-page.component.scss")],
            providers: [_services_trade_data_service__WEBPACK_IMPORTED_MODULE_40__["TradeDataService"]],
        }),
        __param(21, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"])()), __param(21, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_3__["MAT_DATE_LOCALE"])),
        __metadata("design:paramtypes", [_shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_29__["ExecutionService"],
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"],
            _angular_router__WEBPACK_IMPORTED_MODULE_4__["ActivatedRoute"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_32__["SnackbarService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_31__["TradingService"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_10__["CompanyManagerService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"],
            _services_trade_actions_service__WEBPACK_IMPORTED_MODULE_39__["TradeActionsService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatDialog"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_61__["UtilService"],
            _angular_common__WEBPACK_IMPORTED_MODULE_0__["Location"],
            _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_30__["LockService"],
            _shared_services_http_services_freeze_service__WEBPACK_IMPORTED_MODULE_58__["FreezeService"],
            _shared_services_http_services_preaccounting_service__WEBPACK_IMPORTED_MODULE_59__["PreaccountingService"],
            _shared_pipes_format_date_pipe_pipe__WEBPACK_IMPORTED_MODULE_28__["FormatDatePipe"],
            _shared_services_title_service__WEBPACK_IMPORTED_MODULE_33__["TitleService"],
            _shared_services_split_create_and_allocate_service__WEBPACK_IMPORTED_MODULE_60__["SplitCreateAndAllocateService"],
            _services_trade_data_service__WEBPACK_IMPORTED_MODULE_40__["TradeDataService"],
            _shared_services_http_services_document_service__WEBPACK_IMPORTED_MODULE_57__["DocumentService"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_9__["AuthorizationService"], String])
    ], TradeCapturePageComponent);
    return TradeCapturePageComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/trade-image-dialog/trade-image-dialog.component.html":
/*!**********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/trade-image-dialog/trade-image-dialog.component.html ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div fxLayoutAlign=\"space-between center\">\r\n    <h1 class=\"no-margin\">Image {{dialogData.title}}</h1>\r\n    <button mat-button>\r\n        <mat-icon (click)=\"onCloseButtonClicked()\">close</mat-icon>\r\n    </button>\r\n</div>\r\n\r\n<mat-dialog-content>\r\n    <div fxLayout=\"row\"\r\n         fxLayoutAlign=\"left start\"\r\n         fxLayoutGap=\"5%\">\r\n        <h2>Details</h2>\r\n    </div>\r\n\r\n    <div fxLayout=\"row\"\r\n         fxLayoutAlign=\"left start\"\r\n         fxLayoutGap=\"5%\">\r\n        <div fxFlex=\"30%\">\r\n            <mat-form-field>\r\n                <input matInput\r\n                       placeholder=\"Number of contracts required\"\r\n                       [formControl]='contractNumberCtrl'\r\n                       required>\r\n            </mat-form-field>\r\n        </div>\r\n        <div class=\"warning\"\r\n             *ngIf=\"showError\">\r\n            Number of contracts should be a positive integer number\r\n        </div>\r\n        <mat-error *ngIf=\"showTrancheError\">\r\n            Number of contracts cannot be more than 1, If Image Tranches/Splits is selected\r\n        </mat-error>\r\n\r\n        <!-- button toggle for purchase and sale-->\r\n        <div fxFlex=\"70%\">\r\n            <mat-button-toggle-group class=\"toggle-group\"\r\n                                     name=\"toggleStyle\"\r\n                                     aria-label=\"Contract Type\"\r\n                                     [formControl]='contractTypeCtrl'\r\n                                     (change)='contractTypeChanged()'>\r\n                <mat-button-toggle [value]=\"ContractType.Purchase\">Purchase</mat-button-toggle>\r\n                <mat-button-toggle [value]=\"ContractType.Sale\">Sale</mat-button-toggle>\r\n            </mat-button-toggle-group>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Cost details -->\r\n    <div fxLayout=\"row\"\r\n         fxLayoutAlign=\"left start\"\r\n         fxLayoutGap=\"5%\">\r\n        <h3>Costs</h3>\r\n    </div>\r\n    <div fxLayout=\"row\"\r\n         fxLayoutAlign=\"start center\"\r\n         fxLayoutGap=\"5%\">\r\n        <div fxFlex=\"30%\">\r\n            <mat-slide-toggle [formControl]='imageEstimatesCtrl'\r\n                              (change)=\"onImageEstimatesChange($event)\"\r\n                              [disabled]=setToggle>\r\n                Image Estimates\r\n            </mat-slide-toggle>\r\n        </div>\r\n        <div fxFlex=\"30%\">\r\n            <atlas-masterdata-user-preferences-input class=\"contextual-search-for-costmatrix\"\r\n                                                     [fieldControl]=\"costMatrixCtrl\"\r\n                                                     [options]=\"filteredCostMatrixList\"\r\n                                                     label=\"CostMatrix\"\r\n                                                     displayProperty=\"name\"\r\n                                                     (valueChange)=\"onCostMatrixChange($event)\"\r\n                                                     (optionSelected)=\"onCostMatrixChange($event)\"\r\n                                                     tooltip=\"description\"\r\n                                                     [selectProperties]=\"['name', 'description']\"\r\n                                                     [errorMap]=\"costmatrixErrorMap\"\r\n                                                     lightBoxTitle=\"Results for CostMatrix\"\r\n                                                     gridId=\"costMatrixGrid\">\r\n            </atlas-masterdata-user-preferences-input>\r\n        </div>\r\n    </div>\r\n\r\n    <div fxLayout=\"row\"\r\n         fxLayoutAlign=\"left start\"\r\n         fxLayoutGap=\"5%\">\r\n        <h3>Options</h3>\r\n    </div>\r\n\r\n    <!-- --Tranch and Split -->\r\n    <div fxLayout=\"row\"\r\n         fxLayoutAlign=\"left start\"\r\n         fxLayoutGap=\"5%\"\r\n         class=\"costToggle\">\r\n        <div fxFlex=\"50%\"\r\n             class=\"costToggle\">\r\n            <mat-slide-toggle (change)=\"onImageTranchesChange($event)\"\r\n                              [disabled]=\"isSplit\">\r\n                Image Tranches/Splits\r\n            </mat-slide-toggle>\r\n        </div>\r\n    </div>\r\n    <div class=\"costToggle\">\r\n        <mat-slide-toggle *ifAuthorized=\"'Trades.Physicals.AllocateDeallocate',company:company\"\r\n                          (change)=\"onAllocateContractsChange($event)\"\r\n                          [disabled]=\"isAllocateContractDisabled || dialogData.isCancelledTrade\">\r\n            Allocate Contracts\r\n        </mat-slide-toggle>\r\n    </div>\r\n</mat-dialog-content>\r\n\r\n<mat-dialog-actions>\r\n    <div fxFlex=\"50\"\r\n         fxLayout=\"row\"\r\n         fxAlignLayout=\"start start\">\r\n        <button mat-button\r\n                (click)=\"onCloseButtonClicked()\">DISCARD</button>\r\n    </div>\r\n    <div fxFlex=\"50\"\r\n         fxLayout=\"row\"\r\n         fxAlignLayout=\"start end\">\r\n        <span class=\"fill-space\"></span>\r\n        <button mat-button\r\n                *ifAuthorized=\"'Trades.Physicals.CreateTrade',company:this.company\"\r\n                (click)=\"onImageButtonClicked()\">IMAGE</button>\r\n    </div>\r\n</mat-dialog-actions>"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/trade-image-dialog/trade-image-dialog.component.scss":
/*!**********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/trade-image-dialog/trade-image-dialog.component.scss ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".mat-dialog-content {\n  overflow: hidden;\n  padding: 0; }\n\n.warning {\n  color: #ec8d2d;\n  font-size: 12px; }\n\n.mat-button,\n.mat-raised-button {\n  margin: 0; }\n\n.contextual-search-for-costmatrix {\n  width: 100%; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/trade-image-dialog/trade-image-dialog.component.ts":
/*!********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/trade-image-dialog/trade-image-dialog.component.ts ***!
  \********************************************************************************************************************/
/*! exports provided: TradeImageDialogComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeImageDialogComponent", function() { return TradeImageDialogComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../shared/enums/contract-status.enum */ "./Client/app/shared/enums/contract-status.enum.ts");
/* harmony import */ var _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../shared/enums/contract-type.enum */ "./Client/app/shared/enums/contract-type.enum.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _entities_trade_image_entity__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../entities/trade-image.entity */ "./Client/app/trading/entities/trade-image.entity.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __values = (undefined && undefined.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};









var TradeImageDialogComponent = /** @class */ (function () {
    function TradeImageDialogComponent(thisDialogRef, utilService, tradingService, data, snackbarService) {
        this.thisDialogRef = thisDialogRef;
        this.utilService = utilService;
        this.tradingService = tradingService;
        this.data = data;
        this.snackbarService = snackbarService;
        this.ContractType = _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_4__["ContractTypes"];
        this.contractNumberCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_2__["AtlasFormControl"]('Number');
        this.contractTypeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_2__["AtlasFormControl"]('ContractType');
        this.costMatrixCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_2__["AtlasFormControl"]('costMatrixCtrl');
        this.imageEstimatesCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_2__["AtlasFormControl"]('ImageEstimates');
        this.imageEstimates = false;
        this.imageTranche = false;
        this.allocateContract = false;
        this.tradeImage = new _entities_trade_image_entity__WEBPACK_IMPORTED_MODULE_8__["TradeImage"]();
        this.showError = false;
        this.showTrancheError = false;
        this.setToggle = false;
        this.tradeImageDetails = [];
        this.isSplit = true;
        this.isAllocateContractDisabled = true;
        this.childSections = [];
        this.costmatrixErrorMap = new Map()
            .set('inDropdownList', 'Invalid entry. Costmatrix not in the list.');
        this.dialogData = data;
        this.company = this.dialogData.companyId;
        thisDialogRef.disableClose = true;
    }
    TradeImageDialogComponent.prototype.ngOnInit = function () {
        this.setSplitTrancheToggle();
        if (this.dialogData.type != null) {
            this.contractTypeCtrl.setValue(_shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_4__["ContractTypes"][this.dialogData.type]);
        }
        this.isAllocateContractDisabled = this.dialogData.isAllocateContractDisabled;
        // default for number of contract
        this.contractNumberCtrl.patchValue('1');
        this.getCostMatrixList();
        this.getTradeImageFieldsCompany();
    };
    TradeImageDialogComponent.prototype.setSplitTrancheToggle = function () {
        if (this.dialogData.childContracts > 0 && this.dialogData.parentTrade) {
            this.isSplit = false;
        }
    };
    TradeImageDialogComponent.prototype.getCostMatrixList = function () {
        var _this = this;
        this.tradingService.getCostmatricesByCompanyId(this.company)
            .subscribe(function (data) {
            _this.costmatrix = data.value;
            _this.filteredCostMatrixList = _this.costmatrix;
            _this.costMatrixCtrl.valueChanges.subscribe(function (input) {
                _this.filteredCostMatrixList = _this.utilService.filterListforAutocomplete(input, _this.costmatrix, ['name', 'description']);
            });
        });
    };
    TradeImageDialogComponent.prototype.getTradeImageFieldsCompany = function () {
        var _this = this;
        this.tradingService.getTradeImageFieldsByCompany()
            .subscribe(function (data) {
            _this.tradeImageDetails = data.value;
        });
    };
    TradeImageDialogComponent.prototype.setControls = function () {
        if (this.imageEstimates) {
            this.costMatrixCtrl.disable();
        }
        else {
            this.costMatrixCtrl.enable();
        }
        if (this.costMatrixCtrl.value) {
            this.setToggle = this.setToggle ? false : true;
        }
    };
    TradeImageDialogComponent.prototype.onCostMatrixChange = function (value) {
        this.setControls();
    };
    TradeImageDialogComponent.prototype.onCancelButtonClicked = function () {
        this.thisDialogRef.close();
    };
    TradeImageDialogComponent.prototype.onCloseButtonClicked = function () {
        this.thisDialogRef.close();
    };
    TradeImageDialogComponent.prototype.contractTypeChanged = function () {
        var res = this.contractTypeCtrl.value;
    };
    TradeImageDialogComponent.prototype.onImageButtonClicked = function () {
        if (Number(this.contractNumberCtrl.value) > 1 && this.imageTranche) {
            this.showError = false;
            this.showTrancheError = true;
        }
        else {
            if (this.contractNumberCtrl.value && this.contractNumberCtrl.value.length > 0 && this.contractNumberCtrl.value > 0) {
                this.tradeImage = this.getData();
                this.thisDialogRef.close(this.tradeImage);
            }
            else {
                this.showTrancheError = false;
                this.showError = true;
            }
        }
    };
    TradeImageDialogComponent.prototype.onImageEstimatesChange = function (value) {
        this.imageEstimates = value.checked;
        if (this.imageEstimates) {
            this.checkForWarningMessage();
        }
        this.setControls();
    };
    TradeImageDialogComponent.prototype.onImageTranchesChange = function (value) {
        this.imageTranche = value.checked;
        if (this.imageTranche) {
            this.checkForWarningMessage();
        }
        this.checkForChildSectionAllocation();
    };
    TradeImageDialogComponent.prototype.checkForChildSectionAllocation = function () {
        var e_1, _a;
        if (this.imageTranche) {
            this.childSections = this.dialogData.childContractDetails;
            try {
                for (var _b = __values(this.childSections), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var node = _c.value;
                    this.isAllocateContractDisabled = (node.allocationDate === null && !this.isAllocateContractDisabled &&
                        node.quantity !== 0 && node.status !== _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_3__["ContractStatus"].Unapproved) ? false : true;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            this.isAllocateContractDisabled = this.dialogData.isAllocateContractDisabled;
        }
    };
    TradeImageDialogComponent.prototype.checkForWarningMessage = function () {
        if (this.imageEstimates && this.imageTranche) {
            this.snackbarService.informationSnackBar('Please check your costs on the splits/tranches. They do not copy from the parent');
        }
    };
    TradeImageDialogComponent.prototype.onAllocateContractsChange = function (value) {
        this.allocateContract = value.checked;
        var selectedContractType = (_shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_4__["ContractTypes"][this.dialogData.type]) === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_4__["ContractTypes"].Purchase ?
            _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_4__["ContractTypes"].Sale : _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_4__["ContractTypes"].Purchase;
        if (this.allocateContract) {
            this.contractNumberCtrl.patchValue('1');
            this.contractNumberCtrl.disable();
            this.contractTypeCtrl.setValue(selectedContractType);
            this.contractTypeCtrl.disable();
        }
        else {
            this.contractNumberCtrl.enable();
            this.contractTypeCtrl.enable();
        }
    };
    TradeImageDialogComponent.prototype.getData = function () {
        var tradeImage = new _entities_trade_image_entity__WEBPACK_IMPORTED_MODULE_8__["TradeImage"]();
        tradeImage.numberOfContracts = this.contractNumberCtrl.value;
        tradeImage.costMatrixId = this.costMatrixCtrl.value.costMatrixId;
        tradeImage.imageEstimates = this.imageEstimates;
        tradeImage.type = this.contractTypeCtrl.value;
        tradeImage.trancheAndSplit = this.imageTranche;
        tradeImage.allocateContract = this.allocateContract;
        tradeImage.tradeImageField = this.tradeImageDetails;
        return tradeImage;
    };
    TradeImageDialogComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-trade-image-dialog',
            template: __webpack_require__(/*! ./trade-image-dialog.component.html */ "./Client/app/trading/components/contract-physical-capture/trade-image-dialog/trade-image-dialog.component.html"),
            styles: [__webpack_require__(/*! ./trade-image-dialog.component.scss */ "./Client/app/trading/components/contract-physical-capture/trade-image-dialog/trade-image-dialog.component.scss")],
        }),
        __param(3, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_1__["MAT_DIALOG_DATA"])),
        __metadata("design:paramtypes", [_angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialogRef"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_7__["UtilService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_5__["TradingService"], Object, _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_6__["SnackbarService"]])
    ], TradeImageDialogComponent);
    return TradeImageDialogComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/trade-management-menu-bar/trade-management-menu-bar.component.html":
/*!************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/trade-management-menu-bar/trade-management-menu-bar.component.html ***!
  \************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-toolbar class=\"menu-bar mat-elevation-z6\">\r\n    <div class=\"toolbar-div\">\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"space-between center\"\r\n             fxFlex=\"40\">\r\n            <button mat-button\r\n                    [matMenuTriggerFor]=\"contract\"\r\n                    [disabled]=\"menuDisable\">Contract</button>\r\n            <button mat-button\r\n                    [matMenuTriggerFor]=\"createEdit\"\r\n                    *ngIf=\"!dataVersionId\"\r\n                    [disabled]=\"menuDisable\">Creation & Edit</button>\r\n            <button mat-button\r\n                    [matMenuTriggerFor]=\"groupEdit\"\r\n                    *ngIf=\"!dataVersionId\"\r\n                    [disabled]=\"menuDisable\">Group Edit</button>\r\n            <button mat-button\r\n                    [matMenuTriggerFor]=\"reports\"\r\n                    [disabled]=\"menuDisable\">Reports</button>\r\n            <button mat-button\r\n                    [matMenuTriggerFor]=\"help\">Help</button>\r\n            <button mat-button\r\n                    [matMenuTriggerFor]=\"documents\"\r\n                    *ngIf=\"!dataVersionId && hasDocumentPrivilege\"\r\n                    [disabled]=\"menuDisable\">Documents</button>\r\n            <mat-menu #contract=\"matMenu\"\r\n                      [overlapTrigger]=\"false\"\r\n                      xPosition=\"after\">\r\n                <div id=\"notForSnashot\"\r\n                     *ngIf=\"!dataVersionId\">\r\n                    <span matTooltip={{toolTipSplit}}>\r\n                        <button mat-menu-item\r\n                                *ifAuthorized=\"'Trades.Physicals.CreateTrancheSplit',company:this.company\"\r\n                                [disabled]=\"disableCreateSplit || !trancheSplitPrivilege\"\r\n                                (click)=\"onSplitButtonClicked()\">Split</button>\r\n                    </span>\r\n                    <span matTooltip={{toolTipTranche}}>\r\n                        <button mat-menu-item\r\n                                *ifAuthorized=\"'Trades.Physicals.CreateTrancheSplit',company:this.company\"\r\n                                [disabled]=\"disableCreateTranche || hasAllocation() || !trancheSplitPrivilege\"\r\n                                (click)=\"onTranchButtonClicked()\">Tranche</button>\r\n                    </span>\r\n                    <span matTooltip={{toolTipMerge}}> <button mat-menu-item\r\n                                [disabled]=\"disableTradeMerge\"\r\n                                *ifAuthorized=\"'Trades.Physicals.Merge',company:this.company\"\r\n                                (click)=\"onMergeButtonClicked()\">Merge</button>\r\n                    </span>\r\n\r\n                </div>\r\n                <button mat-menu-item\r\n                        [disabled]=\"(isContractWithBLDate || dataVersionId) || isClosed\"\r\n                        *ngIf=\"hasAllocation() && (!isContractWithBLDate || hasSuperEditionPrivilege)\"\r\n                        (click)=\"onDeallocateButtonClicked()\">De-Allocate</button>\r\n                <span matTooltip={{toolTipAllocate}}>\r\n                    <button mat-menu-item\r\n                            [disabled]=\"(!isApproved && !dataVersionId) || isClosed || isCancelledSection || disableAllocateButton\"\r\n                            *ngIf=\"!hasAllocation() && (isApproved || dataVersionId || hasSuperEditionPrivilege)\"\r\n                            (click)=\"onAllocateButtonClicked()\">\r\n                        <ng-container *ifAuthorized=\"'Trades.Physicals.AllocateDeallocate',company:company\">\r\n                        </ng-container>\r\n                        Allocate\r\n                    </button>\r\n                </span>\r\n\r\n                <div id=\"notForSnashot\"\r\n                     *ngIf=\"!dataVersionId\">\r\n                    <button mat-menu-item\r\n                            [matMenuTriggerFor]=\"contractStatus\">Contract Status</button>\r\n                </div>\r\n                <div id=\"forSnapshot\"\r\n                     *ngIf=\"dataVersionId\">\r\n                    <button mat-menu-item\r\n                            [matMenuTriggerFor]=\"contractStatusForSnapshot\">Contract Status</button>\r\n                </div>\r\n            </mat-menu>\r\n            <mat-menu #contractStatus=\"matMenu\"\r\n                      [overlapTrigger]=\"false\"\r\n                      xPosition=\"after\">\r\n                <button mat-menu-item\r\n                        [disabled]=\"currentSection.status === ContractStatus.Approved || !tradeApprovalPrivilege || isClosed  ||isCancelledSection\"\r\n                        (click)=\"onApproveButtonClicked()\">Approve Contract</button>\r\n                <button mat-menu-item\r\n                        [disabled]=\"currentSection.status === ContractStatus.Unapproved || !tradeApprovalPrivilege || isClosed || isCancelledSection \"\r\n                        (click)=\"onUnApproveButtonClicked()\">Unapprove Contract</button>\r\n                <button mat-menu-item\r\n                        *ifAuthorized=\"'Trades.Physicals.TradeDeletion',company:company\"\r\n                        (click)=\"onDeleteButtonClicked()\">Delete Contract</button>\r\n                <button mat-menu-item\r\n                        *ngIf=\"currentSection.isClosed\"\r\n                        (click)=\"onReOpenButtonClicked()\">ReOpen Contract</button>\r\n                <button mat-menu-item\r\n                        *ngIf=\"!currentSection.isClosed && tradeClosePrivilege\"\r\n                        (click)=\"onCloseButtonClicked()\">Close Contract</button>\r\n                <span [(matTooltip)]=\"blockerMessageForCancellingOfTrade\"\r\n                      *ifAuthorized=\"'Trades.Physicals.CancelReverseTrade',company:this.company\">\r\n                    <button mat-menu-item\r\n                            (click)=\"onCancelButtonClicked()\"\r\n                            [disabled]=\"!isTradeCancellationAllowed || currentSection.status === ContractStatus.Unapproved\">\r\n                        Cancel at Settlement Price\r\n                    </button>\r\n                    <button mat-menu-item\r\n                            *ngIf=\"currentSection.isCancelled\"\r\n                            (click)=\"onReverseCancelButtonClicked()\">\r\n                        Reverse Cancellation\r\n                    </button>\r\n                </span>\r\n\r\n            </mat-menu>\r\n            <mat-menu #contractStatusForSnapshot=\"matMenu\"\r\n                      [overlapTrigger]=\"false\"\r\n                      xPosition=\"after\">\r\n                <button mat-menu-item\r\n                        *ngIf=\"currentSection.isClosed\"\r\n                        (click)=\"onReOpenButtonClicked()\">ReOpen Contract</button>\r\n                <button mat-menu-item\r\n                        *ngIf=\"!currentSection.isClosed\"\r\n                        (click)=\"onCloseButtonClicked()\">Close Contract</button>\r\n\r\n            </mat-menu>\r\n            <mat-menu #createEdit=\"matMenu\"\r\n                      [overlapTrigger]=\"false\"\r\n                      xPosition=\"after\">\r\n                <button mat-menu-item\r\n                        *ifAuthorized=\"'Trades.Physicals.ImageCreation',company:this.company\"\r\n                        (click)=\"onImageButtonClicked()\">Image</button>\r\n                <button mat-menu-item\r\n                        [disabled]=\"isIntercoCreationIsAllowed()\"\r\n                        (click)=\"onIntercoTradeCreation()\">Create Interco</button>\r\n                <!-- uninvoiced status / !IsInterco / Valid Counterparty/ Parent Contract -->\r\n                <button mat-menu-item\r\n                        *ifAuthorized=\"'Trades.Physicals.ImageCreation',company:this.company\"\r\n                        (click)=\"onSaveAsFavoriteClicked()\">Save As Favourite</button>\r\n            </mat-menu>\r\n            <mat-menu #groupEdit=\"matMenu\"\r\n                      [overlapTrigger]=\"false\"\r\n                      xPosition=\"after\">\r\n                <button mat-menu-item\r\n                        [matMenuTriggerFor]=\"GroupFunction\">Group function</button>\r\n            </mat-menu>\r\n            <mat-menu #GroupFunction=\"matMenu\"\r\n                      [overlapTrigger]=\"false\"\r\n                      xPosition=\"after\">\r\n                <button mat-menu-item\r\n                        disabled>Group Approval</button>\r\n            </mat-menu>\r\n            <button mat-icon-button\r\n                    [matMenuTriggerFor]=\"reports\">\r\n            </button>\r\n            <mat-menu #reports=\"matMenu\"\r\n                      [overlapTrigger]=\"false\"\r\n                      xPosition=\"after\">\r\n                <button mat-menu-item\r\n                        (click)=\"onviewPLButtonClicked()\">View P&L</button>\r\n                <button mat-menu-item\r\n                        (click)=\"onTradeCostClicked()\">Trade Cost</button>\r\n                <span *ngFor=\"let item of filteredTemplates\">\r\n                    <button mat-button\r\n                            (click)=\"OnReportClick(item)\">\r\n                        {{item.name}}\r\n                    </button>\r\n                </span>\r\n\r\n            </mat-menu>\r\n            <mat-menu #help=\"matMenu\"\r\n                      [overlapTrigger]=\"false\"\r\n                      xPosition=\"after\">\r\n                <button mat-menu-item\r\n                        disabled>Contextual Help</button>\r\n            </mat-menu>\r\n            <mat-menu #documents=\"matMenu\"\r\n                      [overlapTrigger]=\"false\"\r\n                      xPosition=\"after\">\r\n                <button mat-menu-item\r\n                        *ifAuthorized=\"'Trades.Physicals.GenerateContractAdvice',company:company\"\r\n                        [disabled]=\"isClosed\"\r\n                        (click)=\"onGenerateDocumentButtonClicked()\">Generate Document</button>\r\n                <button mat-menu-item\r\n                        (click)=\"onSeeDocumentButtonClicked()\">See Documents</button>\r\n            </mat-menu>\r\n        </div>\r\n\r\n        <span class=\"fill-space\"></span>\r\n    </div>\r\n</mat-toolbar>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/trade-management-menu-bar/trade-management-menu-bar.component.scss":
/*!************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/trade-management-menu-bar/trade-management-menu-bar.component.scss ***!
  \************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "mat-toolbar {\n  height: 40px !important;\n  background-color: white !important; }\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/trade-management-menu-bar/trade-management-menu-bar.component.ts":
/*!**********************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/trade-management-menu-bar/trade-management-menu-bar.component.ts ***!
  \**********************************************************************************************************************************/
/*! exports provided: TradeManagementMenuBarComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeManagementMenuBarComponent", function() { return TradeManagementMenuBarComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../shared/components/confirmation-dialog/confirmation-dialog.component */ "./Client/app/shared/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony import */ var _shared_entities_section_entity__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../shared/entities/section.entity */ "./Client/app/shared/entities/section.entity.ts");
/* harmony import */ var _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../shared/enums/contract-status.enum */ "./Client/app/shared/enums/contract-status.enum.ts");
/* harmony import */ var _shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../shared/enums/invoice-type.enum */ "./Client/app/shared/enums/invoice-type.enum.ts");
/* harmony import */ var _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../shared/enums/invoicing-status.enum */ "./Client/app/shared/enums/invoicing-status.enum.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_document_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../shared/services/http-services/document.service */ "./Client/app/shared/services/http-services/document.service.ts");
/* harmony import */ var _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../shared/services/http-services/lock.service */ "./Client/app/shared/services/http-services/lock.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
/* harmony import */ var _services_trade_actions_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../services/trade-actions.service */ "./Client/app/trading/services/trade-actions.service.ts");
/* harmony import */ var _trade_cost_report_trade_cost_report_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../trade-cost-report/trade-cost-report.component */ "./Client/app/trading/components/trade-cost-report/trade-cost-report.component.ts");
/* harmony import */ var _trade_pnl_report_trade_pnl_report_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../trade-pnl-report/trade-pnl-report.component */ "./Client/app/trading/components/trade-pnl-report/trade-pnl-report.component.ts");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_components_generic_report_viewer_generic_report_viewer_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./../../../../shared/components/generic-report-viewer/generic-report-viewer.component */ "./Client/app/shared/components/generic-report-viewer/generic-report-viewer.component.ts");
/* harmony import */ var _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./../../../../shared/enums/permission-level.enum */ "./Client/app/shared/enums/permission-level.enum.ts");
/* harmony import */ var _entities_section_reference__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./../../../entities/section-reference */ "./Client/app/trading/entities/section-reference.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






















var TradeManagementMenuBarComponent = /** @class */ (function (_super) {
    __extends(TradeManagementMenuBarComponent, _super);
    function TradeManagementMenuBarComponent(tradeActionsService, router, route, companyManager, formConfigurationProvider, lockService, dialog, authorizationService, tradingService, documentService, securityService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.tradeActionsService = tradeActionsService;
        _this.router = router;
        _this.route = route;
        _this.companyManager = companyManager;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.lockService = lockService;
        _this.dialog = dialog;
        _this.authorizationService = authorizationService;
        _this.tradingService = tradingService;
        _this.documentService = documentService;
        _this.securityService = securityService;
        _this.currentSection = undefined;
        _this.menuDisable = undefined;
        _this.isClosed = undefined;
        _this.showDiscard = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.showSave = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.manualIntercoCreation = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.isApproved = false;
        _this.isContractWithBLDate = false;
        _this.disableCreateSplit = false;
        _this.disableCreateTranche = false;
        _this.disableAllocateButton = false;
        _this.disableTradeMerge = false;
        _this.hasDocumentPrivilege = false;
        _this.isInvoiced = false;
        _this.hasSuperEditionPrivilege = false;
        _this.toolTipSplit = '';
        _this.toolTipTranche = '';
        _this.toolTipAllocate = '';
        _this.toolTipMerge = '';
        // //filteredTemplates: PhysicalDocumentTemplate[] = [];
        _this.filteredTemplates = new Array();
        _this.ContractStatus = _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_7__["ContractStatus"];
        _this.tradeApprovalPrivilege = false;
        _this.tradeClosePrivilege = false;
        _this.isMenuBarVisible = true;
        _this.isTradeCancellationAllowed = false;
        _this.blockerMessageForCancellingOfTrade = '';
        _this.isCancelledSection = false;
        _this.trancheSplitPrivilege = false;
        return _this;
    }
    TradeManagementMenuBarComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.currentSection.isClosed === true && (this.router.url.indexOf('/trades/image/') === -1) && (this.router.url !== '/' + this.route.snapshot.params['company']
            + '/trades/display/' + this.currentSection.sectionId)) {
            if (!this.currentSection.dataVersionId) {
                this.router.navigate(['/' + this.route.snapshot.params['company']
                        + '/trades/display', this.currentSection.sectionId]);
            }
        }
        var documentType = 76;
        this.documentService.getTemplates(documentType, 'Trades').subscribe(function (templates) {
            _this.filteredTemplates = templates.value;
        });
        this.company = this.route.snapshot.params['company'];
        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;
        this.hasDocumentPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'Documents');
        this.hasSuperEditionPrivilege = this.authorizationService.getPermissionLevel(this.company, 'Trades', 'Physicals', 'SuperTradeEdition') > _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_20__["PermissionLevels"].None;
        if (this.currentSection.status === _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_7__["ContractStatus"].Approved) {
            this.isApproved = true;
        }
        // if (this.route.snapshot.url[0].path === "edit") {
        //     this.isMenuBarVisible = true;
        // }
        if (this.currentSection.isClosed === true) {
            this.isClosed = true;
        }
        if (this.currentSection.allocatedToId && this.currentSection.allocatedToId !== 0
            && this.currentSection.blDate) {
            this.isContractWithBLDate = true;
        }
        if (this.currentSection.invoiceReference) {
            this.isInvoiced = true;
        }
        if (this.currentSection.quantity <= 0) {
            this.disableCreateSplit = true;
            this.toolTipSplit = 'Contract cannot be splitted when quantity is equal to 0';
            this.disableCreateTranche = true;
            this.toolTipTranche = 'Contract cannot be tranched when quantity is equal to 0';
            this.disableAllocateButton = true;
            this.toolTipAllocate = 'Contract cannot be allocated when quantity is equal to 0';
        }
        if (this.currentSection.allocatedToId != null) {
            this.disableCreateTranche = true;
            this.toolTipTranche = 'Contract cannot be tranched when it is allocated';
        }
        if (this.currentSection.allocatedTo &&
            this.currentSection.invoiceReference &&
            this.currentSection.invoiceTypeId === _shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_8__["InvoiceTypes"].Washout &&
            this.currentSection.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_9__["InvoicingStatus"].Finalized &&
            this.currentSection.allocatedTo.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_9__["InvoicingStatus"].Finalized) {
            this.disableCreateSplit = true;
            this.toolTipSplit = 'Contract cannot be splitted when it is allocated and Washout Invoiced';
        }
        if (this.currentSection.isCancelled) {
            this.isCancelledSection = true;
            this.disableCreateSplit = true;
            this.disableCreateTranche = true;
        }
        if (this.currentSection.isClosed) {
            this.disableCreateSplit = true;
            this.disableCreateTranche = true;
        }
        if (this.currentSection.sectionId && this.currentSection.dataVersionId) {
            this.subscriptions.push(this.tradingService.getContextualDataForContractMerge(this.currentSection.sectionId, this.currentSection.dataVersionId).subscribe(function (data) {
                if (data) {
                    _this.disableTradeMerge = !(data.isAllowed);
                    _this.toolTipMerge = data.message;
                }
            }));
        }
        this.isMenuBarVisible = false;
        this.checkTradePrivilege();
        this.isCancellationOfTradeAllowed();
    };
    // Contract Menu
    TradeManagementMenuBarComponent.prototype.onSplitButtonClicked = function () {
        this.tradeActionsService.splitSectionSubject.next();
    };
    TradeManagementMenuBarComponent.prototype.onTranchButtonClicked = function () {
        this.tradeActionsService.trancheSectionSubject.next();
    };
    TradeManagementMenuBarComponent.prototype.onMergeButtonClicked = function () {
        this.router.navigate(['/' + this.company + '/trades/tradeMerge/'
                + encodeURIComponent(String(this.currentSection.sectionId))]);
    };
    TradeManagementMenuBarComponent.prototype.onAllocateButtonClicked = function () {
        if (this.dataVersionId) {
            this.tradeActionsService.allocateSectionInSnapshotSubject
                .next(new _entities_section_reference__WEBPACK_IMPORTED_MODULE_21__["SectionReference"](this.currentSection.sectionId, this.dataVersionId));
        }
        else {
            this.tradeActionsService.allocateSectionSubject.next(this.currentSection.sectionId);
        }
    };
    TradeManagementMenuBarComponent.prototype.OnReportClick = function (data) {
        var openTradepnlReportDialog = this.dialog.open(_shared_components_generic_report_viewer_generic_report_viewer_component__WEBPACK_IMPORTED_MODULE_19__["GenericReportViewerComponent"], {
            data: {
                reportName: data.name,
                reportPath: data.path,
            },
            width: '90%',
            height: '90%',
        });
    };
    TradeManagementMenuBarComponent.prototype.onDeallocateButtonClicked = function () {
        this.tradeActionsService.deallocateSectionSubject.next(this.currentSection.sectionId);
    };
    TradeManagementMenuBarComponent.prototype.onApproveButtonClicked = function () {
        var _this = this;
        this.subscriptions.push(this.lockService.isLockedContract(this.currentSection.sectionId).subscribe(function (lock) {
            if (lock.isLocked) {
                var confirmDialog = _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_5__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Lock',
                        text: lock.message,
                        okButton: 'Got it',
                    },
                });
            }
            else {
                _this.tradeActionsService.approveSectionSubject.next(_this.currentSection.sectionId);
            }
        }));
    };
    TradeManagementMenuBarComponent.prototype.onUnApproveButtonClicked = function () {
        var _this = this;
        this.subscriptions.push(this.lockService.isLockedContract(this.currentSection.sectionId).subscribe(function (lock) {
            if (lock.isLocked) {
                var confirmDialog = _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_5__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Lock',
                        text: lock.message,
                        okButton: 'Got it',
                    },
                });
            }
            else {
                _this.tradeActionsService.unApproveSectionSubject.next(_this.currentSection.sectionId);
            }
        }));
    };
    TradeManagementMenuBarComponent.prototype.onDeleteButtonClicked = function () {
        var _this = this;
        this.subscriptions.push(this.lockService.isLockedContract(this.currentSection.sectionId).subscribe(function (lock) {
            if (lock.isLocked) {
                var confirmDialog = _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_5__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Lock',
                        text: lock.message,
                        okButton: 'Got it',
                    },
                });
            }
            else {
                _this.tradeActionsService.deleteSectionSubject.next(_this.currentSection.sectionId);
            }
        }));
    };
    TradeManagementMenuBarComponent.prototype.onReOpenButtonClicked = function () {
        var _this = this;
        this.subscriptions.push(this.lockService.isLockedContract(this.currentSection.sectionId).subscribe(function (lock) {
            if (lock.isLocked) {
                _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_5__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Lock',
                        text: lock.message,
                        okButton: 'Got it',
                    },
                });
            }
            else {
                _this.tradeActionsService.reOpenSectionSubject.next(_this.currentSection.sectionId);
            }
        }));
    };
    TradeManagementMenuBarComponent.prototype.onCloseButtonClicked = function () {
        var _this = this;
        this.subscriptions.push(this.lockService.isLockedContract(this.currentSection.sectionId).subscribe(function (lock) {
            if (lock.isLocked) {
                _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_5__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Lock',
                        text: lock.message,
                        okButton: 'Got it',
                    },
                });
            }
            else {
                _this.tradeActionsService.closeSectionSubject.next(_this.currentSection.sectionId);
            }
        }));
    };
    TradeManagementMenuBarComponent.prototype.onGenerateDocumentButtonClicked = function () {
        this.router.navigate([this.companyManager.getCurrentCompanyId() + '/execution/document/generation/contractadvice', this.currentSection.sectionId]);
    };
    TradeManagementMenuBarComponent.prototype.onSeeDocumentButtonClicked = function () {
        this.menuDisable = true;
        this.router.navigate([this.companyManager.getCurrentCompanyId() + '/execution/document/list/', 'section', this.currentSection.sectionId]);
    };
    TradeManagementMenuBarComponent.prototype.onImageButtonClicked = function () {
        this.tradeActionsService.tradeImageSubject.next(this.currentSection.sectionId);
    };
    TradeManagementMenuBarComponent.prototype.onSaveAsFavoriteClicked = function () {
        this.tradeActionsService.tradeSaveAsFavouriteSubject.next(this.currentSection.sectionId);
    };
    TradeManagementMenuBarComponent.prototype.contractStatusChanged = function (contractStatus) {
        this.isApproved = true;
        this.currentSection.status = contractStatus;
        this.isCancellationOfTradeAllowed();
    };
    TradeManagementMenuBarComponent.prototype.updateDeallocationInfo = function () {
        this.currentSection.allocatedTo = null;
        this.tradeActionsService.displaySectionSubject.next(this.currentSection.sectionId);
    };
    TradeManagementMenuBarComponent.prototype.onviewPLButtonClicked = function () {
        var openTradepnlReportDialog = this.dialog.open(_trade_pnl_report_trade_pnl_report_component__WEBPACK_IMPORTED_MODULE_17__["TradePnlReportComponent"], {
            data: {
                contractSectionCode: this.currentSection.contractLabel,
                dataVersionId: this.dataVersionId,
            },
            width: '90%',
            height: '90%',
        });
    };
    TradeManagementMenuBarComponent.prototype.onTradeCostClicked = function () {
        var openTradepnlReportDialog = this.dialog.open(_trade_cost_report_trade_cost_report_component__WEBPACK_IMPORTED_MODULE_16__["TradeCostReportComponent"], {
            data: {
                sectionId: this.route.snapshot.paramMap.get('sectionId'),
                contractStatus: this.currentSection.status,
                dataVersionId: this.dataVersionId,
            },
            width: '90%',
            height: '90%',
        });
    };
    TradeManagementMenuBarComponent.prototype.checkTradePrivilege = function () {
        var _this = this;
        this.securityService.isSecurityReady().subscribe(function () {
            if (_this.authorizationService.isPrivilegeAllowed(_this.company, 'Trades')
                && _this.authorizationService.isPrivilegeAllowed(_this.company, 'Physicals')) {
                _this.tradeApprovalPrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'ApproveTrade');
                _this.tradeClosePrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'CloseTrade');
                _this.trancheSplitPrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'CreateTrancheSplit');
            }
        });
    };
    TradeManagementMenuBarComponent.prototype.hasAllocation = function () {
        if (this.currentSection.allocatedTo) {
            return true;
        }
        return false;
    };
    TradeManagementMenuBarComponent.prototype.onDiscardButtonClicked = function () {
        this.showDiscard.emit();
    };
    TradeManagementMenuBarComponent.prototype.isIntercoCreationIsAllowed = function () {
        var isManualInterco = true;
        if (!this.currentSection.isInterCo && this.currentSection.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_9__["InvoicingStatus"].Uninvoiced
            && !this.currentSection.sectionOriginId && this.isIntercoCounterparty) {
            isManualInterco = false;
        }
        return isManualInterco;
    };
    TradeManagementMenuBarComponent.prototype.onIntercoTradeCreation = function () {
        this.manualIntercoCreation.emit(true);
    };
    TradeManagementMenuBarComponent.prototype.onCancelButtonClicked = function () {
        var _this = this;
        this.subscriptions.push(this.lockService.isLockedContract(this.currentSection.sectionId).subscribe(function (lock) {
            if (lock.isLocked) {
                _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_5__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Lock',
                        text: lock.message,
                        okButton: 'Got it',
                    },
                });
            }
            else {
                _this.tradeActionsService.cancelSectionSubject.next(_this.currentSection.sectionId);
            }
        }));
    };
    TradeManagementMenuBarComponent.prototype.isCancellationOfTradeAllowed = function () {
        if (this.currentSection.status === _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_7__["ContractStatus"].Approved) {
            if (this.currentSection.invoicingStatusId !== _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_9__["InvoicingStatus"].Uninvoiced) {
                this.isTradeCancellationAllowed = false;
                this.blockerMessageForCancellingOfTrade = "Not Allowed " + this.currentSection.contractLabel + " is Invoiced";
            }
            else if (this.currentSection.allocatedTo) {
                this.isTradeCancellationAllowed = false;
                this.blockerMessageForCancellingOfTrade = "Not Allowed " + this.currentSection.contractLabel + " is allocated To " + this.currentSection.allocatedTo.contractLabel;
            }
            else if (this.currentSection.blDate) {
                this.isTradeCancellationAllowed = false;
                this.blockerMessageForCancellingOfTrade = "Not Allowed " + this.currentSection.contractLabel + " has a BL Date";
            }
            else {
                this.isTradeCancellationAllowed = true;
                this.blockerMessageForCancellingOfTrade = '';
            }
        }
        if (this.currentSection.status === _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_7__["ContractStatus"].Unapproved) {
            this.isTradeCancellationAllowed = false;
            this.blockerMessageForCancellingOfTrade = "Only Approved Trade Can be Cancelled";
        }
        if (this.currentSection.isCancelled) {
            this.isTradeCancellationAllowed = false;
            this.blockerMessageForCancellingOfTrade = "Already Cancelled Trade";
        }
    };
    TradeManagementMenuBarComponent.prototype.onReverseCancelButtonClicked = function () {
        var _this = this;
        this.lockService.isLockedContract(this.currentSection.sectionId).subscribe(function (lock) {
            if (lock.isLocked) {
                _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_5__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Lock',
                        text: lock.message,
                        okButton: 'Got it',
                    },
                });
            }
            else {
                _this.tradeActionsService.reverseCancelSectionSubject.next(_this.currentSection.sectionId);
            }
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", _shared_entities_section_entity__WEBPACK_IMPORTED_MODULE_6__["Section"])
    ], TradeManagementMenuBarComponent.prototype, "currentSection", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Number)
    ], TradeManagementMenuBarComponent.prototype, "index", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Boolean)
    ], TradeManagementMenuBarComponent.prototype, "menuDisable", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Boolean)
    ], TradeManagementMenuBarComponent.prototype, "isClosed", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], TradeManagementMenuBarComponent.prototype, "showDiscard", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], TradeManagementMenuBarComponent.prototype, "showSave", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Boolean)
    ], TradeManagementMenuBarComponent.prototype, "isIntercoCounterparty", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], TradeManagementMenuBarComponent.prototype, "manualIntercoCreation", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Array)
    ], TradeManagementMenuBarComponent.prototype, "companiesForInterco", void 0);
    TradeManagementMenuBarComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-trade-management-menu-bar',
            template: __webpack_require__(/*! ./trade-management-menu-bar.component.html */ "./Client/app/trading/components/contract-physical-capture/trade-management-menu-bar/trade-management-menu-bar.component.html"),
            styles: [__webpack_require__(/*! ./trade-management-menu-bar.component.scss */ "./Client/app/trading/components/contract-physical-capture/trade-management-menu-bar/trade-management-menu-bar.component.scss")],
        }),
        __metadata("design:paramtypes", [_services_trade_actions_service__WEBPACK_IMPORTED_MODULE_15__["TradeActionsService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_3__["CompanyManagerService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_10__["FormConfigurationProviderService"],
            _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_12__["LockService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialog"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_18__["AuthorizationService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_13__["TradingService"],
            _shared_services_http_services_document_service__WEBPACK_IMPORTED_MODULE_11__["DocumentService"],
            _shared_services_security_service__WEBPACK_IMPORTED_MODULE_14__["SecurityService"]])
    ], TradeManagementMenuBarComponent);
    return TradeManagementMenuBarComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/traffic-tab/physical-contract-capture-form-traffic-tab.component.html":
/*!***************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/traffic-tab/physical-contract-capture-form-traffic-tab.component.html ***!
  \***************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<!-- Layout divided by column -->\r\n<!-- container -->\r\n<div class=\"cards-fxLayout\">\r\n    <div fxLayout=\"row\"\r\n         fxLayout.lt-sm=\"column\"\r\n         fxLayoutAlign=\"space-between stretch\">\r\n        <atlas-shipment-info-form-component class=\"flex-item\"\r\n                                            fxFlex=\"50\"\r\n                                            #ShipmentInfoComponent\r\n                                            (shipmentStatusUpdate)=\"checkShipmentStatusChange($event)\"></atlas-shipment-info-form-component>\r\n\r\n        <atlas-bl-info-form-component class=\"flex-item\"\r\n                                      fxFlex=\"50\"\r\n                                      #BlInfoComponent\r\n                                      (blDateChanged)=\"onBlDateChanged($event)\"></atlas-bl-info-form-component>\r\n    </div>\r\n    <div fxLayout=\"row wrap\"\r\n         fxLayout.lt-sm=\"column\"\r\n         fxLayoutAlign=\"space-between stretch\">\r\n        <atlas-adjust-weight-form-component class=\"flex-item\"\r\n                                            fxFlex=\"33\"\r\n                                            #AdjustWeightComponent\r\n                                            (checkQuantityChange)=\"checkQuantityChange($event)\">\r\n        </atlas-adjust-weight-form-component>\r\n        <atlas-current-trade-form-component class=\"flex-item\"\r\n                                            fxFlex=\"34\"\r\n                                            #CurrentTradeComponent\r\n                                            (checkAllocatedResidualSplitChange)=\"checkAllocatedResidualSplitChange($event)\">\r\n        </atlas-current-trade-form-component>\r\n        <atlas-allocation-form-component fxFlex=\"33\"\r\n                                         class=\"flex-item\"\r\n                                         #AllocationComponent\r\n                                         (checkLeaveStatusChange)=\"checkLeaveStatusChange($event)\">\r\n        </atlas-allocation-form-component>\r\n    </div>\r\n</div>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/traffic-tab/physical-contract-capture-form-traffic-tab.component.scss":
/*!***************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/traffic-tab/physical-contract-capture-form-traffic-tab.component.scss ***!
  \***************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/contract-physical-capture/traffic-tab/physical-contract-capture-form-traffic-tab.component.ts":
/*!*************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/contract-physical-capture/traffic-tab/physical-contract-capture-form-traffic-tab.component.ts ***!
  \*************************************************************************************************************************************/
/*! exports provided: PhysicalContractCaptureFormTrafficTabComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PhysicalContractCaptureFormTrafficTabComponent", function() { return PhysicalContractCaptureFormTrafficTabComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _form_components_adjust_weight_form_component_adjust_weight_form_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../form-components/adjust-weight-form-component/adjust-weight-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/adjust-weight-form-component/adjust-weight-form-component.component.ts");
/* harmony import */ var _form_components_allocation_form_component_allocation_form_component_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../form-components/allocation-form-component/allocation-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/allocation-form-component/allocation-form-component.component.ts");
/* harmony import */ var _form_components_bl_info_form_component_bl_info_form_component_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../form-components/bl-info-form-component/bl-info-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/bl-info-form-component/bl-info-form-component.component.ts");
/* harmony import */ var _form_components_current_trade_form_component_current_trade_form_component_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../form-components/current-trade-form-component/current-trade-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/current-trade-form-component/current-trade-form-component.component.ts");
/* harmony import */ var _form_components_shipment_info_form_component_shipment_info_form_component_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../form-components/shipment-info-form-component/shipment-info-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/shipment-info-form-component/shipment-info-form-component.component.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









var PhysicalContractCaptureFormTrafficTabComponent = /** @class */ (function (_super) {
    __extends(PhysicalContractCaptureFormTrafficTabComponent, _super);
    function PhysicalContractCaptureFormTrafficTabComponent(formBuilder, formConfigurationProvider) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.quantityValueUpdate = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.blDateUpdate = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.shipmentStatusUpdate = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.formComponents = [];
        _this.showAllocation = false;
        return _this;
    }
    PhysicalContractCaptureFormTrafficTabComponent.prototype.ngOnInit = function () {
        this.formComponents.push(this.blInfoComponent, this.shipmentInfoComponent, this.adjustWeightComponent, this.currentTradeComponent, this.allocationComponent);
    };
    PhysicalContractCaptureFormTrafficTabComponent.prototype.contractDateSelected = function (contractDate) {
        this.blInfoComponent.contractDateSelected(contractDate);
    };
    PhysicalContractCaptureFormTrafficTabComponent.prototype.checkLeaveStatusChange = function (isChecked) {
        this.currentTradeComponent.resetAllocatedResidualSplit(isChecked);
        this.quantityValueUpdate.emit();
    };
    PhysicalContractCaptureFormTrafficTabComponent.prototype.checkAllocatedResidualSplitChange = function (isChecked) {
        this.allocationComponent.resetLeaveStatus(isChecked);
        this.quantityValueUpdate.emit();
    };
    PhysicalContractCaptureFormTrafficTabComponent.prototype.checkQuantityChange = function (quantity) {
        this.currentTradeComponent.resetControl(this.allocatedTo);
        if (this.allocatedTo) {
            this.allocationComponent.resetControl();
        }
        if (quantity.newValue >= 0) {
            if (quantity.oldValue > quantity.newValue) {
                this.currentTradeComponent.resetControlonLowerValue();
                if (this.allocatedTo) {
                    this.allocationComponent.resetControlonLowerValue();
                }
            }
            else if ((quantity.oldValue < quantity.newValue)) {
                this.currentTradeComponent.resetControlOnHigherValue();
                if (this.allocatedTo) {
                    this.allocationComponent.resetControlonGreaterValue();
                }
            }
        }
        this.quantityValueUpdate.emit(quantity.newValue);
    };
    PhysicalContractCaptureFormTrafficTabComponent.prototype.checkShipmentStatusChange = function (value) {
        this.shipmentStatusUpdate.emit(value);
    };
    PhysicalContractCaptureFormTrafficTabComponent.prototype.initForm = function (entity, isEdit) {
        this.formComponents.forEach(function (comp) {
            entity = comp.initForm(entity, isEdit);
        });
        var sectionModel = entity;
        this.allocatedTo = sectionModel.allocatedToId;
        return entity;
    };
    PhysicalContractCaptureFormTrafficTabComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            blInfoComponent: this.blInfoComponent.getFormGroup(),
            shipmentInfoComponent: this.shipmentInfoComponent.getFormGroup(),
            adjustWeightComponent: this.adjustWeightComponent.getFormGroup(),
            allocationComponent: this.allocationComponent.getFormGroup(),
        });
        return _super.prototype.getFormGroup.call(this);
    };
    PhysicalContractCaptureFormTrafficTabComponent.prototype.populateEntity = function (entity) {
        this.formComponents.forEach(function (comp) {
            entity = comp.populateEntity(entity);
        });
        return entity;
    };
    PhysicalContractCaptureFormTrafficTabComponent.prototype.onBlDateChanged = function (bldate) {
        this.blDateUpdate.emit(bldate);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('BlInfoComponent'),
        __metadata("design:type", _form_components_bl_info_form_component_bl_info_form_component_component__WEBPACK_IMPORTED_MODULE_6__["BlInfoFormComponent"])
    ], PhysicalContractCaptureFormTrafficTabComponent.prototype, "blInfoComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('AdjustWeightComponent'),
        __metadata("design:type", _form_components_adjust_weight_form_component_adjust_weight_form_component_component__WEBPACK_IMPORTED_MODULE_4__["AdjustWeightFormComponent"])
    ], PhysicalContractCaptureFormTrafficTabComponent.prototype, "adjustWeightComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('ShipmentInfoComponent'),
        __metadata("design:type", _form_components_shipment_info_form_component_shipment_info_form_component_component__WEBPACK_IMPORTED_MODULE_8__["ShipmentInfoFormComponent"])
    ], PhysicalContractCaptureFormTrafficTabComponent.prototype, "shipmentInfoComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('CurrentTradeComponent'),
        __metadata("design:type", _form_components_current_trade_form_component_current_trade_form_component_component__WEBPACK_IMPORTED_MODULE_7__["CurrentTradeFormComponent"])
    ], PhysicalContractCaptureFormTrafficTabComponent.prototype, "currentTradeComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('AllocationComponent'),
        __metadata("design:type", _form_components_allocation_form_component_allocation_form_component_component__WEBPACK_IMPORTED_MODULE_5__["AllocationFormComponent"])
    ], PhysicalContractCaptureFormTrafficTabComponent.prototype, "allocationComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], PhysicalContractCaptureFormTrafficTabComponent.prototype, "quantityValueUpdate", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], PhysicalContractCaptureFormTrafficTabComponent.prototype, "blDateUpdate", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], PhysicalContractCaptureFormTrafficTabComponent.prototype, "shipmentStatusUpdate", void 0);
    PhysicalContractCaptureFormTrafficTabComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-physical-contract-capture-form-traffic-tab',
            template: __webpack_require__(/*! ./physical-contract-capture-form-traffic-tab.component.html */ "./Client/app/trading/components/contract-physical-capture/traffic-tab/physical-contract-capture-form-traffic-tab.component.html"),
            styles: [__webpack_require__(/*! ./physical-contract-capture-form-traffic-tab.component.scss */ "./Client/app/trading/components/contract-physical-capture/traffic-tab/physical-contract-capture-form-traffic-tab.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"], _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_3__["FormConfigurationProviderService"]])
    ], PhysicalContractCaptureFormTrafficTabComponent);
    return PhysicalContractCaptureFormTrafficTabComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_2__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/costmatrices/components/costmatrix-create/costmatrix-create.component.html":
/*!******************************************************************************************************************!*\
  !*** ./Client/app/trading/components/costmatrices/components/costmatrix-create/costmatrix-create.component.html ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<form [formGroup]=\"formGroup\">\r\n    <header class=\"header-background mat-elevation-z2\">\r\n        <div class=\"header-title\">\r\n            <h2>Cost Matrix {{costMatrixAction}} </h2>\r\n        </div>\r\n        <div class=\"header-content\">\r\n            <div fxLayout=\"row\"\r\n                 fxLayoutAlign=\"none center\"\r\n                 fxLayoutGap=\"30px\">\r\n                <div fxFlex=\"40%\"\r\n                     class=\"custom-form\"\r\n                     [class.isEmpty]=\"!nameCtrl.value\"\r\n                     [class.required-field]=\"true\">\r\n                    <mat-form-field>\r\n                        <input\r\n                            matInput\r\n                            placeholder=\"Name\"\r\n                            [formControl]=\"nameCtrl\"\r\n                            label=\"Name\"\r\n                            autocomplete=\"off\"\r\n                            matTooltip=\"Name of the Costmatrix\"\r\n                        />\r\n                        <mat-hint class=\"costmatrix-required-fields\" *ngIf=\"isEdit && !isCostMatrixDisplay\">Required*</mat-hint>\r\n                        <mat-error *ngIf=\"nameCtrl.hasError('required')\">\r\n                            Name is Required\r\n                        </mat-error>\r\n                        <mat-error *ngIf=\"nameCtrl.hasError('maxlength')\">\r\n                            Name cannot be more than 30 characters\r\n                        </mat-error>\r\n                        <mat-hint align=\"end\" style=\"color:orange\" *ngIf=\"nameCtrl.hasError('notUnique')\">\r\n                            Name already used\r\n                        </mat-hint>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div fxFlex=\"40%\" class=\"custom-form\" [class.isEmpty]=\"!descriptionCtrl.value\" [class.required-field]=\"true\">\r\n                    <mat-form-field>\r\n                        <input\r\n                            matInput\r\n                            placeholder=\"Description\"\r\n                            [formControl]=\"descriptionCtrl\"\r\n                            label=\"Description\"\r\n                            matTooltip=\"Description of the Costmatrix\"\r\n                            autocomplete=\"off\"\r\n                            [required]=\"descriptionCtrl.isRequired\"\r\n                        />\r\n                        <mat-error *ngIf=\"descriptionCtrl.hasError('required')\">\r\n                            Description is Required\r\n                        </mat-error>\r\n                        <mat-error *ngIf=\"descriptionCtrl.hasError('maxlength')\">\r\n                            Description cannot be more than 60 characters\r\n                        </mat-error>\r\n                        <mat-hint class=\"costmatrix-required-fields\" *ngIf=\"isEdit && !isCostMatrixDisplay\">Required*</mat-hint>\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </header>\r\n\r\n    <atlas-costmatrix-menu-bar\r\n        [hideAndShowMenuBarButtons]=\"isEdit && !isCostMatrixDisplay\"\r\n        (costmatrixSaveAction)=\"onSaveButtonClicked()\"\r\n        (costmatrixBackAction)=\"onBackButtonClicked()\"\r\n    >\r\n    </atlas-costmatrix-menu-bar>\r\n    <atlas-floating-action-button [fabTitle]=\"fabTitle\"\r\n                                  [fabType]=\"fabType\"\r\n                                  [fabActions]=\"fabMenuActions\"\r\n                                  [isParentLoaded]=\"isLoaded\"\r\n                                  (fabActionClicked)=\"onFabActionClicked($event)\">\r\n    </atlas-floating-action-button>\r\n\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutWrap *ngIf=\"isLoading\" class=\"loading\">\r\n        <mat-spinner color=\"accent\"></mat-spinner>\r\n    </div>\r\n    <div class=\"main-container\">\r\n        <div *atlasFeatureFlag=\"gaps.gap003\">\r\n            <atlas-params-list\r\n                *ngIf=\"paramsReady\"\r\n                [isCostMatrixDisplay]=\"isCostMatrixDisplay\"\r\n                (iconClicked)=\"openSideBar(atlasParamsSidenavSelector)\"\r\n                [chipStringList]=\"paramsToChip()\"\r\n            ></atlas-params-list>\r\n        </div>\r\n        <mat-card>\r\n            <mat-card-content>\r\n                <div fxLayout=\"column \" fxLayoutAlign=\"start end \">\r\n                    <div fxLayout=\"row \" fxLayoutAlign=\"end start \">\r\n                        <button mat-button [disabled]=\"isCostMatrixDisplay\" (click)=\"onAddRowButtonClicked()\">\r\n                            Add cost\r\n                        </button>\r\n                        <button mat-icon-button [matMenuTriggerFor]=\"menu1\" matTooltip=\"More\" [disabled]=\"isCostMatrixDisplay\">\r\n                            <i class=\"material-icons\">more_vert</i>\r\n                        </button>\r\n                        <mat-menu #menu1=\"matMenu\">\r\n                            <button mat-menu-item [matMenuTriggerFor]=\"exportMenu\">\r\n                                <span>Export</span>\r\n                            </button>\r\n                        </mat-menu>\r\n                        <mat-menu #exportMenu=\"matMenu\">\r\n                            <button mat-menu-item (click)=\"onExportButtonClickedAsExcel()\">\r\n                                <span>Export as Excel</span>\r\n                            </button>\r\n                            <button mat-menu-item (click)=\"onExportButtonClickedAsCSV()\">\r\n                                <span>Export as CSV</span>\r\n                            </button>\r\n                        </mat-menu>\r\n                    </div>\r\n                </div>\r\n                <div ag-grid=\"costmatrixGridOptions\" class=\"ag-theme-material pointer-cursor\" style=\"width: 100%; height: 100%\">\r\n                    <ag-grid-angular\r\n                        style=\" height: 100%;\"\r\n                        class=\"ag-theme-material\"\r\n                        [rowData]=\"costmatrixGridRows\"\r\n                        [columnDefs]=\"costmatrixGridColumns\"\r\n                        [gridOptions]=\"costmatrixGridOptions\"\r\n                        [enableColResize]=\"true\"\r\n                        [pagination]=\"true\"\r\n                        [paginationPageSize]=\"10\"\r\n                        [enableSorting]=\"true\"\r\n                        domLayout=\"autoHeight\"\r\n                        [frameworkComponents]=\"gridComponents\"\r\n                        (gridReady)=\"onGridReady($event)\"\r\n                        (cellValueChanged)=\"onCellValueChanged($event)\"\r\n                        enableFilter\r\n                        [rowHeight]=\"atlasAgGridParam.rowHeight\"\r\n                        [singleClickEdit]=\"true\"\r\n                    >\r\n                    </ag-grid-angular>\r\n                </div>\r\n            </mat-card-content>\r\n        </mat-card>\r\n\r\n    </div>\r\n    <atlas-lock-interval [resourcesInformation]=\"resourcesInformation\"> </atlas-lock-interval>\r\n    <mat-sidenav-container>\r\n        <mat-sidenav #atlasParamsSidenavSelector disableClose [mode]=\"'over'\" position=\"end\" [fixedTopGap]=\"56\" [fixedInViewport]=\"true\">\r\n            <div *ngIf=\"!isCostMatrixDisplay && isEdit\">\r\n                <atlas-params-sidenav-selector\r\n                    *atlasFeatureFlag=\"gaps.gap003\"\r\n                    [parameters]=\"parameters\"\r\n                    [tagFields]=\"tagFields\"\r\n                    (closeParamsSidenavSelector)=\"keepParamsReceived($event, atlasParamsSidenavSelector)\"\r\n                ></atlas-params-sidenav-selector>\r\n            </div>\r\n        </mat-sidenav>\r\n    </mat-sidenav-container>\r\n</form>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/costmatrices/components/costmatrix-create/costmatrix-create.component.scss":
/*!******************************************************************************************************************!*\
  !*** ./Client/app/trading/components/costmatrices/components/costmatrix-create/costmatrix-create.component.scss ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".header-background {\n  padding-bottom: 0px;\n  min-height: 100px; }\n\n.header-title {\n  padding: 12px 20px; }\n\n.header-content {\n  padding: 0px 30px 8px; }\n\n.costmatrix-required-fields {\n  color: #00a9c6; }\n\nmat-sidenav {\n  width: 65%; }\n"

/***/ }),

/***/ "./Client/app/trading/components/costmatrices/components/costmatrix-create/costmatrix-create.component.ts":
/*!****************************************************************************************************************!*\
  !*** ./Client/app/trading/components/costmatrices/components/costmatrix-create/costmatrix-create.component.ts ***!
  \****************************************************************************************************************/
/*! exports provided: CostmatrixCreateComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CostmatrixCreateComponent", function() { return CostmatrixCreateComponent; });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_components_ag_contextual_menu_ag_contextual_menu_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component */ "./Client/app/shared/components/ag-contextual-menu/ag-contextual-menu.component.ts");
/* harmony import */ var _shared_components_ag_grid_checkbox_ag_grid_checkbox_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component */ "./Client/app/shared/components/ag-grid-checkbox/ag-grid-checkbox.component.ts");
/* harmony import */ var _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component */ "./Client/app/shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component.ts");
/* harmony import */ var _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component */ "./Client/app/shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_components_cell_editor_numeric_cell_editor_numeric_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component */ "./Client/app/shared/components/cell-editor-numeric/cell-editor-numeric.component.ts");
/* harmony import */ var _shared_components_cell_editor_select_cell_editor_select_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../shared/components/cell-editor-select/cell-editor-select.component */ "./Client/app/shared/components/cell-editor-select/cell-editor-select.component.ts");
/* harmony import */ var _shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../shared/components/confirmation-dialog/confirmation-dialog.component */ "./Client/app/shared/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony import */ var _shared_components_floating_action_button_floating_action_button_type_enum__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../../shared/components/floating-action-button/floating-action-button-type.enum */ "./Client/app/shared/components/floating-action-button/floating-action-button-type.enum.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_http_services_paging_options__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../../shared/entities/http-services/paging-options */ "./Client/app/shared/entities/http-services/paging-options.ts");
/* harmony import */ var _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../../../shared/entities/lock-functional-context.entity */ "./Client/app/shared/entities/lock-functional-context.entity.ts");
/* harmony import */ var _shared_entities_lock_resource_information_entity__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../../../shared/entities/lock-resource-information.entity */ "./Client/app/shared/entities/lock-resource-information.entity.ts");
/* harmony import */ var _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../../../../shared/entities/masterdata-props.entity */ "./Client/app/shared/entities/masterdata-props.entity.ts");
/* harmony import */ var _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../../../../shared/enums/cost-direction.enum */ "./Client/app/shared/enums/cost-direction.enum.ts");
/* harmony import */ var _shared_enums_costmatrix_action_enum__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../../../../shared/enums/costmatrix-action.enum */ "./Client/app/shared/enums/costmatrix-action.enum.ts");
/* harmony import */ var _shared_enums_gaps_enum__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../../../../shared/enums/gaps.enum */ "./Client/app/shared/enums/gaps.enum.ts");
/* harmony import */ var _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../../../../shared/enums/rate-type.enum */ "./Client/app/shared/enums/rate-type.enum.ts");
/* harmony import */ var _shared_numberMask__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../../../../shared/numberMask */ "./Client/app/shared/numberMask.ts");
/* harmony import */ var _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../../../../../shared/services/ag-grid.service */ "./Client/app/shared/services/ag-grid.service.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_feature_flag_service__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../../../../../shared/services/http-services/feature-flag.service */ "./Client/app/shared/services/http-services/feature-flag.service.ts");
/* harmony import */ var _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../../../../../shared/services/http-services/lock.service */ "./Client/app/shared/services/http-services/lock.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _shared_services_title_service__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../../../../../shared/services/title.service */ "./Client/app/shared/services/title.service.ts");
/* harmony import */ var _shared_services_trading_dtos_costmatrix__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../../../../../shared/services/trading/dtos/costmatrix */ "./Client/app/shared/services/trading/dtos/costmatrix.ts");
/* harmony import */ var _shared_services_trading_dtos_costmatrixLine__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../../../../../shared/services/trading/dtos/costmatrixLine */ "./Client/app/shared/services/trading/dtos/costmatrixLine.ts");
/* harmony import */ var _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../../../../../shared/services/ui.service */ "./Client/app/shared/services/ui.service.ts");
/* harmony import */ var _validators_costmatrix_name_async_validator_validator__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../../../../validators/costmatrix-name-async-validator.validator */ "./Client/app/trading/validators/costmatrix-name-async-validator.validator.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







































var CostmatrixCreateComponent = /** @class */ (function (_super) {
    __extends(CostmatrixCreateComponent, _super);
    function CostmatrixCreateComponent(formBuilder, uiService, route, snackbarService, router, masterdataService, tradingService, formConfigurationProvider, dialog, lockService, titleService, gridService, datePipe, authorizationService, featureFlagService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.uiService = uiService;
        _this.route = route;
        _this.snackbarService = snackbarService;
        _this.router = router;
        _this.masterdataService = masterdataService;
        _this.tradingService = tradingService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.dialog = dialog;
        _this.lockService = lockService;
        _this.titleService = titleService;
        _this.gridService = gridService;
        _this.datePipe = datePipe;
        _this.authorizationService = authorizationService;
        _this.featureFlagService = featureFlagService;
        _this.costsMenuActions = {
            deleteCostMatrixLine: 'delete',
        };
        _this.costmatrixGridOptions = {};
        _this.isEdit = false;
        _this.isDirty = false;
        _this.isSummaryView = false;
        _this.isSave = false;
        _this.nameCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_17__["AtlasFormControl"]('Name');
        _this.descriptionCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_17__["AtlasFormControl"]('Description');
        _this.gridContext = {
            gridEditable: true,
        };
        _this.gridComponents = {
            atlasSelect: _shared_components_cell_editor_select_cell_editor_select_component__WEBPACK_IMPORTED_MODULE_14__["CellEditorSelectComponent"],
            atlasNumeric: _shared_components_cell_editor_numeric_cell_editor_numeric_component__WEBPACK_IMPORTED_MODULE_13__["CellEditorNumericComponent"],
            atlasCheckbox: _shared_components_ag_grid_checkbox_ag_grid_checkbox_component__WEBPACK_IMPORTED_MODULE_9__["AgGridCheckboxComponent"],
        };
        _this.masterdataList = [_shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_21__["MasterDataProps"].CostTypes];
        _this.isCostMatrixImage = false;
        _this.isCostMatrixDisplay = false;
        _this.destroy$ = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
        _this.resourcesInformation = new Array();
        _this.gridName = 'CostMatrixEdit';
        _this.gaps = _shared_enums_gaps_enum__WEBPACK_IMPORTED_MODULE_24__["Gaps"];
        _this.paramsReady = false;
        _this.fabMenuActions = [];
        _this.fabType = _shared_components_floating_action_button_floating_action_button_type_enum__WEBPACK_IMPORTED_MODULE_16__["FABType"].MiniFAB;
        _this.fabTitle = 'COST MATRICES mini FAB';
        _this.isLoaded = false;
        _this.userActiveDirectoryName = _this.authorizationService.getCurrentUser().samAccountName;
        return _this;
    }
    CostmatrixCreateComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.tagFields = this.getTagFields();
        this.tagFields.subscribe(function (val) {
            _this.tagsList = val;
        });
        this.parameters = null;
        this.isEdit = true;
        this.company = this.route.snapshot.paramMap.get('company');
        this.costmatrixId = this.route.snapshot.params['costmatrixId'];
        this.atlasAgGridParam = this.gridService.getAgGridParam();
        this.init();
        this.masterdata = this.route.snapshot.data.masterdata;
        this.rateTypes = [
            {
                code: _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_25__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_25__["RateTypes"].Rate],
                description: '',
            },
            {
                code: _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_25__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_25__["RateTypes"].Amount],
                description: '',
            },
            {
                code: _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_25__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_25__["RateTypes"].Percent],
                description: '',
            },
        ];
        this.costDirections = [
            {
                costDirectionId: _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_22__["CostDirections"].Payable,
                costDirection: 'Pay',
            },
            {
                costDirectionId: _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_22__["CostDirections"].Receivable,
                costDirection: 'Receive',
            },
        ];
        this.initializeGridColumns();
        this.isCostMatrixImage = this.route.snapshot.data['isImage'];
        this.isCostMatrixDisplay = this.route.snapshot.data['isDisplay'];
        if (this.route.snapshot.url[1].path.toString() === 'edit') {
            this.costMatrixId = Number(this.route.snapshot.paramMap.get('costmatrixId'));
            this.isDirty = true;
            this.costMatrixAction = _shared_enums_costmatrix_action_enum__WEBPACK_IMPORTED_MODULE_23__["CostMatrixAction"].Edit;
            this.gridContext.gridEditable = true;
        }
        else if (this.isCostMatrixImage) {
            this.costMatrixId = Number(this.route.snapshot.paramMap.get('originalCostMatrixId'));
            this.isDirty = false;
            this.costMatrixAction = _shared_enums_costmatrix_action_enum__WEBPACK_IMPORTED_MODULE_23__["CostMatrixAction"].Image;
            this.gridContext.gridEditable = true;
        }
        else if (this.isCostMatrixDisplay) {
            this.costMatrixId = Number(this.route.snapshot.paramMap.get('costmatrixId'));
            this.gridContext.gridEditable = false;
            this.viewEditCostMatrix();
        }
        else {
            this.costMatrixAction = _shared_enums_costmatrix_action_enum__WEBPACK_IMPORTED_MODULE_23__["CostMatrixAction"].Create;
            this.titleService.setTitle('Cost Matrix Creation');
        }
        if (this.costMatrixId && this.costMatrixId !== 0) {
            this.isLoading = true;
            this.viewEditCostMatrix();
        }
        else {
            this.isLoading = false;
        }
        this.initializeForm();
        this.setValidators();
        this.getCommodities();
        this.initFABActions();
    };
    CostmatrixCreateComponent.prototype.initializeForm = function () {
        this.formGroup = this.formBuilder.group({
            nameCtrl: this.nameCtrl,
            descriptionCtrl: this.descriptionCtrl,
        });
    };
    CostmatrixCreateComponent.prototype.canDeactivate = function () {
        if (this.formGroup.dirty && this.isSave === false) {
            return window.confirm('Leave an unsave form? \nYour changes won\'t be applied!');
        }
        return true;
    };
    CostmatrixCreateComponent.prototype.viewEditCostMatrix = function () {
        var _this = this;
        this.featureFlagService.getFlagInfo(_shared_enums_gaps_enum__WEBPACK_IMPORTED_MODULE_24__["Gaps"].gap003).subscribe(function (flagAuth) {
            var matrix = _this.tradingService.getCostmatricesListByCostmatrixId(_this.costMatrixId);
            if (flagAuth && flagAuth.active) {
                var tags = _this.tradingService.GetCostMatricesListWithTags(_this.costMatrixId);
                _this.subscriptions.push(tags.subscribe(function (result) {
                    _this.getmatrix(matrix, result);
                }));
            }
            else {
                _this.subscriptions.push(_this.getmatrix(matrix, null));
            }
        });
    };
    CostmatrixCreateComponent.prototype.getmatrix = function (matrix, result) {
        var _this = this;
        return matrix.subscribe(function (data) {
            _this.costMatrixLines = data.costMatrixLines;
            _this.parameters = (result && result.length > 0) ? result[0].tags : null;
            if (_this.isCostMatrixImage) {
                _this.nameCtrl.patchValue(null);
                _this.descriptionCtrl.patchValue(null);
                _this.titleService.setTitle(data.name + ' - Cost Matrix Image');
            }
            else if (_this.isCostMatrixDisplay) {
                _this.nameCtrl.disable();
                _this.descriptionCtrl.disable();
                _this.nameCtrl.patchValue(data.name);
                _this.descriptionCtrl.patchValue(data.description);
                _this.titleService.setTitle(data.name + ' - Cost Matrix View');
            }
            else {
                _this.lockService
                    .lockCostMatrix(_this.costMatrixId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_19__["LockFunctionalContext"].CostMatrixEdition)
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["takeUntil"])(_this.destroy$))
                    .subscribe(function (lockData) {
                    _this.startLockRefresh(_this.costMatrixId, data.name);
                    _this.titleService.setTitle(data.name + ' - Cost Matrix Edit');
                }, function (err) {
                    _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_15__["ConfirmationDialogComponent"], {
                        data: {
                            title: 'Lock',
                            text: err.error.detail,
                            okButton: 'Got it',
                        },
                    });
                    _this.goToCostMatrixHome();
                });
                _this.nameCtrl.disable();
                _this.nameCtrl.patchValue(data.name);
                _this.descriptionCtrl.patchValue(data.description);
            }
            _this.initializeGridColumns();
            _this.costMatrixLines.forEach(function (line) {
                if (_this.masterdata) {
                    var counterparty = _this.masterdata.counterparties.find(function (e) { return e.counterpartyID === line.supplierId; });
                    if (counterparty) {
                        line.supplierCode = counterparty.counterpartyCode;
                    }
                    var costType = _this.masterdata.costTypes.find(function (e) { return e.costTypeId === line.costTypeId; });
                    if (costType) {
                        line.costTypeCode = costType.costTypeCode;
                    }
                    var priceUnit = _this.masterdata.priceUnits.find(function (e) { return e.priceUnitId === line.priceUnitId; });
                    if (priceUnit) {
                        line.priceCode = priceUnit.priceCode;
                    }
                }
                line.costDirection = _this.costDirections.find(function (e) { return e.costDirectionId === line.payReceive; }).costDirection;
                line.rateTypeCode = _this.getRateTypeCodeFromID(line.rateType);
            });
            _this.costmatrixGridRows = _this.costMatrixLines;
            _this.isLoading = false;
        });
    };
    CostmatrixCreateComponent.prototype.onGridReady = function (params) {
        params.columnDefs = this.costmatrixGridColumns;
        this.costmatrixGridOptions = params;
        this.gridApi = params.api;
        this.gridColumnApi = params.columnApi;
        this.gridApi.showNoRowsOverlay();
        this.autoSizeContractsGrid();
    };
    CostmatrixCreateComponent.prototype.autoSizeContractsGrid = function () {
        if (this.gridColumnApi !== undefined) {
            var allColumnIds_1 = [];
            this.costmatrixGridColumns.forEach(function (columnDefs) {
                allColumnIds_1.push(columnDefs.field);
            });
            this.gridColumnApi.autoSizeColumns(allColumnIds_1);
        }
    };
    CostmatrixCreateComponent.prototype.onGridSizeChanged = function (params) {
        this.autoSizeContractsGrid();
    };
    CostmatrixCreateComponent.prototype.initializeGridColumns = function () {
        var _this = this;
        this.costmatrixGridOptions = {
            context: this.gridContext,
        };
        this.costmatrixGridColumns = [
            {
                headerName: '',
                valueGetter: this.getRowStatus,
                lockPosition: true,
                hide: this.isCostMatrixDisplay,
            },
            {
                headerName: 'Cost type*',
                field: 'costTypeCode',
                colId: 'costTypeCode',
                cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_10__["AgGridAutocompleteComponent"],
                cellRendererParams: {
                    context: {
                        componentParent: this,
                    },
                    options: this.masterdata.costTypes
                        .filter(function (cost) { return cost.isATradeCost === true; })
                        .sort(function (a, b) { return a.costTypeCode.localeCompare(b.costTypeCode); }),
                    valueProperty: 'costTypeCode',
                    codeProperty: 'costTypeCode',
                    displayProperty: 'costTypeCode',
                    isRequired: true,
                },
                onCellValueChanged: function (params) {
                    var filteredCostType = _this.masterdata.costTypes.find(function (e) { return e.costTypeCode === params.data.costTypeCode; });
                    if (filteredCostType) {
                        params.node.setDataValue('description', filteredCostType.name);
                        params.node.setDataValue('inPL', filteredCostType.inPNL);
                        params.node.setDataValue('noAct', filteredCostType.noAction);
                    }
                },
            },
            {
                headerName: 'Description',
                field: 'description',
                colId: 'description',
            },
            {
                headerName: 'Supplier',
                field: 'supplierCode',
                cellRendererFramework: _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_11__["AgGridContextualSearchComponent"],
                cellRendererParams: function (params) {
                    return {
                        context: {
                            componentParent: _this,
                            gridEditable: params.context.gridEditable,
                        },
                        gridId: 'counterpartiesGrid',
                        options: _this.masterdata.counterparties,
                        displayProperty: 'counterpartyCode',
                        valueProperty: 'counterpartyCode',
                        lightBoxTitle: 'Results for Counterparty',
                        showContextualSearchIcon: params.context.gridEditable,
                    };
                },
                onCellValueChanged: this.onClientAccountSelected.bind(this),
            },
            {
                headerName: 'Pay/Rec*',
                field: 'costDirection',
                editable: this.isGridEditable,
                cellRenderer: this.requiredCell,
                cellEditor: 'agRichSelectCellEditor',
                cellEditorParams: {
                    values: this.costDirections.map(function (costDirection) { return costDirection.costDirection; }),
                    displayPropertyName: 'costDirection',
                    valuePropertyName: 'costDirection',
                    displayFormat: 'costDirection',
                },
            },
            {
                headerName: 'Ccy*',
                field: 'currencyCode',
                colId: 'currencyCode',
                cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_10__["AgGridAutocompleteComponent"],
                cellRendererParams: {
                    context: {
                        componentParent: this,
                    },
                    options: this.masterdata.currencies,
                    valueProperty: 'currencyCode',
                    codeProperty: 'currencyCode',
                    displayProperty: 'description',
                    isRequired: true,
                },
                onCellValueChanged: function (params) { },
            },
            {
                headerName: 'Rate Type*',
                field: 'rateTypeCode',
                colId: 'rateTypeCode',
                editable: this.isGridEditable,
                cellRenderer: this.requiredCell.bind(this),
                cellEditor: 'agRichSelectCellEditor',
                cellEditorParams: {
                    values: this.rateTypes.map(function (rateType) { return rateType.code; }),
                    valuePropertyName: 'code',
                    displayFormat: 'code',
                    context: this.masterdata,
                },
                onCellValueChanged: this.onRateTypeChange.bind(this),
            },
            {
                headerName: 'Price Code',
                field: 'priceCode',
                colId: 'priceCode',
                editable: this.isPriceCodeEditable,
                cellEditor: 'agRichSelectCellEditor',
                cellRenderer: this.priceCodeRequired.bind(this),
                cellEditorParams: {
                    values: this.masterdata.priceUnits.map(function (priceUnit) { return priceUnit.priceCode; }),
                    displayPropertyName: 'description',
                    valuePropertyName: 'priceCode',
                    displayFormat: 'priceCode | description',
                },
            },
            {
                headerName: 'Rate/Amount',
                field: 'rateAmount',
                type: 'numericColumn',
                editable: this.isGridEditable,
                cellEditor: 'atlasNumeric',
                cellEditorParams: {
                    displayMask: Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_26__["CustomNumberMask"])(12, 10, false),
                    isRightAligned: false,
                },
            },
            {
                headerName: 'in P&L',
                field: 'inPL',
                colId: 'inPL',
                cellRenderer: 'atlasCheckbox',
                cellRendererParams: {
                    disabled: this.isGridCheckboxEditable,
                },
            },
            {
                headerName: 'No Act',
                field: 'noAct',
                colId: 'noAct',
                cellRenderer: 'atlasCheckbox',
                cellRendererParams: {
                    disabled: this.isGridCheckboxEditable,
                },
            },
            {
                headerName: 'Narrative',
                field: 'narrative',
                editable: this.isGridEditable,
                cellEditor: 'agLargeTextCellEditor',
                cellEditorParams: {
                    maxLength: 100,
                    rows: 3,
                    cols: 50,
                },
            },
            {
                headerName: '',
                cellRendererFramework: _shared_components_ag_contextual_menu_ag_contextual_menu_component__WEBPACK_IMPORTED_MODULE_8__["AgContextualMenuComponent"],
                cellRendererParams: {
                    context: {
                        componentParent: this,
                        actionContext: this.gridContext,
                    },
                    menuActions: this.costmatricesGridContextualMenuActions,
                    hide: false,
                },
                cellClass: 'ag-contextual-menu',
                maxWidth: 80,
            },
        ];
    };
    CostmatrixCreateComponent.prototype.isGridCheckboxEditable = function (params) {
        return !params.context.gridEditable;
    };
    CostmatrixCreateComponent.prototype.getRowStatus = function (params) {
        return params.data.costMatrixLineId ? '' : 'N';
    };
    CostmatrixCreateComponent.prototype.isGridEditable = function (params) {
        return params.context.gridEditable;
    };
    CostmatrixCreateComponent.prototype.isPriceCodeEditable = function (params) {
        if (params.data.rateTypeCode === _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_25__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_25__["RateTypes"].Rate]) {
            return params.context.gridEditable;
        }
        else {
            params.node.setDataValue('priceCode', '');
        }
    };
    CostmatrixCreateComponent.prototype.onCellValueChanged = function (params) {
        if (params.oldValue !== params.newValue) {
            params.node.data.isDirty = true;
        }
    };
    CostmatrixCreateComponent.prototype.requiredCell = function (params) {
        if (!params.value || params.value === '') {
            return '<div class=\'cost-cell-value-required\'>Required*</div>';
        }
        return params.value;
    };
    CostmatrixCreateComponent.prototype.onCostTypeChange = function (params) {
        var filteredCostType = params.colDef.cellEditorParams.context.costTypes.find(function (e) { return e.costTypeCode === params.data.costTypeCode; });
        if (filteredCostType) {
            var costTypeDescription = filteredCostType.name;
            var inPNL = filteredCostType.inPNL;
            var noAction = filteredCostType.noAction;
            params.node.setDataValue('description', costTypeDescription);
            params.node.setDataValue('inPL', inPNL);
            params.node.setDataValue('noAct', noAction);
        }
    };
    CostmatrixCreateComponent.prototype.onRateTypeChange = function (params) {
        if (params.newValue === _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_25__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_25__["RateTypes"].Rate]) {
            this.priceCodeRequired(params);
        }
        else {
            this.isPriceCodeEditable(params);
        }
    };
    CostmatrixCreateComponent.prototype.priceCodeRequired = function (params) {
        if ((!params.value || params.value === '') && params.data.rateTypeCode === _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_25__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_25__["RateTypes"].Rate]) {
            params.node.setDataValue('priceCode', this.requiredCell(this));
        }
        return params.value;
    };
    CostmatrixCreateComponent.prototype.onAddRowButtonClicked = function () {
        this.isSave = true;
        var newItem = this.createNewRowData();
        var res = this.gridApi.updateRowData({ add: [newItem] });
        this.gridColumnApi.autoSizeAllColumns();
    };
    CostmatrixCreateComponent.prototype.onClientAccountSelected = function (params) {
        if (params.newValue && params.oldValue !== params.newValue && params.newValue) {
            var selectedClientAccount = this.masterdata.counterparties.find(function (clientAccount) { return clientAccount.counterpartyCode === params.newValue; });
            if (!selectedClientAccount) {
                this.snackbarService.throwErrorSnackBar('Not allowed : Client Account does not exist');
            }
        }
    };
    CostmatrixCreateComponent.prototype.createNewRowData = function () {
        var newCostRow = new _shared_services_trading_dtos_costmatrixLine__WEBPACK_IMPORTED_MODULE_36__["CostmatrixLine"]();
        return newCostRow;
    };
    CostmatrixCreateComponent.prototype.onDiscardButtonClicked = function () {
        var _this = this;
        this.isSave = true;
        var confirmDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_15__["ConfirmationDialogComponent"], {
            data: {
                title: 'Discard Changes',
                text: 'You have some modification pending. Close and lose changes?',
                okButton: 'Ok',
                cancelButton: 'Cancel',
            },
        });
        confirmDialog.afterClosed().subscribe(function (answer) {
            if (answer) {
                _this.goToCostMatrixHome();
            }
        });
    };
    CostmatrixCreateComponent.prototype.onBackButtonClicked = function () {
        this.goToCostMatrixHome();
    };
    CostmatrixCreateComponent.prototype.goToCostMatrixHome = function () {
        var tabIndex = 0;
        tabIndex = 1;
        this.router.navigate(['/' + this.company + '/trades'], {
            queryParams: { index: tabIndex },
        });
    };
    CostmatrixCreateComponent.prototype.goToCostMatrixViewMode = function (costmatrixId) {
        this.router.navigate(['/' + this.company + '/trades/costmatrix/display/' + encodeURIComponent(costmatrixId.toString())]);
    };
    CostmatrixCreateComponent.prototype.getGridEditData = function () {
        var _this = this;
        var costmatrix = new _shared_services_trading_dtos_costmatrix__WEBPACK_IMPORTED_MODULE_35__["Costmatrix"]();
        costmatrix.costMatrixId = this.costMatrixId;
        costmatrix.description = this.descriptionCtrl.value;
        costmatrix.costMatrixLines = [];
        this.gridApi.forEachNode(function (rowData) {
            if (rowData.data) {
                var costmatrixline = new _shared_services_trading_dtos_costmatrixLine__WEBPACK_IMPORTED_MODULE_36__["CostmatrixLine"]();
                if (rowData.data.isDirty && _this.isEdit) {
                    if (costmatrixline.costMatrixLineId !== 0) {
                        costmatrixline.costMatrixLineId = rowData.data.costMatrixLineId;
                    }
                    costmatrixline.costMatrixId = _this.costMatrixId;
                    if (_this.masterdata) {
                        var costType = _this.masterdata.costTypes.find(function (e) { return e.costTypeCode === rowData.data.costTypeCode; });
                        if (costType) {
                            costmatrixline.costTypeId = costType.costTypeId;
                        }
                        var costTypeCode = _this.masterdata.costTypes.find(function (e) { return e.costTypeCode === rowData.data.costTypeCode; });
                        if (costTypeCode) {
                            costmatrixline.description = costTypeCode.name;
                        }
                        var supplierCode = _this.masterdata.counterparties.find(function (e) { return e.counterpartyCode === rowData.data.supplierCode; });
                        if (supplierCode) {
                            costmatrixline.supplierId = supplierCode.counterpartyID;
                        }
                        var priceUnit = _this.masterdata.priceUnits.find(function (e) { return e.priceCode === rowData.data.priceCode; });
                        if (priceUnit) {
                            costmatrixline.priceUnitId = priceUnit.priceUnitId;
                        }
                    }
                    costmatrixline.payReceive = _this.costDirections.find(function (e) { return e.costDirection === rowData.data.costDirection; }).costDirectionId;
                    costmatrixline.currencyCode = rowData.data.currencyCode;
                    costmatrixline.rateType = _this.getRateTypeIdFromCode(rowData.data.rateTypeCode);
                    costmatrixline.rateAmount = rowData.data.rateAmount;
                    costmatrixline.inPL = rowData.data.inPL;
                    costmatrixline.noAct = rowData.data.noAct;
                    costmatrixline.narrative = rowData.data.narrative;
                    costmatrix.costMatrixLines.push(costmatrixline);
                }
            }
        });
        return costmatrix;
    };
    CostmatrixCreateComponent.prototype.getGridData = function () {
        var _this = this;
        var costmatrix = new _shared_services_trading_dtos_costmatrix__WEBPACK_IMPORTED_MODULE_35__["Costmatrix"]();
        costmatrix.costMatrixLines = [];
        this.gridApi.forEachNode(function (rowData) {
            if (rowData.data) {
                var costmatrixline = new _shared_services_trading_dtos_costmatrixLine__WEBPACK_IMPORTED_MODULE_36__["CostmatrixLine"]();
                if (_this.masterdata) {
                    var costType = _this.masterdata.costTypes.find(function (e) { return e.costTypeCode === rowData.data.costTypeCode; });
                    if (costType) {
                        costmatrixline.costTypeId = costType.costTypeId;
                    }
                    var supplierCode = _this.masterdata.counterparties.find(function (e) { return e.counterpartyCode === rowData.data.supplierCode; });
                    if (supplierCode) {
                        costmatrixline.supplierId = supplierCode.counterpartyID;
                    }
                    var priceUnit = _this.masterdata.priceUnits.find(function (e) { return e.priceCode === rowData.data.priceCode; });
                    if (priceUnit) {
                        costmatrixline.priceUnitId = priceUnit.priceUnitId;
                    }
                }
                costmatrixline.description = rowData.data.description;
                costmatrixline.payReceive = _this.costDirections.find(function (e) { return e.costDirection === rowData.data.costDirection; }).costDirectionId;
                costmatrixline.currencyCode = rowData.data.currencyCode;
                costmatrixline.rateType = _this.getRateTypeIdFromCode(rowData.data.rateTypeCode);
                costmatrixline.rateAmount = rowData.data.rateAmount;
                costmatrixline.inPL = rowData.data.inPL;
                costmatrixline.noAct = rowData.data.noAct;
                costmatrixline.narrative = rowData.data.narrative;
                costmatrix.costMatrixLines.push(costmatrixline);
            }
        });
        costmatrix.name = this.nameCtrl.value;
        costmatrix.description = this.descriptionCtrl.value;
        return costmatrix;
    };
    CostmatrixCreateComponent.prototype.keepParamsReceived = function (taglist, paramsSideNav) {
        paramsSideNav.close();
        this.parameters = taglist;
    };
    CostmatrixCreateComponent.prototype.onSaveButtonClicked = function () {
        var _this = this;
        this.isSave = true;
        if (!this.formGroup.valid || !this.validate()) {
            this.snackbarService.throwErrorSnackBar('Cost matrix is invalid. Please resolve the errors.');
        }
        else {
            var costmatrix_1 = this.isDirty ? this.getGridEditData() : this.getGridData();
            var operation_1;
            this.featureFlagService
                .getFlagInfo(_shared_enums_gaps_enum__WEBPACK_IMPORTED_MODULE_24__["Gaps"].gap003)
                .subscribe(function (flagAuth) {
                if (flagAuth && flagAuth.active) {
                    costmatrix_1.tags = _this.parameters;
                    operation_1 = _this.isDirty
                        ? _this.tradingService.updateCostmatrixWithParameters(costmatrix_1)
                        : _this.tradingService.createCostMatrixWithParameters(costmatrix_1);
                }
                else {
                    operation_1 = _this.opertationSave(operation_1, costmatrix_1);
                }
            }, function (error) {
                operation_1 = _this.opertationSave(operation_1, costmatrix_1);
            })
                .add(function () {
                operation_1.subscribe(function (data) {
                    _this.snackbarService.informationSnackBar('Cost matrix details updated successfully');
                    _this.goToCostMatrixViewMode(data ? data.costMatrixId : costmatrix_1.costMatrixId);
                });
            });
        }
    };
    CostmatrixCreateComponent.prototype.opertationSave = function (operation, costmatrix) {
        operation = this.isDirty ? this.tradingService.updateCostmatrix(costmatrix) : this.tradingService.createCostmatrix(costmatrix);
        return operation;
    };
    CostmatrixCreateComponent.prototype.validate = function () {
        var isValid = true;
        this.gridApi.forEachNode(function (rowData) {
            if (rowData.data.costTypeCode && rowData.data.costDirection && rowData.data.currencyCode && rowData.data.rateTypeCode) {
                if (rowData.data.rateTypeCode === 'Rate' && rowData.data.priceCode.includes('Required*')) {
                    isValid = false;
                }
            }
            else if (!(rowData.data.costTypeCode || rowData.data.costDirection || rowData.data.currencyCode || rowData.data.rateTypeCode)) {
                isValid = false;
            }
            else if (!(rowData.data.costTypeCode && rowData.data.costDirection && rowData.data.currencyCode && rowData.data.rateTypeCode)) {
                isValid = false;
            }
        });
        if (!(this.nameCtrl.value && this.descriptionCtrl.value)) {
            isValid = false;
        }
        return isValid;
    };
    CostmatrixCreateComponent.prototype.setValidators = function () {
        this.descriptionCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].maxLength(60), _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]));
        this.nameCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].maxLength(30), _angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required]));
        this.nameCtrl.setAsyncValidators(_validators_costmatrix_name_async_validator_validator__WEBPACK_IMPORTED_MODULE_38__["CostMatrixNameAsyncValidator"].createValidator(this.tradingService));
    };
    CostmatrixCreateComponent.prototype.getRateTypeIdFromCode = function (code) {
        var rateTypeId = _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_25__["RateTypes"][code];
        return rateTypeId;
    };
    CostmatrixCreateComponent.prototype.getRateTypeCodeFromID = function (id) {
        var rateTypeCode = _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_25__["RateTypes"][id];
        return rateTypeCode;
    };
    CostmatrixCreateComponent.prototype.isDeleteDisabledWithPrivileges = function (params) {
        var costMatrixRow = params.data;
        if (!costMatrixRow.costMatrixLineId) {
            return false;
        }
        var deleteDisable = true;
        if (params.context.actionContext.gridEditable) {
            deleteDisable = false;
        }
        return deleteDisable;
    };
    CostmatrixCreateComponent.prototype.init = function () {
        this.costmatricesGridContextualMenuActions = [
            {
                icon: 'delete',
                text: 'Delete',
                action: this.costsMenuActions.deleteCostMatrixLine,
                disabled: this.isDeleteDisabledWithPrivileges,
            },
        ];
    };
    CostmatrixCreateComponent.prototype.handleAction = function (action, costMatrixLine) {
        var _this = this;
        switch (action) {
            case this.costsMenuActions.deleteCostMatrixLine:
                var confirmDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_15__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'CostMatrixLine Deletion',
                        text: 'Deleting a cost matrix line is permanent. Do you wish to proceed?',
                        okButton: 'Delete anyway',
                        cancelButton: 'Cancel',
                    },
                });
                var confirmationSubscription = confirmDialog.afterClosed().subscribe(function (answer) {
                    if (answer) {
                        if (costMatrixLine.costMatrixLineId) {
                            var deleteConfirmationSubscription = _this.tradingService
                                .deleteCostMatrixLine(costMatrixLine.costMatrixId, costMatrixLine.costMatrixLineId)
                                .subscribe(function () {
                                _this.snackbarService.informationSnackBar('Cost matrix line Deleted');
                                _this.viewEditCostMatrix();
                            });
                            _this.subscriptions.push(deleteConfirmationSubscription);
                        }
                        else {
                            _this.gridApi.updateRowData({ remove: [costMatrixLine] });
                        }
                    }
                });
                this.subscriptions.push(confirmationSubscription);
                break;
            default:
                break;
        }
    };
    CostmatrixCreateComponent.prototype.startLockRefresh = function (costMatrixId, costMatrixName) {
        this.resourcesInformation = new Array();
        var resourceInformation = new _shared_entities_lock_resource_information_entity__WEBPACK_IMPORTED_MODULE_20__["LockResourceInformation"]();
        resourceInformation.resourceType = 'Cost Matrix';
        resourceInformation.resourceId = costMatrixId;
        resourceInformation.resourceCode = costMatrixName;
        resourceInformation.needRefresh = true;
        this.resourcesInformation.push(resourceInformation);
    };
    CostmatrixCreateComponent.prototype.stopLockRefresh = function () {
        this.resourcesInformation = new Array();
    };
    CostmatrixCreateComponent.prototype.ngOnDestroy = function () {
        var _this = this;
        this.stopLockRefresh();
        this.lockService
            .cleanSessionLocks()
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["takeUntil"])(this.destroy$))
            .subscribe(function () {
            _this.destroy$.next();
            _this.destroy$.complete();
        });
    };
    CostmatrixCreateComponent.prototype.getParamHeaders = function (format) {
        var now = new Date();
        var todayDate = this.datePipe
            .transform(now, 'yyyyMMdd_hhmm')
            .toString()
            .toUpperCase();
        var fileName = todayDate + '_' + this.company + '_' + this.gridName + '_' + this.userActiveDirectoryName + format;
        var name = this.nameCtrl.value;
        var description = this.descriptionCtrl.value;
        var isCsv = format === '.csv';
        var params = {
            fileName: fileName,
            customHeader: [],
        };
        if (!isCsv) {
            params.customHeader = [
                [
                    {
                        data: {
                            type: 'String',
                            value: 'Name',
                        },
                    },
                    {
                        data: {
                            type: 'String',
                            value: name,
                        },
                    },
                ],
                [
                    {
                        data: {
                            type: 'String',
                            value: 'Description',
                        },
                    },
                    {
                        data: {
                            type: 'String',
                            value: description,
                        },
                    },
                ],
                [],
            ];
        }
        else {
            params.customHeader = 'Name,' + name + '\r\nDescription,' + description + '\n';
        }
        return params;
    };
    CostmatrixCreateComponent.prototype.onExportButtonClickedAsExcel = function () {
        var params = this.getParamHeaders('.xlsx');
        this.gridApi.exportDataAsExcel(params);
    };
    CostmatrixCreateComponent.prototype.onExportButtonClickedAsCSV = function () {
        var params = this.getParamHeaders('.csv');
        this.gridApi.exportDataAsCsv(params);
    };
    CostmatrixCreateComponent.prototype.openSideBar = function (drawer) {
        drawer.toggle();
    };
    /**
     * Recover the tagfields of the parameters table
     */
    CostmatrixCreateComponent.prototype.getTagFields = function () {
        return this.tradingService.getTagFields();
    };
    CostmatrixCreateComponent.prototype.paramsToChip = function () {
        var _this = this;
        var chip;
        var chips = new Array();
        var typenameActual;
        if (this.tagsList && this.parameters) {
            this.parameters.forEach(function (param) {
                if (param.typeName !== typenameActual && param.tagValueId !== null) {
                    var value = _this.tagsList.find(function (a) { return param.typeName === a.typeName; });
                    if (value) {
                        var label = value.label;
                        chip = label + '=';
                        chip += _this.searchValue(param.typeName, param.tagValueId);
                        typenameActual = param.typeName;
                    }
                }
                else {
                    chip += ',' + param.tagValueId;
                }
                chips.push(chip);
            });
        }
        return chips;
    };
    CostmatrixCreateComponent.prototype.searchValue = function (typename, tagValueId) {
        var paramName = '';
        var paramid = '';
        var list;
        if (typename !== '' && typename !== undefined) {
            switch (typename) {
                case 'SectionDto.ContractTermCode':
                    paramName = 'displayName';
                    paramid = 'contractTermId';
                    list = this.contractTerms;
                    break;
                case 'TradeDto.Type':
                    paramName = 'enumEntityValue';
                    paramid = 'enumEntityId';
                    list = this.contractTypes;
                    break;
                case 'SectionDto.PaymentTermCode':
                    paramName = 'paymentTermCode';
                    paramid = 'paymentTermsId';
                    list = this.paymentTerms;
                    break;
                case 'SectionDto.CounterpartyReference':
                    paramName = 'counterpartyCode';
                    paramid = 'counterpartyID';
                    list = this.counterparties;
                    break;
                case 'SectionDto.PortDestinationCode':
                case 'SectionDto.PortOriginCode':
                    paramName = 'portCode';
                    paramid = 'portId';
                    list = this.ports;
                    break;
            }
            if (paramName !== '' && paramid !== '') {
                tagValueId = this.searchTagByid(tagValueId, list, paramName, paramid);
            }
        }
        return tagValueId;
    };
    CostmatrixCreateComponent.prototype.searchTagByid = function (tagValueId, list, paramName, paramId) {
        var tagsIds = tagValueId.split(',');
        var newTagValueId = new Array();
        tagsIds.forEach(function (id) {
            var tag = list.find(function (val) { return val[paramId] === Number(id); });
            newTagValueId.push(tag[paramName]);
        });
        return newTagValueId.join();
    };
    CostmatrixCreateComponent.prototype.getCommodities = function () {
        var _this = this;
        this.masterdataService.getContractTerms().subscribe(function (contractTerms) {
            _this.contractTerms = contractTerms.value;
            _this.masterdataService.getContractTypes().subscribe(function (contractType) {
                _this.contractTypes = contractType.value;
                _this.masterdataService.getCounterparties('', new _shared_entities_http_services_paging_options__WEBPACK_IMPORTED_MODULE_18__["PagingOptions"]()).subscribe(function (counterparty) {
                    _this.counterparties = counterparty.value;
                    _this.masterdataService.getPaymentTerms('', new _shared_entities_http_services_paging_options__WEBPACK_IMPORTED_MODULE_18__["PagingOptions"]()).subscribe(function (paymentTerms) {
                        _this.paymentTerms = paymentTerms.value;
                        _this.masterdataService.getPorts('', new _shared_entities_http_services_paging_options__WEBPACK_IMPORTED_MODULE_18__["PagingOptions"]()).subscribe(function (ports) {
                            _this.ports = ports.value;
                            _this.paramsReady = true;
                        });
                    });
                });
            });
        });
    };
    // For FAB
    CostmatrixCreateComponent.prototype.initFABActions = function () {
        this.fabMenuActions = [];
        var actionPrevious = {
            icon: 'keyboard_backspace',
            text: 'Discard',
            action: 'actionBack',
            disabled: false,
            index: 1,
        };
        var actionSave = {
            icon: 'save',
            text: 'Save',
            action: 'actionSave',
            disabled: false,
            index: 0,
        };
        var actionAdd = {
            icon: 'add',
            text: 'New Costmatrix',
            action: 'actionAdd',
            disabled: false,
            index: 1,
        };
        var actionEdit = {
            icon: 'edit',
            text: 'Edit the Costmatrix',
            action: 'actionEdit',
            disabled: false,
            index: 0,
        };
        if (this.isEdit && !this.isCostMatrixDisplay) {
            this.fabMenuActions.push(actionPrevious);
            this.fabMenuActions.push(actionSave);
        }
        else {
            this.fabMenuActions.push(actionAdd);
            this.fabMenuActions.push(actionEdit);
        }
        this.isLoaded = true;
    };
    CostmatrixCreateComponent.prototype.onFabActionClicked = function (action) {
        switch (action) {
            case 'actionBack': {
                this.onBackButtonClicked();
                break;
            }
            case 'actionSave': {
                this.onSaveButtonClicked();
                break;
            }
            case 'actionAdd': {
                this.router.navigate(['/' + this.company + '/trades/costmatrix/create/']);
                break;
            }
            case 'actionEdit': {
                this.router.navigate(['/' + this.company + '/trades/costmatrix/edit/', this.costmatrixId]);
                break;
            }
        }
    };
    CostmatrixCreateComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'atlas-costmatrix-create',
            template: __webpack_require__(/*! ./costmatrix-create.component.html */ "./Client/app/trading/components/costmatrices/components/costmatrix-create/costmatrix-create.component.html"),
            styles: [__webpack_require__(/*! ./costmatrix-create.component.scss */ "./Client/app/trading/components/costmatrices/components/costmatrix-create/costmatrix-create.component.scss")],
            providers: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DatePipe"]],
        }),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"],
            _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_37__["UiService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_4__["ActivatedRoute"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_33__["SnackbarService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"],
            _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_31__["MasterdataService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_32__["TradingService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_28__["FormConfigurationProviderService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatDialog"],
            _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_30__["LockService"],
            _shared_services_title_service__WEBPACK_IMPORTED_MODULE_34__["TitleService"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_27__["AgGridService"],
            _angular_common__WEBPACK_IMPORTED_MODULE_0__["DatePipe"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_7__["AuthorizationService"],
            _shared_services_http_services_feature_flag_service__WEBPACK_IMPORTED_MODULE_29__["FeatureFlagService"]])
    ], CostmatrixCreateComponent);
    return CostmatrixCreateComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_12__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/costmatrices/components/costmatrix-list/costmatrix-list.component.html":
/*!**************************************************************************************************************!*\
  !*** ./Client/app/trading/components/costmatrices/components/costmatrix-list/costmatrix-list.component.html ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"main-container\"\r\n     fxLayout=\"column\"\r\n     fxLayoutAlign=\"start none\">\r\n    <mat-card>\r\n        <form [formGroup]=\"searchCostMatrixForm\">\r\n            <div fxLayout=\"row\"\r\n                 fxLayoutAlign=\"start none\"\r\n                 class=\"search\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           value=\"\"\r\n                           placeholder=\"Name\"\r\n                           (keydown.enter)=\"onSearchButtonClicked()\"\r\n                           formControlName=\"searchCostMatrixNameCtrl\" />\r\n                </mat-form-field>\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           value=\"\"\r\n                           placeholder=\"Description\"\r\n                           (keydown.enter)=\"onSearchButtonClicked()\"\r\n                           formControlName=\"searchCostMatrixDescriptionCtrl\" />\r\n                </mat-form-field>\r\n\r\n                <button mat-raised-button\r\n                        class=\"heroGradient\">\r\n                    <mat-icon aria-label=\"Search\"\r\n                              class=\"search-icon\"\r\n                              (click)=\"onSearchButtonClicked()\">search</mat-icon>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    </mat-card>\r\n\r\n    <mat-card>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"space-between center\">\r\n            <mat-card-title>Cost Matrices</mat-card-title>\r\n            <div fxLayout=\"row\"\r\n                 fxLayoutAlign=\"end center\">\r\n                <atlas-ag-grid-user-preferences *ngIf=\"costGridOptions && costGridOptions.columnDefs\"\r\n                                                [gridOptions]=\"costGridOptions\"\r\n                                                [company]=\"company\"\r\n                                                [gridId]=\"gridCode\"\r\n                                                [sharingEnabled]=\"false\"\r\n                                                [savingEnabled]=\"false\"\r\n                                                [hasColumnHandling]=\"false\"\r\n                                                #userPreferences>\r\n                </atlas-ag-grid-user-preferences>\r\n                <atlas-grid-enlargement *ngIf=\"costGridOptions && costGridOptions.columnDefs\"\r\n                                        [gridOptions]=\"costGridOptions\"\r\n                                        [userPreferencesParameters]=\"gridPreferencesParameters\"\r\n                                        (rowClicked)=\"onCostMatrixRowClicked($event)\"\r\n                                        #gridZoom>\r\n                </atlas-grid-enlargement>\r\n            </div>\r\n\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"center center\"\r\n             fxLayoutWrap\r\n             *ngIf=\"isLoading\"\r\n             class=\"loading\">\r\n            <mat-spinner color=\"accent\"></mat-spinner>\r\n        </div>\r\n        <mat-card-content>\r\n            <div ag-grid=\"costGridOptions\"\r\n                 class=\"ag-theme-material pointer-cursor\"\r\n                 style=\"width: 100%; height: 100%\">\r\n                <ag-grid-angular style=\" height: 100%;\"\r\n                                 class=\"ag-theme-material\"\r\n                                 [rowData]=\"costsGridRows\"\r\n                                 [columnDefs]=\"costsGridCols\"\r\n                                 [gridOptions]=\"costGridOptions\"\r\n                                 [enableColResize]=\"true\"\r\n                                 [pagination]=\"true\"\r\n                                 [paginationPageSize]=\"10\"\r\n                                 [enableSorting]=\"true\"\r\n                                 domLayout=\"autoHeight\"\r\n                                 (gridReady)=\"onGridReady($event)\"\r\n                                 (rowClicked)=\"onCostMatrixRowClicked($event)\"\r\n                                 [frameworkComponents]=\"gridComponents\"\r\n                                 enableFilter\r\n                                 [rowHeight]=\"atlasAgGridParam.rowHeight\"\r\n                                 [singleClickEdit]=\"true\"\r\n                                 [excelStyles]=\"excelStyles\">\r\n                </ag-grid-angular>\r\n            </div>\r\n        </mat-card-content>\r\n    </mat-card>\r\n    <atlas-lock-interval [resourcesInformation]=\"resourcesInformation\"> </atlas-lock-interval>\r\n</div>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/costmatrices/components/costmatrix-list/costmatrix-list.component.scss":
/*!**************************************************************************************************************!*\
  !*** ./Client/app/trading/components/costmatrices/components/costmatrix-list/costmatrix-list.component.scss ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".cost-matix-float-right {\n  float: right; }\n"

/***/ }),

/***/ "./Client/app/trading/components/costmatrices/components/costmatrix-list/costmatrix-list.component.ts":
/*!************************************************************************************************************!*\
  !*** ./Client/app/trading/components/costmatrices/components/costmatrix-list/costmatrix-list.component.ts ***!
  \************************************************************************************************************/
/*! exports provided: CostmatrixListComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CostmatrixListComponent", function() { return CostmatrixListComponent; });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _app_core_services_authorization_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../../app/core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _app_core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../../app/core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_ag_contextual_menu_ag_contextual_menu_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component */ "./Client/app/shared/components/ag-contextual-menu/ag-contextual-menu.component.ts");
/* harmony import */ var _shared_components_ag_grid_checkbox_ag_grid_checkbox_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component */ "./Client/app/shared/components/ag-grid-checkbox/ag-grid-checkbox.component.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_components_cell_editor_numeric_cell_editor_numeric_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component */ "./Client/app/shared/components/cell-editor-numeric/cell-editor-numeric.component.ts");
/* harmony import */ var _shared_components_cell_editor_select_cell_editor_select_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/components/cell-editor-select/cell-editor-select.component */ "./Client/app/shared/components/cell-editor-select/cell-editor-select.component.ts");
/* harmony import */ var _shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../shared/components/confirmation-dialog/confirmation-dialog.component */ "./Client/app/shared/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony import */ var _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../shared/entities/lock-functional-context.entity */ "./Client/app/shared/entities/lock-functional-context.entity.ts");
/* harmony import */ var _shared_entities_lock_resource_information_entity__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../../shared/entities/lock-resource-information.entity */ "./Client/app/shared/entities/lock-resource-information.entity.ts");
/* harmony import */ var _shared_enums_gaps_enum__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../../shared/enums/gaps.enum */ "./Client/app/shared/enums/gaps.enum.ts");
/* harmony import */ var _shared_pipes_format_date_pipe_pipe__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../../shared/pipes/format-date-pipe.pipe */ "./Client/app/shared/pipes/format-date-pipe.pipe.ts");
/* harmony import */ var _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../../../shared/services/ag-grid.service */ "./Client/app/shared/services/ag-grid.service.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_feature_flag_service__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../../../../shared/services/http-services/feature-flag.service */ "./Client/app/shared/services/http-services/feature-flag.service.ts");
/* harmony import */ var _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../../../../shared/services/http-services/lock.service */ "./Client/app/shared/services/http-services/lock.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



























var CostmatrixListComponent = /** @class */ (function (_super) {
    __extends(CostmatrixListComponent, _super);
    function CostmatrixListComponent(companyManager, route, router, formConfigurationProvider, tradingService, snackbarService, dialog, formBuilder, datePipe, authorizationService, formatDate, lockService, securityService, gridService, masterdataService, featureFlagService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.companyManager = companyManager;
        _this.route = route;
        _this.router = router;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.tradingService = tradingService;
        _this.snackbarService = snackbarService;
        _this.dialog = dialog;
        _this.formBuilder = formBuilder;
        _this.datePipe = datePipe;
        _this.authorizationService = authorizationService;
        _this.formatDate = formatDate;
        _this.lockService = lockService;
        _this.securityService = securityService;
        _this.gridService = gridService;
        _this.masterdataService = masterdataService;
        _this.featureFlagService = featureFlagService;
        _this.costsMenuActions = {
            deleteCostMatrix: 'delete',
            editCostMatrix: 'edit',
            imageCostMatrix: 'image',
        };
        _this.isCostMatrixEditPrivilege = false;
        _this.gridContext = {
            isContractApprovedOnce: false,
            deletePrivileges: true,
        };
        _this.gridComponents = {
            atlasSelect: _shared_components_cell_editor_select_cell_editor_select_component__WEBPACK_IMPORTED_MODULE_13__["CellEditorSelectComponent"],
            atlasNumeric: _shared_components_cell_editor_numeric_cell_editor_numeric_component__WEBPACK_IMPORTED_MODULE_12__["CellEditorNumericComponent"],
            atlasCheckbox: _shared_components_ag_grid_checkbox_ag_grid_checkbox_component__WEBPACK_IMPORTED_MODULE_10__["AgGridCheckboxComponent"],
        };
        _this.destroy$ = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
        _this.resourcesInformation = new Array();
        _this.gridCode = 'costMatrixList';
        _this.searchCostMatrixForm = _this.formBuilder.group({
            searchCostMatrixNameCtrl: [''],
            searchCostMatrixDescriptionCtrl: [''],
        });
        _this.excelStyles = [
            {
                id: 'dateFormat',
                dataType: 'dateTime',
                numberFormat: {
                    format: 'dd/mm/yyyy',
                },
            },
        ];
        _this.userActiveDirectoryName = _this.authorizationService.getCurrentUser().samAccountName;
        return _this;
    }
    CostmatrixListComponent_1 = CostmatrixListComponent;
    CostmatrixListComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.masterdata = this.route.snapshot.data.masterdata;
        this.tagFields = this.getTagFields();
        this.tagFields.subscribe(function (val) {
            _this.tagsList = val;
        });
        this.atlasAgGridParam = this.gridService.getAgGridParam();
        this.company = this.route.snapshot.paramMap.get('company');
        this.securityService.isSecurityReady().subscribe(function () {
            if (_this.authorizationService.isPrivilegeAllowed(_this.company, 'Trades')
                && _this.authorizationService.isPrivilegeAllowed(_this.company, 'CostMatrices')) {
                _this.isCostMatrixEditPrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'EditCostMatrices');
            }
        });
        this.costmatrixId = Number(this.route.snapshot.paramMap.get('costmatrixId'));
        this.isLoading = true;
        this.init();
        this.featureFlagService.getFlagInfo(_shared_enums_gaps_enum__WEBPACK_IMPORTED_MODULE_17__["Gaps"].gap003).subscribe(function (flagAuth) {
            _this.flagAuth = flagAuth;
            _this.initializeGridColumns();
            _this.getCostMatrixList();
        });
    };
    CostmatrixListComponent.prototype.initializeGridColumns = function () {
        var _this = this;
        if (this.flagAuth && this.flagAuth.active) {
            this.costsGridCols = [
                {
                    colId: 'name',
                    headerName: 'Name',
                    field: 'name',
                },
                {
                    colId: 'description',
                    headerName: 'Description',
                    field: 'description',
                },
                {
                    colId: 'tags',
                    headerName: 'Parameters',
                    cellStyle: { overflow: 'hidden' },
                    field: 'tags',
                    valueGetter: function (params) {
                        if (params.data.tags) {
                            return _this.paramsToChip(params.data.tags).join(' ');
                        }
                        return '';
                    },
                },
                {
                    colId: 'setupby',
                    headerName: 'Set up by',
                    field: 'createdBy',
                },
                {
                    colId: 'setupDate',
                    headerName: 'Set up date',
                    field: 'createdDateTime',
                    cellClass: 'dateFormat',
                    valueGetter: function (params) {
                        var dateFormat = _this.formatDate;
                        var val = dateFormat.transformdate(params.data.createdDateTime);
                        if (val && val.indexOf('/') < 0) {
                            return val;
                        }
                        var split = val.split('/');
                        return split[2] + '-' + split[1] + '-' + split[0];
                    },
                },
                {
                    colId: 'menu',
                    headerName: '',
                    cellRendererFramework: _shared_components_ag_contextual_menu_ag_contextual_menu_component__WEBPACK_IMPORTED_MODULE_9__["AgContextualMenuComponent"],
                    cellRendererParams: {
                        context: {
                            componentParent: this,
                            actionContext: this.gridContext,
                        },
                        menuActions: this.costmatricesGridContextualMenuActions,
                        showIcon: this.isCostMatrixEditPrivilege,
                    },
                    cellClass: 'ag-contextual-menu',
                    width: 80,
                    minWidth: 80,
                    maxWidth: 80,
                },
            ];
        }
        else {
            this.costsGridCols = [
                {
                    colId: 'name',
                    headerName: 'Name',
                    field: 'name',
                },
                {
                    colId: 'description',
                    headerName: 'Description',
                    field: 'description',
                },
                {
                    colId: 'setupBy',
                    headerName: 'Set up by',
                    field: 'createdBy',
                },
                {
                    colId: 'setupDate',
                    headerName: 'Set up date',
                    field: 'createdDateTime',
                    cellClass: 'dateFormat',
                    valueGetter: function (params) {
                        var dateFormat = _this.formatDate;
                        var val = dateFormat.transformdate(params.data.createdDateTime);
                        if (val && val.indexOf('/') < 0) {
                            return val;
                        }
                        var split = val.split('/');
                        return split[2] + '-' + split[1] + '-' + split[0];
                    },
                },
                {
                    colId: 'menu',
                    headerName: '',
                    cellRendererFramework: _shared_components_ag_contextual_menu_ag_contextual_menu_component__WEBPACK_IMPORTED_MODULE_9__["AgContextualMenuComponent"],
                    cellRendererParams: {
                        context: {
                            componentParent: this,
                            actionContext: this.gridContext,
                        },
                        menuActions: this.costmatricesGridContextualMenuActions,
                        showIcon: this.isCostMatrixEditPrivilege,
                    },
                    cellClass: 'ag-contextual-menu',
                    width: 80,
                    minWidth: 80,
                    maxWidth: 80,
                },
            ];
        }
        if (this.costGridOptions) {
            this.costGridOptions.columnDefs = this.costsGridCols;
        }
    };
    CostmatrixListComponent.prototype.onSearchButtonClicked = function () {
        var _this = this;
        this.searchCostMatrixName = this.searchCostMatrixForm.get('searchCostMatrixNameCtrl').value.toUpperCase();
        this.searchCostMatrixDescription = this.searchCostMatrixForm.get('searchCostMatrixDescriptionCtrl').value.toUpperCase();
        if (!this.searchCostMatrixName && !this.searchCostMatrixDescription) {
            return;
        }
        if (this.costmatrix && this.costmatrix.length > 0) {
            var rows = this.costmatrix.filter(function (item) {
                return item.name
                    .toString()
                    .toUpperCase()
                    .includes(_this.searchCostMatrixName) &&
                    item.description
                        .toString()
                        .toUpperCase()
                        .includes(_this.searchCostMatrixDescription);
            });
            this.costsGridRows = rows;
        }
    };
    CostmatrixListComponent.prototype.onGridReady = function (params) {
        this.costGridOptions = params;
        if (this.costsGridCols) {
            this.costGridOptions.columnDefs = this.costsGridCols;
        }
        this.gridApi = this.costGridOptions.api;
        this.gridColumnApi = this.costGridOptions.columnApi;
    };
    CostmatrixListComponent.prototype.setColumnsToFitGrid = function () {
        this.gridApi.sizeColumnsToFit();
    };
    CostmatrixListComponent.prototype.getCostMatrixList = function () {
        var _this = this;
        this.tradingService.getCostmatricesByCompanyId(this.company).subscribe(function (data) {
            _this.costmatrix = data.value;
            if (_this.flagAuth && _this.flagAuth.active) {
                CostmatrixListComponent_1.i = _this.costmatrix.length;
                _this.costmatrix.forEach(function (element) {
                    _this.tradingService.GetCostMatricesListWithTags(element.costMatrixId).subscribe(function (valsTags) {
                        if (valsTags && valsTags.length > 0) {
                            element.tags = valsTags[0].tags;
                            CostmatrixListComponent_1.i--;
                            if (CostmatrixListComponent_1.i === 0) {
                                _this.costsGridRows = _this.costmatrix;
                                _this.isLoading = false;
                            }
                        }
                    }, function (error) {
                        CostmatrixListComponent_1.i--;
                    });
                });
            }
            else {
                _this.costsGridRows = _this.costmatrix;
                _this.isLoading = false;
            }
        });
    };
    CostmatrixListComponent.prototype.paramsToChip = function (val) {
        var _this = this;
        var chip;
        var chips = new Array();
        var typenameActual;
        if (this.tagsList && val) {
            val.forEach(function (param) {
                if (param.typeName !== typenameActual && param.tagValueId !== null) {
                    var value = _this.tagsList.find(function (a) { return param.typeName === a.typeName; });
                    if (value) {
                        var label = value.label;
                        chip = label + '=';
                        chip += _this.searchValue(param.typeName, param.tagValueId);
                        typenameActual = param.typeName;
                    }
                }
                else {
                    chip += ',' + param.tagValueId;
                }
                chips.push(chip);
            });
        }
        return chips;
    };
    CostmatrixListComponent.prototype.searchValue = function (typename, tagValueId) {
        var paramName = '';
        var paramid = '';
        var list;
        if (typename !== '' && typename !== undefined) {
            switch (typename) {
                case 'SectionDto.ContractTermCode':
                    paramName = 'displayName';
                    paramid = 'contractTermId';
                    list = this.masterdata.contractTerms;
                    break;
                case 'TradeDto.Type':
                    paramName = 'enumEntityValue';
                    paramid = 'enumEntityId';
                    list = this.masterdata.contractTypes;
                    break;
                case 'SectionDto.PaymentTermCode':
                    paramName = 'paymentTermCode';
                    paramid = 'paymentTermsId';
                    list = this.masterdata.paymentTerms;
                    break;
                case 'SectionDto.CounterpartyReference':
                    paramName = 'counterpartyCode';
                    paramid = 'counterpartyID';
                    list = this.masterdata.counterparties;
                    break;
                case 'SectionDto.PortDestinationCode':
                case 'SectionDto.PortOriginCode':
                    paramName = 'portCode';
                    paramid = 'portId';
                    list = this.masterdata.ports;
                    break;
            }
            if (paramName !== '' && paramid !== '') {
                tagValueId = this.searchTagByid(tagValueId, list, paramName, paramid);
            }
        }
        return tagValueId;
    };
    CostmatrixListComponent.prototype.searchTagByid = function (tagValueId, list, paramName, paramId) {
        var tagsIds = tagValueId.split(',');
        var newTagValueId = new Array();
        tagsIds.forEach(function (id) {
            newTagValueId.push(list.find(function (val) { return val[paramId] === Number(id); })[paramName]);
        });
        return newTagValueId.join();
    };
    /**
     * Recover the tagfields of the parameters table
     */
    CostmatrixListComponent.prototype.getTagFields = function () {
        return this.tradingService.getTagFields();
    };
    CostmatrixListComponent.prototype.init = function () {
        this.costmatricesGridContextualMenuActions = [
            {
                icon: 'edit',
                text: 'Edit',
                action: this.costsMenuActions.editCostMatrix,
            },
            {
                icon: 'delete',
                text: 'Delete',
                action: this.costsMenuActions.deleteCostMatrix,
            },
            {
                icon: 'add',
                text: 'Image',
                action: this.costsMenuActions.imageCostMatrix,
            },
        ];
        this.gridPreferencesParameters = {
            company: this.company,
            gridId: this.gridCode,
            gridOptions: null,
            savingEnabled: false,
            sharingEnabled: false,
            showExport: true,
            hasColumnHandling: false,
        };
    };
    CostmatrixListComponent.prototype.handleAction = function (action, costMatrix) {
        var _this = this;
        switch (action) {
            case this.costsMenuActions.editCostMatrix:
                var costMatrixId_1 = costMatrix.costMatrixId;
                this.lockService
                    .isLockedCostMatrix(costMatrix.costMatrixId)
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["takeUntil"])(this.destroy$))
                    .subscribe(function (lock) {
                    if (lock.isLocked) {
                        _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_14__["ConfirmationDialogComponent"], {
                            data: {
                                title: 'Lock',
                                text: lock.message,
                                okButton: 'Got it',
                            },
                        });
                    }
                    else {
                        _this.router.navigate(['/' + _this.company + '/trades/costmatrix/edit/', costMatrixId_1]);
                    }
                });
                break;
            case this.costsMenuActions.deleteCostMatrix:
                var costMatrixName_1 = costMatrix.name;
                this.lockService
                    .isLockedCostMatrix(costMatrix.costMatrixId)
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["takeUntil"])(this.destroy$))
                    .subscribe(function (lock) {
                    if (lock.isLocked) {
                        _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_14__["ConfirmationDialogComponent"], {
                            data: {
                                title: 'Lock',
                                text: lock.message,
                                okButton: 'Got it',
                            },
                        });
                    }
                    else {
                        _this.startLockRefresh(costMatrix.costMatrixId, costMatrix.name);
                        _this.lockService
                            .lockCostMatrix(costMatrix.costMatrixId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_15__["LockFunctionalContext"].CostMatrixDeletion)
                            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["takeUntil"])(_this.destroy$))
                            .subscribe(function (lockState) {
                            var confirmDialog = _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_14__["ConfirmationDialogComponent"], {
                                data: {
                                    title: 'Delete ' + costMatrixName_1 + ' ?',
                                    text: 'Deleting a cost matrix is permanent. Do you wish to proceed?',
                                    okButton: 'DELETE ANYWAY',
                                    cancelButton: 'DISCARD',
                                },
                            });
                            var confirmationSubscription = confirmDialog.afterClosed().subscribe(function (answer) {
                                _this.stopLockRefresh();
                                if (answer) {
                                    if (costMatrix.costMatrixId) {
                                        var deleteConfirmationSubscription = _this.tradingService
                                            .deleteCostMatrix(costMatrix.costMatrixId)
                                            .subscribe(function () {
                                            _this.snackbarService.informationSnackBar('CostMatrix Deleted');
                                            _this.getCostMatrixList();
                                        });
                                        _this.subscriptions.push(deleteConfirmationSubscription);
                                    }
                                    else {
                                        _this.gridApi.updateRowData({ remove: [costMatrix] });
                                    }
                                }
                                _this.lockService
                                    .unlockCostMatrix(costMatrix.costMatrixId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_15__["LockFunctionalContext"].CostMatrixDeletion)
                                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["takeUntil"])(_this.destroy$))
                                    .subscribe();
                            });
                            _this.subscriptions.push(confirmationSubscription);
                        });
                    }
                });
                break;
            case this.costsMenuActions.imageCostMatrix:
                var originalCostMatrixId = costMatrix.costMatrixId;
                this.router.navigate(['/' + this.company + '/trades/costmatrix/image/', originalCostMatrixId]);
                break;
            default:
                break;
        }
    };
    CostmatrixListComponent.prototype.onCostMatrixRowClicked = function (event) {
        var costMatrixId = event.data.costMatrixId;
        this.router.navigate([
            '/' + this.companyManager.getCurrentCompanyId() + '/trades/costmatrix/display/' + encodeURIComponent(costMatrixId),
        ]);
    };
    CostmatrixListComponent.prototype.onExportButtonClickedAsExcel = function () {
        var screenName = 'Cost Matrix List';
        var now = new Date();
        var todayDate = this.datePipe
            .transform(now, 'yyyyMMdd_hhmm')
            .toString()
            .toUpperCase();
        var params = {
            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.xlsx',
        };
        this.gridApi.exportDataAsExcel(params);
    };
    CostmatrixListComponent.prototype.onExportButtonClickedAsCSV = function () {
        var screenName = 'Cost Matrix List';
        var now = new Date();
        var todayDate = this.datePipe
            .transform(now, 'yyyyMMdd_hhmm')
            .toString()
            .toUpperCase();
        var params = {
            fileName: todayDate + '_' + this.company + '_' + screenName + '_' + this.userActiveDirectoryName + '.csv',
        };
        this.gridApi.exportDataAsCsv(params);
    };
    CostmatrixListComponent.prototype.startLockRefresh = function (costMatrixId, costMatrixName) {
        this.resourcesInformation = new Array();
        var resourceInformation = new _shared_entities_lock_resource_information_entity__WEBPACK_IMPORTED_MODULE_16__["LockResourceInformation"]();
        resourceInformation.resourceType = 'Cost Matrix';
        resourceInformation.resourceId = costMatrixId;
        resourceInformation.resourceCode = costMatrixName;
        resourceInformation.needRefresh = true;
        this.resourcesInformation.push(resourceInformation);
    };
    CostmatrixListComponent.prototype.stopLockRefresh = function () {
        this.resourcesInformation = new Array();
    };
    CostmatrixListComponent.prototype.ngOnDestroy = function () {
        var _this = this;
        this.stopLockRefresh();
        this.lockService
            .cleanSessionLocks()
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["takeUntil"])(this.destroy$))
            .subscribe(function () {
            _this.destroy$.next();
            _this.destroy$.complete();
        });
    };
    var CostmatrixListComponent_1;
    CostmatrixListComponent = CostmatrixListComponent_1 = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'atlas-costmatrix-list',
            template: __webpack_require__(/*! ./costmatrix-list.component.html */ "./Client/app/trading/components/costmatrices/components/costmatrix-list/costmatrix-list.component.html"),
            styles: [__webpack_require__(/*! ./costmatrix-list.component.scss */ "./Client/app/trading/components/costmatrices/components/costmatrix-list/costmatrix-list.component.scss")],
            providers: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DatePipe"]],
        }),
        __metadata("design:paramtypes", [_app_core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_8__["CompanyManagerService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_4__["ActivatedRoute"],
            _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_20__["FormConfigurationProviderService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_24__["TradingService"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_26__["SnackbarService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatDialog"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"],
            _angular_common__WEBPACK_IMPORTED_MODULE_0__["DatePipe"],
            _app_core_services_authorization_service__WEBPACK_IMPORTED_MODULE_7__["AuthorizationService"],
            _shared_pipes_format_date_pipe_pipe__WEBPACK_IMPORTED_MODULE_18__["FormatDatePipe"],
            _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_22__["LockService"],
            _shared_services_security_service__WEBPACK_IMPORTED_MODULE_25__["SecurityService"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_19__["AgGridService"],
            _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_23__["MasterdataService"],
            _shared_services_http_services_feature_flag_service__WEBPACK_IMPORTED_MODULE_21__["FeatureFlagService"]])
    ], CostmatrixListComponent);
    return CostmatrixListComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_11__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/costmatrices/costmatrices.component.html":
/*!********************************************************************************!*\
  !*** ./Client/app/trading/components/costmatrices/costmatrices.component.html ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<atlas-floating-action-button [fabTitle]=\"fabTitle\"\r\n                              [fabType]=\"fabType\"\r\n                              [fabActions]=\"fabMenuActions\"\r\n                              [isParentLoaded]=\"isLoaded\"\r\n                              (fabActionClicked)=\"onFabActionClicked($event)\">\r\n</atlas-floating-action-button>\r\n<atlas-costmatrix-list #costmatrixListComponent></atlas-costmatrix-list>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/costmatrices/costmatrices.component.scss":
/*!********************************************************************************!*\
  !*** ./Client/app/trading/components/costmatrices/costmatrices.component.scss ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/costmatrices/costmatrices.component.ts":
/*!******************************************************************************!*\
  !*** ./Client/app/trading/components/costmatrices/costmatrices.component.ts ***!
  \******************************************************************************/
/*! exports provided: CostmatricesComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CostmatricesComponent", function() { return CostmatricesComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_components_floating_action_button_floating_action_button_type_enum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../shared/components/floating-action-button/floating-action-button-type.enum */ "./Client/app/shared/components/floating-action-button/floating-action-button-type.enum.ts");
/* harmony import */ var _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../shared/enums/permission-level.enum */ "./Client/app/shared/enums/permission-level.enum.ts");
/* harmony import */ var _components_costmatrix_list_costmatrix_list_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/costmatrix-list/costmatrix-list.component */ "./Client/app/trading/components/costmatrices/components/costmatrix-list/costmatrix-list.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






var CostmatricesComponent = /** @class */ (function () {
    function CostmatricesComponent(route, router, authorizationService) {
        this.route = route;
        this.router = router;
        this.authorizationService = authorizationService;
        // FAB
        this.createCostMatrixActionPrivilege = {
            profileId: null,
            privilegeName: 'CostMatrices',
            permission: _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_4__["PermissionLevels"].ReadWrite,
            privilegeParentLevelOne: 'Trades',
            privilegeParentLevelTwo: null,
        };
        this.fabMenuActions = [];
        this.fabType = _shared_components_floating_action_button_floating_action_button_type_enum__WEBPACK_IMPORTED_MODULE_3__["FABType"].ExtendedSingleButton;
        this.fabTitle = 'COST MATRICES ACTIONS';
        this.isLoaded = false;
    }
    CostmatricesComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
    };
    CostmatricesComponent.prototype.ngAfterViewInit = function () {
        this.initFABActions();
    };
    CostmatricesComponent.prototype.onCreateCostMatrixButtonClicked = function () {
        this.router.navigate([this.company + '/trades/costmatrix/create']);
    };
    CostmatricesComponent.prototype.onTabSelected = function () {
        this.costmatrixListComponent.setColumnsToFitGrid();
    };
    // For FAB
    CostmatricesComponent.prototype.initFABActions = function () {
        var actionCreateCostMatrix = {
            icon: 'add',
            text: 'Create Cost Matrix',
            action: 'createCostMatrix',
            disabled: false,
            index: 0,
        };
        this.fabMenuActions = [];
        var createCostMatrixPrivilegeLevel = this.authorizationService.getPermissionLevel(this.company, this.createCostMatrixActionPrivilege.privilegeName, this.createCostMatrixActionPrivilege.privilegeParentLevelOne, this.createCostMatrixActionPrivilege.privilegeParentLevelTwo);
        var hasCreateTradePrivilege = (createCostMatrixPrivilegeLevel >= this.createCostMatrixActionPrivilege.permission);
        if (hasCreateTradePrivilege) {
            this.fabMenuActions.push(actionCreateCostMatrix);
        }
        this.isLoaded = true;
    };
    CostmatricesComponent.prototype.onFabActionClicked = function (action) {
        switch (action) {
            case 'createCostMatrix': {
                this.onCreateCostMatrixButtonClicked();
                break;
            }
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('costmatrixListComponent'),
        __metadata("design:type", _components_costmatrix_list_costmatrix_list_component__WEBPACK_IMPORTED_MODULE_5__["CostmatrixListComponent"])
    ], CostmatricesComponent.prototype, "costmatrixListComponent", void 0);
    CostmatricesComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-costmatrices',
            template: __webpack_require__(/*! ./costmatrices.component.html */ "./Client/app/trading/components/costmatrices/costmatrices.component.html"),
            styles: [__webpack_require__(/*! ./costmatrices.component.scss */ "./Client/app/trading/components/costmatrices/costmatrices.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"],
            _angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_2__["AuthorizationService"]])
    ], CostmatricesComponent);
    return CostmatricesComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/costmatrices/costmatrix-menu-bar/costmatrix-menu-bar.component.html":
/*!***********************************************************************************************************!*\
  !*** ./Client/app/trading/components/costmatrices/costmatrix-menu-bar/costmatrix-menu-bar.component.html ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-toolbar class=\"menu-bar\">\r\n    <div class=\"toolbar-div\">\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"start center\"\r\n             fxFlex=\"80\">\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"end center\"\r\n             fxFlex=\"20\"\r\n             *ngIf=\"hideAndShowMenuBarButtons\"\r\n             fxLayoutGap=\"16px\">\r\n            <a matTooltip=\"Back to Previou Page\"\r\n               (click)=\"onPrevPageNavigation()\"\r\n               class=\"menu-bar-action-icon\">\r\n                <mat-icon class=\"white-icon\">keyboard_backspace</mat-icon>\r\n            </a>\r\n            <a matTooltip=\"Save Costmatrix\"\r\n               (click)=\"onSaveButtonClicked()\"\r\n               class=\"menu-bar-action-icon\">\r\n                <div class=\"white-icon outline-save-icon\"></div>\r\n            </a>\r\n        </div>\r\n\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"end center\"\r\n             fxFlex=\"20\"\r\n             *ngIf=\"!hideAndShowMenuBarButtons\"\r\n             fxLayoutGap=\"16px\">\r\n            <a matTooltip=\"New Costmatrix\"\r\n               (click)=\"onNewCostmatrixButtonClicked()\"\r\n               class=\"menu-bar-action-icon\">\r\n                <mat-icon class=\"white-icon\">add</mat-icon>\r\n            </a>\r\n            <a matTooltip=\"Edit the Costmatrix\"\r\n               (click)=\"onCreateButtonClicked()\"\r\n               class=\"menu-bar-action-icon\">\r\n                <mat-icon class=\"white-icon\">create</mat-icon>\r\n            </a>\r\n        </div>\r\n\r\n    </div>\r\n</mat-toolbar>"

/***/ }),

/***/ "./Client/app/trading/components/costmatrices/costmatrix-menu-bar/costmatrix-menu-bar.component.scss":
/*!***********************************************************************************************************!*\
  !*** ./Client/app/trading/components/costmatrices/costmatrix-menu-bar/costmatrix-menu-bar.component.scss ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/costmatrices/costmatrix-menu-bar/costmatrix-menu-bar.component.ts":
/*!*********************************************************************************************************!*\
  !*** ./Client/app/trading/components/costmatrices/costmatrix-menu-bar/costmatrix-menu-bar.component.ts ***!
  \*********************************************************************************************************/
/*! exports provided: CostmatrixMenuBarComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CostmatrixMenuBarComponent", function() { return CostmatrixMenuBarComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var CostmatrixMenuBarComponent = /** @class */ (function () {
    function CostmatrixMenuBarComponent(route, router) {
        this.route = route;
        this.router = router;
        this.hideAndShowMenuBarButtons = undefined;
        this.costmatrixSaveAction = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.costmatrixBackAction = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    CostmatrixMenuBarComponent.prototype.ngOnInit = function () {
        this.costmatrixId = this.route.snapshot.params['costmatrixId'];
        this.company = this.route.snapshot.params['company'];
    };
    CostmatrixMenuBarComponent.prototype.onSaveButtonClicked = function () {
        this.costmatrixSaveAction.emit();
    };
    CostmatrixMenuBarComponent.prototype.onPrevPageNavigation = function () {
        this.costmatrixBackAction.emit();
    };
    CostmatrixMenuBarComponent.prototype.onCreateButtonClicked = function () {
        this.router.navigate(['/' + this.company + '/trades/costmatrix/edit/', this.costmatrixId]);
    };
    CostmatrixMenuBarComponent.prototype.onNewCostmatrixButtonClicked = function () {
        this.router.navigate(['/' + this.company + '/trades/costmatrix/create/']);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Boolean)
    ], CostmatrixMenuBarComponent.prototype, "hideAndShowMenuBarButtons", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CostmatrixMenuBarComponent.prototype, "costmatrixSaveAction", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], CostmatrixMenuBarComponent.prototype, "costmatrixBackAction", void 0);
    CostmatrixMenuBarComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-costmatrix-menu-bar',
            template: __webpack_require__(/*! ./costmatrix-menu-bar.component.html */ "./Client/app/trading/components/costmatrices/costmatrix-menu-bar/costmatrix-menu-bar.component.html"),
            styles: [__webpack_require__(/*! ./costmatrix-menu-bar.component.scss */ "./Client/app/trading/components/costmatrices/costmatrix-menu-bar/costmatrix-menu-bar.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"],
            _angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"]])
    ], CostmatrixMenuBarComponent);
    return CostmatrixMenuBarComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/fx-deals/capture/fx-deals-capture.component.html":
/*!****************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/capture/fx-deals-capture.component.html ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<form [formGroup]=\"captureFxdealFormGroup\">\r\n    <div>\r\n        <atlas-fxdeal-header-form #fxDealHeaderFormComponent></atlas-fxdeal-header-form>\r\n    </div>\r\n    <mat-divider></mat-divider>\r\n    <div class=\"fx-deal-main\"\r\n         fxLayout=\"row\"\r\n         fxLayout.md=\"column\"\r\n         fxLayoutAlign=\"space-around start\">\r\n        <div fxLayout=\"column\"\r\n             fxLayoutAlign=\"start left\"\r\n             fxFlex=\"48\">\r\n            <atlas-deal-terms-form- #dealTermsFormComponent\r\n                                    (dealTypeChange)=\"onDealTypeChanged($event)\"\r\n                                    (maturityDateChange)=\"onMaturityDateChanged($event)\"></atlas-deal-terms-form->\r\n        </div>\r\n        <div fxLayout=\"\r\n                                    column\"\r\n             fxLayoutAlign=\"start right\"\r\n             fxFlex=\"49\">\r\n            <atlas-bank-form #bankFormComponent> </atlas-bank-form>\r\n        </div>\r\n    </div>\r\n    <div class=\"fx-deal-main\"\r\n         fxLayout=\"row\"\r\n         fxLayout.md=\"column\"\r\n         fxLayoutAlign=\"space-around start\">\r\n        <div fxLayout=\"column\"\r\n             fxLayoutAlign=\"start left\"\r\n             fxFlex=\"48\">\r\n            <atlas-deal-form #dealFormComponent\r\n                             (defaultRoeTypeValuePassed)=\"onDefaultSpotRoeTypeValue($event)\"\r\n                             (fxRateValuePassed)=\"onFxRateValue($event)\"\r\n                             (spotRoeWarningValuePassed)=\"onSpotRoeWarningValue($event)\"></atlas-deal-form>\r\n        </div>\r\n        <div fxLayout=\"column\"\r\n             fxLayoutAlign=\"start right\"\r\n             fxFlex=\"49\">\r\n            <atlas-rate-entry #rateEntryComponent\r\n                              (valueSelected)=\"onTraderROECalculation($event)\"\r\n                              (roeTypeSelected)=\"onSettledAmountCalculation($event)\"\r\n                              (settledAmountValuePassed)=\"onSettledAmountEvaluation($event)\"></atlas-rate-entry>\r\n            <atlas-settlement-documents #settlementDocumentsComponent></atlas-settlement-documents>\r\n        </div>\r\n    </div>\r\n    <div class=\"fx-deal-main\"\r\n         fxLayout=\"row\"\r\n         fxLayout.md=\"column\"\r\n         fxLayoutAlign=\"start left\">\r\n        <div>\r\n            <atlas-internal-memo-form #internalMemoFormComponent></atlas-internal-memo-form>\r\n        </div>\r\n        <div class=\"button-icon-action\"\r\n             fxLayout=\"column\">\r\n            <a title=\"Cancel\"\r\n            *ngIf=\"!isViewMode\"\r\n               (click)=\"onDiscardButtonClicked()\"\r\n               class=\"menu-bar-action-icon\">\r\n                <mat-icon class=\"white-icon\">backspace</mat-icon>\r\n            </a>\r\n\r\n            <a title=\"Create\"\r\n            *ngIf=\"isEditShow && isEditPrivilege\"\r\n               (click)=\"onCreateButtonClicked()\"\r\n               class=\"menu-bar-action-icon\">\r\n                <mat-icon class=\"white-icon\">add</mat-icon>\r\n            </a>\r\n\r\n            <a title=\"Edit\"\r\n            *ngIf=\"isViewMode && isEditShow && isEditPrivilege\"\r\n               (click)=\"onEditButtonClicked()\"\r\n               [ngClass]=\"isSettled == true ? 'menu-bar-action-icon-disabled': 'menu-bar-action-icon'\"\r\n               [matTooltip]=\"isSettled == true ? 'Edition of a settled FX deal is not possible': null \"\r\n               class=\"menu-bar-action-icon\">\r\n                <mat-icon class=\"white-icon\">create</mat-icon>\r\n            </a>\r\n\r\n\r\n            <a title=\"Save\"\r\n               *ngIf=\"!isViewMode\"\r\n               (click)=\"onSaveButtonClicked()\"\r\n               class=\"menu-bar-action-icon\">\r\n                <mat-icon class=\"white-icon\">save</mat-icon>\r\n            </a>\r\n\r\n\r\n            <a title=\"Delete\"\r\n            *ngIf=\"isViewMode && isDeletePrivilege\"\r\n               (click)=\"onDeleteButtonClicked()\"\r\n               [ngClass]=\"isDeleteShow == true ? 'menu-bar-action-icon-disabled': 'menu-bar-action-icon'\"\r\n               class=\"menu-bar-action-icon\">\r\n                <mat-icon class=\"white-icon\">delete</mat-icon>\r\n            </a>\r\n\r\n        </div>\r\n    </div>\r\n</form>"

/***/ }),

/***/ "./Client/app/trading/components/fx-deals/capture/fx-deals-capture.component.scss":
/*!****************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/capture/fx-deals-capture.component.scss ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".menu-bar-action-icon {\n  cursor: pointer;\n  background-color: #81cf5c;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  text-align: center;\n  margin-bottom: 8px; }\n\n.menu-bar-action-icon-disabled {\n  cursor: pointer;\n  background-color: rgba(0, 0, 0, 0.38);\n  cursor: not-allowed;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  text-align: center;\n  margin-bottom: 8px; }\n\n.white-icon {\n  color: white;\n  height: 24px;\n  width: 24px;\n  padding: 7px; }\n\n.fx-deal-main {\n  margin-top: 20px;\n  margin-right: 20px;\n  margin-left: 20px; }\n\n.button-icon-action {\n  padding: 8px; }\n"

/***/ }),

/***/ "./Client/app/trading/components/fx-deals/capture/fx-deals-capture.component.ts":
/*!**************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/capture/fx-deals-capture.component.ts ***!
  \**************************************************************************************/
/*! exports provided: FxDealsCaptureComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FxDealsCaptureComponent", function() { return FxDealsCaptureComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../shared/components/confirmation-dialog/confirmation-dialog.component */ "./Client/app/shared/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony import */ var _shared_entities_fxdeal_detail_entity__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../shared/entities/fxdeal-detail.entity */ "./Client/app/shared/entities/fxdeal-detail.entity.ts");
/* harmony import */ var _shared_enums_fx_deals_status_enum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../shared/enums/fx-deals-status.enum */ "./Client/app/shared/enums/fx-deals-status.enum.ts");
/* harmony import */ var _shared_enums_posting_status_enum__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../shared/enums/posting-status.enum */ "./Client/app/shared/enums/posting-status.enum.ts");
/* harmony import */ var _shared_enums_spot_roe_type_enum__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../shared/enums/spot-roe-type.enum */ "./Client/app/shared/enums/spot-roe-type.enum.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _form_components_bank_form_component_bank_form_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../form-components/bank-form-component/bank-form.component */ "./Client/app/trading/components/fx-deals/form-components/bank-form-component/bank-form.component.ts");
/* harmony import */ var _form_components_deal_form_comonent_deal_form_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../form-components/deal-form-comonent/deal-form.component */ "./Client/app/trading/components/fx-deals/form-components/deal-form-comonent/deal-form.component.ts");
/* harmony import */ var _form_components_deal_terms_component_deal_terms_form_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../form-components/deal-terms-component/deal-terms-form.component */ "./Client/app/trading/components/fx-deals/form-components/deal-terms-component/deal-terms-form.component.ts");
/* harmony import */ var _form_components_header_form_component_fxdeal_header_form_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../form-components/header-form-component/fxdeal-header-form.component */ "./Client/app/trading/components/fx-deals/form-components/header-form-component/fxdeal-header-form.component.ts");
/* harmony import */ var _form_components_internal_memo_form_component_internal_memo_form_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../form-components/internal-memo-form-component/internal-memo-form.component */ "./Client/app/trading/components/fx-deals/form-components/internal-memo-form-component/internal-memo-form.component.ts");
/* harmony import */ var _form_components_rate_entry_form_component_rate_entry_form_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../form-components/rate-entry-form-component/rate-entry-form.component */ "./Client/app/trading/components/fx-deals/form-components/rate-entry-form-component/rate-entry-form.component.ts");
/* harmony import */ var _form_components_settlement_documents_component_settlement_documents_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../form-components/settlement-documents-component/settlement-documents.component */ "./Client/app/trading/components/fx-deals/form-components/settlement-documents-component/settlement-documents.component.ts");
/* harmony import */ var _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../../../shared/services/http-services/lock.service */ "./Client/app/shared/services/http-services/lock.service.ts");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../../../shared/entities/lock-functional-context.entity */ "./Client/app/shared/entities/lock-functional-context.entity.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

























var FxDealsCaptureComponent = /** @class */ (function () {
    function FxDealsCaptureComponent(route, tradingService, utilService, snackbarService, formBuilder, authorizationService, companyManager, lockService, router, dialog) {
        this.route = route;
        this.tradingService = tradingService;
        this.utilService = utilService;
        this.snackbarService = snackbarService;
        this.formBuilder = formBuilder;
        this.authorizationService = authorizationService;
        this.companyManager = companyManager;
        this.lockService = lockService;
        this.router = router;
        this.dialog = dialog;
        this.formComponents = [];
        this.onValidationState = false;
        this.subscriptions = [];
        this.isViewMode = false;
        this.isEdit = false;
        this.isDeleteShow = false;
        this.isEditShow = false;
        this.isEditPrivilege = false;
        this.isDeletePrivilege = false;
        this.isNdf = false;
        this.mappingFields = new Array();
        this.isSettled = false;
        this.destroy$ = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
    }
    ;
    FxDealsCaptureComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
        this.masterData = this.route.snapshot.data.masterdata;
        this.filteredFxTradeTypes = this.masterData.fxTradeTypes;
        this.captureFxdealFormGroup = this.formBuilder.group({
            fxDealHeaderFormComponent: this.fxDealHeaderFormComponent.getFormGroup(),
            dealTermsFormComponent: this.dealTermsFormComponent.getFormGroup(),
            bankFormComponent: this.bankFormComponent.getFormGroup(),
            dealFormComponent: this.dealFormComponent.getFormGroup(),
            rateEntryComponent: this.rateEntryComponent.getFormGroup(),
            internalMemoFormComponent: this.internalMemoFormComponent.getFormGroup(),
            settlementDocumentsComponent: this.settlementDocumentsComponent.getFormGroup(),
        });
        this.formComponents.push(this.fxDealHeaderFormComponent, this.dealTermsFormComponent, this.bankFormComponent, this.dealFormComponent, this.rateEntryComponent, this.internalMemoFormComponent, this.settlementDocumentsComponent);
        if (this.authorizationService.isPrivilegeAllowed(this.company, 'Trades')
            && this.authorizationService.isPrivilegeAllowed(this.company, 'FxDeals')) {
            this.isEditPrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'CreateEditFxDeal');
            this.isDeletePrivilege = this.authorizationService.isPrivilegeAllowed(this.company, 'DeleteFxDeal');
        }
        this.fxDealId = Number(this.route.snapshot.paramMap.get('fxDealId'));
        if (this.route.snapshot.data.isView) {
            this.isEdit = false;
            this.isViewMode = true;
            this.loadFxDealData();
        }
        if (this.route.snapshot.data.isEdit) {
            this.isEdit = true;
            this.loadFxDealData();
        }
    };
    FxDealsCaptureComponent.prototype.onSaveButtonClicked = function () {
        var _this = this;
        this.saveInProgress = true;
        this.onValidationState = true;
        this.utilService.updateFormGroupValidity(this.captureFxdealFormGroup);
        if (this.captureFxdealFormGroup.pending) {
            this.captureFxdealFormGroup.statusChanges.subscribe(function () {
                if (_this.onValidationState) {
                    _this.onValidationState = false;
                    _this.handleSave();
                }
            });
        }
        else {
            this.onValidationState = false;
            this.handleSave();
        }
    };
    FxDealsCaptureComponent.prototype.handleSave = function () {
        var _this = this;
        try {
            if (!this.captureFxdealFormGroup.valid) {
                this.snackbarService.throwErrorSnackBar('Form is invalid. Please resolve the errors.');
                this.saveInProgress = false;
                return;
            }
            if (!this.model) {
                this.model = new _shared_entities_fxdeal_detail_entity__WEBPACK_IMPORTED_MODULE_8__["FxDealDetail"]();
            }
            this.model.isEditMode = this.isEdit;
            this.fxDealHeaderFormComponent.populateEntity(this.model);
            this.dealTermsFormComponent.populateEntity(this.model);
            this.bankFormComponent.populateEntity(this.model);
            this.dealFormComponent.populateEntity(this.model);
            this.rateEntryComponent.populateEntity(this.model);
            this.internalMemoFormComponent.populateEntity(this.model);
            if (this.isEdit) {
                this.subscriptions.push(this.tradingService.updateFxDeal(this.fxDealId, this.model)
                    .subscribe(function () {
                    _this.saveInProgress = false;
                    _this.snackbarService.informationSnackBar('Fx Deal has been updated successfully.');
                    _this.tradingService.settleFxDeal(_this.fxDealId).subscribe(function (response) {
                        _this.saveInProgress = false;
                        if (response) {
                            var documentReferences = response.map(function (r) { return r.documentReference; }).toString();
                            var messageGenerated = 'FxDeal document(s): ' + documentReferences + ' generated successfully';
                            _this.snackbarService.informationAndCopySnackBar(messageGenerated, documentReferences);
                        }
                        if (_this.fxDealId) {
                            _this.router.navigate([_this.companyManager.getCurrentCompanyId() + '/trades/fxdeal/display/' + _this.fxDealId]);
                        }
                        else {
                            _this.goToFxDealHome();
                        }
                    });
                }, function (err) {
                    _this.saveInProgress = false;
                    _this.snackbarService.informationSnackBar('Some fields have incorrect values, please correct them before saving.');
                }));
            }
            else {
                this.subscriptions.push(this.tradingService.createFxDeal(this.model)
                    .subscribe(function (data) {
                    if (data) {
                        _this.saveInProgress = false;
                        _this.fxDealId = data.fxDealId;
                        if (data.c2CCode && data.departmentAlternativeCode
                            && data.nominalAlternativeAccount && data.settlementNominalAccount) {
                            _this.messageGenerated = 'Fx Deal has been created successfully.';
                        }
                        else {
                            if (!data.c2CCode) {
                                _this.mappingFields.push('" bank / broker account :' + data.counterpartyCode + '"');
                            }
                            if (!data.departmentAlternativeCode) {
                                _this.mappingFields.push('"Department :' + data.departmentMappingCode + '"');
                            }
                            if (!data.nominalAlternativeAccount) {
                                _this.mappingFields.push('"Nominal Account :' + data.nominalAccountNumber + '"');
                            }
                            if (!data.settlementNominalAccount) {
                                _this.mappingFields.push('"Settlement Nominal Account :' + data.settlementAccountNumber + '"');
                            }
                            var mappingErrorFields = _this.mappingFields.join(', ');
                            _this.messageGenerated = 'The FJ document of the deal' + data.fxReference +
                                ' will not be sent to the accounting interface because the accounting interface code of '
                                + mappingErrorFields + ' is/are not filled in. Please contact the accountant';
                        }
                        _this.snackbarService.informationAndCopySnackBar(_this.messageGenerated, _this.messageGenerated);
                        _this.tradingService.settleFxDeal(data.fxDealId).subscribe(function (response) {
                            if (response) {
                                var documentReferences = response.map(function (r) { return r.documentReference; }).toString();
                                var messageGenerated = 'FxDeal document(s): ' + documentReferences + ' generated successfully';
                                _this.snackbarService.informationAndCopySnackBar(messageGenerated, documentReferences);
                            }
                            if (_this.fxDealId) {
                                _this.router.navigate([_this.companyManager.getCurrentCompanyId() + '/trades/fxdeal/display/' + _this.fxDealId]);
                            }
                            else {
                                _this.goToFxDealHome();
                            }
                        });
                    }
                    else {
                        _this.saveInProgress = false;
                    }
                }, function (err) {
                    _this.saveInProgress = false;
                    _this.snackbarService.informationSnackBar('Some fields have incorrect values, please correct them before saving.');
                }));
            }
        }
        catch (ex) {
            this.saveInProgress = false;
            console.error(ex);
        }
    };
    FxDealsCaptureComponent.prototype.onCreateButtonClicked = function () {
        this.router.navigate([this.companyManager.getCurrentCompanyId() + '/trades/fxdeal/capture']);
    };
    FxDealsCaptureComponent.prototype.onDiscardButtonClicked = function () {
        if (this.fxDealId) {
            this.router.navigate([this.companyManager.getCurrentCompanyId() + '/trades/fxdeal/display/' + this.fxDealId]);
        }
        else {
            this.goToFxDealHome();
        }
        this.lockService.cleanSessionLocks().subscribe(function () {
        });
    };
    FxDealsCaptureComponent.prototype.goToFxDealHome = function () {
        var tabIndex = 2;
        this.router.navigate(['/' + this.company + '/trades'], {
            queryParams: { index: tabIndex },
        });
    };
    FxDealsCaptureComponent.prototype.loadFxDealData = function () {
        var _this = this;
        this.tradingService.getfxDealById(this.fxDealId)
            .subscribe(function (data) {
            if (data) {
                _this.fxDealDeatil = data;
                _this.isDeleteShow = (_this.fxDealDeatil.fxDealStatusId === _shared_enums_fx_deals_status_enum__WEBPACK_IMPORTED_MODULE_9__["FxDealStatus"].Deleted) ? true : false;
                _this.isEditShow = (_this.fxDealDeatil.fxDealStatusId === _shared_enums_fx_deals_status_enum__WEBPACK_IMPORTED_MODULE_9__["FxDealStatus"].Deleted) ? false : true;
                _this.formComponents.forEach(function (comp) {
                    comp.initForm(_this.fxDealDeatil, _this.isEdit);
                    var fxTradeType = _this.filteredFxTradeTypes.find(function (x) { return x.code == _this.dealTermsFormComponent.dealTypeCtrl.value; });
                    if (fxTradeType && fxTradeType.isNdf) {
                        _this.rateEntryComponent.ndfChange = false;
                        _this.isNdf = true;
                    }
                });
                if (_this.fxDealDeatil.fxDealStatusId === _shared_enums_fx_deals_status_enum__WEBPACK_IMPORTED_MODULE_9__["FxDealStatus"].Settled) {
                    _this.isSettled = true;
                }
            }
        });
    };
    FxDealsCaptureComponent.prototype.onDeleteButtonClicked = function () {
        var _this = this;
        if (!this.isDeleteShow) {
            var warningMessage = void 0;
            if (this.fxDealDeatil.fxDealStatusId === _shared_enums_fx_deals_status_enum__WEBPACK_IMPORTED_MODULE_9__["FxDealStatus"].Open) {
                warningMessage = 'Do you confirm the deletion of this deal ?';
            }
            else if (this.fxDealDeatil.fxDealStatusId === _shared_enums_fx_deals_status_enum__WEBPACK_IMPORTED_MODULE_9__["FxDealStatus"].Settled) {
                warningMessage = 'This FX deal is already settled, do you really wish do delete it ?';
                if (this.fxDealDeatil.fxSettlementDealDocumentPostingStatusId !== _shared_enums_posting_status_enum__WEBPACK_IMPORTED_MODULE_10__["PostingStatus"].Posted ||
                    this.fxDealDeatil.fxSettlementSettlementDocumentPostingStatusId !== _shared_enums_posting_status_enum__WEBPACK_IMPORTED_MODULE_10__["PostingStatus"].Posted) {
                    this.snackbarService.throwErrorSnackBar('The FX deal has already matured but the settlement documents have not been posted yet.' +
                        ' Please post the documents before deleting the deal');
                    return;
                }
            }
            var confirmDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_7__["ConfirmationDialogComponent"], {
                data: {
                    title: 'Delete FxDeal',
                    text: warningMessage,
                    okButton: 'Yes',
                    cancelButton: 'No',
                },
            });
            confirmDialog.afterClosed().subscribe(function (answer) {
                if (answer) {
                    if (_this.fxDealDeatil.fxDealStatusId === _shared_enums_fx_deals_status_enum__WEBPACK_IMPORTED_MODULE_9__["FxDealStatus"].Open) {
                        _this.tradingService.deleteFxDeal(_this.fxDealId).subscribe(function (data) {
                            _this.snackbarService.informationSnackBar('FxDeal has been deleted successfully');
                            _this.router.navigate([_this.companyManager.getCurrentCompanyId() + '/trades/fxdeal/display/' + _this.fxDealId]);
                        });
                    }
                    else {
                        _this.tradingService.reverseFxDeal(_this.fxDealId).subscribe(function (response) {
                            setTimeout(function () {
                                var documentReferences = response.map(function (r) { return r.documentReference; }).toString();
                                _this.tradingService.deleteFxDeal(_this.fxDealId).subscribe(function (data) {
                                    var messageGenerated = 'FxDeal has been deleted successfully. The reversal document references are ' + documentReferences;
                                    _this.snackbarService.informationAndCopySnackBar(messageGenerated, documentReferences);
                                    _this.router.navigate([_this.companyManager.getCurrentCompanyId() + '/trades/fxdeal/display/' + _this.fxDealId]);
                                });
                            });
                        });
                    }
                }
                else {
                    return;
                }
            });
        }
    };
    FxDealsCaptureComponent.prototype.onEditButtonClicked = function () {
        var _this = this;
        this.lockService.isLockedFxDeal(this.fxDealId).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["takeUntil"])(this.destroy$)).subscribe(function (lock) {
            if (lock.isLocked) {
                _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_7__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Lock',
                        text: lock.message,
                        okButton: 'Got it',
                    },
                });
            }
            else {
                _this.subscriptions.push(_this.lockService.lockFxDeal(_this.fxDealId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_24__["LockFunctionalContext"].FxDeal).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_23__["takeUntil"])(_this.destroy$)).subscribe(function (data) {
                    if (!_this.isSettled) {
                        _this.router.navigate([_this.companyManager.getCurrentCompanyId() + '/trades/fxdeal/edit/' + _this.fxDealId]);
                    }
                }));
            }
        });
    };
    FxDealsCaptureComponent.prototype.onTraderROECalculation = function (result) {
        if (result) {
            this.dealFormComponent.tradedROECtrl.patchValue(result);
        }
    };
    FxDealsCaptureComponent.prototype.onSettledAmountCalculation = function (result) {
        if (result) {
            if (result === _shared_enums_spot_roe_type_enum__WEBPACK_IMPORTED_MODULE_11__["SpotRoeType"].Division) {
                this.dealFormComponent.isDivideROEType = true;
            }
            else {
                this.dealFormComponent.isDivideROEType = false;
            }
            this.dealFormComponent.onSettledAmountCalculate();
        }
    };
    FxDealsCaptureComponent.prototype.onSettledAmountEvaluation = function (settledAmount) {
        this.dealFormComponent.settledAmountCtrl.patchValue(settledAmount);
    };
    FxDealsCaptureComponent.prototype.onDefaultSpotRoeTypeValue = function (defaultSpotRoeValue) {
        if (defaultSpotRoeValue && this.route.snapshot.data.isCreate) {
            this.rateEntryComponent.mdCtrl.patchValue(defaultSpotRoeValue);
        }
    };
    FxDealsCaptureComponent.prototype.onFxRateValue = function (fxRateValue) {
        if (fxRateValue) {
            this.rateEntryComponent.fxRateValue = fxRateValue;
        }
    };
    FxDealsCaptureComponent.prototype.onSpotRoeWarningValue = function (isWarning) {
        if (isWarning) {
            this.rateEntryComponent.isWarningDisplay = true;
        }
        else {
            this.rateEntryComponent.isWarningDisplay = false;
        }
    };
    FxDealsCaptureComponent.prototype.onDealTypeChanged = function (event) {
        var _this = this;
        this.rateEntryComponent.ndfChange = event;
        this.isNdf = true;
        if (this.rateEntryComponent.ndfChange) {
            this.isNdf = false;
            this.ndfAgreedRate = this.rateEntryComponent.ndfAgreedRateCtrl.value;
        }
        else {
            this.rateEntryComponent.ndfAgreedRateCtrl.patchValue(this.ndfAgreedRate);
            var noOfDays = this.masterData.fxTradeTypes.find(function (ndfAgreed) { return ndfAgreed.isNdf === _this.isNdf; });
            var noOfDays2 = noOfDays ? noOfDays.noOfDays : null;
            var ndfAgreedDate = new Date(this.dealTermsFormComponent.maturityDateCtrl.value);
            ndfAgreedDate.setDate(ndfAgreedDate.getDate() - noOfDays2);
            this.rateEntryComponent.ndfAgreedDateCtrl.patchValue(ndfAgreedDate);
        }
    };
    FxDealsCaptureComponent.prototype.onMaturityDateChanged = function (event) {
        var _this = this;
        if (this.isNdf && this.dealTermsFormComponent.maturityDateCtrl.value) {
            var noOfDays = this.masterData.fxTradeTypes.find(function (ndfAgreed) { return ndfAgreed.isNdf === _this.isNdf; });
            var noOfDays2 = noOfDays ? noOfDays.noOfDays : null;
            var ndfAgreedDate = new Date(this.dealTermsFormComponent.maturityDateCtrl.value);
            ndfAgreedDate.setDate(ndfAgreedDate.getDate() - noOfDays2);
            this.rateEntryComponent.ndfAgreedDateCtrl.patchValue(ndfAgreedDate);
        }
        else {
            this.ndfAgreedRate = this.rateEntryComponent.ndfAgreedRateCtrl.value;
            this.rateEntryComponent.ndfAgreedDateCtrl.patchValue('');
            this.rateEntryComponent.ndfAgreedRateCtrl.patchValue('');
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('fxDealHeaderFormComponent'),
        __metadata("design:type", _form_components_header_form_component_fxdeal_header_form_component__WEBPACK_IMPORTED_MODULE_18__["FxDealHeaderFormComponent"])
    ], FxDealsCaptureComponent.prototype, "fxDealHeaderFormComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('dealTermsFormComponent'),
        __metadata("design:type", _form_components_deal_terms_component_deal_terms_form_component__WEBPACK_IMPORTED_MODULE_17__["DealTermsFormComponent"])
    ], FxDealsCaptureComponent.prototype, "dealTermsFormComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('bankFormComponent'),
        __metadata("design:type", _form_components_bank_form_component_bank_form_component__WEBPACK_IMPORTED_MODULE_15__["BankFormComponent"])
    ], FxDealsCaptureComponent.prototype, "bankFormComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('dealFormComponent'),
        __metadata("design:type", _form_components_deal_form_comonent_deal_form_component__WEBPACK_IMPORTED_MODULE_16__["DealFormComponent"])
    ], FxDealsCaptureComponent.prototype, "dealFormComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('rateEntryComponent'),
        __metadata("design:type", _form_components_rate_entry_form_component_rate_entry_form_component__WEBPACK_IMPORTED_MODULE_20__["RateEntryComponent"])
    ], FxDealsCaptureComponent.prototype, "rateEntryComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('internalMemoFormComponent'),
        __metadata("design:type", _form_components_internal_memo_form_component_internal_memo_form_component__WEBPACK_IMPORTED_MODULE_19__["InternalMemoFormComponent"])
    ], FxDealsCaptureComponent.prototype, "internalMemoFormComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('settlementDocumentsComponent'),
        __metadata("design:type", _form_components_settlement_documents_component_settlement_documents_component__WEBPACK_IMPORTED_MODULE_21__["SettlementDocumentsComponent"])
    ], FxDealsCaptureComponent.prototype, "settlementDocumentsComponent", void 0);
    FxDealsCaptureComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-fx-deals-capture',
            template: __webpack_require__(/*! ./fx-deals-capture.component.html */ "./Client/app/trading/components/fx-deals/capture/fx-deals-capture.component.html"),
            styles: [__webpack_require__(/*! ./fx-deals-capture.component.scss */ "./Client/app/trading/components/fx-deals/capture/fx-deals-capture.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"], _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_12__["TradingService"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_14__["UtilService"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_13__["SnackbarService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_5__["AuthorizationService"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_6__["CompanyManagerService"],
            _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_22__["LockService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
            _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialog"]])
    ], FxDealsCaptureComponent);
    return FxDealsCaptureComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/fx-deals/form-components/bank-form-component/bank-form.component.html":
/*!*************************************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/form-components/bank-form-component/bank-form.component.html ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"fx-deals-capture Bank details\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h2>Bank</h2>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"1%\">\r\n            <div fxFlex=\"25%\">\r\n                <atlas-masterdata-user-preferences-input class=\"contextual-search-for-control\"\r\n                                                         isEditable=\"true\"\r\n                                                         [fieldControl]=\"financeCtrl\"\r\n                                                         [options]=\"filteredCounterparties\"\r\n                                                         label=\"Bank/broker\"\r\n                                                         displayProperty=\"counterpartyCode\"\r\n                                                         [selectProperties]=\"['counterpartyCode', 'description']\"\r\n                                                         [errorMap]=\"financetErrorMap\"\r\n                                                         lightBoxTitle=\"Results for Counterparty\"\r\n                                                         gridId=\"counterpartiesGrid\"\r\n                                                         (optionSelected)=\"counterpartyCodeSelected($event)\"\r\n                                                         (valueChange)='onValueChanged($event)'>\r\n                </atlas-masterdata-user-preferences-input>\r\n            </div>\r\n            <div fxFlex=\"25%\">\r\n                <atlas-form-input [fieldControl]=\"financeFxCtrl\"\r\n                                  [errorMap]=\"financeFxErrorMap\"\r\n                                  [required]=\"financeFxCtrl.isRequired\"\r\n                                  label=\"Bank/broker description\">\r\n                </atlas-form-input>\r\n            </div>\r\n            <div fxFlex=\"25%\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Bank's Reference\"\r\n                           autocomplete=\"off\"\r\n                           [formControl]=\"bankReferenceCtrl\">\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/fx-deals/form-components/bank-form-component/bank-form.component.scss":
/*!*************************************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/form-components/bank-form-component/bank-form.component.scss ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/fx-deals/form-components/bank-form-component/bank-form.component.ts":
/*!***********************************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/form-components/bank-form-component/bank-form.component.ts ***!
  \***********************************************************************************************************/
/*! exports provided: BankFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BankFormComponent", function() { return BankFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/directives/autocomplete-dropdown.directive */ "./Client/app/shared/directives/autocomplete-dropdown.directive.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_trading_bank_broker_contextual_data_loader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/services/trading/bank-broker-contextual-data-loader */ "./Client/app/shared/services/trading/bank-broker-contextual-data-loader.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};










var BankFormComponent = /** @class */ (function (_super) {
    __extends(BankFormComponent, _super);
    function BankFormComponent(route, companyManagerService, utilService, formBuilder, bankBrokerContextualDataLoader, formConfigurationProvider) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.route = route;
        _this.companyManagerService = companyManagerService;
        _this.utilService = utilService;
        _this.formBuilder = formBuilder;
        _this.bankBrokerContextualDataLoader = bankBrokerContextualDataLoader;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.financeFxCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('FinanceFx');
        _this.financeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('Finance');
        _this.bankReferenceCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('BankReference');
        _this.financetErrorMap = new Map()
            .set('required', 'Required *')
            .set('inDropdownList', 'Invalid entry. Bank not in the list or not authorized.');
        _this.financeFxErrorMap = new Map()
            .set('required', 'Required *');
        return _this;
    }
    BankFormComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.masterdata = this.route.snapshot.data.masterdata;
        this.financeFxCtrl.disable();
        this.bankBrokerContextualDataLoader.getData().subscribe(function (data) {
            if (data) {
                _this.filteredCounterparties = data;
                _this.counterparties = data;
                _this.financeCtrl.valueChanges.subscribe(function (input) {
                    _this.filteredCounterparties = _this.utilService.filterListforAutocomplete(input, _this.counterparties, ['counterpartyCode', 'description']);
                });
                _this.tradeValidator();
            }
        });
        this.company = this.companyManagerService.getCurrentCompany();
        if (this.company) {
            var counterparty = this.getBroker(this.company.defaultBrokerId);
            if (counterparty) {
                this.financeCtrl.patchValue(counterparty.counterpartyCode);
                this.financeFxCtrl.patchValue(counterparty.description);
            }
            else {
                this.financeCtrl.patchValue('');
                this.financeFxCtrl.patchValue('');
            }
        }
        this.setValidators();
    };
    BankFormComponent.prototype.tradeValidator = function () {
        this.financeCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required,
            Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_4__["inDropdownListValidator"])(this.filteredCounterparties, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_8__["nameof"])('counterpartyCode')),
        ]));
    };
    BankFormComponent.prototype.setValidators = function () {
        this.financeFxCtrl.setValidators([_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].maxLength(200)]);
        this.bankReferenceCtrl.setValidators([_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].maxLength(15)]);
    };
    BankFormComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            financeFxCtrl: this.financeFxCtrl,
            financeCtrl: this.financeCtrl,
            bankReferenceCtrl: this.bankReferenceCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    BankFormComponent.prototype.initForm = function (fxDealDetail, isEdit) {
        if (fxDealDetail) {
            var counterparty = this.getBroker(fxDealDetail.brokerId);
            if (counterparty) {
                this.financeCtrl.patchValue(counterparty.counterpartyCode);
                this.financeFxCtrl.patchValue(counterparty.description);
            }
            else {
                this.financeCtrl.patchValue('');
                this.financeFxCtrl.patchValue('');
            }
            this.bankReferenceCtrl.patchValue(fxDealDetail.bankReference);
            if (!isEdit) {
                this.disableFields();
            }
        }
    };
    BankFormComponent.prototype.disableFields = function () {
        this.financeCtrl.disable();
        this.financeFxCtrl.disable();
        this.bankReferenceCtrl.disable();
    };
    BankFormComponent.prototype.populateEntity = function (model) {
        if (!model.isEditMode) {
            model.brokerId = this.getBrokerId(this.financeCtrl.value.counterpartyCode);
        }
        else {
            if (this.financeCtrl.value.counterpartyCode) {
                model.brokerId = this.getBrokerId(this.financeCtrl.value.counterpartyCode);
            }
            else {
                model.brokerId = this.getBrokerId(this.financeCtrl.value);
            }
        }
        model.bankReference = this.bankReferenceCtrl.value;
    };
    BankFormComponent.prototype.counterpartyCodeSelected = function (value) {
        if (value) {
            var selectedCounterparty = this.masterdata.counterparties.find(function (item) { return item.counterpartyCode === value.counterpartyCode; });
            if (selectedCounterparty) {
                this.financeFxCtrl.patchValue(selectedCounterparty.description);
            }
        }
    };
    BankFormComponent.prototype.onValueChanged = function (value) {
        this.financeFxCtrl.patchValue(value.description);
    };
    BankFormComponent.prototype.getBrokerId = function (code) {
        var counterparty = this.masterdata.counterparties.find(function (cp) { return cp.counterpartyCode === code; });
        if (counterparty) {
            return counterparty.counterpartyID;
        }
        return null;
    };
    BankFormComponent.prototype.getBroker = function (id) {
        var counterparty = this.masterdata.counterparties.find(function (cp) { return cp.counterpartyID === id; });
        return counterparty;
    };
    BankFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-bank-form',
            template: __webpack_require__(/*! ./bank-form.component.html */ "./Client/app/trading/components/fx-deals/form-components/bank-form-component/bank-form.component.html"),
            styles: [__webpack_require__(/*! ./bank-form.component.scss */ "./Client/app/trading/components/fx-deals/form-components/bank-form-component/bank-form.component.scss")],
            providers: [_shared_services_trading_bank_broker_contextual_data_loader__WEBPACK_IMPORTED_MODULE_7__["BankBrokerContextualDataLoader"]],
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_9__["CompanyManagerService"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_8__["UtilService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_trading_bank_broker_contextual_data_loader__WEBPACK_IMPORTED_MODULE_7__["BankBrokerContextualDataLoader"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationProviderService"]])
    ], BankFormComponent);
    return BankFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/fx-deals/form-components/deal-form-comonent/deal-form.component.html":
/*!************************************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/form-components/deal-form-comonent/deal-form.component.html ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"fx-deals-capture Deal terms details\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h2>Deal</h2>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div class=\"bottom-space\">\r\n            <mat-button-toggle-group class=\"toggle-group\"\r\n                                     name=\"toggleStyle\"\r\n                                     aria-label=\"FX Deal Type\"\r\n                                     [formControl]='fxDealDirectionCtrl'\r\n                                     (change)='onStatusChanged($event.value)'>\r\n                <mat-button-toggle [value]=\"fxDealDirection.Buy\"\r\n                                   [checked]=\"true\">Buy</mat-button-toggle>\r\n                <mat-button-toggle [value]=\"fxDealDirection.Sell\">Sell</mat-button-toggle>\r\n            </mat-button-toggle-group>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"1%\">\r\n            <div fxFlex=\"25%\"\r\n                 class=\"bottom-space\">\r\n                <atlas-masterdata-user-preferences-input class=\"contextual-search-for-control\"\r\n                                                         isEditable=\"true\"\r\n                                                         [fieldControl]=\"currencyDealtCtrl\"\r\n                                                         [options]=\"dealtFilteredCurrencies\"\r\n                                                         label=\"Currency Dealt\"\r\n                                                         [errorMap]=\"currencyDealtErrorMap\"\r\n                                                         displayProperty=\"currencyCode\"\r\n                                                         [selectProperties]=\"['currencyCode','description']\"\r\n                                                         lightBoxTitle=\"Results for Currency\"\r\n                                                         (valueChange)='onDealtRoeTypeValue($event)'\r\n                                                         (optionSelected)='onDealtRoeTypeValue($event)'\r\n                                                         gridId=\"currenciesGrid\">\r\n                </atlas-masterdata-user-preferences-input>\r\n            </div>\r\n            <div fxFlex=\"25%\"\r\n                 class=\"custom-form\"\r\n                 [class.required-field]=\"dealtAmountCtrl.isRequired\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Dealt Amount\"\r\n                           autocomplete=\"off\"\r\n                           [textMask]=\"{mask:mask}\"\r\n                           [formControl]=\"dealtAmountCtrl\"\r\n                           (blur)=\"onSettledAmountCalculate()\">\r\n                    <mat-error *ngIf=\"dealtAmountCtrl.hasError('required')\">\r\n                        This field is required\r\n                    </mat-error>\r\n                    <mat-error *ngIf=\"dealtAmountCtrl.hasError('isGreatherThanZero')\">\r\n                        Amount must be greater than Zero.\r\n                    </mat-error>\r\n                    <mat-hint *ngIf=\"dealtAmountCtrl.isRequired\">\r\n                        Required *\r\n                    </mat-hint>\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"25%\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Traded ROE\"\r\n                           autocomplete=\"off\"\r\n                           [textMask]=\"{mask:masked}\"\r\n                           [formControl]=\"tradedROECtrl\">\r\n                    <mat-error *ngIf=\"tradedROECtrl.hasError('required')\">\r\n                        This field is required\r\n                    </mat-error>\r\n                    <mat-hint *ngIf=\"tradedROECtrl.isRequired\">\r\n                        Required *\r\n                    </mat-hint>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"1%\">\r\n            <div fxFlex=\"25%\">\r\n                <atlas-masterdata-user-preferences-input class=\"contextual-search-for-control\"\r\n                                                         isEditable=\"true\"\r\n                                                         [fieldControl]=\"settlementCurrencyCtrl\"\r\n                                                         [options]=\"settlementFilteredCurrency\"\r\n                                                         label=\"Settlement Currency\"\r\n                                                         [errorMap]=\"currencyDealtErrorMap\"\r\n                                                         displayProperty=\"currencyCode\"\r\n                                                         [errorMap]=\"settlementCurrencyErrorMap\"\r\n                                                         [selectProperties]=\"['currencyCode','description']\"\r\n                                                         lightBoxTitle=\"Results for Currency\"\r\n                                                         (valueChange)='onSettlementRoeTypeValue($event)'\r\n                                                         (optionSelected)='onSettlementRoeTypeValue($event)'\r\n                                                         gridId=\"currenciesGrid\">\r\n                </atlas-masterdata-user-preferences-input>\r\n            </div>\r\n            <div fxFlex=\"25%\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Settled Amount\"\r\n                           autocomplete=\"off\"\r\n                           [textMask]=\"{mask:mask}\"\r\n                           [formControl]=\"settledAmountCtrl\">\r\n                    <mat-error *ngIf=\"settledAmountCtrl.hasError('required')\">\r\n                        This field is required\r\n                    </mat-error>\r\n                    <mat-hint *ngIf=\"settledAmountCtrl.isRequired\">\r\n                        Required *\r\n                    </mat-hint>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/fx-deals/form-components/deal-form-comonent/deal-form.component.scss":
/*!************************************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/form-components/deal-form-comonent/deal-form.component.scss ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".bottom-space {\n  margin-bottom: 30px; }\n"

/***/ }),

/***/ "./Client/app/trading/components/fx-deals/form-components/deal-form-comonent/deal-form.component.ts":
/*!**********************************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/form-components/deal-form-comonent/deal-form.component.ts ***!
  \**********************************************************************************************************/
/*! exports provided: DealFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DealFormComponent", function() { return DealFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _shared_enums_fx_deals_direction_enum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../shared/enums/fx-deals-direction.enum */ "./Client/app/shared/enums/fx-deals-direction.enum.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/directives/autocomplete-dropdown.directive */ "./Client/app/shared/directives/autocomplete-dropdown.directive.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_numberMask__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/numberMask */ "./Client/app/shared/numberMask.ts");
/* harmony import */ var _shared_directives_number_validators_directive__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/directives/number-validators.directive */ "./Client/app/shared/directives/number-validators.directive.ts");
/* harmony import */ var _shared_services_http_services_foreign_exchange_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/services/http-services/foreign-exchange.service */ "./Client/app/shared/services/http-services/foreign-exchange.service.ts");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_enums_spot_roe_type_enum__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/enums/spot-roe-type.enum */ "./Client/app/shared/enums/spot-roe-type.enum.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};














var DealFormComponent = /** @class */ (function (_super) {
    __extends(DealFormComponent, _super);
    function DealFormComponent(utilService, route, formConfigurationProvider, foreignExchangeService, companyManager, formBuilder) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.utilService = utilService;
        _this.route = route;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.foreignExchangeService = foreignExchangeService;
        _this.companyManager = companyManager;
        _this.formBuilder = formBuilder;
        _this.fxDealDirection = _shared_enums_fx_deals_direction_enum__WEBPACK_IMPORTED_MODULE_3__["FxDealDirection"];
        _this.fxDealDirectionCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('fxDealDirection');
        _this.currencyDealtCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('CurrencyDeal');
        _this.tradedROECtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('TradedROE');
        _this.settlementCurrencyCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('SettlementCurrency');
        _this.settledAmountCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('SettledAmount');
        _this.dealtAmountCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('DealtAmount');
        _this.dealDirectionId = 1;
        _this.isEditMode = false;
        _this.mask = Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_9__["TwoDigitsDecimalNumberMask"])();
        _this.masked = Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_9__["FourDigitsDecimalNegativeNumberMask"])();
        _this.defaultRoeTypeValuePassed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.fxRateValuePassed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.spotRoeWarningValuePassed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.currencyDealtErrorMap = new Map()
            .set('required', 'Required *')
            .set('inDropdownList', 'Invalid entry. Currency not in the list.');
        _this.settlementCurrencyErrorMap = new Map()
            .set('required', 'Required *')
            .set('inDropdownList', 'Invalid entry. Currency not in the list.');
        return _this;
    }
    DealFormComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.masterdata = this.route.snapshot.data.masterdata;
        this.dealtFilteredCurrencies = this.masterdata.currencies;
        this.settlementFilteredCurrency = this.masterdata.currencies;
        if (this.route.snapshot.data.isEdit) {
            this.isEditMode = true;
        }
        this.settlementCurrencyCtrl.valueChanges.subscribe(function (input) {
            _this.settlementFilteredCurrency =
                _this.utilService.filterListforAutocomplete(input, _this.masterdata.currencies, ['currencyCode', 'description']);
        });
        this.currencyDealtCtrl.valueChanges.subscribe(function (input) {
            _this.dealtFilteredCurrencies =
                _this.utilService.filterListforAutocomplete(input, _this.masterdata.currencies, ['currencyCode', 'description']);
        });
        this.tradedROECtrl.disable();
        this.settledAmountCtrl.disable();
        this.setValidators();
    };
    DealFormComponent.prototype.setValidators = function () {
        this.dealtAmountCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required);
        this.dealtAmountCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].compose([Object(_shared_directives_number_validators_directive__WEBPACK_IMPORTED_MODULE_10__["isGreatherThanZero"])()]));
        this.settledAmountCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required);
        this.tradedROECtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required);
        this.settlementCurrencyCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required,
            Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_6__["inDropdownListValidator"])(this.masterdata.currencies, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_4__["nameof"])('currencyCode')),
        ]));
        this.currencyDealtCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_2__["Validators"].required,
            Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_6__["inDropdownListValidator"])(this.masterdata.currencies, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_4__["nameof"])('currencyCode')),
        ]));
    };
    DealFormComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            fxDealDirectionCtrl: this.fxDealDirectionCtrl,
            currencyDealtCtrl: this.currencyDealtCtrl,
            tradedROECtrl: this.tradedROECtrl,
            settlementCurrencyCtrl: this.settlementCurrencyCtrl,
            settledAmountCtrl: this.settledAmountCtrl,
            dealtAmountCtrl: this.dealtAmountCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    DealFormComponent.prototype.initForm = function (fxDealDetail, isEdit) {
        if (fxDealDetail) {
            this.currencyDealtCtrl.patchValue(fxDealDetail.currencyCode);
            this.settlementCurrencyCtrl.patchValue(fxDealDetail.settlementCurrencyCode);
            this.dealtAmountCtrl.patchValue(fxDealDetail.amount);
            this.fxDealDirectionCtrl.patchValue(fxDealDetail.dealDirectionId);
            if (isEdit) {
                this.spotRate = fxDealDetail.spotRate;
                if (fxDealDetail.currencyCode) {
                    var currency = ({ currencyCode: fxDealDetail.currencyCode });
                    this.onDealtRoeTypeValue(currency);
                }
                if (fxDealDetail.settlementCurrencyCode) {
                    var currencyCode = ({ currencyCode: fxDealDetail.settlementCurrencyCode });
                    this.onSettlementRoeTypeValue(currencyCode);
                }
            }
            if (!isEdit) {
                this.disableFields();
            }
        }
    };
    DealFormComponent.prototype.hideShowWarningMessage = function () {
        if (this.fxRate && this.spotRate) {
            var value = this.spotRate - this.fxRate;
            if (value < 0) {
                value = Math.abs(value);
            }
            var fxRate = 0.05 * this.fxRate;
            if (value > fxRate) {
                this.spotRoeWarningValuePassed.emit(true);
            }
            else {
                this.spotRoeWarningValuePassed.emit(false);
            }
        }
    };
    DealFormComponent.prototype.disableFields = function () {
        this.fxDealDirectionCtrl.disable();
        this.currencyDealtCtrl.disable();
        this.settlementCurrencyCtrl.disable();
        this.dealtAmountCtrl.disable();
        this.tradedROECtrl.disable();
        this.settledAmountCtrl.disable();
    };
    DealFormComponent.prototype.onStatusChanged = function (event) {
        if (event === _shared_enums_fx_deals_direction_enum__WEBPACK_IMPORTED_MODULE_3__["FxDealDirection"].Buy) {
            this.dealDirectionId = 1;
        }
        else {
            this.dealDirectionId = 2;
        }
    };
    DealFormComponent.prototype.populateEntity = function (model) {
        model.dealDirectionId = this.dealDirectionId;
        model.amount = this.dealtAmountCtrl.value;
        if (!model.isEditMode) {
            model.currencyCode = this.currencyDealtCtrl.value.currencyCode;
            model.settlementCurrencyCode = this.settlementCurrencyCtrl.value.currencyCode;
        }
        else {
            if (this.currencyDealtCtrl.value.currencyCode) {
                model.departmentId = this.currencyDealtCtrl.value.currencyCode;
            }
            else {
                model.currencyCode = this.currencyDealtCtrl.value;
            }
            if (this.settlementCurrencyCtrl.value.currencyCode) {
                model.settlementCurrencyCode = this.settlementCurrencyCtrl.value.currencyCode;
            }
            else {
                model.settlementCurrencyCode = this.settlementCurrencyCtrl.value;
            }
        }
    };
    DealFormComponent.prototype.onSettledAmountCalculate = function () {
        if (this.dealtAmountCtrl.value && this.tradedROECtrl.value) {
            var dealtAmountValue = this.getFinalValue(this.dealtAmountCtrl.value.toString());
            if (this.isDivideROEType) {
                this.settledAmount = dealtAmountValue / Number(this.tradedROECtrl.value);
                this.settledAmountCtrl.patchValue(this.settledAmount);
            }
            else {
                this.settledAmount = dealtAmountValue * Number(this.tradedROECtrl.value);
                this.settledAmountCtrl.patchValue(this.settledAmount);
            }
        }
    };
    DealFormComponent.prototype.onDealtRoeTypeValue = function (value) {
        var _this = this;
        if (value.currencyCode) {
            this.foreignExchangeService.getForeignExchangeRate(this.companyManager.getCurrentCompanyDate().toDate(), value.currencyCode)
                .subscribe(function (data) {
                if (data) {
                    _this.dealtExchangeRate = Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_9__["ConvertToNumber"])(data.rate);
                    _this.dealtRoeType = data.currencyRoeType;
                    _this.defaultRoeTypeCalculation();
                }
            });
        }
    };
    DealFormComponent.prototype.onSettlementRoeTypeValue = function (value) {
        var _this = this;
        if (value.currencyCode) {
            this.foreignExchangeService.getForeignExchangeRate(this.companyManager.getCurrentCompanyDate().toDate(), value.currencyCode)
                .subscribe(function (data) {
                if (data) {
                    _this.settlementExchangeRate = Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_9__["ConvertToNumber"])(data.rate);
                    _this.settlementRoeType = data.currencyRoeType;
                    _this.defaultRoeTypeCalculation();
                }
            });
        }
    };
    DealFormComponent.prototype.defaultRoeTypeCalculation = function () {
        if (this.dealtRoeType && this.settlementRoeType &&
            this.dealtExchangeRate && this.settlementExchangeRate) {
            if (this.dealtRoeType === _shared_enums_spot_roe_type_enum__WEBPACK_IMPORTED_MODULE_13__["SpotRoeType"].Multiplication &&
                this.settlementRoeType === _shared_enums_spot_roe_type_enum__WEBPACK_IMPORTED_MODULE_13__["SpotRoeType"].Division) {
                this.defaultRoeTypeValuePassed.emit(this.dealtRoeType);
                this.fxRate = this.dealtExchangeRate * this.settlementExchangeRate;
                this.fxRateValuePassed.emit(this.fxRate);
            }
            if (this.dealtRoeType === _shared_enums_spot_roe_type_enum__WEBPACK_IMPORTED_MODULE_13__["SpotRoeType"].Division &&
                this.settlementRoeType === _shared_enums_spot_roe_type_enum__WEBPACK_IMPORTED_MODULE_13__["SpotRoeType"].Multiplication) {
                this.defaultRoeTypeValuePassed.emit(this.dealtRoeType);
                this.fxRate = this.dealtExchangeRate * this.settlementExchangeRate;
                this.fxRateValuePassed.emit(this.fxRate);
            }
            if (this.dealtRoeType === _shared_enums_spot_roe_type_enum__WEBPACK_IMPORTED_MODULE_13__["SpotRoeType"].Multiplication &&
                this.settlementRoeType === _shared_enums_spot_roe_type_enum__WEBPACK_IMPORTED_MODULE_13__["SpotRoeType"].Multiplication) {
                this.defaultRoeTypeValuePassed.emit(this.settlementRoeType);
                this.fxRate = this.dealtExchangeRate / this.settlementExchangeRate;
                this.fxRateValuePassed.emit(this.fxRate);
            }
            if (this.dealtRoeType === _shared_enums_spot_roe_type_enum__WEBPACK_IMPORTED_MODULE_13__["SpotRoeType"].Division &&
                this.settlementRoeType === _shared_enums_spot_roe_type_enum__WEBPACK_IMPORTED_MODULE_13__["SpotRoeType"].Division) {
                this.defaultRoeTypeValuePassed.emit('M');
                this.fxRate = this.settlementExchangeRate / this.dealtExchangeRate;
                this.fxRateValuePassed.emit(this.fxRate);
            }
            if (this.isEditMode) {
                this.hideShowWarningMessage();
            }
        }
    };
    DealFormComponent.prototype.getFinalValue = function (value) {
        if (typeof (value) === 'string' && value.indexOf(',') > 0) {
            return Number(value.replace(/,/g, ''));
        }
        if (typeof (value) === 'string' && value.indexOf('_') > 0) {
            return Number(value.replace('_', ''));
        }
        return Number(value);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], DealFormComponent.prototype, "defaultRoeTypeValuePassed", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], DealFormComponent.prototype, "fxRateValuePassed", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], DealFormComponent.prototype, "spotRoeWarningValuePassed", void 0);
    DealFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-deal-form',
            template: __webpack_require__(/*! ./deal-form.component.html */ "./Client/app/trading/components/fx-deals/form-components/deal-form-comonent/deal-form.component.html"),
            styles: [__webpack_require__(/*! ./deal-form.component.scss */ "./Client/app/trading/components/fx-deals/form-components/deal-form-comonent/deal-form.component.scss")]
        }),
        __metadata("design:paramtypes", [_shared_services_util_service__WEBPACK_IMPORTED_MODULE_4__["UtilService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_5__["ActivatedRoute"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_7__["FormConfigurationProviderService"],
            _shared_services_http_services_foreign_exchange_service__WEBPACK_IMPORTED_MODULE_11__["ForeignExchangeService"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_12__["CompanyManagerService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"]])
    ], DealFormComponent);
    return DealFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_8__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/fx-deals/form-components/deal-terms-component/deal-terms-form.component.html":
/*!********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/form-components/deal-terms-component/deal-terms-form.component.html ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"fx-deals-capture Deal terms details\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h2>Deal Terms</h2>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"1%\">\r\n            <div fxFlex=\"25%\">\r\n                <atlas-masterdata-user-preferences-input class=\"contextual-search-for-control\"\r\n                                                         isEditable=\"true\"\r\n                                                         [fieldControl]=\"dealTypeCtrl\"\r\n                                                         label=\"Deal Type\"\r\n                                                         [options]=\"filteredFxTradeTypes\"\r\n                                                         displayProperty=\"code\"\r\n                                                         [selectProperties]=\"['code','description']\"\r\n                                                         lightBoxTitle=\"Results for Fx Deal Types\"\r\n                                                         gridId=\"fxTradeTypeGrid\"\r\n                                                         (onBlankSelected)=\"onBlankSelectionChanged();\"\r\n                                                         (optionSelected)=\"onDealTypeSelectionChanged($event);\">\r\n                </atlas-masterdata-user-preferences-input>\r\n            </div>\r\n            <div fxFlex=\"25%\"\r\n                 class=\"custom-form\"\r\n                 [class.required-field]=\"contractDateCtrl.isRequired\">\r\n\r\n                <atlas-date-picker fxFlex=\"100%\"\r\n                                   [errorMap]=\"contractDateErrorMap\"\r\n                                   [max]=\"maxDate\"\r\n                                   label=\"Contract Date\"\r\n                                   [fieldControl]=\"contractDateCtrl\"\r\n                                   (dateChanged)=\"onContractDateChanged($event)\"\r\n                                   [isEditable]=\"contractDateCtrl.enabled\">\r\n                </atlas-date-picker>\r\n            </div>\r\n            <div fxFlex=\"25%\"\r\n                 class=\"custom-form\"\r\n                 [class.required-field]=\"maturityDateCtrl.isRequired\">\r\n                <atlas-date-picker fxFlex=\"100%\"\r\n                                   [errorMap]=\"maturityDateErrorMap\"\r\n                                   label=\"Maturity Date\"\r\n                                   [fieldControl]=\"maturityDateCtrl\"\r\n                                   [isEditable]=\"maturityDateCtrl.enabled\"\r\n                                   (dateChanged)=\"onDateSelectionChanged($event)\">\r\n                </atlas-date-picker>\r\n            </div>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/fx-deals/form-components/deal-terms-component/deal-terms-form.component.scss":
/*!********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/form-components/deal-terms-component/deal-terms-form.component.scss ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/fx-deals/form-components/deal-terms-component/deal-terms-form.component.ts":
/*!******************************************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/form-components/deal-terms-component/deal-terms-form.component.ts ***!
  \******************************************************************************************************************/
/*! exports provided: DealTermsFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DealTermsFormComponent", function() { return DealTermsFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_validators_date_validators_validator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/validators/date-validators.validator */ "./Client/app/shared/validators/date-validators.validator.ts");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









var DealTermsFormComponent = /** @class */ (function (_super) {
    __extends(DealTermsFormComponent, _super);
    function DealTermsFormComponent(formConfigurationProvider, formBuilder, utilService, companyManager, route) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.formBuilder = formBuilder;
        _this.utilService = utilService;
        _this.companyManager = companyManager;
        _this.route = route;
        _this.dealTypeChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.maturityDateChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.dealTypeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('DealType');
        _this.maturityDateCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('MaturityDate');
        _this.contractDateCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('ContractDate');
        _this.maxDate = _this.companyManager.getCurrentCompanyDate().toDate();
        _this.contractDateErrorMap = new Map()
            .set('required', 'Required *')
            .set('isDateValid', 'The Contract date cannot be in the future');
        _this.maturityDateErrorMap = new Map()
            .set('required', 'Required *')
            .set('isBeforeDateValid', 'The Maturity date cannot be previous to the Contract date');
        return _this;
    }
    DealTermsFormComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.masterdata = this.route.snapshot.data.masterdata;
        this.filteredFxTradeTypes = this.masterdata.fxTradeTypes;
        this.dealTypeCtrl.valueChanges.subscribe(function (input) {
            _this.filteredFxTradeTypes = _this.utilService.filterListforAutocomplete(input, _this.masterdata.fxTradeTypes, ['code', 'description']);
        });
        if (this.route.snapshot.data.isCreate) {
            this.contractDateCtrl.setValue(this.companyManager.getCurrentCompanyDate());
        }
        if (this.filteredFxTradeTypes && this.filteredFxTradeTypes.length > 0) {
            this.dealTypeCtrl.setValue(this.filteredFxTradeTypes[0]);
        }
        this.setValidators();
    };
    DealTermsFormComponent.prototype.setValidators = function () {
        this.contractDateCtrl.setValidators([
            _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required,
            Object(_shared_validators_date_validators_validator__WEBPACK_IMPORTED_MODULE_7__["isBeforeDate"])(this.companyManager.getCurrentCompanyDate()),
        ]);
        this.maturityDateCtrl.setValidators([
            _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required,
            Object(_shared_validators_date_validators_validator__WEBPACK_IMPORTED_MODULE_7__["isDateBeforeControlDate"])(this.contractDateCtrl.value),
        ]);
    };
    DealTermsFormComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            maturityDateCtrl: this.maturityDateCtrl,
            contractDateCtrl: this.contractDateCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    DealTermsFormComponent.prototype.initForm = function (fxDealDetail, isEdit) {
        if (fxDealDetail) {
            if (fxDealDetail.fxTradeTypeId && this.masterdata.fxTradeTypes && this.masterdata.fxTradeTypes.length > 0) {
                var selectedfxTrade = this.masterdata.fxTradeTypes.find(function (value) { return value.fxTradeTypeId === fxDealDetail.fxTradeTypeId; });
                if (selectedfxTrade) {
                    this.dealTypeCtrl.patchValue(selectedfxTrade.code);
                }
            }
            this.contractDateCtrl.patchValue(fxDealDetail.contractDate);
            this.maturityDateCtrl.patchValue(fxDealDetail.maturityDate);
            if (!isEdit) {
                this.disableFields();
            }
        }
    };
    DealTermsFormComponent.prototype.disableFields = function () {
        this.dealTypeCtrl.disable();
        this.contractDateCtrl.disable();
        this.maturityDateCtrl.disable();
    };
    DealTermsFormComponent.prototype.onBlankSelectionChanged = function () {
        var _this = this;
        var fxTradeType = this.filteredFxTradeTypes.find(function (x) { return x.code == _this.dealTypeCtrl.value.code; });
        if (fxTradeType && fxTradeType.isNdf) {
            this.dealTypeChange.emit(false);
        }
        else {
            this.dealTypeChange.emit(true);
        }
    };
    DealTermsFormComponent.prototype.onDealTypeSelectionChanged = function (event) {
        var _this = this;
        var fxTradeType = this.filteredFxTradeTypes.find(function (x) { return x.code == _this.dealTypeCtrl.value.code; });
        if (fxTradeType && fxTradeType.isNdf) {
            this.dealTypeChange.emit(false);
        }
        else {
            this.dealTypeChange.emit(true);
        }
    };
    DealTermsFormComponent.prototype.populateEntity = function (model) {
        model.contractDate = this.contractDateCtrl.value;
        model.maturityDate = this.maturityDateCtrl.value;
        if (!model.isEditMode) {
            model.fxTradeTypeId = this.getId(this.dealTypeCtrl.value.code);
        }
        else {
            if (this.dealTypeCtrl.value.code) {
                model.fxTradeTypeId = this.getId(this.dealTypeCtrl.value.code);
            }
            else {
                model.fxTradeTypeId = this.getId(this.dealTypeCtrl.value);
            }
        }
    };
    DealTermsFormComponent.prototype.getId = function (code) {
        var selectedCode = this.masterdata.fxTradeTypes.find(function (selectedCode) { return selectedCode.code === code; });
        if (selectedCode) {
            return selectedCode.fxTradeTypeId;
        }
        return null;
    };
    DealTermsFormComponent.prototype.onDateSelectionChanged = function (event) {
        this.maturityDateChange.emit(this.maturityDateCtrl.value);
        this.maturityDateCtrl.clearValidators();
        this.setValidators();
    };
    DealTermsFormComponent.prototype.onContractDateChanged = function (event) {
        this.maturityDateCtrl.clearValidators();
        this.setValidators();
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], DealTermsFormComponent.prototype, "dealTypeChange", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], DealTermsFormComponent.prototype, "maturityDateChange", void 0);
    DealTermsFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-deal-terms-form-',
            template: __webpack_require__(/*! ./deal-terms-form.component.html */ "./Client/app/trading/components/fx-deals/form-components/deal-terms-component/deal-terms-form.component.html"),
            styles: [__webpack_require__(/*! ./deal-terms-form.component.scss */ "./Client/app/trading/components/fx-deals/form-components/deal-terms-component/deal-terms-form.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_4__["FormConfigurationProviderService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormBuilder"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_2__["UtilService"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_8__["CompanyManagerService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_6__["ActivatedRoute"]])
    ], DealTermsFormComponent);
    return DealTermsFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/fx-deals/form-components/header-form-component/fxdeal-header-form.component.html":
/*!************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/form-components/header-form-component/fxdeal-header-form.component.html ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<header class=\"header-background fxDeal \"\r\n        [class.fxDeal-capture]=\"!isShow\">\r\n    <div class=\"header-container\">\r\n        <div class=\"header-content\">\r\n            <div fxLayout=\"row\"\r\n                 fxLayoutGap=\"1%\">\r\n                <div fxFlex=\"15%\">\r\n                    <mat-form-field>\r\n                        <input matInput\r\n                               placeholder=\"Deal No.\"\r\n                               autocomplete=\"off\"\r\n                               [formControl]=\"dealNoCtrl\">\r\n                    </mat-form-field>\r\n                </div>\r\n                <mat-chip-list *ngIf=\"isShow || isEditMode\"\r\n                               class=\"chip-list\">\r\n                    <mat-chip selected\r\n                              disabled>\r\n                        {{dealType}}\r\n                    </mat-chip>\r\n                    <mat-chip selected\r\n                              class='mat-approved'\r\n                              disabled>\r\n                        {{dealStatus}}\r\n                    </mat-chip>\r\n                </mat-chip-list>\r\n            </div>\r\n            <div fxLayout=\"row\"\r\n                 fxLayoutGap=\"1%\">\r\n                <div fxFlex=\"10%\">\r\n                    <atlas-masterdata-user-preferences-input class=\"contextual-search-for-control\"\r\n                                                             isEditable=\"true\"\r\n                                                             [fieldControl]=\"traderCtrl\"\r\n                                                             [options]=\"filteredTradeOwners\"\r\n                                                             label=\"Trader\"\r\n                                                             displayProperty=\"displayName\"\r\n                                                             [errorMap]=\"traderErrorMap\"\r\n                                                             [selectProperties]=\"['samAccountName','displayName']\"\r\n                                                             lightBoxTitle=\"Results for Trader\"\r\n                                                             gridId=\"traderGrid\">\r\n                    </atlas-masterdata-user-preferences-input>\r\n                </div>\r\n                <div fxFlex=\"10%\">\r\n                    <atlas-masterdata-user-preferences-input class=\"contextual-search-for-control\"\r\n                                                             isEditable=\"true\"\r\n                                                             [fieldControl]=\"departmentCodeCtrl\"\r\n                                                             [options]=\"filteredDepartments\"\r\n                                                             label=\"Department Code\"\r\n                                                             displayProperty=\"departmentCode\"\r\n                                                             [errorMap]=\"departmentErrorMap\"\r\n                                                             [selectProperties]=\"['departmentCode','description']\"\r\n                                                             lightBoxTitle=\"Results for Department\"\r\n                                                             (valueChange)='onValueChanged($event)'\r\n                                                             (optionSelected)=\"onOptionSelected($event)\"\r\n                                                             gridId=\"departmentsGrid\">\r\n                    </atlas-masterdata-user-preferences-input>\r\n                </div>\r\n                <div fxFlex=\"10%\">\r\n                    <atlas-form-input [fieldControl]=\"departmentDescriptionCtrl\"\r\n                                      [required]=\"departmentDescriptionCtrl.isRequired\"\r\n                                      [errorMap]=\"departmentDescriptionErrorMap\"\r\n                                      [label]=\"'Department Desc'\">\r\n                    </atlas-form-input>\r\n                </div>\r\n                <div fxFlex=\"10%\"\r\n                     [class.required-field]=\"accountCtrl.isRequired\">\r\n                    <mat-form-field>\r\n                        <input matInput\r\n                               placeholder=\"Account ref\"\r\n                               autocomplete=\"off\"\r\n                               [formControl]=\"accountCtrl\">\r\n                        <mat-error *ngIf=\"accountCtrl.hasError('required')\">\r\n                            This field is required\r\n                        </mat-error>\r\n                        <mat-hint *ngIf=\"accountCtrl.isRequired\">\r\n                            Required *\r\n                        </mat-hint>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div fxFlex=\"10%\">\r\n                    <atlas-form-input [fieldControl]=\"accountDescriptionCtrl\"\r\n                                      [errorMap]=\"accountDescriptionErrorMap\"\r\n                                      [label]=\"'Account Desc'\">\r\n                    </atlas-form-input>\r\n                </div>\r\n                <div fxFlex=\"10%\"\r\n                     *ngIf=\"showAuditInformation\">\r\n                    <atlas-form-input [fieldControl]=\"createdByCtrl\"\r\n                                      [label]=\"'Created By'\">\r\n                    </atlas-form-input>\r\n                </div>\r\n                <div fxFlex=\"10%\"\r\n                     *ngIf=\"showAuditInformation\">\r\n                    <atlas-form-input [fieldControl]=\"createdOnCtrl\"\r\n                                      [label]=\"'Created On'\">\r\n                    </atlas-form-input>\r\n                </div>\r\n                <div fxFlex=\"10%\"\r\n                     *ngIf=\"showAuditInformation && showAmendedFields\">\r\n                    <atlas-form-input [fieldControl]=\"amendedByCtrl\"\r\n                                      [label]=\"'Amended By'\">\r\n                    </atlas-form-input>\r\n                </div>\r\n                <div fxFlex=\"10%\"\r\n                     *ngIf=\"showAuditInformation && showAmendedFields\">\r\n                    <atlas-form-input [fieldControl]=\"amendedOnCtrl\"\r\n                                      [label]=\"'Amended On'\">\r\n                    </atlas-form-input>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</header>"

/***/ }),

/***/ "./Client/app/trading/components/fx-deals/form-components/header-form-component/fxdeal-header-form.component.scss":
/*!************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/form-components/header-form-component/fxdeal-header-form.component.scss ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".header-container {\n  height: 130px; }\n\ndiv.mat-form-field-infix {\n  padding: 0px;\n  border-top: none !important; }\n\n.header-meta {\n  margin-top: 19px; }\n\n.mat-form-field-wrapper {\n  padding-bottom: 1em; }\n\n.mat-form-field-infix {\n  padding: 0px 0px 5px 0px; }\n\n.header-background.fxDeal {\n  height: 100px;\n  width: 100%;\n  background: bottom/cover url(\"/assets/img/pattern-small.jpg\") no-repeat; }\n\n.header-background.fxDeal.fxDeal-capture {\n    background: top/contain url(\"/assets/img/luke-waves-gray.svg\") no-repeat;\n    background-position-x: right;\n    background-color: white; }\n\n.header-background.fxDeal.fxDeal-capture .header-container {\n      background: none; }\n\n.header-background.fxDeal.fxDeal-capture .header-container h2,\n      .header-background.fxDeal.fxDeal-capture .header-container .mat-input-element:disabled,\n      .header-background.fxDeal.fxDeal-capture .header-container label,\n      .header-background.fxDeal.fxDeal-capture .header-container span,\n      .header-background.fxDeal.fxDeal-capture .header-container .mat-form-field {\n        color: #332f30; }\n\n.header-background.fxDeal.fxDeal-capture .header-container ::ng-deep.mat-input-element:disabled {\n        color: #332f30 !important; }\n\n.header-background.fxDeal.fxDeal-capture .header-meta {\n      margin-top: 4px; }\n\n.header-background.fxDeal .header-container {\n    background: rgba(24, 91, 157, 0.84);\n    background: -webkit-gradient(left top, right top, color-stop(0%, rgba(24, 91, 157, 0.84)), color-stop(100%, rgba(53, 129, 28, 0.68)));\n    background: linear-gradient(to right, rgba(24, 91, 157, 0.84) 0%, rgba(53, 129, 28, 0.68) 100%);\n    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#185b9d',\r endColorstr='#35811c',\r GradientType=1); }\n\n.header-background.fxDeal .header-container h2,\n    .header-background.fxDeal .header-container .mat-input-element:disabled,\n    .header-background.fxDeal .header-container label,\n    .header-background.fxDeal .header-container span,\n    .header-background.fxDeal .header-container .mat-icon-button,\n    .header-background.fxDeal .header-container .mat-form-field {\n      color: white; }\n\n.header-background.fxDeal .header-container .chip-list {\n      margin-bottom: 4px; }\n\n.header-background.fxDeal .header-container ::ng-deep.mat-input-element:disabled {\n      color: white !important; }\n"

/***/ }),

/***/ "./Client/app/trading/components/fx-deals/form-components/header-form-component/fxdeal-header-form.component.ts":
/*!**********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/form-components/header-form-component/fxdeal-header-form.component.ts ***!
  \**********************************************************************************************************************/
/*! exports provided: FxDealHeaderFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FxDealHeaderFormComponent", function() { return FxDealHeaderFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../shared/entities/masterdata-props.entity */ "./Client/app/shared/entities/masterdata-props.entity.ts");
/* harmony import */ var _shared_services_masterdata_department_data_loader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../shared/services/masterdata/department-data-loader */ "./Client/app/shared/services/masterdata/department-data-loader.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/directives/autocomplete-dropdown.directive */ "./Client/app/shared/directives/autocomplete-dropdown.directive.ts");
/* harmony import */ var _shared_services_http_services_user_identity_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/services/http-services/user-identity.service */ "./Client/app/shared/services/http-services/user-identity.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_services_trading_trader_contextual_data_loader__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/services/trading/trader-contextual-data-loader */ "./Client/app/shared/services/trading/trader-contextual-data-loader.ts");
/* harmony import */ var _shared_enums_fx_deals_status_enum__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../shared/enums/fx-deals-status.enum */ "./Client/app/shared/enums/fx-deals-status.enum.ts");
/* harmony import */ var _shared_enums_fx_deals_direction_enum__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../shared/enums/fx-deals-direction.enum */ "./Client/app/shared/enums/fx-deals-direction.enum.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
















var FxDealHeaderFormComponent = /** @class */ (function (_super) {
    __extends(FxDealHeaderFormComponent, _super);
    function FxDealHeaderFormComponent(formBuilder, departmentDataLoader, utilService, tradingService, formConfigurationProvider, userIdentityService, companyManager, route, tradeContextualDataLoader) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.departmentDataLoader = departmentDataLoader;
        _this.utilService = utilService;
        _this.tradingService = tradingService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.userIdentityService = userIdentityService;
        _this.companyManager = companyManager;
        _this.route = route;
        _this.tradeContextualDataLoader = tradeContextualDataLoader;
        _this.documentDateSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.traderCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('Trader');
        _this.departmentCodeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('Department');
        _this.departmentDescriptionCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('DepartmentDescription');
        _this.dealNoCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('DealNo');
        _this.accountCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('Account');
        _this.accountDescriptionCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('AccountDescription');
        _this.createdByCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('CreatedBy');
        _this.createdOnCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('CreatedOn');
        _this.amendedByCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('AmendedBy');
        _this.amendedOnCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('AmendedOn');
        _this.masterdataList = [_shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Departments];
        _this.isShow = false;
        _this.isEditMode = false;
        _this.date = false;
        _this.showAmendedFields = false;
        _this.showAuditInformation = false;
        _this.departmentErrorMap = new Map()
            .set('required', 'Required *')
            .set('inDropdownList', 'Invalid entry. Department not in the list or not authorized.');
        _this.departmentDescriptionErrorMap = new Map()
            .set('required', 'Required *');
        _this.accountDescriptionErrorMap = new Map()
            .set('required', 'Required *');
        _this.traderErrorMap = new Map()
            .set('required', 'Required *')
            .set('inDropdownList', 'Invalid entry. Trader not in the list or not authorized.');
        return _this;
    }
    FxDealHeaderFormComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.company = this.route.snapshot.paramMap.get('company');
        this.departmentDescriptionCtrl.disable();
        this.fxDealId = Number(this.route.snapshot.paramMap.get('fxDealId'));
        if (this.route.snapshot.data.isView) {
            this.isShow = true;
        }
        if (this.route.snapshot.data.isEdit) {
            this.isEditMode = true;
        }
        if (this.fxDealId) {
            this.showAuditInformation = true;
        }
        this.masterdata = this.route.snapshot.data.masterdata;
        this.filteredDepartments = this.masterdata.departments;
        this.filteredCompany = this.masterdata.companies;
        this.filteredCounterparty = this.masterdata.counterparties;
        this.departmentCodeCtrl.valueChanges.subscribe(function (input) {
            _this.filteredDepartments =
                _this.utilService.filterListforAutocomplete(input, _this.masterdata.departments, ['departmentCode', 'description']);
        });
        this.tradeContextualDataLoader.getData().subscribe(function (traders) {
            if (traders) {
                _this.filteredTradeOwners = traders;
                _this.traders = traders;
                _this.traderCtrl.valueChanges.subscribe(function (input) {
                    _this.filteredTradeOwners = _this.utilService.filterListforAutocomplete(input, _this.traders, ['samAccountName', 'displayName']);
                });
                _this.tradeValidator();
            }
        });
        if (this.company) {
            var counterparty_1 = this.filteredCompany.find(function (id) { return id.companyId === _this.company; }).counterpartyId;
            if (counterparty_1) {
                this.counterpartyId = counterparty_1;
                var counterpartyCode = this.filteredCounterparty.find(function (code) { return code.counterpartyID === counterparty_1; }).counterpartyCode;
                if (counterpartyCode) {
                    this.accountCtrl.patchValue(counterpartyCode);
                }
                var counterpartyDescription = this.filteredCounterparty.find(function (code) { return code.counterpartyID === counterparty_1; }).description;
                if (counterpartyDescription) {
                    this.accountDescriptionCtrl.patchValue(counterpartyDescription);
                }
            }
        }
        this.accountCtrl.disable();
        this.accountDescriptionCtrl.disable();
        this.dealNoCtrl.disable();
        this.createdByCtrl.disable();
        this.createdOnCtrl.disable();
        this.amendedByCtrl.disable();
        this.amendedOnCtrl.disable();
        this.setValidators();
    };
    FxDealHeaderFormComponent.prototype.setValidators = function () {
        this.departmentCodeCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_11__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_11__["Validators"].required,
            Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_8__["inDropdownListValidator"])(this.masterdata.departments, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_4__["nameof"])('departmentCode')),
        ]));
        this.departmentDescriptionCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_11__["Validators"].required);
        this.accountCtrl.setValidators([_angular_forms__WEBPACK_IMPORTED_MODULE_11__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_11__["Validators"].maxLength(10)]);
        this.accountDescriptionCtrl.setValidators([_angular_forms__WEBPACK_IMPORTED_MODULE_11__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_11__["Validators"].maxLength(200)]);
    };
    FxDealHeaderFormComponent.prototype.tradeValidator = function () {
        this.traderCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_11__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_11__["Validators"].required,
            Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_8__["inDropdownListValidator"])(this.filteredTradeOwners, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_4__["nameof"])('displayName')),
        ]));
    };
    FxDealHeaderFormComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            traderCtrl: this.traderCtrl,
            departmentCodeCtrl: this.departmentCodeCtrl,
            departmentDescriptionCtrl: this.departmentDescriptionCtrl,
            dealNoCtrl: this.dealNoCtrl,
            accountCtrl: this.accountCtrl,
            accountDescriptionCtrl: this.accountDescriptionCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    FxDealHeaderFormComponent.prototype.initForm = function (fxDealDetail, isEdit) {
        if (fxDealDetail) {
            this.dealType = _shared_enums_fx_deals_direction_enum__WEBPACK_IMPORTED_MODULE_15__["FxDealDirection"][fxDealDetail.dealDirectionId];
            this.dealStatus = _shared_enums_fx_deals_status_enum__WEBPACK_IMPORTED_MODULE_14__["FxDealStatus"][fxDealDetail.fxDealStatusId];
            this.traderCtrl.patchValue(fxDealDetail.traderDisplayName);
            this.dealNoCtrl.patchValue(fxDealDetail.reference);
            this.createdByCtrl.patchValue(fxDealDetail.createdBy);
            this.createdOnCtrl.patchValue((fxDealDetail.createdDateTime) ? fxDealDetail.createdDateTime.toDateString() : '');
            if (fxDealDetail.modifiedBy && fxDealDetail.modifiedDateTime) {
                this.showAmendedFields = true;
                this.amendedByCtrl.patchValue(fxDealDetail.modifiedBy);
                this.amendedOnCtrl.patchValue((fxDealDetail.modifiedDateTime) ? fxDealDetail.modifiedDateTime.toDateString() : '');
            }
            this.departmentCodeCtrl.patchValue(fxDealDetail.departmentCode);
            if (fxDealDetail.departmentCode) {
                var description = this.filteredDepartments.find(function (value) { return value.departmentCode === fxDealDetail.departmentCode; }).description;
                this.departmentDescriptionCtrl.patchValue(description);
            }
            if (!isEdit) {
                this.disableFields();
            }
        }
    };
    FxDealHeaderFormComponent.prototype.populateEntity = function (model) {
        if (!model.isEditMode) {
            model.departmentId = this.getDepartmentId(this.departmentCodeCtrl.value.departmentCode);
            model.traderId = this.traderCtrl.value.userId;
        }
        else {
            if (this.departmentCodeCtrl.value.departmentCode) {
                model.departmentId = this.getDepartmentId(this.departmentCodeCtrl.value.departmentCode);
            }
            else {
                model.departmentId = this.getDepartmentId(this.departmentCodeCtrl.value);
            }
            if (this.traderCtrl.value.userId) {
                model.traderId = this.traderCtrl.value.userId;
            }
            else {
                model.traderId = this.getTraderId(this.traderCtrl.value);
            }
        }
        model.counterpartyId = this.counterpartyId;
    };
    FxDealHeaderFormComponent.prototype.getDepartmentId = function (code) {
        var selectedDepartment = this.masterdata.departments.find(function (department) { return department.departmentCode === code; });
        if (selectedDepartment) {
            return selectedDepartment.departmentId;
        }
        return null;
    };
    FxDealHeaderFormComponent.prototype.getTraderId = function (code) {
        var selectedTrader = this.filteredTradeOwners.find(function (value) { return value.displayName === code; });
        if (selectedTrader) {
            return selectedTrader.userId;
        }
        return null;
    };
    FxDealHeaderFormComponent.prototype.disableFields = function () {
        this.traderCtrl.disable();
        this.dealNoCtrl.disable();
        this.accountCtrl.disable();
        this.departmentCodeCtrl.disable();
    };
    FxDealHeaderFormComponent.prototype.onValueChanged = function (value) {
        this.departmentDescriptionCtrl.patchValue(value.description);
    };
    FxDealHeaderFormComponent.prototype.onOptionSelected = function (value) {
        var department = this.masterdata.departments.find(function (item) { return item.departmentCode === value.departmentCode; });
        if (department) {
            this.departmentDescriptionCtrl.patchValue(department.description);
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], FxDealHeaderFormComponent.prototype, "documentDateSelected", void 0);
    FxDealHeaderFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-fxdeal-header-form',
            template: __webpack_require__(/*! ./fxdeal-header-form.component.html */ "./Client/app/trading/components/fx-deals/form-components/header-form-component/fxdeal-header-form.component.html"),
            styles: [__webpack_require__(/*! ./fxdeal-header-form.component.scss */ "./Client/app/trading/components/fx-deals/form-components/header-form-component/fxdeal-header-form.component.scss")],
            providers: [_shared_services_masterdata_department_data_loader__WEBPACK_IMPORTED_MODULE_3__["DepartmentDataLoader"], _shared_services_trading_trader_contextual_data_loader__WEBPACK_IMPORTED_MODULE_13__["TradeContextualDataLoader"]]
        }),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_11__["FormBuilder"],
            _shared_services_masterdata_department_data_loader__WEBPACK_IMPORTED_MODULE_3__["DepartmentDataLoader"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_4__["UtilService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_5__["TradingService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_7__["FormConfigurationProviderService"],
            _shared_services_http_services_user_identity_service__WEBPACK_IMPORTED_MODULE_9__["UserIdentityService"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_12__["CompanyManagerService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_10__["ActivatedRoute"],
            _shared_services_trading_trader_contextual_data_loader__WEBPACK_IMPORTED_MODULE_13__["TradeContextualDataLoader"]])
    ], FxDealHeaderFormComponent);
    return FxDealHeaderFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_6__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/fx-deals/form-components/internal-memo-form-component/internal-memo-form.component.html":
/*!*******************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/form-components/internal-memo-form-component/internal-memo-form.component.html ***!
  \*******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card>\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h2 class=\"memo-field\">Internal Memorandum</h2>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <mat-form-field fxFlex=\"100%\">\r\n            <textarea matInput\r\n                      rows=\"2\"\r\n                      maxlength=\"4000\"\r\n                      [formControl]=\"internalMemorandumCtrl\"\r\n                      (keypress)=\"customValidation($event)\"\r\n                      class=\"fxDeal-input-fields\"></textarea>\r\n            <mat-icon class=\"validIcon\"\r\n                      *ngIf=\"internalMemorandumCtrl.valid && (internalMemorandumCtrl.value)\">\r\n                check_circle</mat-icon>\r\n        </mat-form-field>\r\n\r\n    </mat-card-content>\r\n\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/fx-deals/form-components/internal-memo-form-component/internal-memo-form.component.scss":
/*!*******************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/form-components/internal-memo-form-component/internal-memo-form.component.scss ***!
  \*******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".memo-field {\n  width: 1150px; }\n"

/***/ }),

/***/ "./Client/app/trading/components/fx-deals/form-components/internal-memo-form-component/internal-memo-form.component.ts":
/*!*****************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/form-components/internal-memo-form-component/internal-memo-form.component.ts ***!
  \*****************************************************************************************************************************/
/*! exports provided: InternalMemoFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InternalMemoFormComponent", function() { return InternalMemoFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var InternalMemoFormComponent = /** @class */ (function (_super) {
    __extends(InternalMemoFormComponent, _super);
    function InternalMemoFormComponent(formConfigurationProvider, formBuilder) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.formBuilder = formBuilder;
        _this.internalMemorandumCtrl = new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"]('');
        return _this;
    }
    InternalMemoFormComponent.prototype.ngOnInit = function () {
    };
    InternalMemoFormComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            internalMemorandumCtrl: this.internalMemorandumCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    InternalMemoFormComponent.prototype.initForm = function (fxDealDetail, isEdit) {
        if (fxDealDetail) {
            this.internalMemorandumCtrl.patchValue(fxDealDetail.memorandum);
            if (!isEdit) {
                this.disableFields();
            }
        }
        this.setValidators();
    };
    InternalMemoFormComponent.prototype.disableFields = function () {
        this.internalMemorandumCtrl.disable();
    };
    InternalMemoFormComponent.prototype.populateEntity = function (model) {
        model.memorandum = this.internalMemorandumCtrl.value;
    };
    InternalMemoFormComponent.prototype.setValidators = function () {
        this.internalMemorandumCtrl.setValidators([_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].maxLength(4000)]);
    };
    InternalMemoFormComponent.prototype.customValidation = function (event) {
        var pattern = /[\\;,\r|\n]/;
        var inputChar = String.fromCharCode(event.charCode);
        if (pattern.test(inputChar)) {
            event.preventDefault();
        }
    };
    InternalMemoFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-internal-memo-form',
            template: __webpack_require__(/*! ./internal-memo-form.component.html */ "./Client/app/trading/components/fx-deals/form-components/internal-memo-form-component/internal-memo-form.component.html"),
            styles: [__webpack_require__(/*! ./internal-memo-form.component.scss */ "./Client/app/trading/components/fx-deals/form-components/internal-memo-form-component/internal-memo-form.component.scss")]
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_2__["FormConfigurationProviderService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"]])
    ], InternalMemoFormComponent);
    return InternalMemoFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/fx-deals/form-components/rate-entry-form-component/rate-entry-form.component.html":
/*!*************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/form-components/rate-entry-form-component/rate-entry-form.component.html ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"fx-deals-capture Deal terms details\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h2>Rate Entry</h2>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"1%\"\r\n             class=\"rate-form-field\">\r\n            <div fxFlex=\"25%\">\r\n\r\n                <atlas-form-input [fieldControl]=\"spotROECtrl\"\r\n                                  [required]=\"spotROECtrl.isRequired\"\r\n                                  [textMask]=\"{mask:mask}\"\r\n                                  label=\"Spot ROE\"\r\n                                  [errorMap]=\"spotRoeErrorMap\"\r\n                                  [isEditable]=\"spotROECtrl.enabled\"\r\n                                  [hasWarning]=\"isWarningDisplay\"\r\n                                  warningMessage=\"Warning ! The Spot ROE value presents a difference\r\n                                  with the FX rate for this currency\"\r\n                                  (blur)=\"onTradedROECalculation()\">\r\n                </atlas-form-input>\r\n            </div>\r\n            <div fxFlex=\"25%\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"F/W Points\"\r\n                           [textMask]=\"{mask:mask}\"\r\n                           autocomplete=\"off\"\r\n                           [formControl]=\"fwPointsCtrl\"\r\n                           (blur)=\"onTradedROECalculation()\">\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"15%\"\r\n                 class=\"custom-form\"\r\n                 [class.required-field]=\"mdCtrl.isRequired\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"M/D\"\r\n                           [required]=\"mdCtrl.isRequired\"\r\n                           [matAutocomplete]=\"roeTypes\"\r\n                           [formControl]=\"mdCtrl\"\r\n                           autocomplete=\"off\"\r\n                           (blur)=\"onSettledAmountCalculation($event.target.value)\"\r\n                           [matTooltip]=\"'M/D'\">\r\n                    <mat-autocomplete #roeTypes=\"matAutocomplete\"\r\n                                      [panelWidth]=\"panelSize\"\r\n                                      [displayWith]=\"displayMD.bind(this)\">\r\n                        <mat-option *ngFor=\"let roeType of filteredRoeTypes\"\r\n                                    [value]=\"roeType.code\">\r\n                            {{roeType.code}} | {{roeType.description}}\r\n                        </mat-option>\r\n                    </mat-autocomplete>\r\n                    <mat-error *ngIf=\"mdCtrl.hasError('required')\">\r\n                        This field is required\r\n                    </mat-error>\r\n                    <mat-error *ngIf=\"mdCtrl.hasError('inDropdownList')\">\r\n                        Value not in list\r\n                    </mat-error>\r\n                    <mat-hint *ngIf=\"mdCtrl.isRequired && mdCtrl.enabled\">\r\n                        Required *\r\n                    </mat-hint>\r\n                </mat-form-field>\r\n            </div>\r\n            <div fxFlex=\"25%\"\r\n                 [hidden]=\"ndfChange\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"NDF Agreed rate\"\r\n                           [textMask]=\"{mask:mask}\"\r\n                           autocomplete=\"off\"\r\n                           [formControl]=\"ndfAgreedRateCtrl\"\r\n                           (blur)=\"onTradedROECalculation()\">\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"1%\">\r\n            <div fxFlex=\"30%\">\r\n                <atlas-masterdata-user-preferences-input class=\"contextual-search-for-control\"\r\n                                                         isEditable=\"true\"\r\n                                                         [fieldControl]=\"dealNominalAccountCtrl\"\r\n                                                         label=\"Nominal account (Deal)\"\r\n                                                         [options]=\"filteredDealtNominalAccounts\"\r\n                                                         displayProperty=\"accountNumber\"\r\n                                                         [errorMap]=\"dealNominalAccountErrorMap\"\r\n                                                         [selectProperties]=\"['accountNumber','mainAccountTitle']\"\r\n                                                         lightBoxTitle=\"Results for DealNominal Account\"\r\n                                                         gridId=\"nominalAccountsGrid\">\r\n\r\n                </atlas-masterdata-user-preferences-input>\r\n            </div>\r\n            <div fxFlex=\"30%\">\r\n                <atlas-masterdata-user-preferences-input class=\"contextual-search-for-control\"\r\n                                                         isEditable=\"true\"\r\n                                                         [fieldControl]=\"settledNominalAccountCtrl\"\r\n                                                         [options]=\"filteredSettledNominalAccounts\"\r\n                                                         label=\"Nominal account (Settlement)\"\r\n                                                         displayProperty=\"accountNumber\"\r\n                                                         [errorMap]=\"settledNominalAccountErrorMap\"\r\n                                                         [selectProperties]=\"['accountNumber','mainAccountTitle']\"\r\n                                                         lightBoxTitle=\"Results for SettledNominal Account\"\r\n                                                         gridId=\"nominalAccountsGrid\">\r\n                </atlas-masterdata-user-preferences-input>\r\n            </div>\r\n            <div fxFlex=\"25%\"\r\n                 [hidden]=\"ndfChange\"\r\n                 class=\"custom-form\">\r\n                <atlas-date-picker fxFlex=\"100%\"\r\n                                   label=\"NDF Agreed Date\"\r\n                                   [fieldControl]=\"ndfAgreedDateCtrl\">\r\n                </atlas-date-picker>\r\n            </div>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/fx-deals/form-components/rate-entry-form-component/rate-entry-form.component.scss":
/*!*************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/form-components/rate-entry-form-component/rate-entry-form.component.scss ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".rate-form-field {\n  margin-bottom: 32px; }\n"

/***/ }),

/***/ "./Client/app/trading/components/fx-deals/form-components/rate-entry-form-component/rate-entry-form.component.ts":
/*!***********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/form-components/rate-entry-form-component/rate-entry-form.component.ts ***!
  \***********************************************************************************************************************/
/*! exports provided: RateEntryComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RateEntryComponent", function() { return RateEntryComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/directives/autocomplete-dropdown.directive */ "./Client/app/shared/directives/autocomplete-dropdown.directive.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_enums_spot_roe_type_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/enums/spot-roe-type.enum */ "./Client/app/shared/enums/spot-roe-type.enum.ts");
/* harmony import */ var _shared_numberMask__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/numberMask */ "./Client/app/shared/numberMask.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_configuration_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/services/http-services/configuration.service */ "./Client/app/shared/services/http-services/configuration.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











var RateEntryComponent = /** @class */ (function (_super) {
    __extends(RateEntryComponent, _super);
    function RateEntryComponent(utilService, formBuilder, route, formConfigurationProvider, configurationService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.utilService = utilService;
        _this.formBuilder = formBuilder;
        _this.route = route;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.configurationService = configurationService;
        _this.spotROECtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('SpotROE');
        _this.fwPointsCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('FwPoints');
        _this.mdCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('Md');
        _this.dealNominalAccountCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('DealNominalAccount');
        _this.settledNominalAccountCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('SettledNominalAccount');
        _this.ndfAgreedRateCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('NdfAgreedRate');
        _this.ndfAgreedDateCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('NdfAgreedDate');
        _this.mask = Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_7__["FourDigitsDecimalNegativeNumberMask"])();
        _this.isWarningDisplay = false;
        _this.ndfChange = true;
        _this.valueSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.roeTypeSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.settledAmountValuePassed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.dealNominalAccountErrorMap = new Map()
            .set('required', 'Required *')
            .set('inDropdownList', 'Invalid entry. Department not in the list or not authorized.');
        _this.settledNominalAccountErrorMap = new Map()
            .set('required', 'Required *')
            .set('inDropdownList', 'Invalid entry. Department not in the list or not authorized.');
        _this.spotRoeErrorMap = new Map()
            .set('required', 'Required *');
        return _this;
    }
    RateEntryComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.ndfAgreedDateCtrl.disable();
        this.masterdata = this.route.snapshot.data.masterdata;
        this.filteredNominalAccounts = this.masterdata.nominalAccounts.filter(function (e) { return e.bankAccount === true; });
        this.filteredNominalAccounts = this.filteredNominalAccounts.map(function (nominal) {
            nominal.accountNumber = nominal.accountNumber;
            nominal.mainAccountTitle = nominal.shortDescription;
            return nominal;
        });
        this.company = this.route.snapshot.paramMap.get('company');
        this.filteredSettledNominalAccounts = this.filteredNominalAccounts;
        this.filteredDealtNominalAccounts = this.filteredNominalAccounts;
        this.getRoeTypes();
        this.filteredRoeTypes = this.roeTypes;
        this.mdCtrl.valueChanges.subscribe(function (input) {
            _this.filteredRoeTypes =
                _this.utilService.filterListforAutocomplete(input, _this.roeTypes, ['code', 'description']);
        });
        this.dealNominalAccountCtrl.valueChanges.subscribe(function (input) {
            _this.filteredDealtNominalAccounts = _this.utilService.filterListforAutocomplete(input, _this.filteredNominalAccounts, ['accountNumber', 'mainAccountTitle']);
        });
        this.settledNominalAccountCtrl.valueChanges.subscribe(function (input) {
            _this.filteredSettledNominalAccounts = _this.utilService.filterListforAutocomplete(input, _this.filteredNominalAccounts, ['accountNumber', 'mainAccountTitle']);
        });
        this.filteredCompany = this.masterdata.companies;
        this.setValidators();
        if (this.route.snapshot.data.isCreate) {
            this.getDefaultNominalAccount();
        }
    };
    RateEntryComponent.prototype.getDefaultNominalAccount = function () {
        var _this = this;
        this.configurationService.getDefaultAccounting(this.company)
            .subscribe(function (defaultAccountingResult) {
            if (defaultAccountingResult) {
                var dealAccountItem = _this.filteredNominalAccounts.find(function (x) { return x.accountNumber
                    === defaultAccountingResult.dealNominalAccount; });
                var settlementAccountItem = _this.filteredNominalAccounts.find(function (x) { return x.accountNumber
                    === defaultAccountingResult.settlementNominalAccount; });
                _this.defaultNominalAccountDeal = dealAccountItem ? dealAccountItem.accountNumber : null;
                _this.defaultNominalAccountSettlement = settlementAccountItem ? settlementAccountItem.accountNumber : null;
                _this.dealNominalAccountCtrl.setValue(_this.defaultNominalAccountDeal);
                _this.settledNominalAccountCtrl.setValue(_this.defaultNominalAccountSettlement);
            }
        });
    };
    RateEntryComponent.prototype.getRoeTypes = function () {
        this.roeTypes = [];
        var FxDealRoeTypeM = { code: 'M', description: 'M' };
        this.roeTypes.push(FxDealRoeTypeM);
        var FxDealRoeTypeD = { code: 'D', description: 'D' };
        this.roeTypes.push(FxDealRoeTypeD);
    };
    RateEntryComponent.prototype.setValidators = function () {
        this.spotROECtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required);
        this.settledNominalAccountCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required,
            Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_4__["inDropdownListValidator"])(this.masterdata.nominalAccounts, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_10__["nameof"])('accountNumber')),
        ]));
        this.dealNominalAccountCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required,
            Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_4__["inDropdownListValidator"])(this.masterdata.nominalAccounts, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_10__["nameof"])('accountNumber')),
        ]));
        this.mdCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required,
            Object(_shared_directives_autocomplete_dropdown_directive__WEBPACK_IMPORTED_MODULE_4__["inDropdownListValidator"])(this.roeTypes, Object(_shared_services_util_service__WEBPACK_IMPORTED_MODULE_10__["nameof"])('code')),
        ]));
    };
    RateEntryComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            dealNominalAccountCtrl: this.dealNominalAccountCtrl,
            fwPointsCtrl: this.fwPointsCtrl,
            mdCtrl: this.mdCtrl,
            spotROECtrl: this.spotROECtrl,
            settledNominalAccountCtrl: this.settledNominalAccountCtrl,
            ndfAgreedRateCtrl: this.ndfAgreedRateCtrl,
            ndfAgreedDateCtrl: this.ndfAgreedDateCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    RateEntryComponent.prototype.initForm = function (fxDealDetail, isEdit) {
        if (fxDealDetail) {
            if (!isEdit) {
                this.disableFields();
            }
            this.spotROECtrl.patchValue(fxDealDetail.spotRate);
            this.fwPointsCtrl.patchValue(fxDealDetail.fwPoints);
            this.ndfAgreedRateCtrl.patchValue(fxDealDetail.ndfAgreedRate);
            this.ndfAgreedDateCtrl.patchValue(fxDealDetail.ndfAgreedDate);
            this.mdCtrl.patchValue(fxDealDetail.spotRateType);
            if (fxDealDetail.spotRate) {
                var spotROEValue = this.getFinalValue(fxDealDetail.spotRate.toString());
                var fwPointsValue = this.getFinalValue(fxDealDetail.fwPoints.toString());
                var amountValue = this.getFinalValue(fxDealDetail.amount.toString());
                this.tradedROEValue = spotROEValue + fwPointsValue;
                if (this.tradedROEValue) {
                    this.valueSelected.emit(this.tradedROEValue);
                    if (fxDealDetail.amount && fxDealDetail.spotRateType) {
                        if (fxDealDetail.spotRateType === _shared_enums_spot_roe_type_enum__WEBPACK_IMPORTED_MODULE_6__["SpotRoeType"].Division) {
                            this.settledAmount = amountValue / this.tradedROEValue;
                        }
                        else {
                            this.settledAmount = amountValue * this.tradedROEValue;
                        }
                        this.settledAmountValuePassed.emit(this.settledAmount);
                    }
                }
            }
            if (fxDealDetail.nominalAccountId) {
                var nominalAccount = this.filteredNominalAccounts.find(function (value) { return value.nominalAccountId === fxDealDetail.nominalAccountId; }).accountNumber;
                if (nominalAccount) {
                    this.dealNominalAccountCtrl.patchValue(nominalAccount);
                }
            }
            if (fxDealDetail.settlementNominalAccountId) {
                var settlementAccount = this.filteredSettledNominalAccounts.find(function (value) { return value.nominalAccountId === fxDealDetail.settlementNominalAccountId; }).accountNumber;
                if (settlementAccount) {
                    this.settledNominalAccountCtrl.patchValue(settlementAccount);
                }
            }
        }
    };
    RateEntryComponent.prototype.disableFields = function () {
        this.spotROECtrl.disable();
        this.fwPointsCtrl.disable();
        this.ndfAgreedRateCtrl.disable();
        this.ndfAgreedDateCtrl.disable();
        this.mdCtrl.disable();
        this.dealNominalAccountCtrl.disable();
        this.settledNominalAccountCtrl.disable();
    };
    RateEntryComponent.prototype.populateEntity = function (model) {
        model.spotRate = this.spotROECtrl.value;
        model.spotRateType = this.mdCtrl.value;
        model.fwPoints = this.fwPointsCtrl.value;
        if (!model.fwPoints) {
            model.fwPoints = 0;
        }
        model.ndfAgreedRate = this.ndfAgreedRateCtrl.value;
        model.ndfAgreedDate = this.ndfAgreedDateCtrl.value;
        if (!model.isEditMode) {
            if (this.dealNominalAccountCtrl.value.accountNumber) {
                model.nominalAccountId = this.getAccountId(this.dealNominalAccountCtrl.value.accountNumber);
            }
            else {
                model.nominalAccountId = this.getAccountId(this.dealNominalAccountCtrl.value);
            }
            if (this.settledNominalAccountCtrl.value.accountNumber) {
                model.settlementNominalAccountId = this.getAccountId(this.settledNominalAccountCtrl.value.accountNumber);
            }
            else {
                model.settlementNominalAccountId = this.getAccountId(this.settledNominalAccountCtrl.value);
            }
        }
        else {
            if (this.dealNominalAccountCtrl.value.accountNumber) {
                model.nominalAccountId = this.getAccountId(this.dealNominalAccountCtrl.value.accountNumber);
            }
            else {
                model.nominalAccountId = this.getAccountId(this.dealNominalAccountCtrl.value);
            }
            if (this.settledNominalAccountCtrl.value.accountNumber) {
                model.settlementNominalAccountId = this.getAccountId(this.settledNominalAccountCtrl.value.accountNumber);
            }
            else {
                model.settlementNominalAccountId = this.getAccountId(this.settledNominalAccountCtrl.value);
            }
        }
    };
    RateEntryComponent.prototype.getAccountId = function (code) {
        var selectedId = this.masterdata.nominalAccounts.find(function (accountId) { return accountId.accountNumber === code; });
        if (selectedId) {
            return selectedId.nominalAccountId;
        }
        return null;
    };
    RateEntryComponent.prototype.displayMD = function (code) {
        if (code) {
            var selectedMD = this.filteredRoeTypes.find(function (md) { return md.code === code; });
            if (selectedMD) {
                return selectedMD.description;
            }
        }
        return '';
    };
    RateEntryComponent.prototype.onTradedROECalculation = function () {
        if (this.spotROECtrl.value) {
            var spotRoeValue = this.getFinalValue(this.spotROECtrl.value);
            this.checkWarningMessage(spotRoeValue);
            if (!this.fwPointsCtrl.value) {
                this.tradedROEValue = spotRoeValue;
            }
            else {
                var fwPointsValue = this.getFinalValue(this.fwPointsCtrl.value);
                this.tradedROEValue = spotRoeValue + fwPointsValue;
            }
            this.valueSelected.emit(this.tradedROEValue);
        }
    };
    RateEntryComponent.prototype.onSettledAmountCalculation = function (targetValue) {
        if (this.mdCtrl.valid) {
            this.roeTypeSelected.emit(targetValue);
        }
    };
    RateEntryComponent.prototype.checkWarningMessage = function (spotRoeValue) {
        if (spotRoeValue && this.fxRateValue) {
            var value = spotRoeValue - this.fxRateValue;
            if (value < 0) {
                value = Math.abs(value);
            }
            var fxRate = 0.05 * this.fxRateValue;
            this.isWarningDisplay = false;
            if (value > fxRate) {
                this.isWarningDisplay = true;
            }
        }
    };
    RateEntryComponent.prototype.getFinalValue = function (value) {
        if (typeof (value) === 'string' && value.indexOf(',') > 0) {
            return Number(value.replace(/,/g, ''));
        }
        if (typeof (value) === 'string' && value.indexOf('_') > 0) {
            return Number(value.replace('_', ''));
        }
        return Number(value);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], RateEntryComponent.prototype, "valueSelected", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], RateEntryComponent.prototype, "roeTypeSelected", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], RateEntryComponent.prototype, "settledAmountValuePassed", void 0);
    RateEntryComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-rate-entry',
            template: __webpack_require__(/*! ./rate-entry-form.component.html */ "./Client/app/trading/components/fx-deals/form-components/rate-entry-form-component/rate-entry-form.component.html"),
            styles: [__webpack_require__(/*! ./rate-entry-form.component.scss */ "./Client/app/trading/components/fx-deals/form-components/rate-entry-form-component/rate-entry-form.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_util_service__WEBPACK_IMPORTED_MODULE_10__["UtilService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_8__["FormConfigurationProviderService"],
            _shared_services_http_services_configuration_service__WEBPACK_IMPORTED_MODULE_9__["ConfigurationService"]])
    ], RateEntryComponent);
    return RateEntryComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/fx-deals/form-components/settlement-documents-component/settlement-documents.component.html":
/*!***********************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/form-components/settlement-documents-component/settlement-documents.component.html ***!
  \***********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"fx-deals-capture Bank details\">\r\n    <mat-card-header>\r\n        <mat-card-title>\r\n            <h2>Settlement Documents</h2>\r\n        </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n        <div fxLayout=\"column\"\r\n             fxLayoutAlign=\"space-around start\">\r\n            <div fxLayout=\"row\"\r\n                 fxLayoutAlign=\"left start\"\r\n                 fxLayoutGap=\"1%\"\r\n                 *ngIf=\"isShow\"\r\n                 fxFlex=\"100%\">\r\n                <div fxFlex=\"10%\"\r\n                     class=\"min-wid-65\">\r\n                    <mat-form-field *ngIf=\"isfxDealSettled\">\r\n                        <input matInput\r\n                               class=\"fxdeal-settlement-card\"\r\n                               [formControl]=\"fjDealDocumentReferenceCtrl\"\r\n                               (click)=\"onFJDocumentReferenceCtrlClicked()\"\r\n                               readonly>\r\n                    </mat-form-field>\r\n                </div>\r\n\r\n                <div fxLayout=\"row\"\r\n                     fxLayoutAlign=\"start center\"\r\n                     fxFlex=\"60%\"\r\n                     *ngIf=isReversedFJ>\r\n                    <div class=\"reversal-by\">\r\n                        <span>Reversed by </span>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field>\r\n                            <input matInput\r\n                                   class=\"fxdeal-settlement-card\"\r\n                                   [formControl]=\"fjDealReverseDocumentReferenceCtrl\"\r\n                                   (click)=\"onFJDealDocumentReverseReferenceCtrlClicked()\"\r\n                                   readonly>\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div fxLayout=\"row\"\r\n                 fxLayoutAlign=\"left start\"\r\n                 fxLayoutGap=\"1%\"\r\n                 *ngIf=\"isShow\"\r\n                 fxFlex=\"100%\">\r\n                <div fxFlex=\"10%\"\r\n                     class=\"min-wid-65\">\r\n                    <mat-form-field *ngIf=\"isfxDealSettled\">\r\n                        <input matInput\r\n                               class=\"fxdeal-settlement-card\"\r\n                               [formControl]=\"fjSettlementDocumentReferenceCtrl\"\r\n                               (click)=\"onFJSettlementDocumentReferenceCtrlClicked()\"\r\n                               readonly>\r\n                    </mat-form-field>\r\n                </div>\r\n                <div fxLayout=\"row\"\r\n                     fxLayoutAlign=\"start center\"\r\n                     fxFlex=\"60%\"\r\n                     *ngIf=isReversedFJ>\r\n                    <div class=\"reversal-by\">\r\n                        <span>Reversed by </span>\r\n                    </div>\r\n                    <div>\r\n                        <mat-form-field>\r\n                            <input matInput\r\n                                   class=\"fxdeal-settlement-card\"\r\n                                   [formControl]=\"fjSettlementReverseDocumentReferenceCtrl\"\r\n                                   (click)=\"onfJSettlementReverseDocumentReferenceCtrlClicked()\"\r\n                                   readonly>\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/fx-deals/form-components/settlement-documents-component/settlement-documents.component.scss":
/*!***********************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/form-components/settlement-documents-component/settlement-documents.component.scss ***!
  \***********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".fxdeal-settlement-card {\n  color: #0000EE;\n  text-decoration: underline;\n  cursor: pointer; }\n\n:host ::ng-deep .mat-form-field-appearance-legacy .mat-form-field-underline {\n  height: 0px !important; }\n\n.reversal-by {\n  margin-bottom: 15px !important;\n  margin-right: 10px !important; }\n\n.min-wid-65 {\n  min-width: 65px; }\n"

/***/ }),

/***/ "./Client/app/trading/components/fx-deals/form-components/settlement-documents-component/settlement-documents.component.ts":
/*!*********************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/form-components/settlement-documents-component/settlement-documents.component.ts ***!
  \*********************************************************************************************************************************/
/*! exports provided: SettlementDocumentsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SettlementDocumentsComponent", function() { return SettlementDocumentsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






var SettlementDocumentsComponent = /** @class */ (function (_super) {
    __extends(SettlementDocumentsComponent, _super);
    function SettlementDocumentsComponent(router, companyManager, route, formConfigurationProvider) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.router = router;
        _this.companyManager = companyManager;
        _this.route = route;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.isShow = false;
        _this.fjDealDocumentReferenceCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('fjDealDocumentReferenceCtrl');
        _this.fjSettlementDocumentReferenceCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('fjSettlementDocumentReferenceCtrl');
        _this.fjDealReverseDocumentReferenceCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('fjDealReverseDocumentReferenceCtrl');
        _this.fjSettlementReverseDocumentReferenceCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('fjSettlementReverseDocumentReferenceCtrl');
        _this.isfxDealSettled = false;
        _this.isReversedFJ = false;
        return _this;
    }
    SettlementDocumentsComponent.prototype.ngOnInit = function () {
        if (this.route.snapshot.data.isView || this.route.snapshot.data.isEdit) {
            this.isShow = true;
        }
    };
    SettlementDocumentsComponent.prototype.onFJDocumentReferenceCtrlClicked = function () {
        var dealDocument = this.dealDocument;
        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/financial/accounting/entries/' + dealDocument]);
    };
    SettlementDocumentsComponent.prototype.onFJSettlementDocumentReferenceCtrlClicked = function () {
        var settlementDocument = this.settlementDocument;
        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/financial/accounting/entries/' + settlementDocument]);
    };
    SettlementDocumentsComponent.prototype.onFJDealDocumentReverseReferenceCtrlClicked = function () {
        var reverseDealDocument = this.reverseDealDocument;
        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/financial/accounting/entries/' + reverseDealDocument]);
    };
    SettlementDocumentsComponent.prototype.onfJSettlementReverseDocumentReferenceCtrlClicked = function () {
        var reverseSettlementDocument = this.reverseSettlementDocument;
        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/financial/accounting/entries/' + reverseSettlementDocument]);
    };
    SettlementDocumentsComponent.prototype.initForm = function (fxDealDetail, isShow) {
        this.fjDealDocumentReferenceCtrl.patchValue(fxDealDetail.fxDealDocument);
        this.dealDocument = fxDealDetail.fxDealDocument;
        this.fjSettlementDocumentReferenceCtrl.patchValue(fxDealDetail.fxSettlementDocument);
        this.settlementDocument = fxDealDetail.fxSettlementDocument;
        this.fjDealReverseDocumentReferenceCtrl.patchValue(fxDealDetail.fxDealReverseDocument);
        this.reverseDealDocument = fxDealDetail.fxDealReverseDocument;
        this.fjSettlementReverseDocumentReferenceCtrl.patchValue(fxDealDetail.fxSettlementReverseDocument);
        this.reverseSettlementDocument = fxDealDetail.fxSettlementReverseDocument;
        if (fxDealDetail.fxSettlementDocumentId && fxDealDetail.fxDealDocumentId) {
            this.isfxDealSettled = true;
        }
        if (fxDealDetail.fxSettlementReverseDocumentId && fxDealDetail.fxDealReverseDocumentId) {
            this.isReversedFJ = true;
        }
    };
    SettlementDocumentsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-settlement-documents',
            template: __webpack_require__(/*! ./settlement-documents.component.html */ "./Client/app/trading/components/fx-deals/form-components/settlement-documents-component/settlement-documents.component.html"),
            styles: [__webpack_require__(/*! ./settlement-documents.component.scss */ "./Client/app/trading/components/fx-deals/form-components/settlement-documents-component/settlement-documents.component.scss")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_3__["CompanyManagerService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_4__["FormConfigurationProviderService"]])
    ], SettlementDocumentsComponent);
    return SettlementDocumentsComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/fx-deals/fx-deals.component.html":
/*!************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/fx-deals.component.html ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"main-container\"\r\n     fxLayout=\"column\"\r\n     fxLayoutAlign=\"start none\">\r\n    <mat-card>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"start none\"\r\n             class=\"search\">\r\n            <mat-form-field>\r\n                <input matInput\r\n                       [formControl]=\"dealCtrl\"\r\n                       placeholder=\"Deal N°\"\r\n                       (keydown.enter)=\"onQuickSearchButtonClicked()\"\r\n                       #message>\r\n            </mat-form-field>\r\n            <button mat-raised-button\r\n                    (click)=\"onQuickSearchButtonClicked()\"\r\n                    class=\"heroGradient\">\r\n                <mat-icon aria-label=\"Search\"\r\n                          class=\"search-icon\">search</mat-icon>\r\n            </button>\r\n        </div>\r\n    </mat-card>\r\n    <atlas-list-and-search class=\"default-height\"\r\n                           [gridCode]=\"gridCode\"\r\n                           [gridTitle]=\"'FX Deals'\"\r\n                           [additionalFilters]=\"additionalFilters\"\r\n                           [company]=\"company\"\r\n                           [dataLoader]=\"dataLoader\"\r\n                           (rowClicked)=\"onFxDealClicked($event)\"\r\n                           [dataVersionId]=\"dataVersionId\"\r\n                           #listAndSearchComponent>\r\n    </atlas-list-and-search>\r\n\r\n    <div fxLayout=\"row\"\r\n         fxLayout.md=\"column\"\r\n         fxLayoutAlign=\"end\"\r\n         fxFlex=\"50%\">\r\n        <button mat-raised-button\r\n                class=\"fab-text-button\"\r\n                color=\"accent\"\r\n                [matMenuTriggerFor]=\"menu\">\r\n            <mat-icon class=\"material-icons\">add</mat-icon>\r\n            FX DEALS ACTIONS\r\n        </button>\r\n        <mat-menu #menu=\"matMenu\"\r\n                  class=\"floating-menu has-header\">\r\n            <button mat-menu-item\r\n                    class=\"menu-header\"\r\n                    disabled=true>\r\n                <mat-icon class=\"material-icons\">add</mat-icon>\r\n                <span>FX DEALS ACTIONS</span>\r\n            </button>\r\n            <button *ifAuthorized=\"'Trades.FxDeals.CreateEditFxDeal',company:this.company\"\r\n                    mat-menu-item\r\n                    (click)=\"onCreateFxDealButtonClicked()\">\r\n                <mat-icon class=\"material-icons\">add</mat-icon>\r\n                Create FX Deal\r\n            </button>\r\n            <button mat-menu-item>\r\n                <mat-icon class=\"material-icons\">favorite</mat-icon>\r\n                Favourites FX Deals\r\n            </button>\r\n            <button mat-menu-item>\r\n                <mat-icon class=\"material-icons\">bar_chart</mat-icon>\r\n                FX Deals Report\r\n            </button>\r\n        </mat-menu>\r\n    </div>\r\n</div>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/fx-deals/fx-deals.component.scss":
/*!************************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/fx-deals.component.scss ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".mat-raised-button.fab-text-button {\n  top: -10px !important;\n  height: 50px !important; }\n\n.menu-header {\n  background-color: #53c234;\n  color: white; }\n\n.menu-header mat-icon {\n    color: white; }\n"

/***/ }),

/***/ "./Client/app/trading/components/fx-deals/fx-deals.component.ts":
/*!**********************************************************************!*\
  !*** ./Client/app/trading/components/fx-deals/fx-deals.component.ts ***!
  \**********************************************************************/
/*! exports provided: FxDealsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FxDealsComponent", function() { return FxDealsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_entities_list_and_search_list_and_search_filter_entity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../shared/entities/list-and-search/list-and-search-filter.entity */ "./Client/app/shared/entities/list-and-search/list-and-search-filter.entity.ts");
/* harmony import */ var _shared_services_list_and_search_fxDeal_data_loader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../shared/services/list-and-search/fxDeal-data-loader */ "./Client/app/shared/services/list-and-search/fxDeal-data-loader.ts");
/* harmony import */ var _shared_components_list_and_search_list_and_search_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../../../shared/components/list-and-search/list-and-search.component */ "./Client/app/shared/components/list-and-search/list-and-search.component.ts");
/* harmony import */ var _shared_enums_list_and_search_filter_type_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../../../shared/enums/list-and-search-filter-type.enum */ "./Client/app/shared/enums/list-and-search-filter-type.enum.ts");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








var FxDealsComponent = /** @class */ (function () {
    function FxDealsComponent(route, dataLoader, companyManager, router) {
        this.route = route;
        this.dataLoader = dataLoader;
        this.companyManager = companyManager;
        this.router = router;
        this.dealCtrl = new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"]();
        this.gridCode = 'fxDealList';
        this.additionalFilters = [];
    }
    FxDealsComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
        this.dataVersionId = this.route.snapshot.paramMap.get('dataVersionId') ?
            Number(this.route.snapshot.paramMap.get('dataVersionId')) : null;
    };
    FxDealsComponent.prototype.onQuickSearchButtonClicked = function () {
        var DealNumberField = this.listAndSearchComponent.columnConfiguration
            .find(function (column) { return column.fieldName === 'DealNumber'; });
        if (!this.dealCtrl.value || !this.listAndSearchComponent ||
            !DealNumberField) {
            return;
        }
        var filter = new _shared_entities_list_and_search_list_and_search_filter_entity__WEBPACK_IMPORTED_MODULE_3__["ListAndSearchFilter"]();
        filter.fieldId = DealNumberField.fieldId;
        filter.fieldName = DealNumberField.fieldName;
        filter.predicate = {
            filterType: _shared_enums_list_and_search_filter_type_enum__WEBPACK_IMPORTED_MODULE_6__["ListAndSearchFilterType"].Text,
            operator: 'eq',
            value1: this.dealCtrl.value + '%',
        };
        filter.isActive = true;
        this.additionalFilters = [filter];
        this.listAndSearchComponent.additionalFilters = this.additionalFilters;
        this.listAndSearchComponent.loadData(true);
    };
    FxDealsComponent.prototype.onCreateFxDealButtonClicked = function () {
        this.router.navigate([this.companyManager.getCurrentCompanyId() + '/trades/fxdeal/capture']);
    };
    FxDealsComponent.prototype.onFxDealClicked = function (event) {
        this.router.navigate([this.companyManager.getCurrentCompanyId() + '/trades/fxdeal/display/' + event.data.fxDealId]);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('listAndSearchComponent'),
        __metadata("design:type", _shared_components_list_and_search_list_and_search_component__WEBPACK_IMPORTED_MODULE_5__["ListAndSearchComponent"])
    ], FxDealsComponent.prototype, "listAndSearchComponent", void 0);
    FxDealsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-fx-deals',
            template: __webpack_require__(/*! ./fx-deals.component.html */ "./Client/app/trading/components/fx-deals/fx-deals.component.html"),
            styles: [__webpack_require__(/*! ./fx-deals.component.scss */ "./Client/app/trading/components/fx-deals/fx-deals.component.scss")],
            providers: [_shared_services_list_and_search_fxDeal_data_loader__WEBPACK_IMPORTED_MODULE_4__["FxDealDataLoader"]],
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _shared_services_list_and_search_fxDeal_data_loader__WEBPACK_IMPORTED_MODULE_4__["FxDealDataLoader"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_7__["CompanyManagerService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"]])
    ], FxDealsComponent);
    return FxDealsComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/group-amendments/bulk-allocation/bulk-allocation.component.html":
/*!*******************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-amendments/bulk-allocation/bulk-allocation.component.html ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card *ifAuthorized=\"'Trades.Physicals.AllocateDeallocate',company:company\">\r\n    <mat-card-title>\r\n        <h2>Bulk Allocation</h2>\r\n    </mat-card-title>\r\n    <mat-card-content>\r\n        <div *ngFor=\"let groupFunctionType of groupFunctionTypeMenu\">\r\n            <mat-checkbox #bulkAllocationsCtrl\r\n                          [formControl]=\"bulkAllocationCtrl\"\r\n                          [value]=\"groupFunctionType.functionTypeCode\"\r\n                          (change)=\"onSelectionChange($event,bulkAllocationsCtrl.checked, groupFunctionType)\">\r\n                {{groupFunctionType.name}}\r\n            </mat-checkbox>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/group-amendments/bulk-allocation/bulk-allocation.component.scss":
/*!*******************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-amendments/bulk-allocation/bulk-allocation.component.scss ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/group-amendments/bulk-allocation/bulk-allocation.component.ts":
/*!*****************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-amendments/bulk-allocation/bulk-allocation.component.ts ***!
  \*****************************************************************************************************/
/*! exports provided: BulkAllocationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BulkAllocationComponent", function() { return BulkAllocationComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../shared/enums/group-function-type */ "./Client/app/shared/enums/group-function-type.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var BulkAllocationComponent = /** @class */ (function (_super) {
    __extends(BulkAllocationComponent, _super);
    function BulkAllocationComponent(formConfigurationProvider, route, formBuilder) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.route = route;
        _this.formBuilder = formBuilder;
        _this.bulkAllocationOptionChecked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.bulkAllocationCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('bulkAllocationType');
        _this.groupFunctionTypeMenu = [];
        return _this;
    }
    BulkAllocationComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
        this.groupFunctionTypeMenu = this.groupFunctionTypeMenu.filter(function (functionType) { return functionType.functionTypeCode === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_6__["GroupFunctionTypes"].TradeBulkAllocation; });
    };
    BulkAllocationComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            bulkAllocationCtrl: this.bulkAllocationCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    BulkAllocationComponent.prototype.onSelectionChange = function ($event, value, groupFunctionType) {
        this.bulkAllocationOptionChecked.emit({
            bulkAllocationOption: Number(groupFunctionType.functionTypeCode),
            checked: Boolean(value),
        });
    };
    BulkAllocationComponent.prototype.bulkAllocationOptionDisable = function () {
        this.bulkAllocationCtrl.disable();
    };
    BulkAllocationComponent.prototype.bulkAllocationOptionEnable = function () {
        this.bulkAllocationCtrl.enable();
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], BulkAllocationComponent.prototype, "bulkAllocationOptionChecked", void 0);
    BulkAllocationComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-bulk-allocation',
            template: __webpack_require__(/*! ./bulk-allocation.component.html */ "./Client/app/trading/components/group-amendments/bulk-allocation/bulk-allocation.component.html"),
            styles: [__webpack_require__(/*! ./bulk-allocation.component.scss */ "./Client/app/trading/components/group-amendments/bulk-allocation/bulk-allocation.component.scss")]
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_2__["FormConfigurationProviderService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"]])
    ], BulkAllocationComponent);
    return BulkAllocationComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-amendments/bulk-approval/bulk-approval.component.html":
/*!***************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-amendments/bulk-approval/bulk-approval.component.html ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card *ifAuthorized=\"'Trades.GroupFunctions.BulkApproval',company:this.company\">\r\n    <mat-card-title>\r\n        <h2>Bulk Approval</h2>\r\n    </mat-card-title>\r\n    <mat-card-content>\r\n        <div *ngFor=\"let groupFunctionType of groupFunctionTypeMenu\">\r\n            <mat-checkbox #bulkApproveCtrl\r\n                          [formControl]=\"bulkApprovalCtrl\"\r\n                          [value]=\"groupFunctionType.functionTypeCode\"\r\n                          (change)=\"onSelectionChange($event,bulkApproveCtrl.checked, groupFunctionType)\">\r\n                {{groupFunctionType.name}}\r\n            </mat-checkbox>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/group-amendments/bulk-approval/bulk-approval.component.scss":
/*!***************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-amendments/bulk-approval/bulk-approval.component.scss ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/group-amendments/bulk-approval/bulk-approval.component.ts":
/*!*************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-amendments/bulk-approval/bulk-approval.component.ts ***!
  \*************************************************************************************************/
/*! exports provided: BulkApprovalComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BulkApprovalComponent", function() { return BulkApprovalComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../shared/enums/group-function-type */ "./Client/app/shared/enums/group-function-type.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var BulkApprovalComponent = /** @class */ (function (_super) {
    __extends(BulkApprovalComponent, _super);
    function BulkApprovalComponent(formConfigurationProvider, route, formBuilder) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.route = route;
        _this.formBuilder = formBuilder;
        _this.bulkApprovalOptionChecked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.bulkApprovalCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('bulkApprovalType');
        _this.groupFunctionTypeMenu = [];
        return _this;
    }
    BulkApprovalComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
        this.groupFunctionTypeMenu = this.groupFunctionTypeMenu.filter(function (functionType) { return functionType.functionTypeCode === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_5__["GroupFunctionTypes"].TradeBulkApproval; });
    };
    BulkApprovalComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            bulkApprovalCtrl: this.bulkApprovalCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    BulkApprovalComponent.prototype.onSelectionChange = function ($event, value, groupFunctionType) {
        this.bulkApprovalOptionChecked.emit({
            bulkApprovalOption: Number(groupFunctionType.functionTypeCode),
            checked: Boolean(value),
        });
    };
    BulkApprovalComponent.prototype.bulkApprovalOptionDisable = function () {
        this.bulkApprovalCtrl.disable();
    };
    BulkApprovalComponent.prototype.bulkApprovalOptionEnable = function () {
        this.bulkApprovalCtrl.enable();
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], BulkApprovalComponent.prototype, "bulkApprovalOptionChecked", void 0);
    BulkApprovalComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-bulk-approval',
            template: __webpack_require__(/*! ./bulk-approval.component.html */ "./Client/app/trading/components/group-amendments/bulk-approval/bulk-approval.component.html"),
            styles: [__webpack_require__(/*! ./bulk-approval.component.scss */ "./Client/app/trading/components/group-amendments/bulk-approval/bulk-approval.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationProviderService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"]])
    ], BulkApprovalComponent);
    return BulkApprovalComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-amendments/bulk-closure/bulk-closure.component.html":
/*!*************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-amendments/bulk-closure/bulk-closure.component.html ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card *ifAuthorized=\"'Trades.Physicals.CloseTrade',company:this.company\">\r\n    <mat-card-title>\r\n        <h2>Bulk Closure</h2>\r\n    </mat-card-title>\r\n    <mat-card-content>\r\n        <div *ngFor=\"let groupFunctionType of groupFunctionTypeMenu\">\r\n            <mat-checkbox #bulkClosureCtrls\r\n                          [formControl]=\"bulkClosureCtrl\"\r\n                          [value]=\"groupFunctionType.functionTypeCode\"\r\n                          (change)=\"onSelectionChange($event,bulkClosureCtrls.checked, groupFunctionType)\">\r\n                {{groupFunctionType.name}}\r\n            </mat-checkbox>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/group-amendments/bulk-closure/bulk-closure.component.scss":
/*!*************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-amendments/bulk-closure/bulk-closure.component.scss ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/group-amendments/bulk-closure/bulk-closure.component.ts":
/*!***********************************************************************************************!*\
  !*** ./Client/app/trading/components/group-amendments/bulk-closure/bulk-closure.component.ts ***!
  \***********************************************************************************************/
/*! exports provided: BulkClosureComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BulkClosureComponent", function() { return BulkClosureComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../shared/enums/group-function-type */ "./Client/app/shared/enums/group-function-type.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var BulkClosureComponent = /** @class */ (function (_super) {
    __extends(BulkClosureComponent, _super);
    function BulkClosureComponent(formConfigurationProvider, route, formBuilder) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.route = route;
        _this.formBuilder = formBuilder;
        _this.bulkClosureOptionChecked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.bulkClosureCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('bulkClosureType');
        _this.groupFunctionTypeMenu = [];
        return _this;
    }
    BulkClosureComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
        this.groupFunctionTypeMenu = this.groupFunctionTypeMenu.filter(function (functionType) { return functionType.functionTypeCode === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_6__["GroupFunctionTypes"].TradeBulkClosure; });
    };
    BulkClosureComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            bulkClosureCtrl: this.bulkClosureCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    BulkClosureComponent.prototype.onSelectionChange = function ($event, value, groupFunctionType) {
        this.bulkClosureOptionChecked.emit({
            bulkClosureOption: Number(groupFunctionType.functionTypeCode),
            checked: Boolean(value),
        });
    };
    BulkClosureComponent.prototype.bulkClosureOptionDisable = function () {
        this.bulkClosureCtrl.disable();
    };
    BulkClosureComponent.prototype.bulkClosureOptionEnable = function () {
        this.bulkClosureCtrl.enable();
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], BulkClosureComponent.prototype, "bulkClosureOptionChecked", void 0);
    BulkClosureComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-bulk-closure',
            template: __webpack_require__(/*! ./bulk-closure.component.html */ "./Client/app/trading/components/group-amendments/bulk-closure/bulk-closure.component.html"),
            styles: [__webpack_require__(/*! ./bulk-closure.component.scss */ "./Client/app/trading/components/group-amendments/bulk-closure/bulk-closure.component.scss")]
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_5__["FormConfigurationProviderService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"]])
    ], BulkClosureComponent);
    return BulkClosureComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-amendments/bulk-deallocation/bulk-deallocation.component.html":
/*!***********************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-amendments/bulk-deallocation/bulk-deallocation.component.html ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card>\r\n    <mat-card-title>\r\n        <h2>Bulk DeAllocation</h2>\r\n    </mat-card-title>\r\n    <mat-card-content>\r\n        <div *ngFor=\"let groupFunctionType of groupFunctionTypeMenu\">\r\n            <mat-checkbox #bulkDeAllocationsCtrl\r\n                          [formControl]=\"bulkDeAllocationCtrl\"\r\n                          [value]=\"groupFunctionType.functionTypeCode\"\r\n                          (change)=\"onSelectionChange($event,bulkDeAllocationsCtrl.checked, groupFunctionType)\">\r\n                {{groupFunctionType.name}}\r\n            </mat-checkbox>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/group-amendments/bulk-deallocation/bulk-deallocation.component.scss":
/*!***********************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-amendments/bulk-deallocation/bulk-deallocation.component.scss ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/group-amendments/bulk-deallocation/bulk-deallocation.component.ts":
/*!*********************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-amendments/bulk-deallocation/bulk-deallocation.component.ts ***!
  \*********************************************************************************************************/
/*! exports provided: BulkDeallocationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BulkDeallocationComponent", function() { return BulkDeallocationComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../shared/enums/group-function-type */ "./Client/app/shared/enums/group-function-type.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var BulkDeallocationComponent = /** @class */ (function (_super) {
    __extends(BulkDeallocationComponent, _super);
    function BulkDeallocationComponent(formConfigurationProvider, route, formBuilder) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.route = route;
        _this.formBuilder = formBuilder;
        _this.bulkDeAllocationOptionChecked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.bulkDeAllocationCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_1__["AtlasFormControl"]('bulkDeAllocationType');
        _this.groupFunctionTypeMenu = [];
        return _this;
    }
    BulkDeallocationComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
        this.groupFunctionTypeMenu = this.groupFunctionTypeMenu.filter(function (functionType) { return functionType.functionTypeCode === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_6__["GroupFunctionTypes"].TradeBulkDeAllocation; });
    };
    BulkDeallocationComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            bulkDeAllocationCtrl: this.bulkDeAllocationCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    BulkDeallocationComponent.prototype.onSelectionChange = function ($event, value, groupFunctionType) {
        this.bulkDeAllocationOptionChecked.emit({
            bulkDeAllocationOption: Number(groupFunctionType.functionTypeCode),
            checked: Boolean(value),
        });
    };
    BulkDeallocationComponent.prototype.bulkDeAllocationOptionDisable = function () {
        this.bulkDeAllocationCtrl.disable();
    };
    BulkDeallocationComponent.prototype.bulkDeAllocationOptionEnable = function () {
        this.bulkDeAllocationCtrl.enable();
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], BulkDeallocationComponent.prototype, "bulkDeAllocationOptionChecked", void 0);
    BulkDeallocationComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-bulk-deallocation',
            template: __webpack_require__(/*! ./bulk-deallocation.component.html */ "./Client/app/trading/components/group-amendments/bulk-deallocation/bulk-deallocation.component.html"),
            styles: [__webpack_require__(/*! ./bulk-deallocation.component.scss */ "./Client/app/trading/components/group-amendments/bulk-deallocation/bulk-deallocation.component.scss")]
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_2__["FormConfigurationProviderService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormBuilder"]])
    ], BulkDeallocationComponent);
    return BulkDeallocationComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-amendments/bulk-edition/bulk-edition.component.html":
/*!*************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-amendments/bulk-edition/bulk-edition.component.html ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card>\r\n    <mat-card-title>\r\n        <h2>Bulk Edition</h2>\r\n    </mat-card-title>\r\n    <mat-card-content>\r\n        <div *ngFor=\"let groupFunctionType of groupFunctionTypeMenu\">\r\n            <mat-checkbox #bulkEditCtrl\r\n                          [formControl]=\"bulkEditionCtrl\"\r\n                          [value]=\"groupFunctionType.functionTypeCode\"\r\n                          (change)=\"onSelectionChange($event,bulkEditCtrl.checked, groupFunctionType)\">\r\n                {{groupFunctionType.name}}\r\n            </mat-checkbox>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/group-amendments/bulk-edition/bulk-edition.component.scss":
/*!*************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-amendments/bulk-edition/bulk-edition.component.scss ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/group-amendments/bulk-edition/bulk-edition.component.ts":
/*!***********************************************************************************************!*\
  !*** ./Client/app/trading/components/group-amendments/bulk-edition/bulk-edition.component.ts ***!
  \***********************************************************************************************/
/*! exports provided: BulkEditionComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BulkEditionComponent", function() { return BulkEditionComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../shared/enums/group-function-type */ "./Client/app/shared/enums/group-function-type.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var BulkEditionComponent = /** @class */ (function (_super) {
    __extends(BulkEditionComponent, _super);
    function BulkEditionComponent(formConfigurationProvider, route, formBuilder) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.route = route;
        _this.formBuilder = formBuilder;
        _this.bulkEditOptionChecked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.bulkEditionCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('bulkEditionType');
        _this.groupFunctionTypeMenu = [];
        return _this;
    }
    BulkEditionComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
        this.groupFunctionTypeMenu = this.groupFunctionTypeMenu.filter(function (functionType) { return functionType.functionTypeCode === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_5__["GroupFunctionTypes"].TradeBulkEdition; });
    };
    BulkEditionComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            bulkEditionCtrl: this.bulkEditionCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    BulkEditionComponent.prototype.onSelectionChange = function ($event, value, groupFunctionType) {
        this.bulkEditOptionChecked.emit({
            bulkEditOption: Number(groupFunctionType.functionTypeCode),
            checked: Boolean(value),
        });
    };
    BulkEditionComponent.prototype.bulkEditionOptionDisable = function () {
        this.bulkEditionCtrl.disable();
    };
    BulkEditionComponent.prototype.bulkEditionOptionEnable = function () {
        this.bulkEditionCtrl.enable();
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], BulkEditionComponent.prototype, "bulkEditOptionChecked", void 0);
    BulkEditionComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-bulk-edition',
            template: __webpack_require__(/*! ./bulk-edition.component.html */ "./Client/app/trading/components/group-amendments/bulk-edition/bulk-edition.component.html"),
            styles: [__webpack_require__(/*! ./bulk-edition.component.scss */ "./Client/app/trading/components/group-amendments/bulk-edition/bulk-edition.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationProviderService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"]])
    ], BulkEditionComponent);
    return BulkEditionComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-amendments/bulk-update-costs/bulk-update-costs.component.html":
/*!***********************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-amendments/bulk-update-costs/bulk-update-costs.component.html ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card>\r\n    <mat-card-title>\r\n        <h2>Others</h2>\r\n    </mat-card-title>\r\n    <mat-card-content>\r\n        <div *ngFor=\"let groupFunctionType of groupFunctionTypeMenu\">\r\n            <mat-checkbox #bulkCostsCtrl\r\n                          [formControl]=\"bulkCostsUpdateCtrl\"\r\n                          [value]=\"groupFunctionType.functionTypeCode\"\r\n                          (change)=\"onSelectionChange($event,bulkCostsCtrl.checked, groupFunctionType)\">\r\n                {{groupFunctionType.name}}\r\n            </mat-checkbox>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/group-amendments/bulk-update-costs/bulk-update-costs.component.scss":
/*!***********************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-amendments/bulk-update-costs/bulk-update-costs.component.scss ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/group-amendments/bulk-update-costs/bulk-update-costs.component.ts":
/*!*********************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-amendments/bulk-update-costs/bulk-update-costs.component.ts ***!
  \*********************************************************************************************************/
/*! exports provided: BulkUpdateCostsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BulkUpdateCostsComponent", function() { return BulkUpdateCostsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../shared/enums/group-function-type */ "./Client/app/shared/enums/group-function-type.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var BulkUpdateCostsComponent = /** @class */ (function (_super) {
    __extends(BulkUpdateCostsComponent, _super);
    function BulkUpdateCostsComponent(formConfigurationProvider, route, formBuilder) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.route = route;
        _this.formBuilder = formBuilder;
        _this.bulkCostsUpdateCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('bulkUpdateCostsType');
        _this.groupFunctionTypeMenu = [];
        _this.bulkCostsUpdateOptionChecked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        return _this;
    }
    BulkUpdateCostsComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
        this.groupFunctionTypeMenu = this.groupFunctionTypeMenu.filter(function (functionType) { return functionType.functionTypeCode === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_5__["GroupFunctionTypes"].Costs; });
    };
    BulkUpdateCostsComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            bulkCostsUpdateCtrl: this.bulkCostsUpdateCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    BulkUpdateCostsComponent.prototype.onSelectionChange = function ($event, value, groupFunctionType) {
        this.bulkCostsUpdateOptionChecked.emit({
            bulkCostUpdateOption: Number(groupFunctionType.functionTypeCode),
            checked: Boolean(value),
        });
    };
    BulkUpdateCostsComponent.prototype.bulkCostsUpdateOptionDisable = function () {
        this.bulkCostsUpdateCtrl.disable();
    };
    BulkUpdateCostsComponent.prototype.bulkCostsUpdateOptionEnable = function () {
        this.bulkCostsUpdateCtrl.enable();
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], BulkUpdateCostsComponent.prototype, "bulkCostsUpdateOptionChecked", void 0);
    BulkUpdateCostsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-bulk-update-costs',
            template: __webpack_require__(/*! ./bulk-update-costs.component.html */ "./Client/app/trading/components/group-amendments/bulk-update-costs/bulk-update-costs.component.html"),
            styles: [__webpack_require__(/*! ./bulk-update-costs.component.scss */ "./Client/app/trading/components/group-amendments/bulk-update-costs/bulk-update-costs.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationProviderService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"]])
    ], BulkUpdateCostsComponent);
    return BulkUpdateCostsComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-amendments/group-amendments.component.html":
/*!****************************************************************************************!*\
  !*** ./Client/app/trading/components/group-amendments/group-amendments.component.html ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<form>\r\n    <div class=\"main-container\">\r\n        <div fxLayout=\"row wrap\"\r\n             fxLayoutAlign=\"space-around start\">\r\n            <div fxLayout=\"column\"\r\n                 fxLayoutAlign=\"start left\"\r\n                 fxFlex=\"48\">\r\n                <atlas-bulk-edition #bulkEditionComponent\r\n                                    (bulkEditOptionChecked)=\"onBulkEditionOptionChecked($event)\">\r\n                </atlas-bulk-edition>\r\n            </div>\r\n            <div fxLayout=\"column\"\r\n                 fxLayoutAlign=\"start right\"\r\n                 fxFlex=\"50\">\r\n                <atlas-bulk-approval #bulkApprovalComponent\r\n                                     (bulkApprovalOptionChecked)=\"onBulkApprovalOptionChecked($event)\">\r\n                </atlas-bulk-approval>\r\n            </div>\r\n\r\n            <div fxLayout=\"column\"\r\n                 fxLayoutAlign=\"start left\"\r\n                 fxFlex=\"48\">\r\n                <atlas-bulk-update-costs #bulkUpdateCostsComponent\r\n                                         (bulkCostsUpdateOptionChecked)=\"onBulkCostsUpdateOptionChecked($event)\">\r\n\r\n                </atlas-bulk-update-costs>\r\n            </div>\r\n\r\n            <div fxLayout=\"column\"\r\n                 fxLayoutAlign=\"start right\"\r\n                 fxFlex=\"50\">\r\n                <atlas-bulk-closure #bulkClosureComponent\r\n                                    (bulkClosureOptionChecked)=\"onBulkClosureOptionChecked($event)\">\r\n                </atlas-bulk-closure>\r\n            </div>\r\n\r\n            <div fxLayout=\"column\"\r\n                 fxLayoutAlign=\"start left\"\r\n                 fxFlex=\"48\">\r\n                <atlas-bulk-allocation #bulkAllocationComponent\r\n                                       (bulkAllocationOptionChecked)=\"onBulkAllocationOptionChecked($event)\">\r\n\r\n                </atlas-bulk-allocation>\r\n            </div>\r\n\r\n\r\n            <div fxLayout=\"column\"\r\n                 fxLayoutAlign=\"start right\"\r\n                 fxFlex=\"50\">\r\n                <atlas-bulk-deallocation #bulkDeAllocationComponent\r\n                                         (bulkDeAllocationOptionChecked)=\"onBulkDeAllocationOptionChecked($event)\">\r\n\r\n                </atlas-bulk-deallocation>\r\n            </div>\r\n\r\n        </div>\r\n        <div class=\"btn-container\">\r\n            <div fxFlex=\"50\"\r\n                 fxLayout=\"row\"\r\n                 fxAlignLayout=\"start start\">\r\n                <button mat-button\r\n                        (click)=\"onDiscardButtonClicked()\">\r\n                    Discard\r\n                </button>\r\n            </div>\r\n            <div fxFlex=\"50\"\r\n                 fxLayout=\"row\"\r\n                 fxAlignLayout=\"start end\">\r\n                <span class=\"fill-space\"></span>\r\n                <button mat-raised-button\r\n                        (click)=\"onNextButtonClicked(bulkActionTypeId)\"\r\n                        [disabled]=\"isDisabled\">\r\n                    Next\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</form>"

/***/ }),

/***/ "./Client/app/trading/components/group-amendments/group-amendments.component.scss":
/*!****************************************************************************************!*\
  !*** ./Client/app/trading/components/group-amendments/group-amendments.component.scss ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".cost-update {\n  margin-left: 11px; }\n"

/***/ }),

/***/ "./Client/app/trading/components/group-amendments/group-amendments.component.ts":
/*!**************************************************************************************!*\
  !*** ./Client/app/trading/components/group-amendments/group-amendments.component.ts ***!
  \**************************************************************************************/
/*! exports provided: GroupAmendmentsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GroupAmendmentsComponent", function() { return GroupAmendmentsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../shared/enums/group-function-type */ "./Client/app/shared/enums/group-function-type.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_title_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../shared/services/title.service */ "./Client/app/shared/services/title.service.ts");
/* harmony import */ var _bulk_approval_bulk_approval_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./bulk-approval/bulk-approval.component */ "./Client/app/trading/components/group-amendments/bulk-approval/bulk-approval.component.ts");
/* harmony import */ var _bulk_edition_bulk_edition_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./bulk-edition/bulk-edition.component */ "./Client/app/trading/components/group-amendments/bulk-edition/bulk-edition.component.ts");
/* harmony import */ var _bulk_update_costs_bulk_update_costs_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./bulk-update-costs/bulk-update-costs.component */ "./Client/app/trading/components/group-amendments/bulk-update-costs/bulk-update-costs.component.ts");
/* harmony import */ var _bulk_closure_bulk_closure_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./bulk-closure/bulk-closure.component */ "./Client/app/trading/components/group-amendments/bulk-closure/bulk-closure.component.ts");
/* harmony import */ var _bulk_allocation_bulk_allocation_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./bulk-allocation/bulk-allocation.component */ "./Client/app/trading/components/group-amendments/bulk-allocation/bulk-allocation.component.ts");
/* harmony import */ var _bulk_deallocation_bulk_deallocation_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./bulk-deallocation/bulk-deallocation.component */ "./Client/app/trading/components/group-amendments/bulk-deallocation/bulk-deallocation.component.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};















var GroupAmendmentsComponent = /** @class */ (function (_super) {
    __extends(GroupAmendmentsComponent, _super);
    function GroupAmendmentsComponent(formBuilder, formConfigurationProvider, router, dialog, companyManager, titleService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.router = router;
        _this.dialog = dialog;
        _this.companyManager = companyManager;
        _this.titleService = titleService;
        _this.formComponents = [];
        _this.isBulkEditChecked = false;
        _this.isBulkAppovalChecked = false;
        _this.isSave = false;
        _this.isDisabled = true;
        _this.groupFunctionTypeMenu = [];
        _this.groupFunctionFieldList = [];
        _this.populateListofOptions();
        return _this;
    }
    GroupAmendmentsComponent.prototype.ngOnInit = function () {
        this.bulkApprovalComponent.groupFunctionTypeMenu = this.groupFunctionTypeMenu;
        this.bulkEditionComponent.groupFunctionTypeMenu = this.groupFunctionTypeMenu;
        this.bulkUpdateCostsComponent.groupFunctionTypeMenu = this.groupFunctionTypeMenu;
        this.bulkClosureComponent.groupFunctionTypeMenu = this.groupFunctionTypeMenu;
        this.bulkAllocationComponent.groupFunctionTypeMenu = this.groupFunctionTypeMenu;
        this.bulkDeAllocationComponent.groupFunctionTypeMenu = this.groupFunctionTypeMenu;
        this.groupFunctionFormGroup = this.formBuilder.group({
            bulkEditionComponent: this.bulkEditionComponent.getFormGroup(),
            bulkApprovalComponent: this.bulkApprovalComponent.getFormGroup(),
            bulkUpdateCostsComponent: this.bulkUpdateCostsComponent.getFormGroup(),
            bulkClosureComponent: this.bulkClosureComponent.getFormGroup(),
            bulkAllocationComponent: this.bulkAllocationComponent.getFormGroup(),
            bulkDeAllocationComponent: this.bulkDeAllocationComponent.getFormGroup(),
        });
        this.titleService.setTitle('Bulk Actions');
        this.formComponents.push(this.bulkEditionComponent, this.bulkApprovalComponent, this.bulkUpdateCostsComponent, this.bulkClosureComponent, this.bulkAllocationComponent, this.bulkDeAllocationComponent);
    };
    GroupAmendmentsComponent.prototype.unloadNotification = function ($event) {
        if (this.groupFunctionFormGroup.dirty) {
            $event.returnValue = true;
        }
    };
    GroupAmendmentsComponent.prototype.canDeactivate = function () {
        if (this.groupFunctionFormGroup.dirty && this.isSave === false) {
            return window.confirm('Leave an unsave form? \nYour changes won\'t be applied!');
        }
        return true;
    };
    GroupAmendmentsComponent.prototype.onDiscardButtonClicked = function () {
        this.isSave = true;
        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);
    };
    GroupAmendmentsComponent.prototype.onNextButtonClicked = function (bulkActionTypeId) {
        this.isSave = true;
        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() +
                '/trades/bulkActions/' + encodeURIComponent(bulkActionTypeId)]);
    };
    GroupAmendmentsComponent.prototype.populateListofOptions = function () {
        var _this = this;
        this.groupFunctionFieldList.push({
            bulkFunctionTypeId: 1,
            name: 'Bulk Edit Trades',
            functionTypeCode: _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_6__["GroupFunctionTypes"].TradeBulkEdition,
        });
        this.groupFunctionFieldList.push({
            bulkFunctionTypeId: 2,
            name: 'Bulk Approve Trades',
            functionTypeCode: _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_6__["GroupFunctionTypes"].TradeBulkApproval,
        });
        this.groupFunctionFieldList.push({
            bulkFunctionTypeId: 3,
            name: 'Costs',
            functionTypeCode: _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_6__["GroupFunctionTypes"].Costs,
        });
        this.groupFunctionFieldList.push({
            bulkFunctionTypeId: 4,
            name: 'Bulk Closure Trades',
            functionTypeCode: _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_6__["GroupFunctionTypes"].TradeBulkClosure,
        });
        this.groupFunctionFieldList.push({
            bulkFunctionTypeId: 5,
            name: 'Bulk Allocation Trades',
            functionTypeCode: _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_6__["GroupFunctionTypes"].TradeBulkAllocation,
        });
        this.groupFunctionFieldList.push({
            bulkFunctionTypeId: 6,
            name: 'Bulk DeAllocation Trades',
            functionTypeCode: _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_6__["GroupFunctionTypes"].TradeBulkDeAllocation,
        });
        this.groupFunctionFieldList.filter(function (e) {
            _this.groupFunctionTypeMenu.push(e);
        });
    };
    GroupAmendmentsComponent.prototype.onBulkEditionOptionChecked = function ($event) {
        this.bulkActionTypeId = $event.bulkEditOption;
        if ($event.checked) {
            this.isDisabled = false;
            this.bulkApprovalComponent.bulkApprovalOptionDisable();
            this.bulkUpdateCostsComponent.bulkCostsUpdateOptionDisable();
            this.bulkClosureComponent.bulkClosureOptionDisable();
            this.bulkAllocationComponent.bulkAllocationOptionDisable();
            this.bulkDeAllocationComponent.bulkDeAllocationOptionDisable();
        }
        else {
            this.isDisabled = true;
            this.bulkApprovalComponent.bulkApprovalOptionEnable();
            this.bulkUpdateCostsComponent.bulkCostsUpdateOptionEnable();
            this.bulkClosureComponent.bulkClosureOptionEnable();
            this.bulkAllocationComponent.bulkAllocationOptionEnable();
            this.bulkDeAllocationComponent.bulkDeAllocationOptionEnable();
        }
    };
    GroupAmendmentsComponent.prototype.onBulkApprovalOptionChecked = function ($event) {
        this.bulkActionTypeId = $event.bulkApprovalOption;
        if ($event.checked) {
            this.isDisabled = false;
            this.bulkEditionComponent.bulkEditionOptionDisable();
            this.bulkUpdateCostsComponent.bulkCostsUpdateOptionDisable();
            this.bulkClosureComponent.bulkClosureOptionDisable();
            this.bulkAllocationComponent.bulkAllocationOptionDisable();
            this.bulkDeAllocationComponent.bulkDeAllocationOptionDisable();
        }
        else {
            this.isDisabled = true;
            this.bulkEditionComponent.bulkEditionOptionEnable();
            this.bulkUpdateCostsComponent.bulkCostsUpdateOptionEnable();
            this.bulkClosureComponent.bulkClosureOptionEnable();
            this.bulkAllocationComponent.bulkAllocationOptionEnable();
            this.bulkDeAllocationComponent.bulkDeAllocationOptionEnable();
        }
    };
    GroupAmendmentsComponent.prototype.onBulkCostsUpdateOptionChecked = function ($event) {
        this.bulkActionTypeId = $event.bulkCostUpdateOption;
        if ($event.checked) {
            this.isDisabled = false;
            this.bulkEditionComponent.bulkEditionOptionDisable();
            this.bulkApprovalComponent.bulkApprovalOptionDisable();
            this.bulkClosureComponent.bulkClosureOptionDisable();
            this.bulkAllocationComponent.bulkAllocationOptionDisable();
            this.bulkDeAllocationComponent.bulkDeAllocationOptionDisable();
        }
        else {
            this.isDisabled = true;
            this.bulkEditionComponent.bulkEditionOptionEnable();
            this.bulkApprovalComponent.bulkApprovalOptionEnable();
            this.bulkClosureComponent.bulkClosureOptionEnable();
            this.bulkAllocationComponent.bulkAllocationOptionEnable();
            this.bulkDeAllocationComponent.bulkDeAllocationOptionEnable();
        }
    };
    GroupAmendmentsComponent.prototype.onBulkClosureOptionChecked = function ($event) {
        this.bulkActionTypeId = $event.bulkClosureOption;
        if ($event.checked) {
            this.isDisabled = false;
            this.bulkEditionComponent.bulkEditionOptionDisable();
            this.bulkApprovalComponent.bulkApprovalOptionDisable();
            this.bulkUpdateCostsComponent.bulkCostsUpdateOptionDisable();
            this.bulkAllocationComponent.bulkAllocationOptionDisable();
            this.bulkDeAllocationComponent.bulkDeAllocationOptionDisable();
        }
        else {
            this.isDisabled = true;
            this.bulkEditionComponent.bulkEditionOptionEnable();
            this.bulkApprovalComponent.bulkApprovalOptionEnable();
            this.bulkUpdateCostsComponent.bulkCostsUpdateOptionEnable();
            this.bulkAllocationComponent.bulkAllocationOptionEnable();
            this.bulkDeAllocationComponent.bulkDeAllocationOptionEnable();
        }
    };
    GroupAmendmentsComponent.prototype.onBulkAllocationOptionChecked = function ($event) {
        this.bulkActionTypeId = $event.bulkAllocationOption;
        if ($event.checked) {
            this.isDisabled = false;
            this.bulkEditionComponent.bulkEditionOptionDisable();
            this.bulkApprovalComponent.bulkApprovalOptionDisable();
            this.bulkClosureComponent.bulkClosureOptionDisable();
            this.bulkUpdateCostsComponent.bulkCostsUpdateOptionDisable();
            this.bulkDeAllocationComponent.bulkDeAllocationOptionDisable();
        }
        else {
            this.isDisabled = true;
            this.bulkEditionComponent.bulkEditionOptionEnable();
            this.bulkApprovalComponent.bulkApprovalOptionEnable();
            this.bulkClosureComponent.bulkClosureOptionEnable();
            this.bulkUpdateCostsComponent.bulkCostsUpdateOptionEnable();
            this.bulkDeAllocationComponent.bulkDeAllocationOptionEnable();
        }
    };
    GroupAmendmentsComponent.prototype.onBulkDeAllocationOptionChecked = function ($event) {
        this.bulkActionTypeId = $event.bulkDeAllocationOption;
        if ($event.checked) {
            this.isDisabled = false;
            this.bulkEditionComponent.bulkEditionOptionDisable();
            this.bulkApprovalComponent.bulkApprovalOptionDisable();
            this.bulkClosureComponent.bulkClosureOptionDisable();
            this.bulkUpdateCostsComponent.bulkCostsUpdateOptionDisable();
            this.bulkAllocationComponent.bulkAllocationOptionDisable();
        }
        else {
            this.isDisabled = true;
            this.bulkEditionComponent.bulkEditionOptionEnable();
            this.bulkApprovalComponent.bulkApprovalOptionEnable();
            this.bulkClosureComponent.bulkClosureOptionEnable();
            this.bulkUpdateCostsComponent.bulkCostsUpdateOptionEnable();
            this.bulkAllocationComponent.bulkAllocationOptionEnable();
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('bulkEditionComponent'),
        __metadata("design:type", _bulk_edition_bulk_edition_component__WEBPACK_IMPORTED_MODULE_10__["BulkEditionComponent"])
    ], GroupAmendmentsComponent.prototype, "bulkEditionComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('bulkApprovalComponent'),
        __metadata("design:type", _bulk_approval_bulk_approval_component__WEBPACK_IMPORTED_MODULE_9__["BulkApprovalComponent"])
    ], GroupAmendmentsComponent.prototype, "bulkApprovalComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('bulkUpdateCostsComponent'),
        __metadata("design:type", _bulk_update_costs_bulk_update_costs_component__WEBPACK_IMPORTED_MODULE_11__["BulkUpdateCostsComponent"])
    ], GroupAmendmentsComponent.prototype, "bulkUpdateCostsComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('bulkClosureComponent'),
        __metadata("design:type", _bulk_closure_bulk_closure_component__WEBPACK_IMPORTED_MODULE_12__["BulkClosureComponent"])
    ], GroupAmendmentsComponent.prototype, "bulkClosureComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('bulkAllocationComponent'),
        __metadata("design:type", _bulk_allocation_bulk_allocation_component__WEBPACK_IMPORTED_MODULE_13__["BulkAllocationComponent"])
    ], GroupAmendmentsComponent.prototype, "bulkAllocationComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('bulkDeAllocationComponent'),
        __metadata("design:type", _bulk_deallocation_bulk_deallocation_component__WEBPACK_IMPORTED_MODULE_14__["BulkDeallocationComponent"])
    ], GroupAmendmentsComponent.prototype, "bulkDeAllocationComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"])('window:beforeunload', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], GroupAmendmentsComponent.prototype, "unloadNotification", null);
    GroupAmendmentsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-group-amendments',
            template: __webpack_require__(/*! ./group-amendments.component.html */ "./Client/app/trading/components/group-amendments/group-amendments.component.html"),
            styles: [__webpack_require__(/*! ./group-amendments.component.scss */ "./Client/app/trading/components/group-amendments/group-amendments.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_7__["FormConfigurationProviderService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
            _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialog"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_4__["CompanyManagerService"],
            _shared_services_title_service__WEBPACK_IMPORTED_MODULE_8__["TitleService"]])
    ], GroupAmendmentsComponent);
    return GroupAmendmentsComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-functions/group-function-contracts/group-function-contracts.component.html":
/*!************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/group-function-contracts/group-function-contracts.component.html ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"main-container\"\r\n     fxLayout=\"column\"\r\n     fxLayoutAlign=\"start none\">\r\n    <mat-card>\r\n        <form [formGroup]=\"searchContractForm\">\r\n            <div fxLayout=\"row\"\r\n                 fxLayoutAlign=\"start none\"\r\n                 *ngIf=\"!showDeallocationSearch\"\r\n                 class=\"search\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Contract Search\"\r\n                           formControlName=\"searchContractReferenceCtrl\" />\r\n                </mat-form-field>\r\n                <button mat-raised-button\r\n                        (click)=\"onSearchContracts()\"\r\n                        class=\"heroGradient\">\r\n                    <mat-icon aria-label=\"Search\"\r\n                              class=\"search-icon\">search</mat-icon>\r\n                </button>\r\n            </div>\r\n            <div fxLayout=\"row\"\r\n                 *ngIf=\"showDeallocationSearch\"\r\n                 fxLayoutAlign=\"start none\"\r\n                 class=\"search\">\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Contract Search\"\r\n                           formControlName=\"searchContractReferenceDeallocationCtrl\" />\r\n                </mat-form-field>\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Group Number\"\r\n                           formControlName=\"groupNumberDeallocationCtrl\" />\r\n                </mat-form-field>\r\n                <button mat-raised-button\r\n                        (click)=\"onSearchContractsDeallocation()\"\r\n                        class=\"heroGradient\">\r\n                    <mat-icon aria-label=\"Search\"\r\n                              class=\"search-icon\">search</mat-icon>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    </mat-card>\r\n    <atlas-filter-set-display (filtersChanged)=\"onFilterSetDetailsChange($event)\"\r\n                              [columnConfiguration]=\"columnConfiguration\"\r\n                              [gridCode]=\"gridCode\"\r\n                              [company]=\"company\">\r\n    </atlas-filter-set-display>\r\n    <mat-card>\r\n        <div fxLayout=\"row\"\r\n             class=\"quick-sum-div-height\"\r\n             fxLayoutAlign=\"space-between center\">\r\n            <h2 class=\"no-margin\">{{gridTitle}}</h2>\r\n            <div fxLayout=\"row\"\r\n                 fxLayoutAlign=\"space-around center\"\r\n                 class=\"accEntriesSum\">\r\n                <atlas-ag-grid-user-preferences *ngIf=\"groupFunctionsGridOptions && groupFunctionsGridOptions.columnDefs && groupFunctionsGridOptions.columnApi\"\r\n                                                [gridOptions]=\"groupFunctionsGridOptions\"\r\n                                                [company]=\"company\"\r\n                                                [gridId]=\"gridCode\"\r\n                                                [sharingEnabled]=\"hasGridSharing\"\r\n                                                [hasDeleteViewPrivilege]=\"hasDeleteViewPrivilege\"\r\n                                                (columnStateSetToGrid)=\"onColumnStateSetToGrid()\"\r\n                                                #userPreferences>\r\n                </atlas-ag-grid-user-preferences>\r\n            </div>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             class=\"quick-sum-div-height\"\r\n             fxLayoutAlign=\"space-between center\">\r\n            <mat-slide-toggle mat-raised-button\r\n                              (change)=\"toggleQuickSum($event.checked)\">Quick Sum Mode</mat-slide-toggle>\r\n            <div fxLayout=\"row\"\r\n                 fxLayoutAlign=\"space-around center\">\r\n\r\n                <div *ngFor=\"let column of selectedColumnsArray\">\r\n                    <span class=\"quick-sum-span\"\r\n                          *ngIf=\"quickSumModeActivated\">{{column.name}}:{{column.sum | number }}</span>\r\n                </div>\r\n                <button mat-button\r\n                        (click)=\"onClearSelectionClicked()\"\r\n                        class=\"mat-button-user-margin\"\r\n                        *ngIf=\"quickSumModeActivated\">\r\n                    Clear Selection\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <div ag-grid=\"groupFunctionsGridOptions\"\r\n             [ngClass]='classApplied'\r\n             style=\"width: 100%; height: 100%\">\r\n            <ag-grid-angular [ngClass]=\"{'hidden-during-loading':isLoading}\"\r\n                             style=\"height:100%;\"\r\n                             class=\"ag-theme-material\"\r\n                             [rowData]=\"ContractGridRows\"\r\n                             [columnDefs]=\"columnDefs\"\r\n                             [enableColResize]=\"true\"\r\n                             [pagination]=\"true\"\r\n                             [paginationPageSize]=\"10\"\r\n                             [enableSorting]=\"true\"\r\n                             domLayout=\"autoHeight\"\r\n                             (gridReady)=\"onGridReady($event)\"\r\n                             [enableRangeSelection]=\"true\"\r\n                             (rangeSelectionChanged)=\"onRangeSelectionChanged($event)\"\r\n                             (columnVisible)=\"onColumnVisibilityChanged($event)\"\r\n                             enableFilter\r\n                             [gridOptions]=\"groupFunctionsGridOptions\"\r\n                             (firstDataRendered)=\"onFirstDataRendered()\"\r\n                             rowSelection=\"multiple\"\r\n                             [singleClickEdit]=\"true\"\r\n                             [suppressRowClickSelection]=\"true\"\r\n                             (rowSelected)=\"onSelectionChanged($event)\"\r\n                             [rowHeight]=atlasAgGridParam.rowHeight>\r\n            </ag-grid-angular>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"center center\"\r\n             fxLayoutWrap\r\n             *ngIf=\"isLoading\"\r\n             class=\"loading\">\r\n            <mat-spinner color=\"accent\"></mat-spinner>\r\n        </div>\r\n    </mat-card>\r\n    <atlas-lock-interval [resourcesInformation]=\"resourcesInformation\"></atlas-lock-interval>\r\n</div>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/group-function-contracts/group-function-contracts.component.scss":
/*!************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/group-function-contracts/group-function-contracts.component.scss ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/group-functions/group-function-contracts/group-function-contracts.component.ts":
/*!**********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/group-function-contracts/group-function-contracts.component.ts ***!
  \**********************************************************************************************************************/
/*! exports provided: GroupFunctionContractsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GroupFunctionContractsComponent", function() { return GroupFunctionContractsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _shared_components_ag_grid_user_preferences_ag_grid_user_preferences_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component */ "./Client/app/shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_entities_list_and_search_list_and_search_filter_entity__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../shared/entities/list-and-search/list-and-search-filter.entity */ "./Client/app/shared/entities/list-and-search/list-and-search-filter.entity.ts");
/* harmony import */ var _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../shared/entities/lock-functional-context.entity */ "./Client/app/shared/entities/lock-functional-context.entity.ts");
/* harmony import */ var _shared_entities_lock_resource_information_entity__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../shared/entities/lock-resource-information.entity */ "./Client/app/shared/entities/lock-resource-information.entity.ts");
/* harmony import */ var _shared_entities_window_injection_token__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../shared/entities/window-injection-token */ "./Client/app/shared/entities/window-injection-token.ts");
/* harmony import */ var _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../shared/enums/contract-status.enum */ "./Client/app/shared/enums/contract-status.enum.ts");
/* harmony import */ var _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../shared/enums/contract-type.enum */ "./Client/app/shared/enums/contract-type.enum.ts");
/* harmony import */ var _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../shared/enums/group-function-type */ "./Client/app/shared/enums/group-function-type.ts");
/* harmony import */ var _shared_enums_list_and_search_filter_type_enum__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../shared/enums/list-and-search-filter-type.enum */ "./Client/app/shared/enums/list-and-search-filter-type.enum.ts");
/* harmony import */ var _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../shared/services/ag-grid.service */ "./Client/app/shared/services/ag-grid.service.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_grid_configuration_provider_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../shared/services/grid-configuration-provider.service */ "./Client/app/shared/services/grid-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../shared/services/http-services/lock.service */ "./Client/app/shared/services/http-services/lock.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../../../shared/services/ui.service */ "./Client/app/shared/services/ui.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};























var GroupFunctionContractsComponent = /** @class */ (function (_super) {
    __extends(GroupFunctionContractsComponent, _super);
    function GroupFunctionContractsComponent(formBuilder, route, tradingService, lockService, formConfigurationProvider, snackbarService, dialog, uiService, agGridService, gridConfigurationProvider, utilService, gridService, window) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.route = route;
        _this.tradingService = tradingService;
        _this.lockService = lockService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.snackbarService = snackbarService;
        _this.dialog = dialog;
        _this.uiService = uiService;
        _this.agGridService = agGridService;
        _this.gridConfigurationProvider = gridConfigurationProvider;
        _this.utilService = utilService;
        _this.gridService = gridService;
        _this.window = window;
        _this.contractSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.hasDeleteViewPrivilege = true;
        _this.resetAllocationGrids = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.isLoading = false;
        _this.groupFunctionType = _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"];
        _this.groupFunctionsGridOptions = {};
        _this.dataLength = 0;
        _this.subscriptions = [];
        _this.resourcesInformation = new Array();
        _this.locking = [];
        _this.selectedSectionIds = [];
        _this.unlocking = [];
        _this.columnConfiguration = [];
        _this.gridTitle = 'Physical Contracts';
        _this.gridCode = 'tradeList';
        _this.hasGridSharing = false;
        _this.isContractSelected = false;
        _this.cellSelectionClass = 'ag-theme-material pointer-cursor cell-selection';
        _this.quickSumModeActivated = false;
        _this.selectedColumnsArray = new Array();
        _this.isQuickSumDisplay = false;
        _this.allowedColumnsForQuickSum = [];
        _this.defaultClass = 'ag-theme-material pointer-cursor';
        _this.showDeallocationSearch = false;
        _this.bulkAllocationColumns = ['ContractLabel', 'Counterparty', 'Commodity1', 'Commodity2', 'Commodity3', 'Commodity4',
            'Commodity5', 'Quantity', 'WeightUnitCode', 'ShippingPeriod', 'ContractTermCode',
            'ContractTermDescription', 'CharterReference', 'BLDate',
            'CurrencyCode', 'Price', 'PriceCode', 'DepartmentCode', 'AllocatedContractReference', 'Status', 'ShipmentPeriod', 'IsTradeClosed'];
        _this.bulkDeAllocationColumns = ['ContractLabel', 'Counterparty', 'Commodity1', 'Commodity2', 'Commodity3', 'Commodity4',
            'Commodity5', 'Quantity', 'WeightUnitCode', 'AllocatedContractReference',
            'CharterReference', 'GroupNumber', 'BLDate', 'ContractType', 'GroupingNumber'];
        _this.lockedContracts = [];
        _this.bulkActionTypeId = Number(decodeURIComponent(_this.route.snapshot.paramMap.get('bulkActionTypeId')));
        _this.atlasAgGridParam = _this.gridService.getAgGridParam();
        _this.searchContractForm = _this.formBuilder.group({
            searchContractReferenceCtrl: [''],
            searchContractReferenceDeallocationCtrl: [''],
            groupNumberDeallocationCtrl: [''],
        });
        return _this;
    }
    GroupFunctionContractsComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
        this.masterdata = this.route.snapshot.data.masterdata;
        this.isLoading = true;
        if (this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkDeAllocation) {
            this.showDeallocationSearch = true;
        }
        this.loadGridConfiguration();
        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe());
    };
    GroupFunctionContractsComponent.prototype.unloadNotification = function ($event) {
        if (this.searchContractForm.dirty) {
            $event.returnValue = true;
        }
    };
    GroupFunctionContractsComponent.prototype.toggleQuickSum = function (value) {
        this.onClearSelectionClicked();
        this.quickSumModeActivated = value;
        this.classApplied = (this.quickSumModeActivated) ? this.cellSelectionClass : this.defaultClass;
        this.selectedColumnsArray = [];
    };
    GroupFunctionContractsComponent.prototype.onClearSelectionClicked = function () {
        this.gridApi.clearRangeSelection();
        this.selectedColumnsArray = [];
    };
    GroupFunctionContractsComponent.prototype.onRangeSelectionChanged = function (event) {
        this.selectedColumnsArray = [];
        var cellInfos = [];
        var rangeSelections = this.gridApi.getRangeSelections();
        if (!rangeSelections || rangeSelections.length === 0) {
            return;
        }
        if (rangeSelections && rangeSelections.length === 1) {
            this.rangeSelectionCalculation(event);
        }
        else {
            var selectedCells_1 = [];
            rangeSelections.forEach(function (row) {
                var cellExists = selectedCells_1.find(function (cell) { return cell.start.rowIndex === row.start.rowIndex &&
                    cell.end.rowIndex === row.end.rowIndex && cell.columns[0].getColId() === row.columns[0].getColId(); });
                if (cellExists === null || cellExists === undefined) {
                    selectedCells_1.push(row);
                    var obj = { rowIndex: row.start.rowIndex, columnName: row.columns[0].getColId() };
                    cellInfos.push(obj);
                }
            });
            var api_1 = this.gridApi;
            var sum_1 = 0;
            var columnName_1;
            var columnHeader_1;
            var selectedColumnsArray_1 = this.selectedColumnsArray;
            var allowedColumnsForQuickSum_1 = this.allowedColumnsForQuickSum;
            selectedCells_1.forEach(function (row) {
                row.columns.forEach(function (column) {
                    sum_1 = 0;
                    columnName_1 = column.getColDef().colId.toLowerCase();
                    columnHeader_1 = column.getColDef().headerName;
                    if (allowedColumnsForQuickSum_1.includes(columnName_1)) {
                        for (var rowIndex = 0; rowIndex < cellInfos.length; rowIndex++) {
                            if (cellInfos[rowIndex].columnName.toLowerCase() === columnName_1) {
                                var rowModel = api_1.getModel();
                                var rowNode = rowModel.getRow(Number(cellInfos[rowIndex].rowIndex));
                                var value = api_1.getValue(column, rowNode);
                                sum_1 += Number(value);
                            }
                        }
                        var columnObj = selectedColumnsArray_1.find(function (sum) { return sum.name === columnHeader_1; });
                        if (columnObj) {
                            columnObj.sum = sum_1;
                        }
                        else {
                            selectedColumnsArray_1.push({ name: columnHeader_1, sum: sum_1 });
                        }
                    }
                });
            });
            this.selectedColumnsArray = selectedColumnsArray_1;
        }
    };
    GroupFunctionContractsComponent.prototype.rangeSelectionCalculation = function (event) {
        this.selectedColumnsArray = [];
        var rangeSelections = this.gridApi.getRangeSelections();
        if (!rangeSelections || rangeSelections.length === 0) {
            return;
        }
        var firstRange = rangeSelections[0];
        var startRow = Math.min(firstRange.start.rowIndex, firstRange.end.rowIndex);
        var endRow = Math.max(firstRange.start.rowIndex, firstRange.end.rowIndex);
        var api = this.gridApi;
        var sum = 0;
        var columnName;
        var columnHeader;
        var selectedColumnsArray = this.selectedColumnsArray;
        var allowedColumnsForQuickSum = this.allowedColumnsForQuickSum;
        firstRange.columns.forEach(function (column) {
            sum = 0;
            columnName = column.getColDef().colId.toLowerCase();
            columnHeader = column.getColDef().headerName;
            if (allowedColumnsForQuickSum.includes(columnName)) {
                for (var rowIndex = startRow; rowIndex <= endRow; rowIndex++) {
                    var rowModel = api.getModel();
                    var rowNode = rowModel.getRow(rowIndex);
                    var value = api.getValue(column, rowNode);
                    sum += Number(value);
                }
                selectedColumnsArray.push({ name: columnHeader, sum: sum });
            }
        });
        this.selectedColumnsArray = selectedColumnsArray;
    };
    GroupFunctionContractsComponent.prototype.onGridReady = function (params) {
        var _this = this;
        this.groupFunctionsGridOptions = params;
        this.groupFunctionsGridOptions.columnDefs = this.columnDefs;
        this.gridApi = this.groupFunctionsGridOptions.api;
        this.gridColumnApi = this.groupFunctionsGridOptions.columnApi;
        if (this.savedColumnStates) {
            this.groupFunctionsGridOptions.columnApi.setColumnState(this.savedColumnStates);
        }
        this.agGridService.sizeColumns(this.groupFunctionsGridOptions);
        this.gridApi.sizeColumnsToFit();
        this.gridColumnApi.autoSizeAllColumns();
        this.gridApi.showNoRowsOverlay();
        this.window.onresize = function () {
            _this.agGridService.sizeColumns(_this.groupFunctionsGridOptions);
        };
    };
    GroupFunctionContractsComponent.prototype.loadGridConfiguration = function () {
        var _this = this;
        this.gridConfigurationProvider.getConfiguration(this.company, this.gridCode)
            .subscribe(function (configuration) {
            var allocationColumnConfiguration = configuration.columns;
            if (_this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkAllocation) {
                _this.columnConfiguration = _this.loadBulkAllocationColumns(allocationColumnConfiguration);
            }
            else if (_this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkDeAllocation) {
                _this.columnConfiguration = _this.loadBulkDeAllocationColumns(allocationColumnConfiguration);
            }
            else {
                _this.columnConfiguration = configuration.columns;
            }
            _this.initColumns(_this.columnConfiguration);
            _this.isQuickSumDisplay = false;
            if (_this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkEdition) {
                _this.getContractsToEdit();
            }
            else if (_this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkApproval) {
                _this.getContractsToApprove();
            }
            else if (_this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkClosure) {
                _this.getContractsToClosure();
            }
            else if (_this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkAllocation) {
                _this.getContractsToAllocation();
            }
            else if (_this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkDeAllocation) {
                _this.getContractsToDeAllocation();
            }
            _this.hasGridSharing = configuration.hasMultipleViewsPerUser;
        });
    };
    GroupFunctionContractsComponent.prototype.initColumns = function (configuration) {
        var _this = this;
        this.columnDefs = [];
        // selection column
        this.columnDefs.push({
            headerName: '',
            colId: 'selection',
            headerCheckboxSelection: true,
            checkboxSelection: true,
            minWidth: 40,
            maxWidth: 40,
            pinned: 'left',
        });
        // grid config
        var numericColumns = [];
        configuration.forEach(function (column) {
            if (column.gridType === 'numeric') {
                numericColumns.push(column.fieldName.toLowerCase());
            }
        });
        this.allowedColumnsForQuickSum = numericColumns;
        this.columnDefs = this.columnDefs.concat(configuration.map(function (config) {
            var columnDef = {
                colId: _this.utilService.convertToCamelCase(config.fieldName),
                headerName: config.friendlyName,
                field: _this.utilService.convertToCamelCase(config.fieldName),
                hide: !config.isVisible,
            };
            var formatter = _this.uiService.getFormatterForType(config.gridType);
            if (formatter) {
                columnDef.valueFormatter = formatter;
            }
            var dateGetter = _this.uiService.getterForDateType(config.gridType);
            if (dateGetter) {
                columnDef.cellClass = 'dateFormat';
                columnDef.valueGetter = dateGetter;
            }
            return columnDef;
        }));
        if (this.groupFunctionsGridOptions) {
            this.groupFunctionsGridOptions.columnDefs = this.columnDefs;
        }
    };
    GroupFunctionContractsComponent.prototype.onColumnStateSetToGrid = function () {
        this.gridColumnApi.setColumnVisible('selection', true);
    };
    GroupFunctionContractsComponent.prototype.ngOnDestroy = function () {
        if (this.getTradesForSubscription) {
            this.getTradesForSubscription.unsubscribe();
        }
    };
    GroupFunctionContractsComponent.prototype.getContractsToEdit = function () {
        var _this = this;
        if (!this.filters || !(this.columnConfiguration)) {
            return;
        }
        else if (this.columnConfiguration && this.columnConfiguration.length > 0) {
            var filters = this.filters.map(function (x) { return (__assign({}, x)); });
            this.isLoading = true;
            this.tradingService.searchContractsForBulkEdit(filters)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["finalize"])(function () {
                _this.isLoading = false;
            }))
                .subscribe(function (data) {
                if (data) {
                    _this.contractsToedit = data;
                    _this.ContractGridRows = _this.contractsToedit;
                    _this.dataLength = _this.ContractGridRows.length;
                    _this.totalContractList = _this.ContractGridRows;
                    _this.isQuickSumDisplay = true;
                }
            });
        }
    };
    GroupFunctionContractsComponent.prototype.getContractsToClosure = function () {
        var _this = this;
        if (!this.filters || !(this.columnConfiguration)) {
            return;
        }
        else if (this.columnConfiguration && this.columnConfiguration.length > 0) {
            var filters = this.filters.map(function (x) { return (__assign({}, x)); });
            this.isLoading = true;
            this.tradingService.searchContractsForBulkEdit(filters)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["finalize"])(function () {
                _this.isLoading = false;
            }))
                .subscribe(function (data) {
                if (data) {
                    _this.contractsToedit = data;
                    _this.ContractGridRows = _this.contractsToedit;
                    _this.dataLength = _this.ContractGridRows.length;
                    _this.totalContractList = _this.ContractGridRows;
                }
            });
        }
    };
    GroupFunctionContractsComponent.prototype.getContractsToApprove = function () {
        var _this = this;
        if (!this.filters || !(this.columnConfiguration)) {
            return;
        }
        else if (this.columnConfiguration && this.columnConfiguration.length > 0) {
            var filters = this.filters.map(function (x) { return (__assign({}, x)); });
            this.isLoading = true;
            var tradeApprovalStatusColumn = this.columnConfiguration
                .find(function (column) { return column.fieldName === 'Status'; });
            if (tradeApprovalStatusColumn && _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_11__["ContractStatus"][_shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_11__["ContractStatus"].Unapproved]) {
                var filterContractStatusType = new _shared_entities_list_and_search_list_and_search_filter_entity__WEBPACK_IMPORTED_MODULE_7__["ListAndSearchFilter"]();
                filterContractStatusType.fieldId = tradeApprovalStatusColumn.fieldId;
                filterContractStatusType.fieldName = tradeApprovalStatusColumn.fieldName;
                filterContractStatusType.predicate = {
                    filterType: _shared_enums_list_and_search_filter_type_enum__WEBPACK_IMPORTED_MODULE_14__["ListAndSearchFilterType"].Text,
                    operator: 'eq',
                    value1: _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_11__["ContractStatus"][_shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_11__["ContractStatus"].Unapproved],
                };
                filterContractStatusType.isActive = true;
                filters.push(filterContractStatusType);
            }
            this.tradingService.searchContractsForBulkEdit(filters)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["finalize"])(function () {
                _this.isLoading = false;
            }))
                .subscribe(function (data) {
                if (data) {
                    _this.contractsToedit = data;
                    _this.ContractGridRows = _this.contractsToedit;
                    _this.dataLength = _this.ContractGridRows.length;
                    _this.totalContractList = _this.ContractGridRows;
                    _this.isQuickSumDisplay = true;
                }
            });
        }
    };
    GroupFunctionContractsComponent.prototype.getContractsToAllocation = function (isEmit) {
        var _this = this;
        if (isEmit === void 0) { isEmit = false; }
        if (!this.filters || !(this.columnConfiguration)) {
            return;
        }
        else if (this.columnConfiguration && this.columnConfiguration.length > 0) {
            var filters = this.filters.map(function (x) { return (__assign({}, x)); });
            this.isLoading = true;
            var quantityColumn = this.columnConfiguration
                .find(function (column) { return column.fieldName === 'Quantity'; });
            if (quantityColumn) {
                var filterQuantityType = new _shared_entities_list_and_search_list_and_search_filter_entity__WEBPACK_IMPORTED_MODULE_7__["ListAndSearchFilter"]();
                filterQuantityType.fieldId = quantityColumn.fieldId;
                filterQuantityType.fieldName = quantityColumn.fieldName;
                filterQuantityType.predicate = {
                    filterType: _shared_enums_list_and_search_filter_type_enum__WEBPACK_IMPORTED_MODULE_14__["ListAndSearchFilterType"].Text,
                    operator: 'ne',
                    value1: '0',
                };
                filterQuantityType.isActive = true;
                filters.push(filterQuantityType);
            }
            var allocatedContractColumn = this.columnConfiguration
                .find(function (column) { return column.fieldName === 'AllocatedContractReference'; });
            if (allocatedContractColumn) {
                var filterAllocationStatusType = new _shared_entities_list_and_search_list_and_search_filter_entity__WEBPACK_IMPORTED_MODULE_7__["ListAndSearchFilter"]();
                filterAllocationStatusType.fieldId = allocatedContractColumn.fieldId;
                filterAllocationStatusType.fieldName = allocatedContractColumn.fieldName;
                filterAllocationStatusType.predicate = {
                    filterType: _shared_enums_list_and_search_filter_type_enum__WEBPACK_IMPORTED_MODULE_14__["ListAndSearchFilterType"].Text,
                    operator: 'empty',
                    value1: null,
                    value2: '',
                };
                filterAllocationStatusType.isActive = true;
                filters.push(filterAllocationStatusType);
            }
            var tradeApprovalStatusColumn = this.columnConfiguration
                .find(function (column) { return column.fieldName === 'Status'; });
            if (tradeApprovalStatusColumn) {
                var filterContractStatusType = new _shared_entities_list_and_search_list_and_search_filter_entity__WEBPACK_IMPORTED_MODULE_7__["ListAndSearchFilter"]();
                filterContractStatusType.fieldId = tradeApprovalStatusColumn.fieldId;
                filterContractStatusType.fieldName = tradeApprovalStatusColumn.fieldName;
                filterContractStatusType.predicate = {
                    filterType: _shared_enums_list_and_search_filter_type_enum__WEBPACK_IMPORTED_MODULE_14__["ListAndSearchFilterType"].Text,
                    operator: 'eq',
                    value1: _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_11__["ContractStatus"][_shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_11__["ContractStatus"].Approved],
                };
                filterContractStatusType.isActive = true;
                filters.push(filterContractStatusType);
            }
            var isTradeClosedColumn = this.columnConfiguration
                .find(function (column) { return column.fieldName === 'IsTradeClosed'; });
            if (isTradeClosedColumn) {
                var filterTradeClosed = new _shared_entities_list_and_search_list_and_search_filter_entity__WEBPACK_IMPORTED_MODULE_7__["ListAndSearchFilter"]();
                filterTradeClosed.fieldId = isTradeClosedColumn.fieldId;
                filterTradeClosed.fieldName = isTradeClosedColumn.fieldName;
                filterTradeClosed.predicate = {
                    filterType: _shared_enums_list_and_search_filter_type_enum__WEBPACK_IMPORTED_MODULE_14__["ListAndSearchFilterType"].Text,
                    operator: 'eq',
                    value1: 'Open',
                };
                filterTradeClosed.isActive = true;
                filters.push(filterTradeClosed);
            }
            this.tradingService.searchContractsForBulkEdit(filters)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["finalize"])(function () {
                _this.isLoading = false;
            }))
                .subscribe(function (data) {
                if (data) {
                    _this.contractsToedit = data;
                    _this.ContractGridRows = _this.contractsToedit;
                    if (isEmit) {
                        _this.resetAllocationGrids.emit(true);
                    }
                    _this.dataLength = _this.ContractGridRows.length;
                    _this.totalContractList = _this.ContractGridRows;
                    _this.autoSizeContractsGrid();
                }
            });
        }
    };
    GroupFunctionContractsComponent.prototype.getContractsToDeAllocation = function (isEmit) {
        var _this = this;
        if (isEmit === void 0) { isEmit = false; }
        if (!this.filters || !(this.columnConfiguration)) {
            return;
        }
        else if (this.columnConfiguration && this.columnConfiguration.length > 0) {
            var filters = this.filters.map(function (x) { return (__assign({}, x)); });
            this.isLoading = true;
            var allocatedContractColumn = this.columnConfiguration
                .find(function (column) { return column.fieldName === 'AllocatedContractReference'; });
            if (allocatedContractColumn) {
                var filterAllocationStatusType = new _shared_entities_list_and_search_list_and_search_filter_entity__WEBPACK_IMPORTED_MODULE_7__["ListAndSearchFilter"]();
                filterAllocationStatusType.fieldId = allocatedContractColumn.fieldId;
                filterAllocationStatusType.fieldName = allocatedContractColumn.fieldName;
                filterAllocationStatusType.predicate = {
                    filterType: _shared_enums_list_and_search_filter_type_enum__WEBPACK_IMPORTED_MODULE_14__["ListAndSearchFilterType"].Text,
                    operator: 'notEmpty',
                    value1: null,
                    value2: '',
                };
                filterAllocationStatusType.isActive = true;
                filters.push(filterAllocationStatusType);
            }
            this.tradingService.searchContractsForBulkEdit(filters)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["finalize"])(function () {
                _this.isLoading = false;
            }))
                .subscribe(function (data) {
                if (data) {
                    _this.contractsToedit = data;
                    _this.ContractGridRows = _this.contractsToedit;
                    if (isEmit) {
                        _this.resetAllocationGrids.emit(true);
                    }
                    _this.dataLength = _this.ContractGridRows.length;
                    _this.totalContractList = _this.ContractGridRows;
                    _this.autoSizeContractsGrid();
                }
            });
        }
    };
    GroupFunctionContractsComponent.prototype.onSearchContracts = function () {
        this.searchContractReference = this.searchContractForm.get('searchContractReferenceCtrl').value;
        var rows = [];
        var contractRows = 0;
        this.ContractGridRows = [];
        if (!this.searchContractReference) {
            var selectedRows_1 = this.gridApi.getSelectedRows();
            this.ContractGridRows = this.totalContractList;
            this.gridApi.setRowData(this.ContractGridRows);
            this.dataLength = this.ContractGridRows.length;
            this.autoSizeContractsGrid();
            this.isLoading = false;
            (this.ContractGridRows) ? this.gridApi.hideOverlay() : this.gridApi.showNoRowsOverlay();
            if (selectedRows_1) {
                this.gridApi.forEachNode(function (node) {
                    var row = selectedRows_1.find(function (data) { return data.sectionId === node.data.sectionId; });
                    if (row) {
                        node.setSelected(true);
                    }
                });
            }
            return;
        }
        if (this.totalContractList && this.totalContractList.length > 0) {
            this.isLoading = true;
            if (this.searchContractReference) {
                this.checkExistingRows();
            }
        }
    };
    GroupFunctionContractsComponent.prototype.onSelectionChanged = function (event) {
        var _this = this;
        this.gridApi.forEachNode(function (node) {
            if (event.node.isSelected() && event.node.data.sectionId === node.data.sectionId) {
                node.setSelected(true);
            }
            if (node.data.isTradeClosed === 'Closed' && node.data.contractLabel === event.data.contractLabel) {
                node.selectable = true;
            }
            if (_this.bulkActionTypeId !== _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkClosure) {
                if (node.data.isTradeCancelled === 'Cancelled' && node.data.contractLabel === event.data.contractLabel) {
                    node.selectable = true;
                }
            }
        });
        var selectedRows = this.gridApi.getSelectedRows();
        this.isContractSelected = selectedRows.length > 0;
        if (this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkAllocation) {
            if (selectedRows.length > 1) {
                var purchaseContract = selectedRows.find(function (contract) { return contract.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_12__["ContractTypes"][0]; });
                var salesContract = selectedRows.find(function (contract) { return contract.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_12__["ContractTypes"][1]; });
                if (purchaseContract && salesContract) {
                    this.contractSelected.emit(this.isContractSelected);
                }
                else {
                    this.contractSelected.emit(false);
                }
            }
            else {
                this.contractSelected.emit(false);
            }
        }
        else if (this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkDeAllocation) {
            this.gridApi.forEachNode(function (node) {
                if (node.data.allocatedContractReference === event.node.data.contractLabel) {
                    if (event.node.isSelected() && event.node.data.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_12__["ContractTypes"][1] && event.node.data.blDate) {
                        event.node.setSelected(false);
                        node.setSelected(false);
                        _this.snackbarService.informationSnackBar('Allocated Sales Contract having BL Date can not be De-allocated');
                    }
                    else if (node.data.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_12__["ContractTypes"][1] && node.data.blDate) {
                        event.node.setSelected(false);
                        node.setSelected(false);
                        _this.snackbarService.informationSnackBar('Allocated Sales Contract having BL Date can not be De-allocated');
                    }
                    else if (event.node.isSelected()) {
                        node.setSelected(true);
                    }
                    else {
                        node.setSelected(false);
                    }
                }
            });
            var selectedRows_2 = this.gridApi.getSelectedRows();
            this.isContractSelected = selectedRows_2.length > 1;
            this.contractSelected.emit(this.isContractSelected);
        }
        else {
            this.contractSelected.emit(this.isContractSelected);
        }
        this.gridApi.refreshCells(event.data);
        this.grantLock(Number(event.data.sectionId), event.node, event.data.isLocked);
        this.selectedContractsForBulkFunctions = selectedRows;
    };
    GroupFunctionContractsComponent.prototype.populateEntity = function (entity) {
        this.selectedContractsForBulkFunctions = this.gridApi.getSelectedRows();
        return this.selectedContractsForBulkFunctions;
    };
    GroupFunctionContractsComponent.prototype.grantLock = function (sectionId, node, isLocked) {
        var _this = this;
        if (node.isSelected()) {
            if (!this.locking.includes(sectionId)) {
                this.locking.push(sectionId);
                this.subscriptions.push(this.lockService.isLockedContract(sectionId).subscribe(function (lock) {
                    if (lock.isLocked) {
                        if (_this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkEdition) {
                            _this.locking = _this.locking.filter(function (id) { return id !== sectionId; });
                            _this.lockedContracts.push({ enumEntityId: sectionId, enumEntityValue: lock.message });
                        }
                        else if (_this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkApproval
                            || _this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkAllocation
                            || _this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkDeAllocation) {
                            isLocked = true;
                            var selectedSection = _this.selectedContractsForBulkFunctions.filter(function (item) { return item.sectionId === sectionId; });
                            if (selectedSection.length > 0) {
                                selectedSection[0].isLocked = isLocked;
                                selectedSection[0].lockMessage = lock.message;
                            }
                            _this.locking = _this.locking.filter(function (id) { return id !== sectionId; });
                        }
                    }
                    else {
                        if (_this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkEdition) {
                            _this.subscriptions.push(_this.lockService.lockContract(sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_8__["LockFunctionalContext"].BulkEdition)
                                .subscribe(function () {
                                _this.refeshResourceInformation();
                                _this.locking = _this.locking.filter(function (id) { return id !== sectionId; });
                            }));
                        }
                        else if (_this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkApproval) {
                            _this.subscriptions.push(_this.lockService.lockContract(sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_8__["LockFunctionalContext"].BulkApproval)
                                .subscribe(function () {
                                _this.refeshResourceInformation();
                                isLocked = false;
                                var selectedSection = _this.selectedContractsForBulkFunctions.filter(function (item) { return item.sectionId === sectionId; });
                                if (selectedSection.length > 0) {
                                    selectedSection[0].isLocked = isLocked;
                                    selectedSection[0].lockMessage = lock.message;
                                }
                                _this.locking = _this.locking.filter(function (id) { return id !== sectionId; });
                            }));
                        }
                        else if (_this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkAllocation) {
                            _this.subscriptions.push(_this.lockService.lockContract(sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_8__["LockFunctionalContext"].BulkAllocation)
                                .subscribe(function () {
                                _this.refeshResourceInformation();
                                isLocked = false;
                                var selectedSection = _this.selectedContractsForBulkFunctions.filter(function (item) { return item.sectionId === sectionId; });
                                if (selectedSection.length > 0) {
                                    selectedSection[0].isLocked = isLocked;
                                    selectedSection[0].lockMessage = lock.message;
                                }
                                _this.locking = _this.locking.filter(function (id) { return id !== sectionId; });
                            }));
                        }
                        else if (_this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkDeAllocation) {
                            _this.subscriptions.push(_this.lockService.lockContract(sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_8__["LockFunctionalContext"].BulkDeallocation)
                                .subscribe(function () {
                                _this.refeshResourceInformation();
                                isLocked = false;
                                var selectedSection = _this.selectedContractsForBulkFunctions.filter(function (item) { return item.sectionId === sectionId; });
                                if (selectedSection.length > 0) {
                                    selectedSection[0].isLocked = isLocked;
                                    selectedSection[0].lockMessage = lock.message;
                                }
                                _this.locking = _this.locking.filter(function (id) { return id !== sectionId; });
                            }));
                        }
                    }
                }));
            }
        }
        else {
            this.lockedContracts = this.lockedContracts.filter(function (item) { return item.enumEntityId !== sectionId; });
            if (!this.unlocking.includes(sectionId)) {
                this.unlocking.push(sectionId);
                this.refeshResourceInformation();
                if (this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkEdition) {
                    this.subscriptions.push(this.lockService.unlockContract(sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_8__["LockFunctionalContext"].BulkEdition)
                        .subscribe(function () {
                        node.setRowSelectable(true);
                        _this.unlocking = _this.unlocking.filter(function (id) { return id !== sectionId; });
                    }));
                }
                else if (this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkApproval) {
                    this.subscriptions.push(this.lockService.unlockContract(sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_8__["LockFunctionalContext"].BulkApproval)
                        .subscribe(function () {
                        node.setRowSelectable(true);
                        _this.unlocking = _this.unlocking.filter(function (id) { return id !== sectionId; });
                    }));
                }
                else if (this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkAllocation) {
                    this.subscriptions.push(this.lockService.unlockContract(sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_8__["LockFunctionalContext"].BulkAllocation)
                        .subscribe(function () {
                        node.setRowSelectable(true);
                        _this.unlocking = _this.unlocking.filter(function (id) { return id !== sectionId; });
                    }));
                }
                else if (this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkDeAllocation) {
                    this.subscriptions.push(this.lockService.unlockContract(sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_8__["LockFunctionalContext"].BulkDeallocation)
                        .subscribe(function () {
                        node.setRowSelectable(true);
                        _this.unlocking = _this.unlocking.filter(function (id) { return id !== sectionId; });
                    }));
                }
            }
        }
    };
    GroupFunctionContractsComponent.prototype.refeshResourceInformation = function () {
        var _this = this;
        this.resourcesInformation = new Array();
        this.groupFunctionsGridOptions.api.forEachNode(function (node) {
            if (node.isSelected()) {
                var resourceInformation = new _shared_entities_lock_resource_information_entity__WEBPACK_IMPORTED_MODULE_9__["LockResourceInformation"]();
                resourceInformation.resourceType = 'Contract';
                resourceInformation.resourceId = node.data.sectionId;
                resourceInformation.resourceCode = node.data.contractReference;
                _this.resourcesInformation.push(resourceInformation);
            }
        });
    };
    GroupFunctionContractsComponent.prototype.autoSizeContractsGrid = function () {
        if (this.gridColumnApi) {
            this.gridColumnApi.autoSizeAllColumns();
            this.agGridService.sizeColumns(this.groupFunctionsGridOptions);
        }
    };
    GroupFunctionContractsComponent.prototype.onFilterSetDetailsChange = function (filters) {
        this.filters = filters;
        if (this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkEdition) {
            this.getContractsToEdit();
        }
        else if (this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkApproval) {
            this.getContractsToApprove();
        }
        else if (this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkClosure) {
            this.getContractsToClosure();
        }
        else if (this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkAllocation) {
            this.getContractsToAllocation();
        }
        else if (this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkDeAllocation) {
            this.getContractsToDeAllocation();
        }
    };
    GroupFunctionContractsComponent.prototype.onColumnVisibilityChanged = function (col) {
        this.userPreferencesComponent.onChangeColumnVisibility(col);
        this.autoSizeContractsGrid();
    };
    GroupFunctionContractsComponent.prototype.loadBulkAllocationColumns = function (columnConfiguration) {
        var allocationColumnConfiguration;
        allocationColumnConfiguration = this.getColumnConfiguration(columnConfiguration, this.bulkAllocationColumns);
        return allocationColumnConfiguration;
    };
    GroupFunctionContractsComponent.prototype.loadBulkDeAllocationColumns = function (columnConfiguration) {
        var deAllocationColumnConfiguration;
        deAllocationColumnConfiguration = this.getColumnConfiguration(columnConfiguration, this.bulkDeAllocationColumns);
        return deAllocationColumnConfiguration;
    };
    GroupFunctionContractsComponent.prototype.getColumnConfiguration = function (columnConfiguration, columnsInList) {
        var gridColumnConfiguration = [];
        if (columnConfiguration.length > 0) {
            columnConfiguration.forEach(function (column) {
                if (columnsInList.indexOf(column.fieldName) > -1) {
                    column.isVisible = true;
                    gridColumnConfiguration.push(column);
                }
            });
        }
        return gridColumnConfiguration;
    };
    GroupFunctionContractsComponent.prototype.onFirstDataRendered = function () {
        if (this.gridColumnApi) {
            this.gridColumnApi.autoSizeAllColumns();
        }
    };
    GroupFunctionContractsComponent.prototype.checkExistingRows = function () {
        var _this = this;
        var selectedRows = this.gridApi.getSelectedRows();
        var rows = [];
        if (selectedRows && selectedRows.length > 0) {
            rows = this.gridApi.getSelectedRows();
        }
        this.contractsToedit = this.totalContractList.filter(function (item) { return item.contractLabel != null; });
        var data = this.contractsToedit.filter(function (item) {
            return item.contractLabel.toString().toUpperCase().includes(_this.searchContractReference.toUpperCase());
        });
        if (data) {
            data.forEach(function (rowSelected) {
                var addAllocatedSection = false;
                if (rows && rows.length > 0) {
                    var rowExists = rows.find(function (section) { return section.sectionId === rowSelected.sectionId; });
                    if (!rowExists) {
                        rows.push(rowSelected);
                        addAllocatedSection = true;
                    }
                }
                else {
                    rows.push(rowSelected);
                    addAllocatedSection = true;
                }
                if (addAllocatedSection && rowSelected.allocatedContractReference
                    && _this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionTypes"].TradeBulkDeAllocation) {
                    var allocatedSection = _this.totalContractList.find(function (section) { return section.contractLabel === rowSelected.allocatedContractReference; });
                    if (allocatedSection) {
                        rows.push(allocatedSection);
                    }
                }
            });
        }
        this.ContractGridRows = rows;
        this.gridApi.setRowData(this.ContractGridRows);
        this.dataLength = this.ContractGridRows.length;
        this.autoSizeContractsGrid();
        this.isLoading = false;
        (this.ContractGridRows) ? this.gridApi.hideOverlay() : this.gridApi.showNoRowsOverlay();
        if (this.dataLength > 0) {
            this.gridApi.forEachNode(function (node) {
                var row = selectedRows.find(function (data) { return data.sectionId === node.data.sectionId; });
                if (row) {
                    node.setSelected(true);
                }
            });
        }
    };
    GroupFunctionContractsComponent.prototype.onSearchContractsDeallocation = function () {
        var _this = this;
        this.searchContractReferenceDeallocation = this.searchContractForm.get('searchContractReferenceDeallocationCtrl').value;
        this.groupingNumber = this.searchContractForm.get('groupNumberDeallocationCtrl').value;
        this.ContractGridRows = [];
        var rows = [];
        if (!this.searchContractReferenceDeallocation && !this.groupingNumber) {
            var selectedRows_3 = this.gridApi.getSelectedRows();
            this.ContractGridRows = this.totalContractList;
            this.gridApi.setRowData(this.ContractGridRows);
            this.dataLength = this.ContractGridRows.length;
            this.autoSizeContractsGrid();
            this.isLoading = false;
            (this.ContractGridRows) ? this.gridApi.hideOverlay() : this.gridApi.showNoRowsOverlay();
            if (selectedRows_3) {
                this.gridApi.forEachNode(function (node) {
                    var row = selectedRows_3.find(function (data) { return data.sectionId === node.data.sectionId; });
                    if (row) {
                        node.setSelected(true);
                    }
                });
            }
            return;
        }
        if (this.totalContractList && this.totalContractList.length > 0) {
            this.isLoading = true;
            if (this.searchContractReferenceDeallocation) {
                this.contractsToedit = this.totalContractList.filter(function (item) { return item.contractLabel != null; });
                rows = this.contractsToedit.filter(function (item) {
                    return item.contractLabel.toString().toUpperCase().includes(_this.searchContractReferenceDeallocation.toUpperCase());
                });
            }
            if (this.groupingNumber) {
                this.contractsToedit = this.totalContractList.filter(function (item) { return item.groupingNumber != null; });
                rows = this.contractsToedit.filter(function (item) {
                    return item.groupingNumber === (Number(_this.groupingNumber));
                });
            }
            var selectedRows_4 = this.gridApi.getSelectedRows();
            if (selectedRows_4) {
                selectedRows_4.forEach(function (row) {
                    var rowAlreadyExists = rows.find(function (section) { return section.sectionId === row.sectionId; });
                    if (!rowAlreadyExists) {
                        rows.push(row);
                    }
                });
            }
            var alloactedRows = rows;
            alloactedRows.forEach(function (row) {
                if (row.allocatedContractReference) {
                    var allocatedRow_1 = _this.totalContractList.find(function (allocatedRow) { return allocatedRow.contractLabel === row.allocatedContractReference; });
                    if (allocatedRow_1) {
                        var rowAlreadyExists = rows.find(function (section) { return section.sectionId === allocatedRow_1.sectionId; });
                        if (!rowAlreadyExists) {
                            rows.push(allocatedRow_1);
                        }
                    }
                }
            });
            this.ContractGridRows = rows;
            this.gridApi.setRowData(this.ContractGridRows);
            this.dataLength = this.ContractGridRows.length;
            this.autoSizeContractsGrid();
            this.isLoading = false;
            (this.ContractGridRows) ? this.gridApi.hideOverlay() : this.gridApi.showNoRowsOverlay();
            if (this.dataLength > 0) {
                this.gridApi.forEachNode(function (node) {
                    var row = selectedRows_4.find(function (data) { return data.sectionId === node.data.sectionId; });
                    if (row) {
                        node.setSelected(true);
                    }
                });
            }
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], GroupFunctionContractsComponent.prototype, "contractSelected", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Object)
    ], GroupFunctionContractsComponent.prototype, "hasDeleteViewPrivilege", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('userPreferences'),
        __metadata("design:type", _shared_components_ag_grid_user_preferences_ag_grid_user_preferences_component__WEBPACK_IMPORTED_MODULE_5__["AgGridUserPreferencesComponent"])
    ], GroupFunctionContractsComponent.prototype, "userPreferencesComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], GroupFunctionContractsComponent.prototype, "resetAllocationGrids", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"])('window:beforeunload', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], GroupFunctionContractsComponent.prototype, "unloadNotification", null);
    GroupFunctionContractsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-group-function-contracts',
            template: __webpack_require__(/*! ./group-function-contracts.component.html */ "./Client/app/trading/components/group-functions/group-function-contracts/group-function-contracts.component.html"),
            styles: [__webpack_require__(/*! ./group-function-contracts.component.scss */ "./Client/app/trading/components/group-functions/group-function-contracts/group-function-contracts.component.scss")],
        }),
        __param(12, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"])(_shared_entities_window_injection_token__WEBPACK_IMPORTED_MODULE_10__["WINDOW"])),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_19__["TradingService"],
            _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_18__["LockService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_16__["FormConfigurationProviderService"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_20__["SnackbarService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialog"],
            _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_21__["UiService"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_15__["AgGridService"],
            _shared_services_grid_configuration_provider_service__WEBPACK_IMPORTED_MODULE_17__["GridConfigurationProviderService"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_22__["UtilService"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_15__["AgGridService"],
            Window])
    ], GroupFunctionContractsComponent);
    return GroupFunctionContractsComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_6__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-functions/group-function-warning/group-function-warning.component.html":
/*!********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/group-function-warning/group-function-warning.component.html ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"main-container\"\r\n     fxLayout=\"column\"\r\n     fxLayoutAlign=\"start none\">\r\n    <div class=\"group-function-warning-banner\">\r\n        <mat-card class=\"group-function-warning-card\">\r\n            <div class=\"question-circle-icon\">\r\n                <mat-icon>help_outline</mat-icon>\r\n            </div>\r\n            <mat-card-header>\r\n                <mat-card-title *ngIf=\"bulkActionTypeId==GroupFunctionTypes.TradeBulkEdition\">\r\n                    <h4>Please select contracts to bulk edit</h4>\r\n                </mat-card-title>\r\n                <mat-card-title *ngIf=\"bulkActionTypeId==GroupFunctionTypes.TradeBulkApproval\">\r\n                    <h4>Please select contracts for bulk approval</h4>\r\n                </mat-card-title>\r\n                <mat-card-title *ngIf=\"bulkActionTypeId==GroupFunctionTypes.TradeBulkClosure\">\r\n                    <h4>Please select contracts for bulk closure</h4>\r\n                </mat-card-title>\r\n                <mat-card-title *ngIf=\"bulkActionTypeId==GroupFunctionTypes.TradeBulkAllocation\">\r\n                    <h4>Please select contracts for bulk allocation</h4>\r\n                </mat-card-title>\r\n                <mat-card-title *ngIf=\"bulkActionTypeId==GroupFunctionTypes.TradeBulkDeAllocation\">\r\n                    <h4>Please select contracts for bulk deAllocation</h4>\r\n                </mat-card-title>\r\n                <mat-card-subtitle>\r\n                    be sure to filter the list accordingly\r\n                </mat-card-subtitle>\r\n            </mat-card-header>\r\n        </mat-card>\r\n    </div>\r\n</div>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/group-function-warning/group-function-warning.component.scss":
/*!********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/group-function-warning/group-function-warning.component.scss ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "mat-card.group-function-warning-card.mat-card {\n  padding: 0 !important;\n  height: 75px;\n  display: flex;\n  align-items: center; }\n  mat-card.group-function-warning-card.mat-card mat-card-header.mat-card-header mat-card-title.mat-card-title {\n    margin: 0;\n    padding: 8px 0; }\n  mat-card.group-function-warning-card.mat-card mat-card-header.mat-card-header h4 {\n    margin: 0; }\n  mat-card.group-function-warning-card.mat-card mat-card-header.mat-card-header mat-card-subtitle.mat-card-subtitle {\n    margin: 0; }\n"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/group-function-warning/group-function-warning.component.ts":
/*!******************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/group-function-warning/group-function-warning.component.ts ***!
  \******************************************************************************************************************/
/*! exports provided: GroupFunctionWarningComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GroupFunctionWarningComponent", function() { return GroupFunctionWarningComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../shared/enums/group-function-type */ "./Client/app/shared/enums/group-function-type.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var GroupFunctionWarningComponent = /** @class */ (function (_super) {
    __extends(GroupFunctionWarningComponent, _super);
    function GroupFunctionWarningComponent(formConfigurationProvider, route) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.route = route;
        _this.GroupFunctionTypes = _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_4__["GroupFunctionTypes"];
        _this.bulkActionTypeId = Number(decodeURIComponent(_this.route.snapshot.paramMap.get('bulkActionTypeId')));
        return _this;
    }
    GroupFunctionWarningComponent.prototype.ngOnInit = function () {
    };
    GroupFunctionWarningComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-group-function-warning',
            template: __webpack_require__(/*! ./group-function-warning.component.html */ "./Client/app/trading/components/group-functions/group-function-warning/group-function-warning.component.html"),
            styles: [__webpack_require__(/*! ./group-function-warning.component.scss */ "./Client/app/trading/components/group-functions/group-function-warning/group-function-warning.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_3__["FormConfigurationProviderService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"]])
    ], GroupFunctionWarningComponent);
    return GroupFunctionWarningComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_2__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-functions/group-functions.component.html":
/*!**************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/group-functions.component.html ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div [ngSwitch]=\"bulkActionTypeId\">\r\n    <atlas-trade-bulk-edit #tradeBulkEdition\r\n                           *ngSwitchDefault>\r\n    </atlas-trade-bulk-edit>\r\n    <atlas-trade-bulk-approval #tradeBulkApproval\r\n                               *ngSwitchCase=GroupFunctionTypes.TradeBulkApproval>\r\n    </atlas-trade-bulk-approval>\r\n    <atlas-trade-cost-bulk-update #costBulkUpdate\r\n                                  *ngSwitchCase=GroupFunctionTypes.Costs>\r\n\r\n    </atlas-trade-cost-bulk-update>\r\n    <atlas-trade-bulk-closure #tradeBulkClosure\r\n                              *ngSwitchCase=GroupFunctionTypes.TradeBulkClosure>\r\n    </atlas-trade-bulk-closure>\r\n    <atlas-trade-bulk-allocation #tradeBulkAllocation\r\n                                 *ngSwitchCase=GroupFunctionTypes.TradeBulkAllocation>\r\n    </atlas-trade-bulk-allocation>\r\n    <atlas-trade-bulk-deallocation #tradeBulkDeAllocation\r\n                                   *ngSwitchCase=GroupFunctionTypes.TradeBulkDeAllocation>\r\n    </atlas-trade-bulk-deallocation>\r\n</div>"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/group-functions.component.scss":
/*!**************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/group-functions.component.scss ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/group-functions/group-functions.component.ts":
/*!************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/group-functions.component.ts ***!
  \************************************************************************************/
/*! exports provided: GroupFunctionsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GroupFunctionsComponent", function() { return GroupFunctionsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../shared/enums/group-function-type */ "./Client/app/shared/enums/group-function-type.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _shared_services_title_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../shared/services/title.service */ "./Client/app/shared/services/title.service.ts");
/* harmony import */ var _trade_bulk_approval_trade_bulk_approval_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./trade-bulk-approval/trade-bulk-approval.component */ "./Client/app/trading/components/group-functions/trade-bulk-approval/trade-bulk-approval.component.ts");
/* harmony import */ var _trade_bulk_edit_trade_bulk_edit_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./trade-bulk-edit/trade-bulk-edit.component */ "./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-edit.component.ts");
/* harmony import */ var _trade_cost_bulk_update_trade_cost_bulk_update_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./trade-cost-bulk-update/trade-cost-bulk-update.component */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/trade-cost-bulk-update.component.ts");
/* harmony import */ var _trade_bulk_closure_trade_bulk_closure_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./trade-bulk-closure/trade-bulk-closure.component */ "./Client/app/trading/components/group-functions/trade-bulk-closure/trade-bulk-closure.component.ts");
/* harmony import */ var _trade_bulk_allocation_trade_bulk_allocation_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./trade-bulk-allocation/trade-bulk-allocation.component */ "./Client/app/trading/components/group-functions/trade-bulk-allocation/trade-bulk-allocation.component.ts");
/* harmony import */ var _trade_bulk_deallocation_trade_bulk_deallocation_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./trade-bulk-deallocation/trade-bulk-deallocation.component */ "./Client/app/trading/components/group-functions/trade-bulk-deallocation/trade-bulk-deallocation.component.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};















var GroupFunctionsComponent = /** @class */ (function (_super) {
    __extends(GroupFunctionsComponent, _super);
    function GroupFunctionsComponent(route, snackbarService, formBuilder, dialog, formConfigurationProvider, titleService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.route = route;
        _this.snackbarService = snackbarService;
        _this.formBuilder = formBuilder;
        _this.dialog = dialog;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.titleService = titleService;
        _this.formComponents = [];
        _this.GroupFunctionTypes = _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_5__["GroupFunctionTypes"];
        _this.isSave = false;
        _this.bulkActionTypeId = Number(decodeURIComponent(_this.route.snapshot.paramMap.get('bulkActionTypeId')));
        return _this;
    }
    GroupFunctionsComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
        this.groupFunctionsFormGroup = this.formBuilder.group({
            dummyFormControl: new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"](),
        });
    };
    GroupFunctionsComponent.prototype.unloadNotification = function ($event) {
        if (this.groupFunctionsFormGroup.dirty) {
            $event.returnValue = true;
        }
    };
    GroupFunctionsComponent.prototype.ngAfterViewInit = function () {
        if (this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_5__["GroupFunctionTypes"].TradeBulkEdition) {
            this.isSave = true;
            this.titleService.setTitle('Trade Bulk Edition');
            this.groupFunctionsFormGroup = this.formBuilder.group({
                tradeBulkEdition: this.tradeBulkEdition.getFormGroup(),
            });
            this.formComponents.push(this.tradeBulkEdition);
        }
        else if (this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_5__["GroupFunctionTypes"].TradeBulkApproval) {
            this.titleService.setTitle('Trade Bulk Approval');
            this.groupFunctionsFormGroup = this.formBuilder.group({
                tradeBulkApproval: this.tradeBulkApproval.getFormGroup(),
            });
            this.formComponents.push(this.tradeBulkApproval);
        }
        else if (this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_5__["GroupFunctionTypes"].TradeBulkClosure) {
            this.titleService.setTitle('Trade Closure Approval');
            this.groupFunctionsFormGroup = this.formBuilder.group({
                tradeBulkClosure: this.tradeBulkClosure.getFormGroup(),
            });
            this.formComponents.push(this.tradeBulkClosure);
        }
        else if (this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_5__["GroupFunctionTypes"].TradeBulkAllocation) {
            this.titleService.setTitle('Trade Bulk Allocation');
            this.groupFunctionsFormGroup = this.formBuilder.group({
                tradeBulkAllocation: this.tradeBulkAllocation.getFormGroup(),
            });
            this.formComponents.push(this.tradeBulkAllocation);
        }
        else if (this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_5__["GroupFunctionTypes"].TradeBulkDeAllocation) {
            this.titleService.setTitle('Trade Bulk DeAllocation');
            this.groupFunctionsFormGroup = this.formBuilder.group({
                tradeBulkDeAllocation: this.tradeBulkDeAllocation.getFormGroup(),
            });
            this.formComponents.push(this.tradeBulkDeAllocation);
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('tradeBulkEdition'),
        __metadata("design:type", _trade_bulk_edit_trade_bulk_edit_component__WEBPACK_IMPORTED_MODULE_10__["TradeBulkEditComponent"])
    ], GroupFunctionsComponent.prototype, "tradeBulkEdition", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('tradeBulkApproval'),
        __metadata("design:type", _trade_bulk_approval_trade_bulk_approval_component__WEBPACK_IMPORTED_MODULE_9__["TradeBulkApprovalComponent"])
    ], GroupFunctionsComponent.prototype, "tradeBulkApproval", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('costBulkUpdate'),
        __metadata("design:type", _trade_cost_bulk_update_trade_cost_bulk_update_component__WEBPACK_IMPORTED_MODULE_11__["TradeCostBulkUpdateComponent"])
    ], GroupFunctionsComponent.prototype, "costBulkUpdate", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('tradeBulkClosure'),
        __metadata("design:type", _trade_bulk_closure_trade_bulk_closure_component__WEBPACK_IMPORTED_MODULE_12__["TradeBulkClosureComponent"])
    ], GroupFunctionsComponent.prototype, "tradeBulkClosure", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('tradeBulkAllocation'),
        __metadata("design:type", _trade_bulk_allocation_trade_bulk_allocation_component__WEBPACK_IMPORTED_MODULE_13__["TradeBulkAllocationComponent"])
    ], GroupFunctionsComponent.prototype, "tradeBulkAllocation", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('tradeBulkDeAllocation'),
        __metadata("design:type", _trade_bulk_deallocation_trade_bulk_deallocation_component__WEBPACK_IMPORTED_MODULE_14__["TradeBulkDeallocationComponent"])
    ], GroupFunctionsComponent.prototype, "tradeBulkDeAllocation", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"])('window:beforeunload', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], GroupFunctionsComponent.prototype, "unloadNotification", null);
    GroupFunctionsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-group-functions',
            template: __webpack_require__(/*! ./group-functions.component.html */ "./Client/app/trading/components/group-functions/group-functions.component.html"),
            styles: [__webpack_require__(/*! ./group-functions.component.scss */ "./Client/app/trading/components/group-functions/group-functions.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_7__["SnackbarService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialog"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationProviderService"],
            _shared_services_title_service__WEBPACK_IMPORTED_MODULE_8__["TitleService"]])
    ], GroupFunctionsComponent);
    return GroupFunctionsComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-allocation/allocation-grids/allocation-grids.component.html":
/*!******************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-allocation/allocation-grids/allocation-grids.component.html ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"mat-elevation-z1 padding-small\">\r\n    <div fxFlex=\"100%\"\r\n         fxFlex.xs=\"100%\"\r\n         fxFlex.sm=\"100%\">\r\n        <div fxLayout=\"row\"\r\n             class=\"table-title\">\r\n            <h3>Purchase Contracts</h3>\r\n            <span class=\"fill-space\"></span>\r\n        </div>\r\n        <div ag-grid=\"contractGridOptions\"\r\n             class=\"ag-theme-material pointer-cursor\">\r\n            <ag-grid-angular class=\"ag-theme-material\"\r\n                             [rowData]=\"contractPurchaseRows\"\r\n                             [columnDefs]=\"allocationGridColumns\"\r\n                             domLayout=autoHeight\r\n                             (gridReady)=\"onGridReadyPurchase($event)\"\r\n                             [pagination]=\"true\"\r\n                             [paginationPageSize]=\"10\"\r\n                             (rowSelected)=\"onPurcahseRowSelected($event)\"\r\n                             [enableSorting]=\"true\"\r\n                             [enableColResize]=\"false\"\r\n                             [rowHeight]=\"atlasAgGridParam.rowHeight\"\r\n                             rowSelection='multiple'\r\n                             enableFilter>\r\n            </ag-grid-angular>\r\n        </div>\r\n    </div>\r\n</mat-card>\r\n<mat-card class=\"mat-elevation-z1 padding-small atr-ag-grid\">\r\n    <div fxFlex=\"100%\"\r\n         fxFlex.xs=\"100%\"\r\n         fxFlex.sm=\"100%\">\r\n        <div fxLayout=\"row\"\r\n             class=\"table-title\">\r\n            <h3>Sales Contracts</h3>\r\n            <span class=\"fill-space\"></span>\r\n        </div>\r\n        <div ag-grid=\"contractGridOptions\"\r\n             class=\"ag-theme-material pointer-cursor\">\r\n            <ag-grid-angular class=\"ag-theme-material\"\r\n                             [rowData]=\"contractSalesRows\"\r\n                             [columnDefs]=\"allocationGridColumns\"\r\n                             domLayout=autoHeight\r\n                             (gridReady)=\"onGridReadySales($event)\"\r\n                             [pagination]=\"true\"\r\n                             [paginationPageSize]=\"10\"\r\n                             [enableSorting]=\"true\"\r\n                             (rowSelected)=\"onSaleRowSelected($event)\"\r\n                             [enableColResize]=\"false\"\r\n                             rowSelection='multiple'\r\n                             [rowHeight]=\"atlasAgGridParam.rowHeight\"\r\n                             enableFilter>\r\n            </ag-grid-angular>\r\n        </div>\r\n    </div>\r\n</mat-card>\r\n\r\n<div class=\"trade-allocation-messages\"\r\n     *ngFor=\"let warningMessage of showWarningMessage\">\r\n    <mat-card class=\"trade-allocation-warning-card\"\r\n              *ngIf=\"warningMessage.showRestrictedDescriptionCard\">\r\n        <div class=\"error-circle-icon\">\r\n            <mat-icon>remove_circle</mat-icon>\r\n        </div>\r\n        <mat-card-header>\r\n            <mat-card-title>\r\n                <h4>Allocation cannot be completed for {{warningMessage.sourceContract}} and\r\n                    {{warningMessage.targetContract}}\r\n                </h4>\r\n            </mat-card-title>\r\n            <mat-card-subtitle>\r\n                {{warningMessage.restrictedWarningMessage}}\r\n            </mat-card-subtitle>\r\n            <button class=\"remove-button\"\r\n                    mat-button\r\n                    (click)=\"onRestrictRemoveclicked(warningMessage.sourceContract,warningMessage.targetContract,warningMessage.showRestrictedDescriptionCard)\">REMOVE\r\n            </button>\r\n        </mat-card-header>\r\n    </mat-card>\r\n\r\n    <mat-card class=\"trade-allocation-warning-card\"\r\n              *ngIf=\"warningMessage.showWarningDescriptionCard\">\r\n        <div class=\"warning-circle-icon\">\r\n            <mat-icon>warning_outline</mat-icon>\r\n        </div>\r\n        <mat-card-header>\r\n            <mat-card-title>\r\n                <h4>Allocation can be completed for {{warningMessage.sourceContract}} and\r\n                    {{warningMessage.targetContract}}\r\n                </h4>\r\n            </mat-card-title>\r\n            <mat-card-subtitle>\r\n                {{warningMessage.warningMessage}}\r\n            </mat-card-subtitle>\r\n            <button class=\"remove-button\"\r\n                    mat-button\r\n                    (click)=\"onWarningRemoveButtonClicked($event)\">REMOVE\r\n            </button>\r\n\r\n        </mat-card-header>\r\n    </mat-card>\r\n\r\n    <mat-card class=\"trade-allocation-warning-card\"\r\n              *ngIf=\"warningMessage.showAllowDescriptionCard\">\r\n        <button mat-fab\r\n                disabled>\r\n            <mat-icon>check</mat-icon>\r\n        </button>\r\n        <mat-card-header>\r\n            <mat-card-title>\r\n                <h4>Allocation is allowed for {{warningMessage.sourceContract}} and {{warningMessage.targetContract}}\r\n                </h4>\r\n            </mat-card-title>\r\n        </mat-card-header>\r\n    </mat-card>\r\n</div>\r\n\r\n<mat-card class=\"trade-allocation-shipping-card\">\r\n    <h3>Allocation Options</h3>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"start left\"\r\n             fxFlex=\"60\">\r\n\r\n            <mat-form-field>\r\n                <mat-select placeholder=\"Transfer Shipping\"\r\n                            [formControl]=\"shippingTypeCtrl\">\r\n                    <mat-option *ngFor=\"let type of shippingTypes\"\r\n                                [value]=\"type.value\">{{type.shippingDescription}}</mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n            <mat-form-field *ngIf=\"isOneToOneAllocation\">\r\n                <input matInput\r\n                       [textMask]=\"{mask:mask}\"\r\n                       [formControl]=\"sourceQuantityCtrl\"\r\n                       placeholder=\"Quantity to allocate\"\r\n                       (blur)=\"checkQuantityValue()\"\r\n                       (keydown.enter)=\"$event.preventDefault()\"\r\n                       [required]=\"sourceQuantityCtrl.isRequired\"\r\n                       autocomplete=\"off\">\r\n                <mat-error *ngIf=\"sourceQuantityCtrl.hasError('required')\">\r\n                    Quantity to allocate is required\r\n                </mat-error>\r\n                <mat-error *ngIf=\"sourceQuantityCtrl.hasError('isPositiveError')\">\r\n                    Quantity to allocate must be positive.\r\n                </mat-error>\r\n                <mat-error *ngIf=\"sourceQuantityCtrl.hasError('max')\">\r\n                    Cannot be greater than quantity available.\r\n                </mat-error>\r\n                <mat-error *ngIf=\"sourceQuantityCtrl.hasError('min')\">\r\n                    Quantity cannot be zero.\r\n                </mat-error>\r\n            </mat-form-field>\r\n            <atlas-form-input fxFlex=\"30%\"\r\n                              *ngIf=\"isOneToNAllocation\"\r\n                              class=\"side-nav-footer-components\"\r\n                              [fieldControl]=\"sumOfQuantitiesCtrl\"\r\n                              [isEditable]=\"isInputField\"\r\n                              label='Sum Of Quantities'>\r\n            </atlas-form-input>\r\n\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-allocation/allocation-grids/allocation-grids.component.scss":
/*!******************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-allocation/allocation-grids/allocation-grids.component.scss ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "mat-card.trade-allocation-warning-card.mat-card {\n  padding: 0 !important;\n  height: 75px;\n  display: flex;\n  align-items: center; }\n  mat-card.trade-allocation-warning-card.mat-card button {\n    margin: 0px 15px 0 10px;\n    box-shadow: none; }\n  mat-card.trade-allocation-warning-card.mat-card mat-card-header.mat-card-header mat-card-title.mat-card-title {\n    margin: 0;\n    padding: 8px 0; }\n  mat-card.trade-allocation-warning-card.mat-card mat-card-header.mat-card-header h4 {\n    margin: 0; }\n  mat-card.trade-allocation-warning-card.mat-card mat-card-header.mat-card-header mat-card-subtitle.mat-card-subtitle {\n    margin: 0; }\n  button.remove-button.mat-button {\n  position: absolute;\n  right: 10px;\n  bottom: 15px; }\n"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-allocation/allocation-grids/allocation-grids.component.ts":
/*!****************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-allocation/allocation-grids/allocation-grids.component.ts ***!
  \****************************************************************************************************************************/
/*! exports provided: AllocationGridsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AllocationGridsComponent", function() { return AllocationGridsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/enums/contract-type.enum */ "./Client/app/shared/enums/contract-type.enum.ts");
/* harmony import */ var _shared_validators_warning_messages_validator_validator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/validators/warning-messages-validator.validator */ "./Client/app/shared/validators/warning-messages-validator.validator.ts");
/* harmony import */ var _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/services/http-services/execution.service */ "./Client/app/shared/services/http-services/execution.service.ts");
/* harmony import */ var _shared_enums_warning_message_type_enum__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/enums/warning-message-type.enum */ "./Client/app/shared/enums/warning-message-type.enum.ts");
/* harmony import */ var _trading_entities_allocation_warning__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../trading/entities/allocation-warning */ "./Client/app/trading/entities/allocation-warning.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_directives_number_validators_directive__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/directives/number-validators.directive */ "./Client/app/shared/directives/number-validators.directive.ts");
/* harmony import */ var _shared_enums_shipping_type_enum__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/enums/shipping-type-enum */ "./Client/app/shared/enums/shipping-type-enum.ts");
/* harmony import */ var _shared_numberMask__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/numberMask */ "./Client/app/shared/numberMask.ts");
/* harmony import */ var _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../shared/services/ag-grid.service */ "./Client/app/shared/services/ag-grid.service.ts");
/* harmony import */ var _shared_entities_masterdata_entity__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../shared/entities/masterdata.entity */ "./Client/app/shared/entities/masterdata.entity.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_services_http_services_configuration_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../../shared/services/http-services/configuration.service */ "./Client/app/shared/services/http-services/configuration.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


















var AllocationGridsComponent = /** @class */ (function (_super) {
    __extends(AllocationGridsComponent, _super);
    function AllocationGridsComponent(formConfigurationProvider, snackbarService, executionService, route, gridService, formBuilder, configurationService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.snackbarService = snackbarService;
        _this.executionService = executionService;
        _this.route = route;
        _this.gridService = gridService;
        _this.formBuilder = formBuilder;
        _this.configurationService = configurationService;
        _this.purchaseGridOptions = {};
        _this.salesGridOptions = {};
        _this.allocationMessage = [];
        _this.showAllowDescriptionCard = false;
        _this.showRestrictedDescriptionCard = false;
        _this.showWarningDescriptionCard = false;
        _this.showWarningMessage = [];
        _this.masterData = new _shared_entities_masterdata_entity__WEBPACK_IMPORTED_MODULE_15__["MasterData"]();
        _this.shippingTypeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_10__["AtlasFormControl"]('shippingType');
        _this.sourceQuantityCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_10__["AtlasFormControl"]('sourceQuantity');
        _this.sumOfQuantitiesCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_10__["AtlasFormControl"]('sumOfQuantities');
        _this.maxQuantity = 0;
        _this.shippingTypes = [];
        _this.mask = Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_13__["CustomNumberMask"])(12, 10, true);
        _this.isOneToOneAllocation = false;
        _this.isInputField = false;
        _this.isOneToNAllocation = false;
        _this.isSaveDisabled = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.allocationSetUpData = [];
        return _this;
    }
    AllocationGridsComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
        this.atlasAgGridParam = this.gridService.getAgGridParam();
        this.sumOfQuantitiesCtrl.disable();
        this.masterData = this.route.snapshot.data.masterdata;
        this.initializeGridColumns();
        for (var type in _shared_enums_shipping_type_enum__WEBPACK_IMPORTED_MODULE_12__["ShippingType"]) {
            if (typeof _shared_enums_shipping_type_enum__WEBPACK_IMPORTED_MODULE_12__["ShippingType"][type] === 'number') {
                this.shippingTypes.push({ value: _shared_enums_shipping_type_enum__WEBPACK_IMPORTED_MODULE_12__["ShippingType"][type], shippingDescription: type });
            }
        }
        this.shippingTypeCtrl.patchValue(_shared_enums_shipping_type_enum__WEBPACK_IMPORTED_MODULE_12__["ShippingType"].PurchaseToSale);
        this.setValidators();
        this.getAllocationSetUpData(this.company);
    };
    AllocationGridsComponent.prototype.onGridReadyPurchase = function (params) {
        var _this = this;
        params.columnDefs = this.contractPurchaseRows;
        this.purchaseGridOptions = params;
        this.gridApiPurchaseSelected = params.api;
        this.gridColumnApiPurchaseSelected = params.columnApi;
        window.onresize = function () {
            _this.gridColumnApiPurchaseSelected.autoSizeAllColumns();
        };
        this.gridColumnApiPurchaseSelected.autoSizeAllColumns();
    };
    AllocationGridsComponent.prototype.onGridReadySales = function (params) {
        var _this = this;
        this.gridApiSaleSelected = params.api;
        this.gridColumnApiSaleSelected = params.columnApi;
        window.onresize = function () {
            _this.gridColumnApiSaleSelected.autoSizeAllColumns();
        };
        this.gridColumnApiSaleSelected.autoSizeAllColumns();
    };
    AllocationGridsComponent.prototype.initializeGridColumns = function () {
        this.allocationGridColumns = [
            {
                headerName: '',
                colId: 'selection',
                headerCheckboxSelection: true,
                checkboxSelection: true,
                pinned: 'left',
            },
            {
                headerName: 'Contract reference',
                field: 'contractLabel',
                colId: 'contractLabel',
            },
            {
                headerName: 'CounterParty',
                field: 'counterparty',
                colId: 'counterparty',
            },
            {
                headerName: 'Commodity',
                field: 'commodityId',
                colId: 'commodityId',
                valueFormatter: this.commodityDescriptionFormatter.bind(this),
            },
            {
                headerName: 'Quantity',
                field: 'quantity',
                colId: 'quantity',
            },
            {
                headerName: 'Quantity Code',
                field: 'quantityCodeInvoiced',
                colId: 'quantityCodeInvoiced',
            },
            {
                headerName: 'Charter Ref',
                field: 'charterReference',
                colId: 'charterReference',
            },
            {
                headerName: 'Price Code',
                field: 'priceCode',
                colId: 'priceCode',
            },
            {
                headerName: 'Currency',
                field: 'currencyCode',
                colId: 'currencyCode',
            },
            {
                headerName: 'Price',
                field: 'price',
                colId: 'price',
            },
            {
                headerName: 'Shipping Period',
                field: 'shipmentPeriod',
                colId: 'shipmentPeriod',
            },
            {
                headerName: 'Section Id',
                field: 'sectionId',
                colId: 'sectionId',
                hide: true,
            },
        ];
    };
    AllocationGridsComponent.prototype.onPurcahseRowSelected = function (event) {
        this.isSaveEnabled();
        if (event.node.selected === true) {
            var isValid = this.checkValidations(event);
            if (!isValid) {
                this.snackbarService.throwErrorSnackBar('Only one Purcahse contract  can be allocated to multiple Sales contracts');
            }
        }
        else {
            this.hideWarningMessages(event.node.data.contractLabel);
        }
        this.showTotalQuantities();
    };
    AllocationGridsComponent.prototype.onSaleRowSelected = function (event) {
        this.isSaveEnabled();
        if (event.node.selected === true) {
            var isValid = this.checkValidations(event);
            if (!isValid) {
                this.snackbarService.throwErrorSnackBar('Only one Sale contract can be allocated to multiple Purchase contracts');
            }
        }
        else {
            this.hideWarningMessages(event.node.data.contractLabel);
        }
        this.showTotalQuantities();
    };
    AllocationGridsComponent.prototype.checkValidations = function (event) {
        var purchaseSelectedRows = this.gridApiPurchaseSelected.getSelectedRows();
        var saleSelectedRows = this.gridApiSaleSelected.getSelectedRows();
        if (purchaseSelectedRows.length > 1 && saleSelectedRows.length > 1) {
            event.node.setSelected(false);
            return false;
        }
        else if (purchaseSelectedRows.length === 1 && saleSelectedRows.length > 1) {
            var sumQuantity_1 = 0;
            saleSelectedRows.forEach(function (contract) {
                sumQuantity_1 += contract.quantity;
            });
            if (sumQuantity_1 > purchaseSelectedRows[0].quantity) {
                event.node.setSelected(false);
                this.snackbarService.throwErrorSnackBar('Sum of quantity of Sales contract should be less that or equal to Purchase quantity');
            }
            else {
                this.checkWarningMessages(event);
            }
        }
        else if (saleSelectedRows.length === 1 && purchaseSelectedRows.length > 1) {
            var sumQuantity_2 = 0;
            purchaseSelectedRows.forEach(function (contract) {
                sumQuantity_2 += contract.quantity;
            });
            if (sumQuantity_2 > saleSelectedRows[0].quantity) {
                event.node.setSelected(false);
                this.snackbarService.throwErrorSnackBar('Sum of quantity of Purchase contract should be less that or equal to Sale quantity');
            }
            else {
                this.checkWarningMessages(event);
            }
        }
        else {
            this.checkWarningMessages(event);
        }
        this.isSaveEnabled();
        return true;
    };
    AllocationGridsComponent.prototype.checkWarningMessages = function (event) {
        var selectedContracts;
        if (event.node.data.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_5__["ContractTypes"][0]) {
            selectedContracts = this.gridApiSaleSelected.getSelectedRows();
        }
        else {
            selectedContracts = this.gridApiPurchaseSelected.getSelectedRows();
        }
        this.generateWarnings(selectedContracts, event);
    };
    AllocationGridsComponent.prototype.validateWarningMessages = function (warningMessages, sourceContract, targetContract) {
        var isValidTrade = true;
        var allocationwarningObj = new _trading_entities_allocation_warning__WEBPACK_IMPORTED_MODULE_9__["AllocationWarning"]();
        allocationwarningObj.sourceContract = sourceContract;
        allocationwarningObj.targetContract = targetContract;
        //this.resetAllDescriptionComponents();
        if (warningMessages.length > 0) {
            warningMessages.forEach(function (item) {
                // trade is Restricted , so return isValid =false;
                if (item.errorTypeId === _shared_enums_warning_message_type_enum__WEBPACK_IMPORTED_MODULE_8__["WarningMessageTypes"].Restricted) {
                    allocationwarningObj.showRestrictedDescriptionCard = true;
                    allocationwarningObj.restrictedWarningMessage = item.message;
                    isValidTrade = false;
                }
                else if (item.errorTypeId === _shared_enums_warning_message_type_enum__WEBPACK_IMPORTED_MODULE_8__["WarningMessageTypes"].Warning) {
                    // trade is Warning, allocation can be done , so return isValid =true;
                    allocationwarningObj.showWarningDescriptionCard = true;
                    allocationwarningObj.warningMessage = item.message;
                }
            });
            allocationwarningObj.showAllowDescriptionCard = isValidTrade;
        }
        allocationwarningObj.showAllowDescriptionCard = isValidTrade;
        this.showWarningMessage.push(allocationwarningObj);
        this.isSaveEnabled();
        return isValidTrade;
    };
    AllocationGridsComponent.prototype.generateWarnings = function (selectedContracts, event) {
        var _this = this;
        if (selectedContracts.length > 0) {
            this.allocationMessage = [];
            selectedContracts.forEach(function (selectedContract) {
                _this.executionService.getWarningMessages(selectedContract.sectionId, event.data.sectionId)
                    .subscribe(function (data) {
                    if (data.value.length > 1) {
                        _this.allocationMessage = Object(_shared_validators_warning_messages_validator_validator__WEBPACK_IMPORTED_MODULE_6__["GetWarningMessages"])(data.value, _this.allocationSetUpData);
                        _this.validateWarningMessages(_this.allocationMessage, selectedContract.contractLabel, event.data.contractLabel);
                    }
                });
            });
        }
    };
    AllocationGridsComponent.prototype.hideWarningMessages = function (contractLabel) {
        var _this = this;
        if (this.showWarningMessage.length > 0) {
            var deselectedContract = this.showWarningMessage.filter(function (contract) { return (contract.targetContract === contractLabel || contract.sourceContract === contractLabel); });
            if (deselectedContract) {
                deselectedContract.forEach(function (contract) {
                    var index = _this.showWarningMessage.indexOf(contract);
                    if (index !== -1) {
                        _this.showWarningMessage.splice(index, 1);
                        _this.isSaveEnabled();
                    }
                });
            }
        }
    };
    AllocationGridsComponent.prototype.onRestrictRemoveclicked = function (sourceContract, targetContract, showRestrictedDescriptionCard) {
        var _this = this;
        showRestrictedDescriptionCard = !showRestrictedDescriptionCard;
        var saleContracts = this.gridApiSaleSelected.getSelectedRows();
        var purchaseContracts = this.gridApiPurchaseSelected.getSelectedRows();
        this.gridApiPurchaseSelected.forEachNode(function (node) {
            var selectedContract = purchaseContracts.find(function (contract) { return node.data.contractLabel === sourceContract || node.data.contractLabel === targetContract; });
            if (selectedContract) {
                node.setSelected(false);
                _this.isSaveDisabled.emit(false);
            }
        });
        this.gridApiSaleSelected.forEachNode(function (node) {
            var selectedContract = saleContracts.find(function (contract) { return node.data.contractLabel === sourceContract || node.data.contractLabel === targetContract; });
            if (selectedContract) {
                node.setSelected(false);
                _this.isSaveDisabled.emit(false);
            }
        });
    };
    AllocationGridsComponent.prototype.onWarningRemoveButtonClicked = function (params) {
        if (params) {
            params.currentTarget.parentElement.parentElement.remove();
        }
    };
    AllocationGridsComponent.prototype.isSaveEnabled = function () {
        this.isOneToOneAllocation = false;
        var saleContracts = this.gridApiSaleSelected.getSelectedRows();
        var purchaseContracts = this.gridApiPurchaseSelected.getSelectedRows();
        var isRestrictedContract = this.showWarningMessage.find(function (contract) { return contract.showRestrictedDescriptionCard === true; });
        if (saleContracts && purchaseContracts && saleContracts.length === 1 && purchaseContracts.length === 1) {
            this.isOneToOneAllocation = true;
            this.maxQuantity = Math.min(saleContracts[0].quantity, purchaseContracts[0].quantity);
            this.sourceQuantityCtrl.patchValue(this.maxQuantity);
        }
        if (isRestrictedContract) {
            this.isSaveDisabled.emit(true);
        }
        else {
            if (saleContracts.length > 0 && purchaseContracts.length > 0) {
                this.isSaveDisabled.emit(false);
            }
            else {
                this.isSaveDisabled.emit(true);
            }
        }
    };
    AllocationGridsComponent.prototype.setValidators = function () {
        var _this = this;
        this.sourceQuantityCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].compose([Object(_shared_directives_number_validators_directive__WEBPACK_IMPORTED_MODULE_11__["isPositive"])(),
            _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].min(0.0000000001), function (control) { return _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].max(Number(_this.maxQuantity) > 0 ? Number(_this.maxQuantity) : null); }]));
    };
    AllocationGridsComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            shippingTypeCtrl: this.shippingTypeCtrl,
            sourceQuantityCtrl: this.sourceQuantityCtrl,
            sumOfQuantitiesCtrl: this.sumOfQuantitiesCtrl
        });
        return _super.prototype.getFormGroup.call(this);
    };
    AllocationGridsComponent.prototype.checkQuantityValue = function () {
        if (this.sourceQuantityCtrl.value) {
            var formattedNumber = Number(this.sourceQuantityCtrl.value.toString().replace(/,/g, ""));
            if (formattedNumber > this.maxQuantity) {
                this.sourceQuantityCtrl.setErrors({ 'max': true });
            }
        }
    };
    AllocationGridsComponent.prototype.resetGrids = function (saleContractData, purchaseRowData) {
        this.gridApiSaleSelected.setRowData(saleContractData);
        this.gridApiPurchaseSelected.setRowData(purchaseRowData);
        this.showWarningMessage = [];
        this.isOneToOneAllocation = false;
        this.isOneToNAllocation = false;
        this.isSaveDisabled.emit(true);
    };
    AllocationGridsComponent.prototype.showTotalQuantities = function () {
        var totalQuantities = 0;
        this.isOneToNAllocation = false;
        var saleSelectedContracts = this.gridApiSaleSelected.getSelectedRows();
        var purchaseContracts = this.gridApiPurchaseSelected.getSelectedRows();
        if (saleSelectedContracts && saleSelectedContracts.length > 1) {
            saleSelectedContracts.forEach(function (contract) {
                totalQuantities += contract.quantity;
            });
        }
        if (purchaseContracts && purchaseContracts.length > 1) {
            purchaseContracts.forEach(function (contract) {
                totalQuantities += contract.quantity;
            });
        }
        if (totalQuantities !== 0) {
            this.sumOfQuantitiesCtrl.patchValue(totalQuantities);
            this.isOneToNAllocation = true;
        }
    };
    AllocationGridsComponent.prototype.commodityDescriptionFormatter = function (params) {
        var commodity = this.masterData.commodities.find(function (com) { return com.commodityId === params.value; });
        return commodity ? commodity.commodityCode : '';
    };
    // this method will fetch allocationsetupdata for a company
    AllocationGridsComponent.prototype.getAllocationSetUpData = function (company) {
        var _this = this;
        this.configurationService.getAllocationSetUpByCompany(company)
            .subscribe(function (data) {
            if (data && data.length > 0) {
                _this.allocationSetUpData = data;
            }
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], AllocationGridsComponent.prototype, "isSaveDisabled", void 0);
    AllocationGridsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-allocation-grids',
            template: __webpack_require__(/*! ./allocation-grids.component.html */ "./Client/app/trading/components/group-functions/trade-bulk-allocation/allocation-grids/allocation-grids.component.html"),
            styles: [__webpack_require__(/*! ./allocation-grids.component.scss */ "./Client/app/trading/components/group-functions/trade-bulk-allocation/allocation-grids/allocation-grids.component.scss")]
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_2__["FormConfigurationProviderService"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_4__["SnackbarService"],
            _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_7__["ExecutionService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_16__["ActivatedRoute"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_14__["AgGridService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormBuilder"],
            _shared_services_http_services_configuration_service__WEBPACK_IMPORTED_MODULE_17__["ConfigurationService"]])
    ], AllocationGridsComponent);
    return AllocationGridsComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_1__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-allocation/trade-bulk-allocation.component.html":
/*!******************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-allocation/trade-bulk-allocation.component.html ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<form [formGroup]=\"bulkAllocationForm\">\r\n    <div class=\"main-container\">\r\n        <mat-horizontal-stepper [linear]\r\n                                (selectionChange)=\"onChangeStepAction($event)\"\r\n                                #stepper>\r\n            <ng-template matStepperIcon=\"edit\">\r\n                <mat-icon>check</mat-icon>\r\n            </ng-template>\r\n            <mat-step>\r\n                <ng-template matStepLabel>Selection</ng-template>\r\n                <atlas-group-function-warning #groupFunctionWarning></atlas-group-function-warning>\r\n                <atlas-group-function-contracts #contractSelection\r\n                                                (resetAllocationGrids)=\"resetAllocationGrids($event)\"\r\n                                                (contractSelected)=\"isContractSelected($event)\">\r\n                </atlas-group-function-contracts>\r\n\r\n                <div fxLayout=\"row \"\r\n                     fxLayoutAlign=\"space-between start\"\r\n                     class=\"button-details\">\r\n                    <div fxLayout=\"column \"\r\n                         fxLayoutAlign=\"start \">\r\n                        <button (click)=\"onContractSelectionDiscardButtonClicked()\"\r\n                                mat-button>\r\n                            DISCARD\r\n                        </button>\r\n                    </div>\r\n                    <div fxLayout=\"column \"\r\n                         fxLayoutAlign=\"start \">\r\n                        <div fxLayout=\"row \"\r\n                             fxLayoutAlign=\"end start \">\r\n                            <button mat-raised-button\r\n                                    (click)=\"onContractSelectionNextButtonClicked()\"\r\n                                    [disabled]=\"isContractsNextDisabled\">\r\n                                NEXT\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </mat-step>\r\n            <mat-step>\r\n                <ng-template matStepLabel>Allocation</ng-template>\r\n                <atlas-allocation-grids #allocationGridsComponent\r\n                                        (isSaveDisabled)=\"isSaveDisabled($event)\"></atlas-allocation-grids>\r\n\r\n                <div fxLayout=\"row\"\r\n                     fxLayoutAlign=\"center center\"\r\n                     fxLayoutWrap\r\n                     *ngIf=\"isLoading\"\r\n                     class=\"loading\">\r\n                    <mat-spinner color=\"accent\"></mat-spinner>\r\n                </div>\r\n                <div fxLayout=\"row \"\r\n                     *ngIf=\"!isLoading\"\r\n                     fxLayoutAlign=\"space-between start\"\r\n                     class=\"button-details\">\r\n                    <div fxLayout=\"column \"\r\n                         fxLayoutAlign=\"start \">\r\n                        <button (click)=\"onContractSelectionDiscardButtonClicked()\"\r\n                                mat-button>\r\n                            DISCARD\r\n                        </button>\r\n                    </div>\r\n                    <div fxLayout=\"column \"\r\n                         fxLayoutAlign=\"start \">\r\n                        <div fxLayout=\"row \"\r\n                             fxLayoutAlign=\"end start \">\r\n                            <button mat-button\r\n                                    (click)=\"onNoMoreAllocationClicked()\">\r\n                                No more Allocation\r\n                            </button>\r\n                            <button mat-raised-button\r\n                                    [disabled]=\"disableSave\"\r\n                                    (click)=\"onAllocateButtonClicked()\">\r\n                                Allocate\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </mat-step>\r\n        </mat-horizontal-stepper>\r\n    </div>\r\n</form>"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-allocation/trade-bulk-allocation.component.scss":
/*!******************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-allocation/trade-bulk-allocation.component.scss ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-allocation/trade-bulk-allocation.component.ts":
/*!****************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-allocation/trade-bulk-allocation.component.ts ***!
  \****************************************************************************************************************/
/*! exports provided: TradeBulkAllocationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeBulkAllocationComponent", function() { return TradeBulkAllocationComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../shared/components/confirmation-dialog/confirmation-dialog.component */ "./Client/app/shared/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony import */ var _group_function_warning_group_function_warning_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../group-function-warning/group-function-warning.component */ "./Client/app/trading/components/group-functions/group-function-warning/group-function-warning.component.ts");
/* harmony import */ var _group_function_contracts_group_function_contracts_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../group-function-contracts/group-function-contracts.component */ "./Client/app/trading/components/group-functions/group-function-contracts/group-function-contracts.component.ts");
/* harmony import */ var _allocation_grids_allocation_grids_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./allocation-grids/allocation-grids.component */ "./Client/app/trading/components/group-functions/trade-bulk-allocation/allocation-grids/allocation-grids.component.ts");
/* harmony import */ var _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../shared/enums/contract-type.enum */ "./Client/app/shared/enums/contract-type.enum.ts");
/* harmony import */ var _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../shared/entities/atlas-number.entity */ "./Client/app/shared/entities/atlas-number.entity.ts");
/* harmony import */ var _shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../shared/enums/discount-basis.enum */ "./Client/app/shared/enums/discount-basis.enum.ts");
/* harmony import */ var text_mask_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! text-mask-core */ "./node_modules/text-mask-core/dist/textMaskCore.js");
/* harmony import */ var text_mask_core__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(text_mask_core__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _shared_enums_discount_type_enum__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../shared/enums/discount-type.enum */ "./Client/app/shared/enums/discount-type.enum.ts");
/* harmony import */ var _shared_numberMask__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../shared/numberMask */ "./Client/app/shared/numberMask.ts");
/* harmony import */ var _shared_entities_masterdata_entity__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../shared/entities/masterdata.entity */ "./Client/app/shared/entities/masterdata.entity.ts");
/* harmony import */ var _shared_entities_allocate_section_entity__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../../shared/entities/allocate-section.entity */ "./Client/app/shared/entities/allocate-section.entity.ts");
/* harmony import */ var _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../../shared/services/http-services/execution.service */ "./Client/app/shared/services/http-services/execution.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _shared_enums_contract_invoice_type_enum__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../../../shared/enums/contract-invoice-type.enum */ "./Client/app/shared/enums/contract-invoice-type.enum.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};























var TradeBulkAllocationComponent = /** @class */ (function (_super) {
    __extends(TradeBulkAllocationComponent, _super);
    function TradeBulkAllocationComponent(formConfigurationProvider, formBuilder, route, dialog, router, executionService, companyManager, snackbarService, tradingService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.formBuilder = formBuilder;
        _this.route = route;
        _this.dialog = dialog;
        _this.router = router;
        _this.executionService = executionService;
        _this.companyManager = companyManager;
        _this.snackbarService = snackbarService;
        _this.tradingService = tradingService;
        _this.currentStep = 0;
        _this.isContractsNextDisabled = true;
        _this.formComponents = [];
        _this.disableSave = true;
        _this.masterData = new _shared_entities_masterdata_entity__WEBPACK_IMPORTED_MODULE_18__["MasterData"]();
        _this.subscription = [];
        _this.isLoading = false;
        return _this;
    }
    TradeBulkAllocationComponent.prototype.ngOnInit = function () {
        this.masterData = this.route.snapshot.data.masterdata;
        this.bulkAllocationForm = this.formBuilder.group({
            contractSelection: this.contractSelection.getFormGroup(),
            allocationGridsComponent: this.allocationGridsComponent.getFormGroup(),
        });
        this.formComponents.push(this.contractSelection, this.allocationGridsComponent);
    };
    TradeBulkAllocationComponent.prototype.onChangeStepAction = function (event) {
        this.currentStep = event.selectedIndex;
    };
    TradeBulkAllocationComponent.prototype.onContractSelectionDiscardButtonClicked = function () {
        if (this.isContractsNextDisabled) {
            this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);
        }
        else {
            this.discardButtonDialog();
        }
    };
    TradeBulkAllocationComponent.prototype.isContractSelected = function (contractSelected) {
        this.isContractsNextDisabled = !contractSelected;
    };
    TradeBulkAllocationComponent.prototype.onContractSelectionNextButtonClicked = function () {
        var selectedContracts = this.contractSelection.selectedContractsForBulkFunctions;
        this.allocationGridsComponent.contractPurchaseRows = selectedContracts.filter(function (contract) { return contract.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_12__["ContractTypes"][0]; });
        this.allocationGridsComponent.contractSalesRows = selectedContracts.filter(function (contract) { return contract.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_12__["ContractTypes"][1]; });
        this.stepper.next();
    };
    TradeBulkAllocationComponent.prototype.discardButtonDialog = function () {
        var _this = this;
        var confirmDiscardDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_8__["ConfirmationDialogComponent"], {
            data: {
                title: 'Discard Changes',
                text: 'You have some modification pending. Close and lose changes?',
                okButton: 'Ok',
                cancelButton: 'Cancel',
            },
        });
        confirmDiscardDialog.afterClosed().subscribe(function (answer) {
            if (answer) {
                _this.router.navigate(['/' + _this.companyManager.getCurrentCompanyId() + '/trades']);
            }
        });
    };
    TradeBulkAllocationComponent.prototype.onFieldSelectionPreviousButtonClicked = function () {
        this.stepper.previous();
    };
    TradeBulkAllocationComponent.prototype.onAllocateButtonClicked = function () {
        //call create bulk split
        var sectionQuantities = [];
        var purchaseSelectedRows = this.allocationGridsComponent.gridApiPurchaseSelected.getSelectedRows();
        var saleSelectedRows = this.allocationGridsComponent.gridApiSaleSelected.getSelectedRows();
        if (purchaseSelectedRows && saleSelectedRows) {
            this.isLoading = true;
            if (purchaseSelectedRows.length === 1 && saleSelectedRows.length === 1) {
                this.oneToOneAllocation(purchaseSelectedRows, saleSelectedRows, sectionQuantities);
            }
            else if (purchaseSelectedRows.length == 1 && saleSelectedRows.length > 1) {
                saleSelectedRows.forEach(function (contract) {
                    sectionQuantities.push(contract.quantity);
                });
                this.calculateContractValue(purchaseSelectedRows[0].sectionId, sectionQuantities, saleSelectedRows);
            }
            else if (saleSelectedRows.length == 1 && purchaseSelectedRows.length > 1) {
                purchaseSelectedRows.forEach(function (contract) {
                    sectionQuantities.push(contract.quantity);
                });
                this.calculateContractValue(saleSelectedRows[0].sectionId, sectionQuantities, purchaseSelectedRows);
            }
        }
    };
    TradeBulkAllocationComponent.prototype.isSaveDisabled = function (params) {
        this.disableSave = params;
    };
    TradeBulkAllocationComponent.prototype.setContractValue = function (sectionModel, quantityValue, formatValue) {
        if (formatValue === void 0) { formatValue = true; }
        var quantityVal;
        quantityVal = quantityValue;
        var mask = Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_17__["CustomNumberMask"])(12, 10, true);
        if (this.masterData === undefined) {
            return;
        }
        var weightCodeConversion = this.masterData.weightUnits.
            find(function (weightUnit) { return weightUnit.weightUnitId === sectionModel.weightUnitId; }).conversionFactor;
        var selectedPriceUnit = this.masterData.priceUnits.filter(function (priceUnit) { return priceUnit.priceUnitId === sectionModel.priceUnitId; });
        var priceCodeConversion = selectedPriceUnit.length > 0
            ? selectedPriceUnit[0].conversionFactor
            : undefined;
        if (!weightCodeConversion || !priceCodeConversion
            || !quantityValue
            || !sectionModel.price) {
            sectionModel.contractedValue = '';
            return;
        }
        var contractPrice = sectionModel.price.toString().replace(/,/g, '');
        var contractPriceDecimal = new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_13__["AtlasNumber"](contractPrice);
        var quantity = quantityVal.toString().replace(/,/g, '');
        var quantityDecimal = new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_13__["AtlasNumber"](quantity);
        if (sectionModel.premiumDiscountTypeId !== undefined &&
            sectionModel.currencyCode !== sectionModel.premiumDiscountCurrency &&
            sectionModel.premiumDiscountTypeId !== undefined) {
            // discountPremiumValue exists
            var discountPremiumContractedPrice = 0;
            var discountPremiumSign = (sectionModel.premiumDiscountTypeId === _shared_enums_discount_type_enum__WEBPACK_IMPORTED_MODULE_16__["DiscountTypes"].Discount ? -1 : 1);
            // tslint:disable-next-line:prefer-conditional-expression
            if (sectionModel.premiumDiscountBasis === _shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_14__["DiscountBasis"].Rate) {
                discountPremiumContractedPrice = sectionModel.premiumDiscountValue * discountPremiumSign;
            }
            else if (sectionModel.premiumDiscountBasis === _shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_14__["DiscountBasis"].Percent) {
                discountPremiumContractedPrice = contractPriceDecimal
                    .times((sectionModel.premiumDiscountValue * discountPremiumSign / 100));
            }
            contractPriceDecimal = contractPriceDecimal.plus(discountPremiumContractedPrice);
        }
        var contractValue = contractPriceDecimal.times(quantityDecimal).times(weightCodeConversion *
            priceCodeConversion).toString();
        if (formatValue) {
            var contractValueFormatted = Object(text_mask_core__WEBPACK_IMPORTED_MODULE_15__["conformToMask"])(contractValue, mask, { guide: false }).conformedValue;
            sectionModel.contractedValue = contractValueFormatted;
        }
        else {
            sectionModel.contractedValue = contractValue;
        }
        return sectionModel.contractedValue;
    };
    TradeBulkAllocationComponent.prototype.createSplitsAndAllocate = function (sectionId, quantities, contractValues, targetSelectedRows) {
        targetSelectedRows = this.checkWashoutContracts(targetSelectedRows);
        this.creatingPopupForWashoutContract(targetSelectedRows, sectionId, quantities, contractValues);
    };
    TradeBulkAllocationComponent.prototype.allocateTrade = function (allocateSectionModel) {
        var _this = this;
        this.executionService.allocateSections(allocateSectionModel).subscribe(function () {
            _this.contractSelection.getContractsToAllocation(true);
            _this.snackbarService.informationSnackBar('Allocation  of selected contracts is done successfully');
            _this.isLoading = false;
        });
    };
    TradeBulkAllocationComponent.prototype.calculateContractValue = function (sectionId, sectionQuantities, targetSelectedRows) {
        var _this = this;
        var sectionContractValues = [];
        this.tradingService.getSection(sectionId, 0)
            .subscribe(function (data) {
            _this.sectionModel = data;
            if (sectionQuantities) {
                sectionQuantities.forEach(function (quantity) {
                    var value = _this.setContractValue(_this.sectionModel, quantity, false);
                    sectionContractValues.push(value);
                });
                _this.createSplitsAndAllocate(sectionId, sectionQuantities, sectionContractValues, targetSelectedRows);
            }
        });
    };
    TradeBulkAllocationComponent.prototype.oneToOneAllocation = function (purchaseSelectedRows, saleSelectedRows, sectionQuantities) {
        var _this = this;
        var sectionIds = [];
        var isWashoutContract = false;
        isWashoutContract = this.checkWashoutConditionForOneToOneAllocation(purchaseSelectedRows, saleSelectedRows);
        if (this.allocationGridsComponent.formGroup.valid) {
            if (purchaseSelectedRows[0].quantity === saleSelectedRows[0].quantity) {
                if (this.allocationGridsComponent.sourceQuantityCtrl.value === purchaseSelectedRows[0].quantity) {
                    var allocateSectionModel_1 = [];
                    var allocateSectionElement_1 = new _shared_entities_allocate_section_entity__WEBPACK_IMPORTED_MODULE_19__["AllocateSection"]();
                    if (isWashoutContract) {
                        var confirmDiscardDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_8__["ConfirmationDialogComponent"], {
                            data: {
                                title: 'Washout Contract',
                                text: 'Do you want to mark this contract as washout ?',
                                okButton: 'Yes',
                                cancelButton: 'No',
                            },
                        });
                        confirmDiscardDialog.afterClosed().subscribe(function (answer) {
                            if (answer) {
                                allocateSectionElement_1.contractInvoiceTypeId = _shared_enums_contract_invoice_type_enum__WEBPACK_IMPORTED_MODULE_22__["ContractInvoiceType"].Washout;
                                _this.onAllocationOfOnetoOneTrade(allocateSectionElement_1, purchaseSelectedRows, saleSelectedRows, allocateSectionModel_1);
                            }
                            else {
                                _this.onAllocationOfOnetoOneTrade(allocateSectionElement_1, purchaseSelectedRows, saleSelectedRows, allocateSectionModel_1);
                            }
                        });
                    }
                    else {
                        this.onAllocationOfOnetoOneTrade(allocateSectionElement_1, purchaseSelectedRows, saleSelectedRows, allocateSectionModel_1);
                    }
                }
                else {
                    sectionIds.push(purchaseSelectedRows[0].sectionId, saleSelectedRows[0].sectionId);
                    var quantitity = this.allocationGridsComponent.sourceQuantityCtrl.value;
                    var washoutRequired = false;
                    if (isWashoutContract) {
                        this.popUpForOnetoOneAllocationForWashout(sectionIds, quantitity);
                    }
                    else {
                        this.calculateContractValueForSingleAllocation(sectionIds, quantitity, washoutRequired);
                    }
                }
            }
            else if (purchaseSelectedRows[0].quantity > saleSelectedRows[0].quantity) {
                if (saleSelectedRows[0].quantity === this.allocationGridsComponent.sourceQuantityCtrl.value) {
                    sectionQuantities.push(saleSelectedRows[0].quantity);
                    this.calculateContractValue(purchaseSelectedRows[0].sectionId, sectionQuantities, saleSelectedRows);
                }
                else {
                    sectionIds.push(purchaseSelectedRows[0].sectionId, saleSelectedRows[0].sectionId);
                    var quantitity = this.allocationGridsComponent.sourceQuantityCtrl.value;
                    var washoutRequired = false;
                    if (isWashoutContract) {
                        this.popUpForOnetoOneAllocationForWashout(sectionIds, quantitity);
                    }
                    else {
                        this.calculateContractValueForSingleAllocation(sectionIds, quantitity, washoutRequired);
                    }
                }
            }
            else if (purchaseSelectedRows[0].quantity < saleSelectedRows[0].quantity) {
                if (purchaseSelectedRows[0].quantity === this.allocationGridsComponent.sourceQuantityCtrl.value) {
                    sectionQuantities.push(purchaseSelectedRows[0].quantity);
                    this.calculateContractValue(saleSelectedRows[0].sectionId, sectionQuantities, purchaseSelectedRows);
                }
                else {
                    sectionIds.push(purchaseSelectedRows[0].sectionId, saleSelectedRows[0].sectionId);
                    var quantitity = this.allocationGridsComponent.sourceQuantityCtrl.value;
                    var washoutRequired = false;
                    if (isWashoutContract) {
                        this.popUpForOnetoOneAllocationForWashout(sectionIds, quantitity);
                    }
                    else {
                        this.calculateContractValueForSingleAllocation(sectionIds, quantitity, washoutRequired);
                    }
                }
            }
        }
        else {
            this.isLoading = false;
            this.snackbarService.informationSnackBar('Form is invalid. Please resolve the errors.');
        }
    };
    TradeBulkAllocationComponent.prototype.createSplitOneToOneAndAllocate = function (sectionIds, quantitity, contractValues, washoutRequired) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                this.tradingService.createSplitForContract(sectionIds, quantitity, null, contractValues)
                    .subscribe(function (data) {
                    _this.splitResult = data;
                    if (_this.splitResult) {
                        var allocateSectionModel = [];
                        var allocateSectionElement = new _shared_entities_allocate_section_entity__WEBPACK_IMPORTED_MODULE_19__["AllocateSection"]();
                        allocateSectionElement.sectionId = _this.splitResult[0].sectionId;
                        allocateSectionElement.allocatedSectionId = _this.splitResult[1].sectionId;
                        allocateSectionElement.quantity = quantitity;
                        allocateSectionElement.shippingType = _this.allocationGridsComponent.shippingTypeCtrl.value;
                        allocateSectionElement.dataVersionId = null;
                        if (washoutRequired) {
                            allocateSectionElement.contractInvoiceTypeId = _shared_enums_contract_invoice_type_enum__WEBPACK_IMPORTED_MODULE_22__["ContractInvoiceType"].Cancellation;
                        }
                        allocateSectionModel.push(allocateSectionElement);
                        _this.allocateTrade(allocateSectionModel);
                    }
                });
                return [2 /*return*/];
            });
        });
    };
    TradeBulkAllocationComponent.prototype.calculateContractValueForSingleAllocation = function (sectionIds, sectionQuantitity, washoutRequired) {
        var _this = this;
        var sectionContractValues = [];
        if (sectionIds && sectionIds.length > 0) {
            sectionIds.forEach(function (sectionId) {
                _this.subscription.push(_this.tradingService.getSection(sectionId, 0)
                    .subscribe(function (data) {
                    _this.sectionModel = data;
                    var contractValue = _this.setContractValue(_this.sectionModel, sectionQuantitity, false);
                    sectionContractValues.push(contractValue);
                    if (sectionContractValues && sectionContractValues.length == 2) {
                        _this.createSplitOneToOneAndAllocate(sectionIds, sectionQuantitity, sectionContractValues, washoutRequired);
                    }
                }));
            });
        }
    };
    TradeBulkAllocationComponent.prototype.onNoMoreAllocationClicked = function () {
        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);
    };
    TradeBulkAllocationComponent.prototype.resetAllocationGrids = function (params) {
        if (params) {
            var purchaseRowData_1 = [];
            var saleRowData_1 = [];
            var rowData = this.contractSelection.ContractGridRows;
            var saleSelectedContracts_1 = this.allocationGridsComponent.contractSalesRows;
            var purchaseContracts_1 = this.allocationGridsComponent.contractPurchaseRows;
            if (rowData && saleSelectedContracts_1 && purchaseContracts_1) {
                rowData.forEach(function (data) {
                    var saleContract = saleSelectedContracts_1.find(function (contract) { return contract.sectionId === data.sectionId; });
                    if (saleContract) {
                        saleRowData_1.push(data);
                    }
                    var purchaseContract = purchaseContracts_1.find(function (contract) { return contract.sectionId === data.sectionId; });
                    if (purchaseContract) {
                        purchaseRowData_1.push(data);
                    }
                });
                this.allocationGridsComponent.resetGrids(saleRowData_1, purchaseRowData_1);
            }
        }
    };
    TradeBulkAllocationComponent.prototype.checkWashoutContracts = function (targetSelectedRows) {
        var _this = this;
        var code = '';
        if (this.sectionModel.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_12__["ContractTypes"].Purchase) {
            code = this.sectionModel.sellerCode;
        }
        else if (this.sectionModel.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_12__["ContractTypes"].Sale) {
            code = this.sectionModel.buyerCode;
        }
        targetSelectedRows.forEach(function (element) {
            if (element.currencyCode === _this.sectionModel.currencyCode && element.counterparty === code) {
                element.isWashout = true;
            }
            else {
                element.isWashout = false;
            }
        });
        return targetSelectedRows;
    };
    TradeBulkAllocationComponent.prototype.onSplitAndAllocation = function (sectionId, quantities, contractValues, targetSelectedRows, isWashoutRequire) {
        var _this = this;
        this.tradingService.createBulkSplitForContract(sectionId, quantities, null, contractValues)
            .subscribe(function (data) {
            _this.splitResult = data;
            var allocateSectionModel = [];
            if (_this.splitResult && _this.splitResult.length > 0) {
                for (var i = 0; i < _this.splitResult.length; i++) {
                    var allocateSectionElement = new _shared_entities_allocate_section_entity__WEBPACK_IMPORTED_MODULE_19__["AllocateSection"]();
                    allocateSectionElement.sectionId = _this.splitResult[i].sectionId;
                    allocateSectionElement.allocatedSectionId = targetSelectedRows[i].sectionId;
                    allocateSectionElement.quantity = targetSelectedRows[i].quantity;
                    allocateSectionElement.shippingType = _this.allocationGridsComponent.shippingTypeCtrl.value;
                    allocateSectionElement.dataVersionId = null;
                    if (isWashoutRequire && targetSelectedRows[i].isWashout) {
                        allocateSectionElement.contractInvoiceTypeId = _shared_enums_contract_invoice_type_enum__WEBPACK_IMPORTED_MODULE_22__["ContractInvoiceType"].Washout;
                    }
                    allocateSectionModel.push(allocateSectionElement);
                }
            }
            _this.allocateTrade(allocateSectionModel);
        });
    };
    TradeBulkAllocationComponent.prototype.creatingPopupForWashoutContract = function (targetSelectedRows, sectionId, quantities, contractValues) {
        var _this = this;
        var isWashoutRequired = false;
        var message = '';
        targetSelectedRows.forEach(function (element) {
            if (element.isWashout) {
                message = message + ' , ' + element.contractLabel;
            }
        });
        if (message != '') {
            var confirmDiscardDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_8__["ConfirmationDialogComponent"], {
                data: {
                    title: 'Washout Contract',
                    text: "Do you want to mark  " + message + " contract as washout ?",
                    okButton: 'Yes',
                    cancelButton: 'No',
                },
            });
            confirmDiscardDialog.afterClosed().subscribe(function (answer) {
                if (answer) {
                    isWashoutRequired = true;
                    _this.onSplitAndAllocation(sectionId, quantities, contractValues, targetSelectedRows, isWashoutRequired);
                }
                else {
                    isWashoutRequired = false;
                    _this.onSplitAndAllocation(sectionId, quantities, contractValues, targetSelectedRows, isWashoutRequired);
                }
            });
        }
        else {
            isWashoutRequired = false;
            this.onSplitAndAllocation(sectionId, quantities, contractValues, targetSelectedRows, isWashoutRequired);
        }
    };
    TradeBulkAllocationComponent.prototype.checkWashoutConditionForOneToOneAllocation = function (purchaseSelectedRows, saleSelectedRows) {
        if (purchaseSelectedRows[0].counterparty === saleSelectedRows[0].counterparty &&
            purchaseSelectedRows[0].currencyCode === saleSelectedRows[0].currencyCode) {
            return true;
        }
        else {
            return false;
        }
    };
    TradeBulkAllocationComponent.prototype.onAllocationOfOnetoOneTrade = function (allocateSectionElement, purchaseSelectedRows, saleSelectedRows, allocateSectionModel) {
        allocateSectionElement.sectionId = purchaseSelectedRows[0].sectionId;
        allocateSectionElement.allocatedSectionId = saleSelectedRows[0].sectionId;
        allocateSectionElement.quantity = purchaseSelectedRows[0].quantity;
        allocateSectionElement.shippingType = this.allocationGridsComponent.shippingTypeCtrl.value;
        allocateSectionElement.dataVersionId = null;
        allocateSectionModel.push(allocateSectionElement);
        this.allocateTrade(allocateSectionModel);
    };
    TradeBulkAllocationComponent.prototype.popUpForOnetoOneAllocationForWashout = function (sectionIds, quantitity) {
        var _this = this;
        var washoutRequired;
        var confirmDiscardDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_8__["ConfirmationDialogComponent"], {
            data: {
                title: 'Washout Contract',
                text: 'Do you want to mark this contract as washout ?',
                okButton: 'Yes',
                cancelButton: 'No',
            },
        });
        confirmDiscardDialog.afterClosed().subscribe(function (answer) {
            if (answer) {
                washoutRequired = true;
                _this.calculateContractValueForSingleAllocation(sectionIds, quantitity, washoutRequired);
            }
            else {
                washoutRequired = false;
                _this.calculateContractValueForSingleAllocation(sectionIds, quantitity, washoutRequired);
            }
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('stepper'),
        __metadata("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_1__["MatStepper"])
    ], TradeBulkAllocationComponent.prototype, "stepper", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('contractSelection'),
        __metadata("design:type", _group_function_contracts_group_function_contracts_component__WEBPACK_IMPORTED_MODULE_10__["GroupFunctionContractsComponent"])
    ], TradeBulkAllocationComponent.prototype, "contractSelection", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('allocationGridsComponent'),
        __metadata("design:type", _allocation_grids_allocation_grids_component__WEBPACK_IMPORTED_MODULE_11__["AllocationGridsComponent"])
    ], TradeBulkAllocationComponent.prototype, "allocationGridsComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('groupFunctionWarning'),
        __metadata("design:type", _group_function_warning_group_function_warning_component__WEBPACK_IMPORTED_MODULE_9__["GroupFunctionWarningComponent"])
    ], TradeBulkAllocationComponent.prototype, "groupFunctionWarning", void 0);
    TradeBulkAllocationComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-trade-bulk-allocation',
            template: __webpack_require__(/*! ./trade-bulk-allocation.component.html */ "./Client/app/trading/components/group-functions/trade-bulk-allocation/trade-bulk-allocation.component.html"),
            styles: [__webpack_require__(/*! ./trade-bulk-allocation.component.scss */ "./Client/app/trading/components/group-functions/trade-bulk-allocation/trade-bulk-allocation.component.scss")]
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_4__["FormConfigurationProviderService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormBuilder"],
            _angular_router__WEBPACK_IMPORTED_MODULE_5__["ActivatedRoute"],
            _angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialog"],
            _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"],
            _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_20__["ExecutionService"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_6__["CompanyManagerService"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_21__["SnackbarService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_7__["TradingService"]])
    ], TradeBulkAllocationComponent);
    return TradeBulkAllocationComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_2__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-approval/trade-bulk-approval.component.html":
/*!**************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-approval/trade-bulk-approval.component.html ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"main-container\">\r\n    <atlas-group-function-warning #groupFunctionWarning></atlas-group-function-warning>\r\n    <atlas-group-function-contracts #contractSelection\r\n                                    (contractSelected)=\"isContractSelected($event)\"></atlas-group-function-contracts>\r\n    <div fxLayout=\"row \"\r\n         fxLayoutAlign=\"space-between start\"\r\n         class=\"button-details\">\r\n        <div fxLayout=\"row \"\r\n             fxLayoutAlign=\"start \">\r\n            <button (click)=\"onDiscardButtonClicked()\"\r\n                    mat-button>\r\n                DISCARD\r\n            </button>\r\n            <button (click)=\"onPreviousButtonClicked()\"\r\n                    mat-button>\r\n                PREVIOUS\r\n            </button>\r\n        </div>\r\n        <div fxLayout=\"column \"\r\n             fxLayoutAlign=\"start \">\r\n            <div fxLayout=\"row \"\r\n                 fxLayoutAlign=\"end start \">\r\n                <button mat-raised-button\r\n                        (click)=\"onApproveButtonCliked()\"\r\n                        [disabled]=\"!isContractsNextDisabled\">\r\n                    APPROVE\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-approval/trade-bulk-approval.component.scss":
/*!**************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-approval/trade-bulk-approval.component.scss ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-approval/trade-bulk-approval.component.ts":
/*!************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-approval/trade-bulk-approval.component.ts ***!
  \************************************************************************************************************/
/*! exports provided: TradeBulkApprovalComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeBulkApprovalComponent", function() { return TradeBulkApprovalComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _app_trading_dialog_boxes_bulk_approval_dialog_bulk_approval_dialog_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../app/trading/dialog-boxes/bulk-approval-dialog/bulk-approval-dialog.component */ "./Client/app/trading/dialog-boxes/bulk-approval-dialog/bulk-approval-dialog.component.ts");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../shared/services/http-services/lock.service */ "./Client/app/shared/services/http-services/lock.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _group_function_contracts_group_function_contracts_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../group-function-contracts/group-function-contracts.component */ "./Client/app/trading/components/group-functions/group-function-contracts/group-function-contracts.component.ts");
/* harmony import */ var _group_function_warning_group_function_warning_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../group-function-warning/group-function-warning.component */ "./Client/app/trading/components/group-functions/group-function-warning/group-function-warning.component.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};












var TradeBulkApprovalComponent = /** @class */ (function (_super) {
    __extends(TradeBulkApprovalComponent, _super);
    function TradeBulkApprovalComponent(formConfigurationProvider, formBuilder, route, router, companyManager, dialog, tradingService, lockService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.formBuilder = formBuilder;
        _this.route = route;
        _this.router = router;
        _this.companyManager = companyManager;
        _this.dialog = dialog;
        _this.tradingService = tradingService;
        _this.lockService = lockService;
        _this.formComponents = [];
        _this.interCoTradeList = [];
        _this.lockedTrades = [];
        _this.ChildTradeForSectionTrades = [];
        _this.childFilterList = [];
        _this.subscriptions = [];
        _this.totalContractList = [];
        _this.ChildTradesList = [];
        return _this;
    }
    TradeBulkApprovalComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
        this.bulkApprovalFormGroup = this.formBuilder.group({
            contractSelection: this.contractSelection.getFormGroup(),
        });
        this.formComponents.push(this.contractSelection);
    };
    TradeBulkApprovalComponent.prototype.onDiscardButtonClicked = function () {
        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);
    };
    TradeBulkApprovalComponent.prototype.onPreviousButtonClicked = function () {
        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades/groupfunctions']);
    };
    TradeBulkApprovalComponent.prototype.onApproveButtonCliked = function () {
        var _this = this;
        var selectedList;
        selectedList = this.getSelectedApprovalList();
        this.lockedTrades = [];
        this.lockedTrades = selectedList.filter(function (id) { return id.isLocked === true; });
        selectedList = selectedList.filter(function (id) { return id.isLocked === false; });
        this.selectedApprovalList = [];
        this.totalContractList = [];
        this.selectedApprovalList = selectedList;
        var allTradeRows = this.contractSelection.totalContractList;
        this.totalContractList = allTradeRows;
        this.childFilterList = [];
        var childCountCheck = 0;
        this.interCoTradeList = [];
        var chkSubscribeState = false;
        if (selectedList.length > 0) {
            selectedList.forEach(function (selectedelement, index) {
                _this.subscriptions.push(_this.tradingService.getChildTradesForSection(selectedelement.sectionId)
                    .subscribe(function (data) {
                    childCountCheck++;
                    if (data) {
                        var checkInterco_1 = [];
                        var ChildTradesParentList = data.value;
                        checkInterco_1 = (ChildTradesParentList.filter(function (item) { return item.sectionID === selectedelement.sectionId; }));
                        if (!checkInterco_1[0].isInterCo) {
                            var childCount_1 = (ChildTradesParentList.filter(function (item) { return item.sectionID !== selectedelement.sectionId; })).length;
                            if (childCount_1 > 0) {
                                _this.ChildTradesList = (ChildTradesParentList.filter(function (item) { return item.sectionID !== selectedelement.sectionId; }));
                                var checkCount_1 = 0;
                                var _loop_1 = function (k) {
                                    chkSubscribeState = true;
                                    _this.subscriptions.push(_this.lockService.isLockedContract(_this.ChildTradesList[k].sectionID).subscribe(function (lock) {
                                        checkCount_1++;
                                        if (checkCount_1 === childCount_1) {
                                            chkSubscribeState = false;
                                        }
                                        else {
                                            chkSubscribeState = true;
                                        }
                                        if (!lock.isLocked && !_this.ChildTradesList[k].isInterCo) {
                                            _this.childFilterList.push(_this.ChildTradesList[k].sectionID);
                                            if ((selectedList.length === (childCountCheck)) && (checkCount_1 === childCount_1)) {
                                                _this.openDialog();
                                            }
                                        }
                                        else {
                                            if ((selectedList.length === (childCountCheck)) && (checkCount_1 === childCount_1)) {
                                                _this.openDialog();
                                            }
                                        }
                                    }));
                                };
                                for (var k = 0; k < _this.ChildTradesList.length; k++) {
                                    _loop_1(k);
                                }
                            }
                            else {
                                if (selectedList.length === (childCountCheck) && (chkSubscribeState === false)) {
                                    _this.openDialog();
                                }
                            }
                        }
                        else {
                            var interCo = _this.totalContractList.filter(function (id) { return id.sectionId === checkInterco_1[0].sectionID; });
                            interCo.forEach(function (element) {
                                _this.interCoTradeList.push(element);
                                _this.selectedApprovalList = _this.selectedApprovalList.filter(function (id) { return id.sectionId !== element.sectionId; });
                            });
                            if (selectedList.length === (childCountCheck)) {
                                _this.openDialog();
                            }
                        }
                    }
                }));
            });
        }
        else {
            this.openDialog();
        }
    };
    TradeBulkApprovalComponent.prototype.openDialog = function () {
        var _this = this;
        this.ChildTradeForSectionTrades = [];
        var childList = this.childFilterList;
        childList.forEach(function (element) {
            var childTrades = (_this.totalContractList.filter(function (item) { return item.sectionId === element; }));
            childTrades.forEach(function (childelement) {
                _this.ChildTradeForSectionTrades.push(childelement);
            });
        });
        this.ChildTradeForSectionTrades.forEach(function (childelement) {
            _this.selectedApprovalList.push(childelement);
        });
        this.selectedApprovalList = this.selectedApprovalList.filter(function (el, i, a) { return i === a.indexOf(el); });
        var openDialog = this.dialog.open(_app_trading_dialog_boxes_bulk_approval_dialog_bulk_approval_dialog_component__WEBPACK_IMPORTED_MODULE_4__["BulkApprovalDialogComponent"], {
            data: {
                company: this.company,
                tradeSelectedList: this.selectedApprovalList,
                lockedTrades: this.lockedTrades,
                interCoList: this.interCoTradeList,
            },
        });
    };
    TradeBulkApprovalComponent.prototype.getSelectedApprovalList = function () {
        var selectedApprovalList;
        this.formComponents.forEach(function (comp) {
            selectedApprovalList = comp.populateEntity(selectedApprovalList);
        });
        return selectedApprovalList;
    };
    TradeBulkApprovalComponent.prototype.isContractSelected = function (contractSelected) {
        this.isContractsNextDisabled = contractSelected;
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('stepper'),
        __metadata("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatStepper"])
    ], TradeBulkApprovalComponent.prototype, "stepper", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('contractSelection'),
        __metadata("design:type", _group_function_contracts_group_function_contracts_component__WEBPACK_IMPORTED_MODULE_10__["GroupFunctionContractsComponent"])
    ], TradeBulkApprovalComponent.prototype, "contractSelection", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('groupFunctionWarning'),
        __metadata("design:type", _group_function_warning_group_function_warning_component__WEBPACK_IMPORTED_MODULE_11__["GroupFunctionWarningComponent"])
    ], TradeBulkApprovalComponent.prototype, "groupFunctionWarning", void 0);
    TradeBulkApprovalComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-trade-bulk-approval',
            template: __webpack_require__(/*! ./trade-bulk-approval.component.html */ "./Client/app/trading/components/group-functions/trade-bulk-approval/trade-bulk-approval.component.html"),
            styles: [__webpack_require__(/*! ./trade-bulk-approval.component.scss */ "./Client/app/trading/components/group-functions/trade-bulk-approval/trade-bulk-approval.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_7__["FormConfigurationProviderService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_5__["CompanyManagerService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialog"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_9__["TradingService"],
            _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_8__["LockService"]])
    ], TradeBulkApprovalComponent);
    return TradeBulkApprovalComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_6__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-closure/ag-grid-pop-up/ag-grid-pop-up.component.html":
/*!***********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-closure/ag-grid-pop-up/ag-grid-pop-up.component.html ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div>\r\n    <mat-form-field>\r\n        <input matInput\r\n               [formControl]=\"popUpStatusDisplayCtrl\"\r\n               readonly>\r\n        <mat-icon matSuffix\r\n                  *ngIf=\"ispopUpcellRendererLoaded()\"\r\n                  (click)=\"onExploreClicked($event)\">launch</mat-icon>\r\n\r\n    </mat-form-field>\r\n</div>"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-closure/ag-grid-pop-up/ag-grid-pop-up.component.scss":
/*!***********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-closure/ag-grid-pop-up/ag-grid-pop-up.component.scss ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".launch-icons {\n  cursor: pointer; }\n\nmat-form-field.ng-valid mat-icon, atlas-commodity-input.ng-valid mat-icon {\n  color: grey; }\n"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-closure/ag-grid-pop-up/ag-grid-pop-up.component.ts":
/*!*********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-closure/ag-grid-pop-up/ag-grid-pop-up.component.ts ***!
  \*********************************************************************************************************************/
/*! exports provided: AgGridPopUpComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AgGridPopUpComponent", function() { return AgGridPopUpComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








var AgGridPopUpComponent = /** @class */ (function (_super) {
    __extends(AgGridPopUpComponent, _super);
    function AgGridPopUpComponent(formConfigurationProvider, formBuilder, companyManager, router, dialog) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.formBuilder = formBuilder;
        _this.companyManager = companyManager;
        _this.router = router;
        _this.dialog = dialog;
        _this.popUpStatusDisplayCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_3__["AtlasFormControl"]('PopUpStatusDisplay');
        _this.formGroup = _this.formBuilder.group({
            popUpStatusDisplayCtrl: _this.popUpStatusDisplayCtrl
        });
        return _this;
    }
    AgGridPopUpComponent.prototype.ngOnInit = function () {
    };
    AgGridPopUpComponent.prototype.agInit = function (params) {
        this.params = params;
        this.data = params.value;
        this.popUpStatusDisplayCtrl.patchValue(this.data);
    };
    AgGridPopUpComponent.prototype.refresh = function (params) {
        return false;
    };
    AgGridPopUpComponent.prototype.ispopUpcellRendererLoaded = function () {
        if (this.params.value) {
            if (this.params.data.contractLabel[0] == 'Contracts available for closure') {
                return false;
            }
            else {
                return true;
            }
        }
        else {
            return false;
        }
    };
    AgGridPopUpComponent.prototype.onExploreClicked = function () {
        var link;
        if (this.params.data) {
            if (this.params.data.status === 'Cost accrual') {
                link = this.params.context.componentParent.companyManager.getCurrentCompanyId() + "/trades/display/" + this.params.data.sectionId + "/1";
                window.open(link, '_blank');
            }
            else if (this.params.data.status === 'Invoices not cash matched') {
                link = this.params.context.componentParent.companyManager.getCurrentCompanyId() + "/trades/display/" + this.params.data.sectionId + "/5";
                window.open(link, '_blank');
            }
            else if (this.params.data.status === 'Cargo accrual') {
                link = this.params.context.componentParent.companyManager.getCurrentCompanyId() + "/trades/display/" + this.params.data.sectionId + "/5";
                window.open(link, '_blank');
            }
            else if (this.params.data.status === 'Invoices not posted') {
                link = this.params.context.componentParent.companyManager.getCurrentCompanyId() + "/trades/display/" + this.params.data.sectionId + "/5";
                window.open(link, '_blank');
            }
        }
    };
    AgGridPopUpComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-ag-grid-pop-up',
            template: __webpack_require__(/*! ./ag-grid-pop-up.component.html */ "./Client/app/trading/components/group-functions/trade-bulk-closure/ag-grid-pop-up/ag-grid-pop-up.component.html"),
            styles: [__webpack_require__(/*! ./ag-grid-pop-up.component.scss */ "./Client/app/trading/components/group-functions/trade-bulk-closure/ag-grid-pop-up/ag-grid-pop-up.component.scss")]
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_4__["FormConfigurationProviderService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_6__["CompanyManagerService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_7__["Router"],
            _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialog"]])
    ], AgGridPopUpComponent);
    return AgGridPopUpComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-closure/bulk-closure-matrix/bulk-closure-matrix.component.html":
/*!*********************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-closure/bulk-closure-matrix/bulk-closure-matrix.component.html ***!
  \*********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"main-container\"\r\n     fxLayout=\"column\"\r\n     fxLayoutAlign=\"start none\">\r\n    <div ag-grid=\"bulkClosureGridOptions\"\r\n         class=\"ag-theme-material pointer-cursor\">\r\n        <ag-grid-angular style=\"height:100%;\"\r\n                         class=\"ag-theme-material\"\r\n                         [rowData]=\"bulkClosureGridRows\"\r\n                         [gridOptions]=\"bulkClosureGridOptions\"\r\n                         [columnDefs]=\"bulkClosureGridColumns\"\r\n                         domLayout=\"autoHeight\"\r\n                         (gridReady)=\"onGridReady($event)\"\r\n                         [singleClickClosure]=true\r\n                         rowSelection=\"multiple\"\r\n                         [treeData]=\"true\"\r\n                         [animateRows]=\"true\"\r\n                         [groupDefaultExpanded]=\"groupDefaultExpanded\"\r\n                         [getDataPath]=\"getDataPath\"\r\n                         [autoGroupColumnDef]=\"autoGroupColumnDef\"\r\n                         (columnVisible)=\"onColumnVisibilityChanged($event)\"\r\n                         [frameworkComponents]=\"gridComponents\"\r\n                         (rowSelected)=\"onSelectionChanged($event)\"\r\n                         [pagination]=\"true\"\r\n                         [paginationPageSize]=\"28\"\r\n                         [enableSorting]=\"true\"\r\n                         [enableColResize]=\"true\"\r\n                         enableFilter\r\n                         [rowHeight]=32>\r\n        </ag-grid-angular>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-closure/bulk-closure-matrix/bulk-closure-matrix.component.scss":
/*!*********************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-closure/bulk-closure-matrix/bulk-closure-matrix.component.scss ***!
  \*********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "::ng-deep .ag-row-group-indent-0 {\n  font-weight: bold; }\n\n::ng-deep .status-background-color {\n  color: #635e5e !important; }\n"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-closure/bulk-closure-matrix/bulk-closure-matrix.component.ts":
/*!*******************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-closure/bulk-closure-matrix/bulk-closure-matrix.component.ts ***!
  \*******************************************************************************************************************************/
/*! exports provided: BulkClosureMatrixComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BulkClosureMatrixComponent", function() { return BulkClosureMatrixComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/services/ag-grid.service */ "./Client/app/shared/services/ag-grid.service.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/services/ui.service */ "./Client/app/shared/services/ui.service.ts");
/* harmony import */ var _ag_grid_pop_up_ag_grid_pop_up_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../ag-grid-pop-up/ag-grid-pop-up.component */ "./Client/app/trading/components/group-functions/trade-bulk-closure/ag-grid-pop-up/ag-grid-pop-up.component.ts");
/* harmony import */ var _shared_components_ag_grid_hyperlink_ag_grid_hyperlink_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/components/ag-grid-hyperlink/ag-grid-hyperlink.component */ "./Client/app/shared/components/ag-grid-hyperlink/ag-grid-hyperlink.component.ts");
/* harmony import */ var _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/enums/contract-type.enum */ "./Client/app/shared/enums/contract-type.enum.ts");
/* harmony import */ var _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../shared/enums/invoicing-status.enum */ "./Client/app/shared/enums/invoicing-status.enum.ts");
/* harmony import */ var _shared_enums_posting_status_enum__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../shared/enums/posting-status.enum */ "./Client/app/shared/enums/posting-status.enum.ts");
/* harmony import */ var _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../../shared/services/http-services/lock.service */ "./Client/app/shared/services/http-services/lock.service.ts");
/* harmony import */ var _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../../shared/entities/lock-functional-context.entity */ "./Client/app/shared/entities/lock-functional-context.entity.ts");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




















var BulkClosureMatrixComponent = /** @class */ (function (_super) {
    __extends(BulkClosureMatrixComponent, _super);
    function BulkClosureMatrixComponent(formConfigurationProvider, gridService, uiService, agGridService, dialog, snackbarService, route, companyManager, router, lockService, authorizationService, tradingService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.gridService = gridService;
        _this.uiService = uiService;
        _this.agGridService = agGridService;
        _this.dialog = dialog;
        _this.snackbarService = snackbarService;
        _this.route = route;
        _this.companyManager = companyManager;
        _this.router = router;
        _this.lockService = lockService;
        _this.authorizationService = authorizationService;
        _this.tradingService = tradingService;
        _this.bulkClosureGridOptions = {};
        _this.bulkClosureGridRows = [];
        _this.traders = [];
        _this.copyselectedallocatedIds = [];
        _this.selectedallocatedIds = [];
        _this.allocateClosureContract = [];
        _this.duplicateAllocateClosureContract = [];
        _this.selectedAllocatedValue = [];
        _this.allocatedSection = [];
        _this.tooltipMessage = '';
        _this.availableClosure = "Contracts available for closure";
        _this.riskyClosure = "Contracts risky for closure";
        _this.unavailableClosure = "Contracts unavailable for closure";
        _this.defaultDate = 'Mon Jan 01 0001';
        _this.gridContext = {
            gridEditable: true,
            componentParent: _this,
        };
        _this.gridComponents = {};
        _this.destroy$ = new rxjs__WEBPACK_IMPORTED_MODULE_19__["Subject"]();
        _this.isContractClosureSelected = false;
        _this.contractClosureSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        return _this;
    }
    BulkClosureMatrixComponent.prototype.ngOnInit = function () {
        this.masterdata = this.route.snapshot.data.masterdata;
        this.company = this.route.snapshot.paramMap.get('company');
        this.companyConfiguration = this.companyManager.getCompany(this.company);
        this.atlasAgGridParam = this.gridService.getAgGridParam();
        this.initializeGridColumns();
        this.initializeGridRows();
    };
    BulkClosureMatrixComponent.prototype.isGridEditable = function (params) {
        return params.context.gridEditable;
    };
    BulkClosureMatrixComponent.prototype.initializeGridColumns = function () {
        var _this = this;
        this.bulkClosureGridOptions = {
            context: this.gridContext,
        };
        this.bulkClosureGridColumns =
            [
                {
                    headerName: 'Status',
                    field: 'status',
                    colId: 'status',
                    cellClass: 'status-background-color',
                    cellStyle: function (params) {
                        if (params.value) {
                            if (params.data.contractLabel[0] == 'Contracts available for closure') {
                            }
                            if (params.data.contractLabel[0] == 'Contracts risky for closure') {
                                return { backgroundColor: '#fff2ec', borderRadius: '2px !important;' };
                            }
                            if (params.data.contractLabel[0] == 'Contracts unavailable for closure') {
                                return { backgroundColor: 'hsl(0, 70%, 82%)', borderRadius: '2px !important;' };
                            }
                        }
                    },
                    cellRendererFramework: _ag_grid_pop_up_ag_grid_pop_up_component__WEBPACK_IMPORTED_MODULE_11__["AgGridPopUpComponent"],
                    cellRendererParams: {
                        context: {
                            componentParent: this,
                        },
                    },
                    tooltip: function (params) {
                        if (params.data) {
                            if (params.data.status === 'Cost accrual') {
                                _this.tooltipMessage = 'link to ‘cost’ tab';
                            }
                            else if (params.data.status === 'Invoices not cash matched') {
                                _this.tooltipMessage = 'link to ‘Invoice marking’ tab';
                            }
                            else if (params.data.status === 'Cargo accrual') {
                                _this.tooltipMessage = 'link to ‘Invoice marking’ tab';
                            }
                            else if (params.data.status === 'Invoices not posted') {
                                _this.tooltipMessage = 'link to ‘Invoice marking’ tab';
                            }
                            else if (params.data.status === 'Unrealized physicals') {
                                _this.tooltipMessage = 'Make the Qty 0 or change the Invoice type to close it';
                            }
                            else if (params.data.contractLabel[0] === 'Contracts available for closure') {
                                _this.tooltipMessage = '';
                            }
                            else if (params.data.contractLabel[0] === 'Contracts risky for closure') {
                                _this.tooltipMessage = '';
                            }
                            else if (params.data.contractLabel[0] === 'Contracts unavailable for closure') {
                                _this.tooltipMessage = '';
                            }
                            return _this.tooltipMessage;
                        }
                    },
                },
                {
                    headerName: 'Net accrual/P&L impact ',
                    field: 'netaccrual',
                    colId: 'netaccrual',
                },
                {
                    headerName: '%Invoice ',
                    field: 'invoice',
                    colId: 'invoice',
                },
                {
                    headerName: '',
                    field: 'sectionId',
                    colId: 'sectionId',
                    hide: true,
                },
            ];
    };
    BulkClosureMatrixComponent.prototype.onColumnVisibilityChanged = function (event) {
    };
    BulkClosureMatrixComponent.prototype.onSelectionChanged = function (event) {
        var _this = this;
        var obj;
        var selectedRows = this.gridApi.getSelectedRows();
        var allocatedRows = selectedRows;
        this.isContractClosureSelected = selectedRows.length > 0;
        this.contractClosureSelected.emit(this.isContractClosureSelected);
        this.gridApi.forEachNode(function (node) {
            if (node.parent.key === 'Contracts unavailable for closure') {
                node.setSelected(false);
                node.selectable = false;
                Object.values(node.childrenMapped).forEach(function (childNode) {
                    childNode.selectable = node.isSelected();
                    node.selectable = false;
                });
            }
            else if (node.key === 'Contracts unavailable for closure') {
                node.setSelected(false);
                node.selectable = false;
            }
            else if (node.isSelected()) {
                if (node.allChildrenCount) {
                    Object.values(node.childrenMapped).forEach(function (childNode) {
                        childNode.setSelected(true);
                    });
                }
                else {
                    node.setSelected(true);
                }
            }
            else {
                if (node.allChildrenCount) {
                    Object.values(node.childrenMapped).forEach(function (childNode) {
                        if (!childNode.isSelected()) {
                            childNode.setSelected(false);
                        }
                    });
                }
                else {
                    node.setSelected(false);
                }
            }
        });
        this.gridApi.refreshCells(event.data);
        allocatedRows.forEach(function (contract) {
            if (contract.contractLabel[2]) {
                var element = _this.selectContractStatusValue.find(function (section) {
                    return section.contractLabel == contract.contractLabel[2];
                });
                if (element) {
                    obj = {
                        contractLabel: ['', element.contractLabel, contract.contractLabel[1]],
                        status: null,
                        netaccrual: element.netAccrual,
                        invoice: element.invoicePercent,
                        sectionId: element.sectionId
                    };
                    selectedRows.push(obj);
                }
            }
        });
        this.selectedContractsClosureForBulkFunctions = selectedRows;
    };
    BulkClosureMatrixComponent.prototype.initializeGridRows = function () {
        var _this = this;
        var allocatedContractsList = [];
        allocatedContractsList = this.allContractStatusValue;
        this.selectedAllocatedValue = this.selectContractStatusValue;
        this.bulkClosureGridRows = [];
        if (this.selectedAllocatedValue) {
            this.selectedAllocatedValue.forEach(function (contract) {
                var postingCount = 0;
                var costPostingCount = 0;
                var redTradesPostingCount = 0;
                var cashMatchCount = 0;
                var costCashMatchCount = 0;
                var isLock = false;
                var isRedLock = false;
                var isRedTrades = false;
                var lockMessage = '';
                var unInvoiceCost = null;
                var netAccrualVal = null;
                if (contract.invoices) {
                    contract.invoices.forEach(function (invoice) {
                        if (invoice.postingStatusId !== _shared_enums_posting_status_enum__WEBPACK_IMPORTED_MODULE_15__["PostingStatus"].Posted) {
                            postingCount = postingCount + 1;
                        }
                        if (invoice.cashMatchPercentage !== 100) {
                            cashMatchCount = cashMatchCount + 1;
                        }
                    });
                }
                if (contract.costs && contract.costs.length > 0) {
                    unInvoiceCost = contract.costs.filter(function (cost) {
                        return cost.invoiceStatus === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Uninvoiced ||
                            cost.invoiceStatus === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].FinalInvoiceRequired ||
                            cost.invoiceStatus === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Finalized;
                    });
                    contract.costs.forEach(function (cost) {
                        if (cost.postingStatusId !== _shared_enums_posting_status_enum__WEBPACK_IMPORTED_MODULE_15__["PostingStatus"].Posted) {
                            costPostingCount = costPostingCount + 1;
                        }
                        if (cost.cashMatchPercentage !== 100) {
                            costCashMatchCount = costCashMatchCount + 1;
                        }
                    });
                }
                _this.lockService.isLockedContract(contract.sectionId).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_18__["takeUntil"])(_this.destroy$)).subscribe(function (lock) {
                    if (lock.isLocked) {
                        isLock = true;
                        lockMessage = lock.message;
                    }
                    else {
                        _this.subscriptions.push(_this.lockService.lockContract(contract.sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_17__["LockFunctionalContext"].TradeBulkClosure).subscribe(function (res) { }));
                    }
                });
                var selectedContracts = _this.selectedAllocatedValue.find(function (section) {
                    return section.contractLabel == contract.allocatedContractReference;
                });
                if (selectedContracts) {
                    _this.lockService.isLockedContract(selectedContracts.sectionId).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_18__["takeUntil"])(_this.destroy$)).subscribe(function (lock) {
                        if (lock.isLocked) {
                            isRedLock = true;
                        }
                    });
                    selectedContracts.invoices.forEach(function (invoice) {
                        if (invoice.postingStatusId !== _shared_enums_posting_status_enum__WEBPACK_IMPORTED_MODULE_15__["PostingStatus"].Posted) {
                            redTradesPostingCount = redTradesPostingCount + 1;
                        }
                    });
                    if (contract.contractTypeId === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_13__["ContractTypes"].Sale &&
                        (isRedLock || selectedContracts.blDate === null || selectedContracts.blDate === _this.defaultDate ||
                            selectedContracts.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Uninvoiced ||
                            selectedContracts.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].FinalInvoiceRequired ||
                            (selectedContracts.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Finalized && redTradesPostingCount > 0)) && selectedContracts.costs.length === 0) {
                        isRedTrades = true;
                    }
                }
                if (contract.quantity === 0 || contract.isTradeCancelled === "Cancelled" ||
                    (contract.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Finalized && postingCount === 0 &&
                        cashMatchCount === 0) && !isLock) {
                    var obj = void 0;
                    if (contract.costs.length > 0) {
                        if (unInvoiceCost !== null && unInvoiceCost.length === 0) {
                            if (contract.allocatedContractReference && allocatedContractsList.find(function (section) {
                                return section.contractLabel == contract.allocatedContractReference;
                            })) {
                                if (contract.contractTypeId === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_13__["ContractTypes"].Purchase || !selectedContracts ||
                                    isRedTrades) {
                                    var element = allocatedContractsList.find(function (section) {
                                        return section.contractLabel == contract.allocatedContractReference;
                                    });
                                    if (element) {
                                        obj = {
                                            contractLabel: [_this.availableClosure]
                                        };
                                        _this.bulkClosureGridRows.push(obj);
                                        obj = {
                                            contractLabel: [_this.availableClosure, contract.contractLabel],
                                            status: null,
                                            netaccrual: netAccrualVal,
                                            invoice: contract.invoicePercent,
                                            sectionId: contract.sectionId
                                        };
                                        _this.bulkClosureGridRows.push(obj);
                                        obj = {
                                            contractLabel: [_this.availableClosure, contract.contractLabel,
                                                element.contractLabel],
                                            status: null,
                                            netaccrual: netAccrualVal,
                                            invoice: element.invoicePercent,
                                            sectionId: element.sectionId
                                        };
                                        _this.bulkClosureGridRows.push(obj);
                                    }
                                }
                            }
                            else {
                                obj = {
                                    contractLabel: [_this.availableClosure]
                                };
                                _this.bulkClosureGridRows.push(obj);
                                obj = {
                                    contractLabel: [_this.availableClosure, contract.contractLabel],
                                    status: null,
                                    netaccrual: netAccrualVal,
                                    invoice: contract.invoicePercent,
                                    sectionId: contract.sectionId
                                };
                                _this.bulkClosureGridRows.push(obj);
                            }
                        }
                        else if ((unInvoiceCost !== null && unInvoiceCost.length > 0 && contract.blDate !== null &&
                            contract.blDate !== _this.defaultDate) || (contract.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Finalized &&
                            postingCount === 0 && cashMatchCount > 0) && !isLock) {
                            var obj_1, riskyClosureStatus = void 0;
                            if ((unInvoiceCost !== null && unInvoiceCost.length > 0 && contract.blDate !== null &&
                                contract.blDate !== _this.defaultDate) && costPostingCount > 0) {
                                riskyClosureStatus = 'Cost accrual';
                                contract.costs.sort(function (a, b) { return new Date(b.invoiceDate).getTime() - new Date(a.invoiceDate).getTime(); });
                                netAccrualVal = contract.costs[0].netAccrual + ' ' + contract.costs[0].currencyCode;
                            }
                            else if ((unInvoiceCost !== null && unInvoiceCost.length > 0 && costPostingCount === 0 &&
                                costCashMatchCount > 0) || (contract.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Finalized &&
                                postingCount === 0 && cashMatchCount > 0)) {
                                riskyClosureStatus = 'Invoices not cash matched';
                            }
                            if (contract.allocatedContractReference && allocatedContractsList.find(function (section) {
                                return section.contractLabel == contract.allocatedContractReference;
                            })) {
                                if (contract.contractTypeId === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_13__["ContractTypes"].Purchase || !selectedContracts ||
                                    isRedTrades) {
                                    var element_1 = allocatedContractsList.find(function (section) {
                                        return section.contractLabel == contract.allocatedContractReference;
                                    });
                                    if (element_1) {
                                        var allocatedPostingCount_1 = 0;
                                        var allocatedCostPostingCount_1 = 0;
                                        var allocatedCashMatchCount_1 = 0;
                                        var allocatedCostCashMatchCount_1 = 0;
                                        var allocatedIsLock_1 = false;
                                        var allocatedLockMessage_1 = '';
                                        var allocatedUnInvoiceCost = null;
                                        var allocatedNetAccrualVal = null;
                                        var allocatedClosureStatus = void 0;
                                        var allocatedContractList = [];
                                        allocatedContractList = _this.selectContractStatusValue;
                                        var allocatedContract_1 = allocatedContractList.find(function (contract) {
                                            return contract.contractLabel == element_1.contractLabel;
                                        });
                                        if (allocatedContract_1.invoices) {
                                            allocatedContract_1.invoices.forEach(function (invoice) {
                                                if (invoice.postingStatusId !== _shared_enums_posting_status_enum__WEBPACK_IMPORTED_MODULE_15__["PostingStatus"].Posted) {
                                                    allocatedPostingCount_1 = allocatedPostingCount_1 + 1;
                                                }
                                                if (invoice.cashMatchPercentage !== 100) {
                                                    allocatedCashMatchCount_1 = allocatedCashMatchCount_1 + 1;
                                                }
                                            });
                                        }
                                        if (allocatedContract_1.costs && allocatedContract_1.costs.length > 0) {
                                            allocatedUnInvoiceCost = allocatedContract_1.costs.filter(function (cost) {
                                                return cost.invoiceStatus === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Uninvoiced ||
                                                    cost.invoiceStatus === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].FinalInvoiceRequired ||
                                                    cost.invoiceStatus === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Finalized;
                                            });
                                            allocatedContract_1.costs.forEach(function (cost) {
                                                if (cost.postingStatusId !== _shared_enums_posting_status_enum__WEBPACK_IMPORTED_MODULE_15__["PostingStatus"].Posted) {
                                                    allocatedCostPostingCount_1 = allocatedCostPostingCount_1 + 1;
                                                }
                                                if (cost.cashMatchPercentage !== 100) {
                                                    allocatedCostCashMatchCount_1 = allocatedCostCashMatchCount_1 + 1;
                                                }
                                            });
                                        }
                                        _this.lockService.isLockedContract(allocatedContract_1.sectionId).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_18__["takeUntil"])(_this.destroy$)).subscribe(function (lock) {
                                            if (lock.isLocked) {
                                                allocatedIsLock_1 = true;
                                                allocatedLockMessage_1 = lock.message;
                                            }
                                            else {
                                                _this.subscriptions.push(_this.lockService.lockContract(allocatedContract_1.sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_17__["LockFunctionalContext"].TradeBulkClosure).subscribe(function (res) { }));
                                            }
                                        });
                                        if ((allocatedUnInvoiceCost !== null && allocatedUnInvoiceCost.length > 0 && allocatedContract_1.blDate !== null &&
                                            allocatedContract_1.blDate !== _this.defaultDate) || (allocatedContract_1.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Finalized &&
                                            allocatedPostingCount_1 === 0 && allocatedCashMatchCount_1 > 0) && !allocatedIsLock_1) {
                                            if ((allocatedUnInvoiceCost !== null && allocatedUnInvoiceCost.length > 0 && allocatedContract_1.blDate !== null &&
                                                allocatedContract_1.blDate !== _this.defaultDate) && allocatedCostPostingCount_1 > 0) {
                                                allocatedClosureStatus = 'Cost accrual';
                                                allocatedContract_1.costs.sort(function (a, b) { return new Date(b.invoiceDate).getTime() - new Date(a.invoiceDate).getTime(); });
                                                allocatedNetAccrualVal = allocatedContract_1.costs[0].netAccrual + ' ' + allocatedContract_1.costs[0].currencyCode;
                                            }
                                            else if ((allocatedUnInvoiceCost !== null && allocatedUnInvoiceCost.length > 0 && allocatedCostPostingCount_1 === 0 &&
                                                allocatedCostCashMatchCount_1 > 0) || (allocatedContract_1.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Finalized &&
                                                allocatedPostingCount_1 === 0 && allocatedCashMatchCount_1 > 0)) {
                                                allocatedClosureStatus = 'Invoices not cash matched';
                                            }
                                        }
                                        else if (allocatedIsLock_1 || allocatedContract_1.blDate === null || allocatedContract_1.blDate === _this.defaultDate ||
                                            allocatedContract_1.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Uninvoiced ||
                                            allocatedContract_1.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].FinalInvoiceRequired ||
                                            (allocatedContract_1.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Finalized && allocatedPostingCount_1 > 0)) {
                                            if (allocatedIsLock_1) {
                                                allocatedClosureStatus = allocatedLockMessage_1;
                                            }
                                            else if (allocatedContract_1.blDate === null || allocatedContract_1.blDate === _this.defaultDate) {
                                                allocatedClosureStatus = 'Unrealized physicals';
                                            }
                                            else if (allocatedContract_1.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Uninvoiced ||
                                                allocatedContract_1.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].FinalInvoiceRequired) {
                                                allocatedClosureStatus = 'Cargo accrual';
                                                allocatedNetAccrualVal = allocatedContract_1.netAccrual + ' ' + allocatedContract_1.currencyCode;
                                            }
                                            else if (allocatedContract_1.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Finalized && allocatedPostingCount_1 > 0) {
                                                allocatedClosureStatus = 'Invoices not posted';
                                            }
                                        }
                                        obj_1 = {
                                            contractLabel: [_this.riskyClosure]
                                        };
                                        _this.bulkClosureGridRows.push(obj_1);
                                        obj_1 = {
                                            contractLabel: [_this.riskyClosure, contract.contractLabel],
                                            status: riskyClosureStatus,
                                            netaccrual: netAccrualVal,
                                            invoice: contract.invoicePercent,
                                            sectionId: contract.sectionId
                                        };
                                        _this.bulkClosureGridRows.push(obj_1);
                                        obj_1 = {
                                            contractLabel: [_this.riskyClosure, contract.contractLabel,
                                                element_1.contractLabel],
                                            status: allocatedClosureStatus,
                                            netaccrual: allocatedNetAccrualVal,
                                            invoice: allocatedContract_1.invoicePercent,
                                            sectionId: allocatedContract_1.sectionId
                                        };
                                        _this.bulkClosureGridRows.push(obj_1);
                                    }
                                }
                            }
                            else {
                                obj_1 = {
                                    contractLabel: [_this.riskyClosure]
                                };
                                _this.bulkClosureGridRows.push(obj_1);
                                obj_1 = {
                                    contractLabel: [_this.riskyClosure, contract.contractLabel],
                                    status: riskyClosureStatus,
                                    netaccrual: netAccrualVal,
                                    invoice: contract.invoicePercent,
                                    sectionId: contract.sectionId
                                };
                                _this.bulkClosureGridRows.push(obj_1);
                            }
                        }
                    }
                    else {
                        if (contract.allocatedContractReference && allocatedContractsList.find(function (section) {
                            return section.contractLabel == contract.allocatedContractReference;
                        })) {
                            if (contract.contractTypeId === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_13__["ContractTypes"].Purchase || !selectedContracts ||
                                isRedTrades) {
                                var element = allocatedContractsList.find(function (section) {
                                    return section.contractLabel == contract.allocatedContractReference;
                                });
                                if (element) {
                                    obj = {
                                        contractLabel: [_this.availableClosure]
                                    };
                                    _this.bulkClosureGridRows.push(obj);
                                    obj = {
                                        contractLabel: [_this.availableClosure, contract.contractLabel],
                                        status: null,
                                        netaccrual: netAccrualVal,
                                        invoice: contract.invoicePercent,
                                        sectionId: contract.sectionId
                                    };
                                    _this.bulkClosureGridRows.push(obj);
                                    obj = {
                                        contractLabel: [_this.availableClosure, contract.contractLabel,
                                            element.contractLabel],
                                        status: null,
                                        netaccrual: netAccrualVal,
                                        invoice: element.invoicePercent,
                                        sectionId: element.sectionId
                                    };
                                    _this.bulkClosureGridRows.push(obj);
                                }
                            }
                        }
                        else {
                            obj = {
                                contractLabel: [_this.availableClosure]
                            };
                            _this.bulkClosureGridRows.push(obj);
                            obj = {
                                contractLabel: [_this.availableClosure, contract.contractLabel],
                                status: null,
                                netaccrual: netAccrualVal,
                                invoice: contract.invoicePercent,
                                sectionId: contract.sectionId
                            };
                            _this.bulkClosureGridRows.push(obj);
                        }
                    }
                }
                else if ((unInvoiceCost !== null && unInvoiceCost.length > 0 && contract.blDate !== null &&
                    contract.blDate !== _this.defaultDate) || (contract.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Finalized &&
                    postingCount === 0 && cashMatchCount > 0) && !isLock) {
                    var obj = void 0, riskyClosureStatus = void 0;
                    if ((unInvoiceCost !== null && unInvoiceCost.length > 0 && contract.blDate !== null &&
                        contract.blDate !== _this.defaultDate) && costPostingCount > 0) {
                        riskyClosureStatus = 'Cost accrual';
                        contract.costs.sort(function (a, b) { return new Date(b.invoiceDate).getTime() - new Date(a.invoiceDate).getTime(); });
                        netAccrualVal = contract.costs[0].netAccrual + ' ' + contract.costs[0].currencyCode;
                    }
                    else if ((unInvoiceCost !== null && unInvoiceCost.length > 0 && costPostingCount === 0 &&
                        costCashMatchCount > 0) || (contract.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Finalized &&
                        postingCount === 0 && cashMatchCount > 0)) {
                        riskyClosureStatus = 'Invoices not cash matched';
                    }
                    if (contract.allocatedContractReference && allocatedContractsList.find(function (section) {
                        return section.contractLabel == contract.allocatedContractReference;
                    })) {
                        if (contract.contractTypeId === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_13__["ContractTypes"].Purchase || !selectedContracts ||
                            isRedTrades) {
                            var element_2 = allocatedContractsList.find(function (section) {
                                return section.contractLabel == contract.allocatedContractReference;
                            });
                            if (element_2) {
                                var allocatedPostingCount_2 = 0;
                                var allocatedCostPostingCount_2 = 0;
                                var allocatedCashMatchCount_2 = 0;
                                var allocatedCostCashMatchCount_2 = 0;
                                var allocatedIsLock_2 = false;
                                var allocatedLockMessage_2 = '';
                                var allocatedUnInvoiceCost = null;
                                var allocatedNetAccrualVal = null;
                                var allocatedClosureStatus = void 0;
                                var allocatedContractList = [];
                                allocatedContractList = _this.selectContractStatusValue;
                                var allocatedContract_2 = allocatedContractList.find(function (contract) {
                                    return contract.contractLabel == element_2.contractLabel;
                                });
                                if (allocatedContract_2.invoices) {
                                    allocatedContract_2.invoices.forEach(function (invoice) {
                                        if (invoice.postingStatusId !== _shared_enums_posting_status_enum__WEBPACK_IMPORTED_MODULE_15__["PostingStatus"].Posted) {
                                            allocatedPostingCount_2 = allocatedPostingCount_2 + 1;
                                        }
                                        if (invoice.cashMatchPercentage !== 100) {
                                            allocatedCashMatchCount_2 = allocatedCashMatchCount_2 + 1;
                                        }
                                    });
                                }
                                if (allocatedContract_2.costs && allocatedContract_2.costs.length > 0) {
                                    allocatedUnInvoiceCost = allocatedContract_2.costs.filter(function (cost) {
                                        return cost.invoiceStatus === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Uninvoiced ||
                                            cost.invoiceStatus === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].FinalInvoiceRequired ||
                                            cost.invoiceStatus === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Finalized;
                                    });
                                    allocatedContract_2.costs.forEach(function (cost) {
                                        if (cost.postingStatusId !== _shared_enums_posting_status_enum__WEBPACK_IMPORTED_MODULE_15__["PostingStatus"].Posted) {
                                            allocatedCostPostingCount_2 = allocatedCostPostingCount_2 + 1;
                                        }
                                        if (cost.cashMatchPercentage !== 100) {
                                            allocatedCostCashMatchCount_2 = allocatedCostCashMatchCount_2 + 1;
                                        }
                                    });
                                }
                                _this.lockService.isLockedContract(allocatedContract_2.sectionId).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_18__["takeUntil"])(_this.destroy$)).subscribe(function (lock) {
                                    if (lock.isLocked) {
                                        allocatedIsLock_2 = true;
                                        allocatedLockMessage_2 = lock.message;
                                    }
                                    else {
                                        _this.subscriptions.push(_this.lockService.lockContract(allocatedContract_2.sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_17__["LockFunctionalContext"].TradeBulkClosure).subscribe(function (res) { }));
                                    }
                                });
                                if ((allocatedUnInvoiceCost !== null && allocatedUnInvoiceCost.length > 0 && allocatedContract_2.blDate !== null &&
                                    allocatedContract_2.blDate !== _this.defaultDate) || (allocatedContract_2.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Finalized &&
                                    allocatedPostingCount_2 === 0 && allocatedCashMatchCount_2 > 0) && !allocatedIsLock_2) {
                                    if ((allocatedUnInvoiceCost !== null && allocatedUnInvoiceCost.length > 0 && allocatedContract_2.blDate !== null &&
                                        allocatedContract_2.blDate !== _this.defaultDate) && allocatedCostPostingCount_2 > 0) {
                                        allocatedClosureStatus = 'Cost accrual';
                                        allocatedContract_2.costs.sort(function (a, b) { return new Date(b.invoiceDate).getTime() - new Date(a.invoiceDate).getTime(); });
                                        allocatedNetAccrualVal = allocatedContract_2.costs[0].netAccrual + ' ' + allocatedContract_2.costs[0].currencyCode;
                                    }
                                    else if ((allocatedUnInvoiceCost !== null && allocatedUnInvoiceCost.length > 0 && allocatedCostPostingCount_2 === 0 &&
                                        allocatedCostCashMatchCount_2 > 0) || (allocatedContract_2.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Finalized &&
                                        allocatedPostingCount_2 === 0 && allocatedCashMatchCount_2 > 0)) {
                                        allocatedClosureStatus = 'Invoices not cash matched';
                                    }
                                }
                                else if (allocatedIsLock_2 || allocatedContract_2.blDate === null || allocatedContract_2.blDate === _this.defaultDate ||
                                    allocatedContract_2.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Uninvoiced ||
                                    allocatedContract_2.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].FinalInvoiceRequired ||
                                    (allocatedContract_2.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Finalized && allocatedPostingCount_2 > 0)) {
                                    if (allocatedIsLock_2) {
                                        allocatedClosureStatus = allocatedLockMessage_2;
                                    }
                                    else if (allocatedContract_2.blDate === null || allocatedContract_2.blDate === _this.defaultDate) {
                                        allocatedClosureStatus = 'Unrealized physicals';
                                    }
                                    else if (allocatedContract_2.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Uninvoiced ||
                                        allocatedContract_2.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].FinalInvoiceRequired) {
                                        allocatedClosureStatus = 'Cargo accrual';
                                        allocatedNetAccrualVal = allocatedContract_2.netAccrual + ' ' + allocatedContract_2.currencyCode;
                                    }
                                    else if (allocatedContract_2.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Finalized && allocatedPostingCount_2 > 0) {
                                        allocatedClosureStatus = 'Invoices not posted';
                                    }
                                }
                                obj = {
                                    contractLabel: [_this.riskyClosure]
                                };
                                _this.bulkClosureGridRows.push(obj);
                                obj = {
                                    contractLabel: [_this.riskyClosure, contract.contractLabel],
                                    status: riskyClosureStatus,
                                    netaccrual: netAccrualVal,
                                    invoice: contract.invoicePercent,
                                    sectionId: contract.sectionId
                                };
                                _this.bulkClosureGridRows.push(obj);
                                obj = {
                                    contractLabel: [_this.riskyClosure, contract.contractLabel,
                                        element_2.contractLabel],
                                    status: allocatedClosureStatus,
                                    netaccrual: allocatedNetAccrualVal,
                                    invoice: allocatedContract_2.invoicePercent,
                                    sectionId: allocatedContract_2.sectionId
                                };
                                _this.bulkClosureGridRows.push(obj);
                            }
                        }
                    }
                    else {
                        obj = {
                            contractLabel: [_this.riskyClosure]
                        };
                        _this.bulkClosureGridRows.push(obj);
                        obj = {
                            contractLabel: [_this.riskyClosure, contract.contractLabel],
                            status: riskyClosureStatus,
                            netaccrual: netAccrualVal,
                            invoice: contract.invoicePercent,
                            sectionId: contract.sectionId
                        };
                        _this.bulkClosureGridRows.push(obj);
                    }
                }
                else if (isLock || contract.blDate === null || contract.blDate === _this.defaultDate ||
                    contract.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Uninvoiced ||
                    contract.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].FinalInvoiceRequired ||
                    (contract.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Finalized && postingCount > 0)) {
                    var obj = void 0, unavailableClosureStatus = void 0;
                    if (isLock) {
                        unavailableClosureStatus = lockMessage;
                    }
                    else if (contract.blDate === null || contract.blDate === _this.defaultDate) {
                        unavailableClosureStatus = 'Unrealized physicals';
                    }
                    else if (contract.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Uninvoiced ||
                        contract.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].FinalInvoiceRequired) {
                        unavailableClosureStatus = 'Cargo accrual';
                        netAccrualVal = contract.netAccrual + ' ' + contract.currencyCode;
                    }
                    else if (contract.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_14__["InvoicingStatus"].Finalized && postingCount > 0) {
                        unavailableClosureStatus = 'Invoices not posted';
                    }
                    obj = {
                        contractLabel: [_this.unavailableClosure]
                    };
                    _this.bulkClosureGridRows.push(obj);
                    obj = {
                        contractLabel: [_this.unavailableClosure, contract.contractLabel],
                        status: unavailableClosureStatus,
                        netaccrual: netAccrualVal,
                        invoice: contract.invoicePercent,
                        sectionId: contract.sectionId
                    };
                    _this.bulkClosureGridRows.push(obj);
                }
            });
        }
        this.bulkClosureGridRows.sort(function (compareTo, compareFrom) {
            if (compareTo.contractLabel[0] == 'Contracts available for closure' && (compareFrom.contractLabel[0] == 'Contracts risky for closure' || compareFrom.contractLabel[0] == 'Contracts unavailable for closure')) {
                return -1;
            }
            else if (compareTo.contractLabel[0] == 'Contracts risky for closure' && compareFrom.contractLabel[0] == 'Contracts unavailable for closure') {
                return -1;
            }
            else {
                return 1;
            }
        });
        this.groupDefaultExpanded = -1;
        this.getDataPath = function (data) {
            return data.contractLabel;
        };
        this.autoGroupColumnDef = {
            headerName: "",
            cellRendererParams: {
                suppressCount: true,
                checkbox: true,
                innerRendererFramework: _shared_components_ag_grid_hyperlink_ag_grid_hyperlink_component__WEBPACK_IMPORTED_MODULE_12__["AgGridHyperlinkComponent"],
            },
        };
        this.autoSizeContractsGrid();
    };
    BulkClosureMatrixComponent.prototype.unloadNotification = function (event) {
        this.lockService.cleanSessionLocks().subscribe(function () {
        });
    };
    BulkClosureMatrixComponent.prototype.ngOnDestroy = function () {
        this.lockService.cleanSessionLocks().subscribe(function () {
        });
    };
    BulkClosureMatrixComponent.prototype.ContractsForClosure = function (contracts, allContracts) {
        this.bulkEditGridRows = contracts;
        this.selectContractStatus(this.bulkEditGridRows, allContracts);
        this.initializeGridRows();
        this.autoSizeContractsGrid();
    };
    BulkClosureMatrixComponent.prototype.selectContractStatus = function (selectedcontracts, allcontracts) {
        this.selectContractStatusValue = selectedcontracts;
        this.allContractStatusValue = allcontracts;
    };
    BulkClosureMatrixComponent.prototype.onGridReady = function (params) {
        params.columnDefs = this.bulkClosureGridColumns;
        this.bulkClosureGridOptions = params;
        this.gridApi = params.api;
        this.gridColumnApi = params.columnApi;
        this.gridApi.showNoRowsOverlay();
        this.autoSizeContractsGrid();
    };
    BulkClosureMatrixComponent.prototype.autoSizeContractsGrid = function () {
        var _this = this;
        if (!this.gridApi)
            return;
        setTimeout(function () {
            _this.gridApi.sizeColumnsToFit();
            _this.gridApi.forEachNode(function (node) {
                if (node.key === 'Contracts available for closure') {
                    if (node.allChildrenCount) {
                        Object.values(node.childrenMapped).forEach(function (childNode) {
                            childNode.setSelected(true);
                        });
                    }
                    else {
                        node.setSelected(true);
                    }
                }
            });
        });
    };
    BulkClosureMatrixComponent.prototype.hyperlinkClicked = function (rowSelected, event) {
        var link = this.companyManager.getCurrentCompanyId() + "/trades/display/" + rowSelected.sectionId;
        window.open(link, '_blank');
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], BulkClosureMatrixComponent.prototype, "contractClosureSelected", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"])('window:beforeunload', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], BulkClosureMatrixComponent.prototype, "unloadNotification", null);
    BulkClosureMatrixComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-bulk-closure-matrix',
            template: __webpack_require__(/*! ./bulk-closure-matrix.component.html */ "./Client/app/trading/components/group-functions/trade-bulk-closure/bulk-closure-matrix/bulk-closure-matrix.component.html"),
            styles: [__webpack_require__(/*! ./bulk-closure-matrix.component.scss */ "./Client/app/trading/components/group-functions/trade-bulk-closure/bulk-closure-matrix/bulk-closure-matrix.component.scss")]
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_7__["FormConfigurationProviderService"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_6__["AgGridService"],
            _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_10__["UiService"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_6__["AgGridService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialog"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_9__["SnackbarService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_4__["CompanyManagerService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_16__["LockService"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__["AuthorizationService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_8__["TradingService"]])
    ], BulkClosureMatrixComponent);
    return BulkClosureMatrixComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_5__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-closure/dialog/pop-up-dialog-component.component.html":
/*!************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-closure/dialog/pop-up-dialog-component.component.html ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p>\r\n  pop-up-dialog-component works!\r\n</p>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-closure/dialog/pop-up-dialog-component.component.scss":
/*!************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-closure/dialog/pop-up-dialog-component.component.scss ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-closure/dialog/pop-up-dialog-component.component.ts":
/*!**********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-closure/dialog/pop-up-dialog-component.component.ts ***!
  \**********************************************************************************************************************/
/*! exports provided: PopUpDialogComponentComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopUpDialogComponentComponent", function() { return PopUpDialogComponentComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};


var PopUpDialogComponentComponent = /** @class */ (function () {
    function PopUpDialogComponentComponent(data) {
        this.data = data;
    }
    PopUpDialogComponentComponent.prototype.ngOnInit = function () {
    };
    PopUpDialogComponentComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-pop-up-dialog-component',
            template: __webpack_require__(/*! ./pop-up-dialog-component.component.html */ "./Client/app/trading/components/group-functions/trade-bulk-closure/dialog/pop-up-dialog-component.component.html"),
            styles: [__webpack_require__(/*! ./pop-up-dialog-component.component.scss */ "./Client/app/trading/components/group-functions/trade-bulk-closure/dialog/pop-up-dialog-component.component.scss")]
        }),
        __param(0, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_1__["MAT_DIALOG_DATA"])),
        __metadata("design:paramtypes", [Object])
    ], PopUpDialogComponentComponent);
    return PopUpDialogComponentComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-closure/summary/summary-closure-matrix.component.html":
/*!************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-closure/summary/summary-closure-matrix.component.html ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"main-container\"\r\n     fxLayout=\"column\"\r\n     fxLayoutAlign=\"start none\">\r\n    <div ag-grid=\"bulkClosureGridOptions\"\r\n         class=\"ag-theme-material pointer-cursor\">\r\n        <ag-grid-angular style=\"height:100%;\"\r\n                         class=\"ag-theme-material\"\r\n                         [rowData]=\"bulkClosureGridRows\"\r\n                         [gridOptions]=\"bulkClosureGridOptions\"\r\n                         [columnDefs]=\"bulkClosureGridColumns\"\r\n                         domLayout=\"autoHeight\"\r\n                         (gridReady)=\"onGridReady($event)\"\r\n                         (columnVisible)=\"onColumnVisibilityChanged($event)\"\r\n                         [frameworkComponents]=\"gridComponents\"\r\n                         [pagination]=\"true\"\r\n                         [paginationPageSize]=\"10\"\r\n                         [enableSorting]=\"true\"\r\n                         [enableSorting]=\"true\"\r\n                         [enableColResize]=\"true\"\r\n                         enableFilter\r\n                         [rowHeight]=32>\r\n        </ag-grid-angular>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-closure/summary/summary-closure-matrix.component.scss":
/*!************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-closure/summary/summary-closure-matrix.component.scss ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-closure/summary/summary-closure-matrix.component.ts":
/*!**********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-closure/summary/summary-closure-matrix.component.ts ***!
  \**********************************************************************************************************************/
/*! exports provided: SummaryClosureMatrixComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SummaryClosureMatrixComponent", function() { return SummaryClosureMatrixComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/services/ag-grid.service */ "./Client/app/shared/services/ag-grid.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








var SummaryClosureMatrixComponent = /** @class */ (function () {
    function SummaryClosureMatrixComponent(gridService, dialog, snackbarService, route, companyManager, authorizationService, tradingService) {
        this.gridService = gridService;
        this.dialog = dialog;
        this.snackbarService = snackbarService;
        this.route = route;
        this.companyManager = companyManager;
        this.authorizationService = authorizationService;
        this.tradingService = tradingService;
        this.bulkClosureGridOptions = {};
        this.bulkClosureGridRows = [];
        this.traders = [];
        this.copyselectedallocatedIds = [];
        this.gridContext = {
            gridEditable: true,
            componentParent: this,
        };
        this.gridComponents = {};
    }
    SummaryClosureMatrixComponent.prototype.ngOnInit = function () {
        this.masterdata = this.route.snapshot.data.masterdata;
        this.company = this.route.snapshot.paramMap.get('company');
        this.companyConfiguration = this.companyManager.getCompany(this.company);
        this.atlasAgGridParam = this.gridService.getAgGridParam();
        this.initializeGridColumns();
    };
    SummaryClosureMatrixComponent.prototype.ContractsForClosureSummary = function (contracts) {
        this.bulkContractGridRows = contracts;
        this.initializeGridRows();
    };
    SummaryClosureMatrixComponent.prototype.onColumnVisibilityChanged = function (event) {
    };
    SummaryClosureMatrixComponent.prototype.isGridEditable = function (params) {
        return params.context.gridEditable;
    };
    SummaryClosureMatrixComponent.prototype.initializeGridColumns = function () {
        this.bulkClosureGridOptions = {
            context: this.gridContext,
        };
        this.bulkClosureGridColumns =
            [
                {
                    headerName: 'Contract',
                    field: 'contractLabel',
                    colId: 'contractLabel',
                },
                {
                    headerName: 'Status',
                    field: ' status',
                    colId: ' status',
                },
                {
                    headerName: 'Net accrual/P&L impact ',
                    field: 'netaccrual',
                    colId: 'netaccrual',
                },
                {
                    headerName: '%Invoice ',
                    field: 'invoice',
                    colId: 'invoice',
                },
            ];
    };
    SummaryClosureMatrixComponent.prototype.initializeGridRows = function () {
        var _this = this;
        this.bulkClosureGridRows = [];
        var obj;
        this.bulkContractGridRows.forEach(function (contract) {
            obj = {
                contractLabel: [contract.contractLabel[1]],
                netaccrual: contract.netaccrual,
                invoice: contract.invoice,
                status: contract.status,
            };
            _this.bulkClosureGridRows.push(obj);
        });
    };
    SummaryClosureMatrixComponent.prototype.onGridReady = function (params) {
        params.columnDefs = this.bulkClosureGridColumns;
        this.bulkClosureGridOptions = params;
        this.gridApi = params.api;
        this.gridColumnApi = params.columnApi;
        this.gridApi.showNoRowsOverlay();
        this.autoSizeContractsGrid();
    };
    SummaryClosureMatrixComponent.prototype.autoSizeContractsGrid = function () {
        var _this = this;
        if (!this.gridApi)
            return;
        setTimeout(function () {
            _this.gridApi.sizeColumnsToFit();
        });
    };
    SummaryClosureMatrixComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-summary-closure-matrix',
            template: __webpack_require__(/*! ./summary-closure-matrix.component.html */ "./Client/app/trading/components/group-functions/trade-bulk-closure/summary/summary-closure-matrix.component.html"),
            styles: [__webpack_require__(/*! ./summary-closure-matrix.component.scss */ "./Client/app/trading/components/group-functions/trade-bulk-closure/summary/summary-closure-matrix.component.scss")]
        }),
        __metadata("design:paramtypes", [_shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_5__["AgGridService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialog"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_7__["SnackbarService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_4__["CompanyManagerService"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__["AuthorizationService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_6__["TradingService"]])
    ], SummaryClosureMatrixComponent);
    return SummaryClosureMatrixComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-closure/trade-bulk-closure.component.html":
/*!************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-closure/trade-bulk-closure.component.html ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<form [formGroup]=\"bulkEditionFormGroup\">\r\n    <div class=\"main-container\">\r\n        <mat-horizontal-stepper [linear]\r\n                                (selectionChange)=\"onChangeStepAction($event)\"\r\n                                #stepper>\r\n            <ng-template matStepperIcon=\"edit\">\r\n                <mat-icon>check</mat-icon>\r\n            </ng-template>\r\n            <mat-step>\r\n                <ng-template matStepLabel>Contracts</ng-template>\r\n                <atlas-group-function-warning #groupFunctionWarning></atlas-group-function-warning>\r\n                <atlas-group-function-contracts #contractSelection\r\n                                                (contractSelected)=\"isContractSelected($event)\">\r\n                </atlas-group-function-contracts>\r\n                <div fxLayout=\"row \"\r\n                     fxLayoutAlign=\"space-between start\"\r\n                     class=\"button-details\">\r\n                    <div fxLayout=\"row \"\r\n                         fxLayoutAlign=\"start \">\r\n                        <button (click)=\"onContractSelectedDiscardButtonClicked()\"\r\n                                mat-button>\r\n                            DISCARD\r\n                        </button>\r\n                        <button mat-button\r\n                                (click)=\"onContractSelectionPreviousButtonClicked()\">\r\n                            PREVIOUS\r\n                        </button>\r\n                    </div>\r\n                    <div fxLayout=\"column \"\r\n                         fxLayoutAlign=\"start \">\r\n                        <div fxLayout=\"row \"\r\n                             fxLayoutAlign=\"end start \">\r\n                            <button mat-raised-button\r\n                                    (click)=\"onContractSelectionNextButtonClicked()\"\r\n                                    [disabled]=\"isContractsNextDisabled\">\r\n                                NEXT\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </mat-step>\r\n\r\n\r\n            <mat-step>\r\n                <ng-template matStepLabel>Details</ng-template>\r\n                <atlas-bulk-closure-matrix #closurematrix\r\n                                           (contractClosureSelected)=\"isContractClosureSelected($event)\">\r\n                </atlas-bulk-closure-matrix>\r\n                <div fxLayout=\"row \"\r\n                     fxLayoutAlign=\"space-between start\"\r\n                     class=\"button-details\">\r\n                    <div fxLayout=\"row \"\r\n                         fxLayoutAlign=\"start \">\r\n                        <button (click)=\"onClosureMatrixDiscardButtonClicked()\"\r\n                                mat-button>\r\n                            DISCARD\r\n                        </button>\r\n                        <button mat-button\r\n                                (click)=\"onClosureMatrixPreviousButtonClicked()\">\r\n                            PREVIOUS\r\n                        </button>\r\n                    </div>\r\n                    <div fxLayout=\"column \"\r\n                         fxLayoutAlign=\"start \">\r\n                        <div fxLayout=\"row \"\r\n                             fxLayoutAlign=\"end start \">\r\n                            <button mat-raised-button\r\n                                    (click)=\"onClosureMatrixNextButtonClicked()\"\r\n                                    [disabled]=\"isContractsClosureNextDisabled\">\r\n                                NEXT\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </mat-step>\r\n\r\n            <mat-step>\r\n                <ng-template matStepLabel>Summary</ng-template>\r\n                <atlas-summary-closure-matrix #summarymatrix>\r\n                </atlas-summary-closure-matrix>\r\n                <div fxLayout=\"row \"\r\n                     fxLayoutAlign=\"space-between start\"\r\n                     class=\"button-details\">\r\n                    <div fxLayout=\"row \"\r\n                         fxLayoutAlign=\"start \">\r\n                    </div>\r\n                    <div fxLayout=\"column \"\r\n                         fxLayoutAlign=\"start \">\r\n                        <div fxLayout=\"row \"\r\n                             fxLayoutAlign=\"end start \">\r\n                            <button mat-raised-button\r\n                                    (click)=\"onSummaryFinishClosureMatrixButtonClicked()\">\r\n                                FINISH\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </mat-step>\r\n        </mat-horizontal-stepper>\r\n    </div>\r\n</form>"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-closure/trade-bulk-closure.component.scss":
/*!************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-closure/trade-bulk-closure.component.scss ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-closure/trade-bulk-closure.component.ts":
/*!**********************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-closure/trade-bulk-closure.component.ts ***!
  \**********************************************************************************************************/
/*! exports provided: TradeBulkClosureComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeBulkClosureComponent", function() { return TradeBulkClosureComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../shared/components/confirmation-dialog/confirmation-dialog.component */ "./Client/app/shared/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_trade_edit_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../shared/services/trade-edit.service */ "./Client/app/shared/services/trade-edit.service.ts");
/* harmony import */ var _services_trade_actions_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../services/trade-actions.service */ "./Client/app/trading/services/trade-actions.service.ts");
/* harmony import */ var _group_function_contracts_group_function_contracts_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../group-function-contracts/group-function-contracts.component */ "./Client/app/trading/components/group-functions/group-function-contracts/group-function-contracts.component.ts");
/* harmony import */ var _group_function_warning_group_function_warning_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../group-function-warning/group-function-warning.component */ "./Client/app/trading/components/group-functions/group-function-warning/group-function-warning.component.ts");
/* harmony import */ var _bulk_closure_matrix_bulk_closure_matrix_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./bulk-closure-matrix/bulk-closure-matrix.component */ "./Client/app/trading/components/group-functions/trade-bulk-closure/bulk-closure-matrix/bulk-closure-matrix.component.ts");
/* harmony import */ var _summary_summary_closure_matrix_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./summary/summary-closure-matrix.component */ "./Client/app/trading/components/group-functions/trade-bulk-closure/summary/summary-closure-matrix.component.ts");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../shared/services/http-services/lock.service */ "./Client/app/shared/services/http-services/lock.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


















var TradeBulkClosureComponent = /** @class */ (function (_super) {
    __extends(TradeBulkClosureComponent, _super);
    function TradeBulkClosureComponent(formConfigurationProvider, formBuilder, route, dialog, router, companyManager, tradingService, tradeEditService, lockService, tradeActionService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.formBuilder = formBuilder;
        _this.route = route;
        _this.dialog = dialog;
        _this.router = router;
        _this.companyManager = companyManager;
        _this.tradingService = tradingService;
        _this.tradeEditService = tradeEditService;
        _this.lockService = lockService;
        _this.tradeActionService = tradeActionService;
        _this.formComponents = [];
        _this.isContractsNextDisabled = true;
        _this.isContractsClosureNextDisabled = true;
        _this.currentStep = 0;
        _this.selectedSectionIds = [];
        _this.childFlag = 0;
        return _this;
    }
    TradeBulkClosureComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
        this.dataVersionId = this.route.snapshot.paramMap.get('dataVersionId') ?
            Number(this.route.snapshot.paramMap.get('dataVersionId')) : null;
        this.bulkEditionFormGroup = this.formBuilder.group({
            contractSelection: this.contractSelection.getFormGroup(),
            closureMatrix: this.closureMatrix.getFormGroup(),
        });
        this.formComponents.push(this.contractSelection, this.closureMatrix);
    };
    TradeBulkClosureComponent.prototype.onContractSelectionDiscardButtonClicked = function () {
        if (this.isContractsNextDisabled) {
            this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);
        }
        else {
            this.discardButtonDialog();
        }
    };
    TradeBulkClosureComponent.prototype.onContractSelectionPreviousButtonClicked = function () {
        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades/groupfunctions']);
    };
    TradeBulkClosureComponent.prototype.contractsSelected = function (buttonClicked) {
        var _this = this;
        this.isEditButtonClicked = buttonClicked;
        var selectedContracts = this.contractSelection.selectedContractsForBulkFunctions;
        var privileges = this.tradeActionService.getTradePropertyPrivileges();
        this.privileges = privileges;
        this.selectedSectionIds = [];
        selectedContracts.forEach(function (element) {
            _this.selectedSectionIds.push(element.sectionId);
        });
        if (this.selectedSectionIds) {
            this.fetchingInProgress = false;
            this.subscriptions.push(this.tradingService.getTradesForBulkClosure(this.selectedSectionIds)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_16__["catchError"])(function (error) {
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["throwError"])(error);
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_16__["finalize"])(function () {
                _this.fetchingInProgress = true;
            })).subscribe(function (data) {
                if (data) {
                    _this.selectedContractsForClosureFunctions = data.value;
                    _this.closureMatrix.ContractsForClosure(_this.selectedContractsForClosureFunctions, _this.contractSelection.ContractGridRows);
                }
            }));
        }
    };
    TradeBulkClosureComponent.prototype.afterContractsFetched = function () {
        this.closureMatrix.ContractsForClosure(this.selectedContractsForClosureFunctions, this.contractSelection.ContractGridRows);
        this.stepper.previous();
    };
    TradeBulkClosureComponent.prototype.ngOnDestroy = function () {
        if (this.getTradesForSubscription) {
            this.getTradesForSubscription.unsubscribe();
        }
    };
    TradeBulkClosureComponent.prototype.contractsClosureSelected = function () {
        var selectedContracts = this.closureMatrix.selectedContractsClosureForBulkFunctions;
        this.selectedContractsForClosureSummaryFunctions = selectedContracts;
    };
    TradeBulkClosureComponent.prototype.onClosureMatrixDiscardButtonClicked = function () {
        if (this.isContractsClosureNextDisabled) {
            this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);
        }
        else {
            this.discardButtonDialog();
        }
        this.lockService.cleanSessionLocks().subscribe(function () {
        });
    };
    TradeBulkClosureComponent.prototype.discardButtonDialog = function () {
        var _this = this;
        var confirmDiscardDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_7__["ConfirmationDialogComponent"], {
            data: {
                title: 'Discard Changes',
                text: 'You have some modification pending. Close and lose changes?',
                okButton: 'Ok',
                cancelButton: 'Cancel',
            },
        });
        confirmDiscardDialog.afterClosed().subscribe(function (answer) {
            if (answer) {
                _this.router.navigate(['/' + _this.companyManager.getCurrentCompanyId() + '/trades']);
            }
        });
    };
    TradeBulkClosureComponent.prototype.isContractSelected = function (contractSelected) {
        this.isContractsNextDisabled = !contractSelected;
    };
    TradeBulkClosureComponent.prototype.isContractClosureSelected = function (contractClosureSelected) {
        this.isContractsClosureNextDisabled = !contractClosureSelected;
    };
    TradeBulkClosureComponent.prototype.onContractSelectionNextButtonClicked = function () {
        this.contractsSelected(this.isEditButtonClicked = false);
        this.stepper.next();
    };
    TradeBulkClosureComponent.prototype.onClosureMatrixPreviousButtonClicked = function () {
        this.stepper.previous();
        this.lockService.cleanSessionLocks().subscribe(function () {
        });
    };
    TradeBulkClosureComponent.prototype.onClosureMatrixNextButtonClicked = function () {
        var _this = this;
        this.contractsClosureSelected();
        var sectionIds = [];
        this.selectedContractsForClosureSummaryFunctions.forEach(function (contract) {
            sectionIds.push(contract.sectionId);
        });
        this.subscriptions.push(this.tradingService.closeSection(sectionIds, this.childFlag, this.dataVersionId)
            .subscribe(function (ok) {
            if (ok) {
                _this.summaryMatrix.ContractsForClosureSummary(_this.selectedContractsForClosureSummaryFunctions);
                _this.stepper.next();
            }
        }));
    };
    TradeBulkClosureComponent.prototype.onChangeStepAction = function (event) {
        this.currentStep = event.selectedIndex;
    };
    TradeBulkClosureComponent.prototype.onSummaryFinishClosureMatrixButtonClicked = function () {
        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);
    };
    TradeBulkClosureComponent.prototype.onContractSelectedDiscardButtonClicked = function () {
        this.contractSelection.gridApi.forEachNode(function (node) {
            node.setSelected(false);
        });
        this.contractSelection.loadGridConfiguration();
        this.contractSelection.searchContractForm.reset();
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('stepper'),
        __metadata("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatStepper"])
    ], TradeBulkClosureComponent.prototype, "stepper", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('contractSelection'),
        __metadata("design:type", _group_function_contracts_group_function_contracts_component__WEBPACK_IMPORTED_MODULE_12__["GroupFunctionContractsComponent"])
    ], TradeBulkClosureComponent.prototype, "contractSelection", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('groupFunctionWarning'),
        __metadata("design:type", _group_function_warning_group_function_warning_component__WEBPACK_IMPORTED_MODULE_13__["GroupFunctionWarningComponent"])
    ], TradeBulkClosureComponent.prototype, "groupFunctionWarning", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('closurematrix'),
        __metadata("design:type", _bulk_closure_matrix_bulk_closure_matrix_component__WEBPACK_IMPORTED_MODULE_14__["BulkClosureMatrixComponent"])
    ], TradeBulkClosureComponent.prototype, "closureMatrix", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('summarymatrix'),
        __metadata("design:type", _summary_summary_closure_matrix_component__WEBPACK_IMPORTED_MODULE_15__["SummaryClosureMatrixComponent"])
    ], TradeBulkClosureComponent.prototype, "summaryMatrix", void 0);
    TradeBulkClosureComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-trade-bulk-closure',
            template: __webpack_require__(/*! ./trade-bulk-closure.component.html */ "./Client/app/trading/components/group-functions/trade-bulk-closure/trade-bulk-closure.component.html"),
            styles: [__webpack_require__(/*! ./trade-bulk-closure.component.scss */ "./Client/app/trading/components/group-functions/trade-bulk-closure/trade-bulk-closure.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_8__["FormConfigurationProviderService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"],
            _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialog"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_5__["CompanyManagerService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_9__["TradingService"],
            _shared_services_trade_edit_service__WEBPACK_IMPORTED_MODULE_10__["TradeEditService"],
            _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_17__["LockService"],
            _services_trade_actions_service__WEBPACK_IMPORTED_MODULE_11__["TradeActionsService"]])
    ], TradeBulkClosureComponent);
    return TradeBulkClosureComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_6__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-deallocation/section-dialog/section-dialog.component.html":
/*!****************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-deallocation/section-dialog/section-dialog.component.html ***!
  \****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"section-light-box lightbox-width\">\r\n    <h1>De-Allocation</h1>\r\n    <div>\r\n        <p>\r\n            You are about to deallocate the trades. Unselect the ones for which you want to re-instate pre-allocation\r\n            traffic details.\r\n        </p>\r\n        <mat-chip-list multiple>\r\n            <mat-chip *ngFor=\"let contract of model.selectedContracts\"\r\n                      [selected]=\"contract.removeSectionTrafficInfo\"\r\n                      (click)=\"onSelectedContractClicked(contract)\">\r\n                <mat-icon>{{ contract.removeSectionTrafficInfo ? 'check_circle' : 'panorama_fish_eye'}}</mat-icon>\r\n                {{contract.contractLabel}}\r\n            </mat-chip>\r\n        </mat-chip-list>\r\n    </div>\r\n    <div fxLayout=\"row\"\r\n         fxLayoutAlign=\"space-between end\">\r\n        <button mat-button\r\n                (click)=\"onDiscardButtonClicked()\">discard</button>\r\n        <button mat-button\r\n                (click)=\"onDeAllocateButtonClicked()\">DeAllocate</button>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-deallocation/section-dialog/section-dialog.component.scss":
/*!****************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-deallocation/section-dialog/section-dialog.component.scss ***!
  \****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".lightbox-width {\n  width: 1000px; }\n\n.mat-divider {\n  margin: 8px 0; }\n\n.icon-padding {\n  background-color: #ec8d2d;\n  border-radius: 50%;\n  padding: 8px;\n  height: 24px;\n  width: 24px; }\n\n.icon-padding.mat-icon {\n    color: white; }\n\n.full-invoiced-contract-list {\n  margin: 8px 0; }\n\nh1 {\n  margin-top: 0; }\n"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-deallocation/section-dialog/section-dialog.component.ts":
/*!**************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-deallocation/section-dialog/section-dialog.component.ts ***!
  \**************************************************************************************************************************/
/*! exports provided: BulkDeAllocationSectionDialogComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BulkDeAllocationSectionDialogComponent", function() { return BulkDeAllocationSectionDialogComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _shared_services_execution_dtos_bulk_deallocation_section_command__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../shared/services/execution/dtos/bulk-deallocation-section-command */ "./Client/app/shared/services/execution/dtos/bulk-deallocation-section-command.ts");
/* harmony import */ var _shared_services_execution_dtos_deallocate_bulk_sections__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../shared/services/execution/dtos/deallocate-bulk-sections */ "./Client/app/shared/services/execution/dtos/deallocate-bulk-sections.ts");
/* harmony import */ var _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/services/http-services/execution.service */ "./Client/app/shared/services/http-services/execution.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};






var BulkDeAllocationSectionDialogComponent = /** @class */ (function () {
    function BulkDeAllocationSectionDialogComponent(thisDialogRef, data, executionService, snackbarService) {
        this.thisDialogRef = thisDialogRef;
        this.data = data;
        this.executionService = executionService;
        this.snackbarService = snackbarService;
        this.model = data;
        this.company = data.company;
        this.dataVersionId = data.dataVersionId;
        thisDialogRef.disableClose = true;
    }
    BulkDeAllocationSectionDialogComponent.prototype.ngOnInit = function () {
        if (this.model) {
            this.model.selectedContracts.forEach(function (element) {
                element.removeSectionTrafficInfo = true;
            });
        }
    };
    BulkDeAllocationSectionDialogComponent.prototype.onSelectedContractClicked = function (section) {
        var sectionFiltered = this.model.selectedContracts.find(function (sec) {
            return sec.sectionId === section.sectionId;
        });
        if (sectionFiltered) {
            sectionFiltered.removeSectionTrafficInfo = !sectionFiltered.removeSectionTrafficInfo;
            if (sectionFiltered.allocatedContractReference) {
                this.model.selectedContracts.forEach(function (element) {
                    if (sectionFiltered.allocatedContractReference === element.contractLabel) {
                        element.removeSectionTrafficInfo = !element.removeSectionTrafficInfo;
                    }
                });
            }
        }
    };
    BulkDeAllocationSectionDialogComponent.prototype.onDiscardButtonClicked = function () {
        this.thisDialogRef.close(null);
    };
    BulkDeAllocationSectionDialogComponent.prototype.onDeAllocateButtonClicked = function () {
        var _this = this;
        var bulkDeallocateCommand = new _shared_services_execution_dtos_bulk_deallocation_section_command__WEBPACK_IMPORTED_MODULE_2__["BulkDeallocateSectionCommand"]();
        bulkDeallocateCommand.deallocateBulkSections = [];
        bulkDeallocateCommand.company = this.company;
        bulkDeallocateCommand.dataVersionId = this.dataVersionId;
        this.model.selectedContracts.forEach(function (contract) {
            var deAllocateBulkSection = new _shared_services_execution_dtos_deallocate_bulk_sections__WEBPACK_IMPORTED_MODULE_3__["DeallocateBulkSections"]();
            deAllocateBulkSection.reInstateTrafficDetails = contract.removeSectionTrafficInfo;
            deAllocateBulkSection.sectionId = contract.sectionId;
            bulkDeallocateCommand.deallocateBulkSections.push(deAllocateBulkSection);
        });
        this.executionService.deallocateBulkContract(bulkDeallocateCommand)
            .subscribe(function (ok) {
            if (ok) {
                _this.snackbarService.throwErrorSnackBar('Trades has been successfully de-allocated');
                _this.thisDialogRef.close(true);
            }
        });
    };
    BulkDeAllocationSectionDialogComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-section-dialog',
            template: __webpack_require__(/*! ./section-dialog.component.html */ "./Client/app/trading/components/group-functions/trade-bulk-deallocation/section-dialog/section-dialog.component.html"),
            styles: [__webpack_require__(/*! ./section-dialog.component.scss */ "./Client/app/trading/components/group-functions/trade-bulk-deallocation/section-dialog/section-dialog.component.scss")]
        }),
        __param(1, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_1__["MAT_DIALOG_DATA"])),
        __metadata("design:paramtypes", [_angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialogRef"], Object, _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_4__["ExecutionService"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_5__["SnackbarService"]])
    ], BulkDeAllocationSectionDialogComponent);
    return BulkDeAllocationSectionDialogComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-deallocation/trade-bulk-deallocation.component.html":
/*!**********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-deallocation/trade-bulk-deallocation.component.html ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<form [formGroup]=\"bulkDeAllocationForm\">\r\n    <div class=\"main-container\">\r\n\r\n        <atlas-group-function-warning #groupFunctionWarning></atlas-group-function-warning>\r\n        <atlas-group-function-contracts #contractSelection\r\n                                        (contractSelected)=\"isContractSelected($event)\">\r\n        </atlas-group-function-contracts>\r\n\r\n        <div fxLayout=\"row \"\r\n             fxLayoutAlign=\"space-between start\"\r\n             class=\"button-details\">\r\n            <div fxLayout=\"column \"\r\n                 fxLayoutAlign=\"start \">\r\n                <button (click)=\"onContractSelectionDiscardButtonClicked()\"\r\n                        mat-button>\r\n                    DISCARD\r\n                </button>\r\n            </div>\r\n            <div fxLayout=\"column \"\r\n                 fxLayoutAlign=\"start \">\r\n                <div fxLayout=\"row \"\r\n                     fxLayoutAlign=\"end start \">\r\n                    <button mat-raised-button\r\n                            (click)=\"onDeAllocationButtonClicked()\"\r\n                            [disabled]=\"isContractsNextDisabled\">\r\n                        DEALLOCATE\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</form>"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-deallocation/trade-bulk-deallocation.component.scss":
/*!**********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-deallocation/trade-bulk-deallocation.component.scss ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-deallocation/trade-bulk-deallocation.component.ts":
/*!********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-deallocation/trade-bulk-deallocation.component.ts ***!
  \********************************************************************************************************************/
/*! exports provided: TradeBulkDeallocationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeBulkDeallocationComponent", function() { return TradeBulkDeallocationComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _group_function_contracts_group_function_contracts_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../group-function-contracts/group-function-contracts.component */ "./Client/app/trading/components/group-functions/group-function-contracts/group-function-contracts.component.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_entities_masterdata_entity__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../shared/entities/masterdata.entity */ "./Client/app/shared/entities/masterdata.entity.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _group_function_warning_group_function_warning_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../group-function-warning/group-function-warning.component */ "./Client/app/trading/components/group-functions/group-function-warning/group-function-warning.component.ts");
/* harmony import */ var _section_dialog_section_dialog_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./section-dialog/section-dialog.component */ "./Client/app/trading/components/group-functions/trade-bulk-deallocation/section-dialog/section-dialog.component.ts");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











var TradeBulkDeallocationComponent = /** @class */ (function (_super) {
    __extends(TradeBulkDeallocationComponent, _super);
    function TradeBulkDeallocationComponent(formConfigurationProvider, route, formBuilder, router, companyManager, dialog) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.route = route;
        _this.formBuilder = formBuilder;
        _this.router = router;
        _this.companyManager = companyManager;
        _this.dialog = dialog;
        _this.isContractsNextDisabled = true;
        _this.masterData = new _shared_entities_masterdata_entity__WEBPACK_IMPORTED_MODULE_6__["MasterData"]();
        _this.formComponents = [];
        return _this;
    }
    TradeBulkDeallocationComponent.prototype.ngOnInit = function () {
        this.masterData = this.route.snapshot.data.masterdata;
        this.company = this.route.snapshot.paramMap.get('company');
        this.dataVersionId = this.route.snapshot.paramMap.get('dataVersionId') ?
            Number(this.route.snapshot.paramMap.get('dataVersionId')) : null;
        this.bulkDeAllocationForm = this.formBuilder.group({
            contractSelection: this.contractSelection.getFormGroup(),
        });
        this.formComponents.push(this.contractSelection);
    };
    TradeBulkDeallocationComponent.prototype.isContractSelected = function (contractSelected) {
        this.isContractsNextDisabled = !contractSelected;
    };
    TradeBulkDeallocationComponent.prototype.onDeAllocationButtonClicked = function () {
        var _this = this;
        var selectedContracts = this.contractSelection.selectedContractsForBulkFunctions;
        var deAllocateSectionDialog = this.dialog.open(_section_dialog_section_dialog_component__WEBPACK_IMPORTED_MODULE_9__["BulkDeAllocationSectionDialogComponent"], {
            data: { selectedContracts: selectedContracts, company: this.company, dataVersionId: this.dataVersionId },
        });
        deAllocateSectionDialog.afterClosed().subscribe(function (data) {
            if (data) {
                _this.contractSelection.getContractsToDeAllocation();
            }
        });
    };
    TradeBulkDeallocationComponent.prototype.onContractSelectionDiscardButtonClicked = function () {
        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('stepper'),
        __metadata("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_1__["MatStepper"])
    ], TradeBulkDeallocationComponent.prototype, "stepper", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('contractSelection'),
        __metadata("design:type", _group_function_contracts_group_function_contracts_component__WEBPACK_IMPORTED_MODULE_2__["GroupFunctionContractsComponent"])
    ], TradeBulkDeallocationComponent.prototype, "contractSelection", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('groupFunctionWarning'),
        __metadata("design:type", _group_function_warning_group_function_warning_component__WEBPACK_IMPORTED_MODULE_8__["GroupFunctionWarningComponent"])
    ], TradeBulkDeallocationComponent.prototype, "groupFunctionWarning", void 0);
    TradeBulkDeallocationComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-trade-bulk-deallocation',
            template: __webpack_require__(/*! ./trade-bulk-deallocation.component.html */ "./Client/app/trading/components/group-functions/trade-bulk-deallocation/trade-bulk-deallocation.component.html"),
            styles: [__webpack_require__(/*! ./trade-bulk-deallocation.component.scss */ "./Client/app/trading/components/group-functions/trade-bulk-deallocation/trade-bulk-deallocation.component.scss")]
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_5__["FormConfigurationProviderService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_7__["ActivatedRoute"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormBuilder"],
            _angular_router__WEBPACK_IMPORTED_MODULE_7__["Router"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_10__["CompanyManagerService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialog"]])
    ], TradeBulkDeallocationComponent);
    return TradeBulkDeallocationComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/edition-matrix.component.html":
/*!********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/edition-matrix.component.html ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"main-container\"\r\n     fxLayout=\"column\"\r\n     fxLayoutAlign=\"start none\">\r\n    <div ag-grid=\"bulkEditGridOptions\"\r\n         class=\"ag-theme-material pointer-cursor\">\r\n        <ag-grid-angular style=\"height:100%;\"\r\n                         class=\"ag-theme-material\"\r\n                         [rowData]=\"bulkEditGridRows\"\r\n                         [gridOptions]=\"bulkEditGridOptions\"\r\n                         [columnDefs]=\"bulkEditGridColumns\"\r\n                         domLayout=\"autoHeight\"\r\n                         (gridReady)=\"onGridReady($event)\"\r\n                         [singleClickEdit]=true\r\n                         rowSelection=\"multiple\"\r\n                         [frameworkComponents]=\"gridComponents\"\r\n                         [pinnedTopRowData]=\"pinnedTopRowData\"\r\n                         (cellValueChanged)=\"onCellValueChanged($event)\"\r\n                         [pagination]=\"true\"\r\n                         [paginationPageSize]=\"10\"\r\n                         [enableSorting]=\"true\"\r\n                         [enableSorting]=\"true\"\r\n                         [enableColResize]=\"true\"\r\n                         enableFilter\r\n                         [rowHeight]=atlasAgGridParam.rowHeight>\r\n        </ag-grid-angular>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/edition-matrix.component.scss":
/*!********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/edition-matrix.component.scss ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/edition-matrix.component.ts":
/*!******************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/edition-matrix.component.ts ***!
  \******************************************************************************************************************/
/*! exports provided: EditionMatrixComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditionMatrixComponent", function() { return EditionMatrixComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_ag_grid_user_preferences_ag_grid_user_preferences_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component */ "./Client/app/shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component.ts");
/* harmony import */ var _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component */ "./Client/app/shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component.ts");
/* harmony import */ var _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component */ "./Client/app/shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_components_cell_editor_date_picker_cell_editor_date_picker_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/components/cell-editor-date-picker/cell-editor-date-picker.component */ "./Client/app/shared/components/cell-editor-date-picker/cell-editor-date-picker.component.ts");
/* harmony import */ var _shared_components_cell_editor_numeric_cell_editor_numeric_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component */ "./Client/app/shared/components/cell-editor-numeric/cell-editor-numeric.component.ts");
/* harmony import */ var _shared_components_cell_editor_select_cell_editor_select_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/components/cell-editor-select/cell-editor-select.component */ "./Client/app/shared/components/cell-editor-select/cell-editor-select.component.ts");
/* harmony import */ var _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-number.entity */ "./Client/app/shared/entities/atlas-number.entity.ts");
/* harmony import */ var _shared_entities_physical_trade_bulk_edit__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../shared/entities/physical-trade-bulk-edit */ "./Client/app/shared/entities/physical-trade-bulk-edit.ts");
/* harmony import */ var _shared_enums_date_format_enum__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../shared/enums/date-format.enum */ "./Client/app/shared/enums/date-format.enum.ts");
/* harmony import */ var _shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../../shared/enums/discount-basis.enum */ "./Client/app/shared/enums/discount-basis.enum.ts");
/* harmony import */ var _shared_enums_discount_type_enum__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../../shared/enums/discount-type.enum */ "./Client/app/shared/enums/discount-type.enum.ts");
/* harmony import */ var _shared_enums_invoice_status_enum__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../../shared/enums/invoice-status.enum */ "./Client/app/shared/enums/invoice-status.enum.ts");
/* harmony import */ var _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../../../shared/enums/invoicing-status.enum */ "./Client/app/shared/enums/invoicing-status.enum.ts");
/* harmony import */ var _shared_enums_position_month_type_enum__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../../../shared/enums/position-month-type.enum */ "./Client/app/shared/enums/position-month-type.enum.ts");
/* harmony import */ var _shared_numberMask__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../../../../shared/numberMask */ "./Client/app/shared/numberMask.ts");
/* harmony import */ var _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../../../../shared/services/ag-grid.service */ "./Client/app/shared/services/ag-grid.service.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../../../../shared/services/http-services/lock.service */ "./Client/app/shared/services/http-services/lock.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _shared_services_trade_edit_service__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../../../../../shared/services/trade-edit.service */ "./Client/app/shared/services/trade-edit.service.ts");
/* harmony import */ var _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../../../../../shared/services/ui.service */ "./Client/app/shared/services/ui.service.ts");
/* harmony import */ var _trading_services_form_field_handler_service__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../../../../../trading/services/form-field-handler.service */ "./Client/app/trading/services/form-field-handler.service.ts");
/* harmony import */ var _Library_trading_businessrules__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../../../../Library/trading-businessrules */ "./Client/app/trading/Library/trading-businessrules.ts");
/* harmony import */ var _services_trade_actions_service__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../../../../services/trade-actions.service */ "./Client/app/trading/services/trade-actions.service.ts");
/* harmony import */ var _master_row_apply_master_row_apply_component__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./master-row-apply/master-row-apply.component */ "./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/master-row-apply/master-row-apply.component.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};

































var EditionMatrixComponent = /** @class */ (function (_super) {
    __extends(EditionMatrixComponent, _super);
    function EditionMatrixComponent(formConfigurationProvider, gridService, uiService, snackbarService, route, companyManager, authorizationService, tradeEditService, tradeActionService, tradingService, lockService, dateLocale) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.gridService = gridService;
        _this.uiService = uiService;
        _this.snackbarService = snackbarService;
        _this.route = route;
        _this.companyManager = companyManager;
        _this.authorizationService = authorizationService;
        _this.tradeEditService = tradeEditService;
        _this.tradeActionService = tradeActionService;
        _this.tradingService = tradingService;
        _this.lockService = lockService;
        _this.dateLocale = dateLocale;
        _this.blockingErrorMessage = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.bulkEditGridOptions = {};
        _this.updatedSections = [];
        _this.updatedPhysicalContracts = [];
        _this.updatedContractRows = [];
        _this.traders = [];
        _this.requiredString = 'Required*';
        _this.noErrorMessage = 'noError';
        _this.ammendedStatus = 'A';
        _this.validationError = false;
        _this.isSummaryView = false;
        _this.isValueChanged = false;
        _this.gridContext = {
            gridEditable: true,
            componentParent: _this,
        };
        _this.bulkEditField = 'Master Row';
        _this.gridComponents = {
            atlasSelect: _shared_components_cell_editor_select_cell_editor_select_component__WEBPACK_IMPORTED_MODULE_12__["CellEditorSelectComponent"],
            atlasNumeric: _shared_components_cell_editor_numeric_cell_editor_numeric_component__WEBPACK_IMPORTED_MODULE_11__["CellEditorNumericComponent"],
            atlasDatePicker: _shared_components_cell_editor_date_picker_cell_editor_date_picker_component__WEBPACK_IMPORTED_MODULE_10__["CellEditorDatePickerComponent"],
        };
        _this.dateFormat = {
            Date: _shared_enums_date_format_enum__WEBPACK_IMPORTED_MODULE_15__["DateFormats"].Date,
        };
        _this.errorMessage = 'Invalid Entry. Value not in list';
        _this.colDefSelected = [];
        _this.lockedContracts = [];
        _this.populateListofFields();
        return _this;
    }
    EditionMatrixComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.masterdata = this.route.snapshot.data.masterdata;
        this.company = this.route.snapshot.paramMap.get('company');
        this.companyConfiguration = this.companyManager.getCompany(this.company);
        this.premiumDiscountType = [
            {
                discountPremiumTypeId: _shared_enums_discount_type_enum__WEBPACK_IMPORTED_MODULE_17__["DiscountTypes"].Discount,
                discountPremium: _shared_enums_discount_type_enum__WEBPACK_IMPORTED_MODULE_17__["DiscountTypes"][_shared_enums_discount_type_enum__WEBPACK_IMPORTED_MODULE_17__["DiscountTypes"].Discount],
            },
            {
                discountPremiumTypeId: _shared_enums_discount_type_enum__WEBPACK_IMPORTED_MODULE_17__["DiscountTypes"].Premium,
                discountPremium: _shared_enums_discount_type_enum__WEBPACK_IMPORTED_MODULE_17__["DiscountTypes"][_shared_enums_discount_type_enum__WEBPACK_IMPORTED_MODULE_17__["DiscountTypes"].Premium],
            },
        ];
        this.premiumDiscountBasis = [
            {
                discountPremiumBasis: _shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_16__["DiscountBasis"][_shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_16__["DiscountBasis"].Percent],
                discountPremiumBasisId: _shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_16__["DiscountBasis"].Percent,
            },
            {
                discountPremiumBasisId: _shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_16__["DiscountBasis"].Rate,
                discountPremiumBasis: _shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_16__["DiscountBasis"][_shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_16__["DiscountBasis"].Rate],
            },
        ];
        this.tradingService.getAllTraders()
            .subscribe(function (traders) {
            _this.traders = _this.filteredTradeOwners = traders.value;
        });
        this.atlasAgGridParam = this.gridService.getAgGridParam();
        this.privileges = this.tradeActionService.getTradePropertyPrivileges();
        this.filteredCommodityList = this.masterdata.commodities;
        this.initializeGridColumns();
    };
    EditionMatrixComponent.prototype.isGridEditable = function (params) {
        return params.context.gridEditable;
    };
    EditionMatrixComponent.prototype.requiredCell = function (params) {
        if (params.data.premiumDiscountTypeId) {
            return '<div class=\'bulk-edit-cell-value-required\'>Required*</div>';
        }
        return params.value;
    };
    EditionMatrixComponent.prototype.initializeGridColumns = function () {
        var _this = this;
        this.bulkEditGridOptions = {
            context: this.gridContext,
            getRowStyle: this.isContractLockedRowStyle.bind(this),
        };
        this.bulkEditGridColumns =
            [
                {
                    headerName: '',
                    pinned: 'left',
                    colId: 'rowStatus',
                    field: 'rowStatus',
                    hide: true,
                    minWidth: 90,
                    maxWidth: 90,
                    editable: false,
                    suppressMenu: true,
                    pinnedRowCellRendererFramework: _master_row_apply_master_row_apply_component__WEBPACK_IMPORTED_MODULE_32__["MasterRowApplyComponent"],
                    pinnedRowCellRendererParams: {
                        context: {
                            componentParent: this,
                        },
                    },
                    cellRenderer: function (params) {
                        if (params.data.rowStatus) {
                            return '<mat-chip-list><mat-chip class="status-flag-chip">' + params.data.rowStatus +
                                '</mat-chip></mat-chip-list>';
                        }
                        return '';
                    },
                    tooltip: function (params) {
                        return params.context.componentParent.getContractTooltipMessage(params);
                    },
                },
                {
                    headerName: 'Contract Reference',
                    field: 'contractLabel',
                    colId: 'contractLabel',
                    editable: false,
                    pinned: 'left',
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    tooltip: function (params) {
                        return params.context.componentParent.getContractTooltipMessage(params);
                    },
                },
                {
                    headerName: 'Approval Status',
                    field: 'status',
                    colId: 'status',
                    editable: false,
                    pinned: 'left',
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    tooltip: function (params) {
                        return params.context.componentParent.getContractTooltipMessage(params);
                    },
                },
                {
                    headerName: 'Allocated Section Id',
                    field: 'allocatedSectionId',
                    colId: 'allocatedSectionId',
                    hide: true,
                },
                {
                    headerName: 'Contract Type',
                    field: 'contractType',
                    colId: 'contractType',
                    hide: true,
                },
                {
                    headerName: 'Physical Contract Id',
                    field: 'physicalContractId',
                    colId: 'physicalContractId',
                    hide: true,
                },
                {
                    headerName: 'Section Id',
                    field: 'sectionId',
                    colId: 'sectionId',
                    hide: true,
                },
                {
                    headerName: 'Section Origin Id',
                    field: 'sectionOriginId',
                    colId: 'sectionOriginId',
                    hide: true,
                },
                {
                    headerName: 'Contract Date *',
                    field: 'contractDate',
                    colId: 'contractDate',
                    editable: function (params) { return _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts); },
                    hide: true,
                    cellEditor: 'atlasDatePicker',
                    valueFormatter: this.uiService.dateFormatter,
                    cellEditorParams: {
                        maxDate: this.companyManager.getCurrentCompanyDate(),
                        isRequired: true,
                    },
                    onCellValueChanged: function (params) {
                        if (params.newValue && params.oldValue !== params.newValue) {
                            _this.setAmmendedStatus(params);
                            params.data.contractDateChange = true;
                            _this.isValueChanged = true;
                        }
                    },
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                        if ((params.context.componentParent.isSummaryView
                            && params.data.contractDateChange) || params.data.isCancelled || params.data.isClosed) {
                            return 'ag-grid-row-gray-background';
                        }
                        if ((!params.context.componentParent.isSummaryView
                            && params.data.isChildTrade) || params.data.isCancelled || params.data.isClosed) {
                            return 'ag-grid-disable-field';
                        }
                    },
                    tooltip: function (params) {
                        if (params.data.islocked) {
                            return params.data.lockMessage;
                        }
                        else if (!params.context.componentParent.isSummaryView && params.data.sectionOriginId) {
                            params.data.isChildTrade = true;
                            return 'Not Allowed to Edit in Child Trade';
                        }
                    },
                },
                {
                    headerName: 'Trader *',
                    field: 'userId',
                    colId: 'userId',
                    hide: true,
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                        if ((params.context.componentParent.isSummaryView && params.data.traderValueChanged)
                            || params.data.isCancelled || params.data.isClosed) {
                            return 'ag-grid-row-gray-background';
                        }
                        if ((!params.context.componentParent.isSummaryView
                            && params.data.isChildTrade) || params.data.isCancelled || params.data.isClosed) {
                            return 'ag-grid-disable-field';
                        }
                    },
                    pinnedRowCellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    pinnedRowCellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: true,
                            },
                            options: _this.traders,
                            valueProperty: 'userId',
                            codeProperty: 'samAccountName',
                            displayProperty: 'displayName',
                            displayCode: true,
                        };
                    },
                    cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                            },
                            options: _this.traders,
                            valueProperty: 'userId',
                            codeProperty: 'samAccountName',
                            displayProperty: 'displayName',
                            isRequired: true,
                        };
                    },
                    onCellValueChanged: function (params) {
                        if (params.data.userId !== params.value) {
                            if (params.data.userId) {
                                _this.setAmmendedStatus(params);
                                params.data.traderValueChanged = true;
                            }
                        }
                    },
                    tooltip: function (params) {
                        if (params.data.islocked) {
                            return params.data.lockMessage;
                        }
                        else if (!params.context.componentParent.isSummaryView && params.data.sectionOriginId) {
                            params.data.isChildTrade = true;
                            return 'Not Allowed to Edit in Child Trade';
                        }
                    },
                },
                {
                    headerName: 'Department Code*',
                    field: 'departmentId',
                    colId: 'departmentId',
                    hide: true,
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    pinnedRowCellRendererFramework: _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_8__["AgGridContextualSearchComponent"],
                    pinnedRowCellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: true,
                            },
                            gridId: 'departmentsGrid',
                            options: _this.masterdata.departments,
                            valueProperty: 'departmentId',
                            codeProperty: 'departmentCode',
                            descriptionProperty: 'description',
                            displayProperty: 'departmentCode',
                            showContextualSearchIcon: true,
                        };
                    },
                    cellRendererFramework: _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_8__["AgGridContextualSearchComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                            },
                            gridId: 'departmentsGrid',
                            options: _this.masterdata.departments,
                            displayProperty: 'departmentCode',
                            codeProperty: 'departmentCode',
                            descriptionProperty: 'description',
                            valueProperty: 'departmentId',
                            lightBoxTitle: 'Results for Departments',
                            isRequired: true,
                            showContextualSearchIcon: _this.tradeEditService
                                .isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                        };
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return (!params.context.componentParent.isSummaryView
                            && params.data.isInvoicedorAllocated) || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return (params.context.componentParent.isSummaryView
                            && params.data.departmentValueChange) || params.data.isCancelled || params.data.isClosed; }),
                    },
                    onCellValueChanged: function (params) {
                        _this.departmentDescriptionFormatter(params);
                        if (params.data.departmentId !== params.value) {
                            _this.isValueChanged = true;
                            if (params.data.departmentId) {
                                params.node.setDataValue('departmentDescription', params.data.departmentDescription);
                                _this.setAmmendedStatus(params);
                                params.data.departmentValueChange = true;
                            }
                        }
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            return params.data.invoicingAllocationConditionErrorMessage;
                        }
                    },
                },
                {
                    headerName: 'Department Description',
                    field: 'departmentDescription',
                    colId: 'departmentDescription',
                    cellRenderer: this.departmentDescriptionFormatter.bind(this),
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return (!params.context.componentParent.isSummaryView
                            && params.data.isInvoicedorAllocated) || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return (params.context.componentParent.isSummaryView
                            && params.data.departmentValueChange) || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            return params.data.invoicingAllocationConditionErrorMessage;
                        }
                    },
                },
                {
                    headerName: 'Buyer Code *',
                    field: 'buyerCounterpartyId',
                    colId: 'buyerCounterpartyId',
                    hide: true,
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    pinnedRowCellRendererFramework: _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_8__["AgGridContextualSearchComponent"],
                    pinnedRowCellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: (!params.context.componentParent.isSummaryView
                                    && params.context.componentParent.privileges.buyerCodePrivilege),
                            },
                            gridId: 'counterpartiesGrid',
                            options: _this.masterdata.counterparties,
                            codeProperty: 'counterpartyCode',
                            descriptionProperty: 'description',
                            valueProperty: 'counterpartyID',
                            displayProperty: 'counterpartyCode',
                            showContextualSearchIcon: (!params.context.componentParent.isSummaryView
                                && params.context.componentParent.privileges.buyerCodePrivilege),
                        };
                    },
                    cellRendererFramework: _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_8__["AgGridContextualSearchComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                            },
                            gridId: 'counterpartiesGrid',
                            options: _this.masterdata.counterparties,
                            displayProperty: 'counterpartyCode',
                            codeProperty: 'counterpartyCode',
                            descriptionProperty: 'description',
                            valueProperty: 'counterpartyID',
                            lightBoxTitle: 'Results for Counterparty',
                            isRequired: true,
                            showContextualSearchIcon: _this.tradeEditService
                                .isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                        };
                    },
                    onCellValueChanged: function (params) {
                        _this.buyerDescriptionFormatter(params);
                        if (params.data.buyerCounterpartyId !== params.value) {
                            if (params.data.buyerCounterpartyId) {
                                params.node.setDataValue('buyerDescription', params.data.buyerDescription);
                                _this.setAmmendedStatus(params);
                                params.data.buyerValueChange = true;
                            }
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced
                            || !params.context.componentParent.privileges.buyerCodePrivilege
                            || !params.data.isbuyerCounterpartyEditable); }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.buyerValueChange; }),
                    },
                    tooltip: function (params) {
                        _this.tradeEditService.isCounterpartyEditable(params);
                        if (!params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {
                            if (!params.context.componentParent.privileges.buyerCodePrivilege) {
                                return params.data.buyerErrorMessage;
                            }
                            else if (!params.data.isbuyerCounterpartyEditable) {
                                return params.data.isbuyerCounterpartyErrorMessage;
                            }
                            else {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                },
                {
                    headerName: 'Buyer Description',
                    field: 'buyerDescription',
                    colId: 'buyerDescription',
                    cellRenderer: this.buyerDescriptionFormatter.bind(this),
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced
                            || !params.context.componentParent.privileges.buyerCodePrivilege
                            || !params.data.isbuyerCounterpartyEditable); }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.buyerValueChange; }),
                    },
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {
                            if (!params.context.componentParent.privileges.buyerCodePrivilege) {
                                return params.data.buyerErrorMessage;
                            }
                            else if (!params.data.isbuyerCounterpartyEditable) {
                                return params.data.isbuyerCounterpartyErrorMessage;
                            }
                            else {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                },
                {
                    headerName: 'Seller Code *',
                    field: 'sellerCounterpartyId',
                    colId: 'sellerCounterpartyId',
                    hide: true,
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    pinnedRowCellRendererFramework: _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_8__["AgGridContextualSearchComponent"],
                    pinnedRowCellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: (!params.context.componentParent.isSummaryView
                                    && params.context.componentParent.privileges.sellerCodePrivilege),
                            },
                            gridId: 'counterpartiesGrid',
                            options: _this.masterdata.counterparties,
                            codeProperty: 'counterpartyCode',
                            descriptionProperty: 'description',
                            valueProperty: 'counterpartyID',
                            displayProperty: 'counterpartyCode',
                            showContextualSearchIcon: (!params.context.componentParent.isSummaryView
                                && params.context.componentParent.privileges.sellerCodePrivilege),
                        };
                    },
                    cellRendererFramework: _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_8__["AgGridContextualSearchComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                            },
                            gridId: 'counterpartiesGrid',
                            options: _this.masterdata.counterparties,
                            displayProperty: 'counterpartyCode',
                            codeProperty: 'counterpartyCode',
                            descriptionProperty: 'description',
                            valueProperty: 'counterpartyID',
                            lightBoxTitle: 'Results for Counterparty',
                            isRequired: true,
                            showContextualSearchIcon: _this.tradeEditService
                                .isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                        };
                    },
                    onCellValueChanged: function (params) {
                        _this.sellerDescriptionFormatter(params);
                        if (params.data.sellerCounterpartyId !== params.value) {
                            if (params.data.sellerCounterpartyId) {
                                params.node.setDataValue('sellerDescription', params.data.sellerDescription);
                                _this.setAmmendedStatus(params);
                                params.data.sellerValueChange = true;
                            }
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return (!params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced
                            || !params.context.componentParent.privileges.sellerCodePrivilege
                            || !params.data.isSellerCounterpartyEditable) || params.data.isCancelled || params.data.isClosed); }),
                        'ag-grid-row-gray-background': (function (params) { return (params.context.componentParent.isSummaryView
                            && params.data.sellerValueChange) || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {
                            _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts);
                            if (!params.context.componentParent.privileges.sellerCodePrivilege) {
                                return params.data.sellerErrorMessage;
                            }
                            else if (!params.data.isSellerCounterpartyEditable) {
                                return params.data.issellerCounterpartyErrorMessage;
                            }
                            else {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                },
                {
                    headerName: 'Seller Description',
                    field: 'sellerDescription',
                    colId: 'sellerDescription',
                    cellRenderer: this.sellerDescriptionFormatter.bind(this),
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced
                            || !params.context.componentParent.privileges.sellerCodePrivilege
                            || !params.data.isSellerCounterpartyEditable) || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.sellerValueChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {
                            if (!params.context.componentParent.privileges.sellerCodePrivilege) {
                                return params.data.sellerErrorMessage;
                            }
                            else if (!params.data.isSellerCounterpartyEditable) {
                                return params.data.issellerCounterpartyErrorMessage;
                            }
                            else {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                },
                {
                    headerName: 'Counterparty Reference',
                    field: 'counterpartyReference',
                    colId: 'counterpartyReference',
                    hide: true,
                    editable: function (params) { return _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts); },
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    cellEditor: 'agLargeTextCellEditor',
                    cellEditorParams: {
                        maxLength: 40,
                        rows: 1,
                        cols: 50,
                    },
                    onCellValueChanged: function (params) {
                        if (params.data.counterpartyReference !== params.value) {
                            _this.isValueChanged = true;
                        }
                        _this.setAmmendedStatus(params);
                        params.data.counterpartyReferenceChange = true;
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.counterPartyPrivilege
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.counterpartyReferenceChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            if (!params.context.componentParent.privileges.counterPartyPrivilege) {
                                return params.data.counterpartyErrorMessage;
                            }
                            else {
                                return null;
                            }
                        }
                    },
                },
                {
                    headerName: 'commodity1 *',
                    field: 'commodityId',
                    colId: 'commodityId',
                    hide: true,
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    pinnedRowCellRendererFramework: _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_8__["AgGridContextualSearchComponent"],
                    pinnedRowCellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: (!params.context.componentParent.isSummaryView
                                    && params.context.componentParent.privileges.counterPartyPrivilege),
                            },
                            gridId: 'commodityGrid',
                            options: _this.filteredCommodityList,
                            codeProperty: 'commodityCode',
                            descriptionProperty: 'commodityDescription',
                            valueProperty: 'commodityId',
                            displayProperty: 'commodityType',
                            showContextualSearchIcon: (!params.context.componentParent.isSummaryView
                                && params.context.componentParent.privileges.counterPartyPrivilege),
                        };
                    },
                    cellRendererFramework: _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_8__["AgGridContextualSearchComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                            },
                            gridId: 'commodityGrid',
                            options: _this.filteredCommodityList,
                            codeProperty: 'commodityCode',
                            descriptionProperty: 'commodityDescription',
                            displayProperty: 'commodityType',
                            valueProperty: 'commodityId',
                            lightBoxTitle: 'Results for Commodities',
                            isRequired: true,
                            showContextualSearchIcon: _this.tradeEditService
                                .isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                        };
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced
                            || !params.context.componentParent.privileges.counterPartyPrivilege)
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.commodityChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {
                            if (!params.context.componentParent.privileges.counterPartyPrivilege) {
                                return params.data.commodityErrorMessage;
                            }
                            else {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                    onCellValueChanged: function (params) {
                        if (params.data.commodityId !== params.value) {
                            _this.isValueChanged = true;
                        }
                        _this.tradeEditService.onCommodityValueChange(params, 'commodityCode', _this.filteredCommodityList);
                    },
                },
                {
                    headerName: 'commodity2',
                    field: 'commodity2',
                    colId: 'commodity2',
                    cellRenderer: this.commodityValueGetter.bind(this),
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced
                            || !params.context.componentParent.privileges.counterPartyPrivilege)
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.commodityChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {
                            if (!params.context.componentParent.privileges.counterPartyPrivilege) {
                                return params.data.commodityErrorMessage;
                            }
                            else {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                    onCellValueChanged: function (params) {
                    },
                },
                {
                    headerName: 'commodity3',
                    field: 'commodity3',
                    colId: 'commodity3',
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced
                            || !params.context.componentParent.privileges.counterPartyPrivilege)
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.commodityChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {
                            if (!params.context.componentParent.privileges.counterPartyPrivilege) {
                                return params.data.commodityErrorMessage;
                            }
                            else {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                    onCellValueChanged: function (params) {
                    },
                },
                {
                    headerName: 'commodity4',
                    field: 'commodity4',
                    colId: 'commodity4',
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced
                            || !params.context.componentParent.privileges.counterPartyPrivilege)
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.commodityChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {
                            if (!params.context.componentParent.privileges.counterPartyPrivilege) {
                                return params.data.commodityErrorMessage;
                            }
                            else {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                    onCellValueChanged: function (params) {
                    },
                },
                {
                    headerName: 'commodity5',
                    field: 'commodity5',
                    colId: 'commodity5',
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced
                            || !params.context.componentParent.privileges.counterPartyPrivilege)
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.commodityChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {
                            if (!params.context.componentParent.privileges.counterPartyPrivilege) {
                                return params.data.commodityErrorMessage;
                            }
                            else {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                    onCellValueChanged: function (params) {
                    },
                },
                {
                    headerName: 'Crop Year',
                    field: 'cropYear',
                    colId: 'cropYear',
                    hide: true,
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    editable: function (params) { return _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts); },
                    onCellValueChanged: function (params) {
                        if (params.data.cropYear !== params.value) {
                            _this.isValueChanged = true;
                        }
                        _this.tradeEditService.isCropYearValid(params);
                        params.data.cropYearChange = true;
                    },
                    cellClassRules: {
                        'ag-grid-invalid-mandatory-field': (function (params) { return params.data.cropYearValidationMessage; }),
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.cropYearPrivilege
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.cropYearChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            if (!params.context.componentParent.privileges.cropYearPrivilege) {
                                return params.data.cropYearErrorMessage;
                            }
                            else if (params.data.cropYearValidationMessage) {
                                return params.data.cropYearValidationMessage;
                            }
                        }
                    },
                },
                {
                    headerName: 'Quantity Code *',
                    field: 'weightUnitId',
                    colId: 'weightUnitId',
                    hide: true,
                },
                {
                    field: 'weightCodeConversion',
                    colId: 'weightCodeConversion',
                    hide: true,
                },
                {
                    headerName: 'Quantity *',
                    field: 'quantity',
                    colId: 'quantity',
                    hide: true,
                },
                {
                    headerName: 'Contract Term Code *',
                    field: 'contractTermId',
                    colId: 'contractTermId',
                    hide: true,
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    pinnedRowCellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    pinnedRowCellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: (!params.context.componentParent.isSummaryView
                                    && params.context.componentParent.privileges.contractTermsPrivilege),
                            },
                            options: _this.masterdata.contractTerms,
                            valueProperty: 'contractTermId',
                            codeProperty: 'contractTermCode',
                            displayProperty: 'description',
                            displayCode: true,
                        };
                    },
                    cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                            },
                            options: _this.masterdata.contractTerms,
                            valueProperty: 'contractTermId',
                            codeProperty: 'contractTermCode',
                            displayProperty: 'description',
                            isRequired: true,
                            displayCode: true,
                        };
                    },
                    onCellValueChanged: function (params) {
                        var filteredContractTerms = _this.masterdata.contractTerms.find(function (e) {
                            return e.contractTermId === params.data.contractTermId;
                        });
                        if (filteredContractTerms) {
                            params.node.setDataValue('contractTermDescription', filteredContractTerms.description);
                            _this.setAmmendedStatus(params);
                            params.data.contractTermChange = true;
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced
                            || !params.context.componentParent.privileges.contractTermsPrivilege)
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.contractTermChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {
                            if (!params.context.componentParent.privileges.contractTermsPrivilege) {
                                return params.data.contractTermsErrorMessage;
                            }
                            else {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                },
                {
                    headerName: 'Contract Term Description',
                    field: 'contractTermDescription',
                    colId: 'contractTermDescription',
                    cellRenderer: this.contractTermDescriptionFormatter.bind(this),
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced
                            || !params.context.componentParent.privileges.contractTermsPrivilege)
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.contractTermChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {
                            if (!params.context.componentParent.privileges.contractTermsPrivilege) {
                                return params.data.contractTermsErrorMessage;
                            }
                            else {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                },
                {
                    headerName: 'Port Terms *',
                    field: 'portTermId',
                    colId: 'portTermId',
                    hide: true,
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    pinnedRowCellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    pinnedRowCellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: (!params.context.componentParent.isSummaryView
                                    && params.context.componentParent.privileges.portTermsPrivilege),
                            },
                            options: _this.masterdata.ports,
                            valueProperty: 'portId',
                            codeProperty: 'portCode',
                            displayProperty: 'description',
                        };
                    },
                    cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                            },
                            options: _this.masterdata.ports,
                            valueProperty: 'portId',
                            codeProperty: 'portCode',
                            displayProperty: 'description',
                            isRequired: true,
                            displayCode: true,
                        };
                    },
                    onCellValueChanged: function (params) {
                        if (params.data.portTermId !== params.value) {
                            _this.isValueChanged = true;
                        }
                        var filteredPortCode = params.context.componentParent.masterdata.ports.find(function (e) {
                            return e.portId === params.data.portTermId;
                        });
                        if (!params.data.portTermChange && (params.data.portTermId !== params.value)) {
                            if (filteredPortCode) {
                                _this.setAmmendedStatus(params);
                                params.data.portTermChange = true;
                            }
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced
                            || !params.context.componentParent.privileges.portTermsPrivilege)
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.portTermChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {
                            if (!params.context.componentParent.privileges.portTermsPrivilege) {
                                return params.data.portTermsErrorMessage;
                            }
                            else {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                },
                {
                    headerName: 'Arbitration Code',
                    field: 'arbitrationId',
                    colId: 'arbitrationId',
                    hide: true,
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    pinnedRowCellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    pinnedRowCellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: (!params.context.componentParent.isSummaryView
                                    && params.context.componentParent.privileges.arbitrationPrivilege),
                            },
                            options: _this.masterdata.arbitrations,
                            valueProperty: 'arbitrationId',
                            codeProperty: 'arbitrationCode',
                            displayProperty: 'description',
                            displayCode: true,
                        };
                    },
                    cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                            },
                            options: _this.masterdata.arbitrations,
                            valueProperty: 'arbitrationId',
                            codeProperty: 'arbitrationCode',
                            displayProperty: 'description',
                            displayCode: true,
                        };
                    },
                    onCellValueChanged: function (params) {
                        if (params.data.arbitrationId !== params.value) {
                            _this.isValueChanged = true;
                        }
                        var filteredArbitrationCode = _this.masterdata.arbitrations.find(function (e) {
                            return e.arbitrationId === params.data.arbitrationId;
                        });
                        if (filteredArbitrationCode) {
                            params.node.setDataValue('arbitrationDescription', filteredArbitrationCode.description);
                            _this.setAmmendedStatus(params);
                            params.data.arbitrationCodeChange = true;
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.arbitrationPrivilege
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.arbitrationCodeChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            if (!params.context.componentParent.privileges.arbitrationPrivilege) {
                                return params.data.arbitrationErrorMessage;
                            }
                            else {
                                return null;
                            }
                        }
                    },
                },
                {
                    headerName: 'Arbitration Description',
                    field: 'arbitrationDescription',
                    colId: 'arbitrationDescription',
                    cellRenderer: this.arbitrationDescriptionFormatter.bind(this),
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.arbitrationPrivilege
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.arbitrationCodeChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            if (!params.context.componentParent.privileges.arbitrationPrivilege) {
                                return params.data.arbitrationErrorMessage;
                            }
                            else {
                                return null;
                            }
                        }
                    },
                },
                {
                    headerName: 'Currency Code *',
                    field: 'currencyCode',
                    colId: 'currencyCode',
                    hide: true,
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    pinnedRowCellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    pinnedRowCellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: (!params.context.componentParent.isSummaryView
                                    && params.context.componentParent.privileges.currencyPrivilege),
                            },
                            options: _this.masterdata.currencies,
                            valueProperty: 'currencyCode',
                            codeProperty: 'currencyCode',
                            displayProperty: 'description',
                            displayCode: true,
                        };
                    },
                    cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                            },
                            options: _this.masterdata.currencies,
                            valueProperty: 'currencyCode',
                            codeProperty: 'currencyCode',
                            displayProperty: 'description',
                            isRequired: true,
                            displayCode: true,
                        };
                    },
                    onCellValueChanged: function (params) {
                        if (params.data.currencyCode !== params.value) {
                            _this.isValueChanged = true;
                        }
                        var filteredCurrencyCode = _this.masterdata.currencies.find(function (e) {
                            return e.currencyCode === params.data.currencyCode;
                        });
                        if (filteredCurrencyCode) {
                            _this.contractValueCalculation(params);
                            params.node.setDataValue('currencyDescription', filteredCurrencyCode.description);
                            _this.setAmmendedStatus(params);
                            params.data.currencyCodeChange = true;
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced
                            || !params.context.componentParent.privileges.currencyPrivilege)
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.currencyCodeChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {
                            if (!params.context.componentParent.privileges.currencyPrivilege) {
                                return params.data.currencyErrorMessage;
                            }
                            else {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                },
                {
                    headerName: 'Currency Description',
                    field: 'currencyDescription',
                    colId: 'currencyDescription',
                    cellRenderer: this.currencyDescriptionFormatter.bind(this),
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced
                            || !params.context.componentParent.privileges.currencyPrivilege)
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.currencyCodeChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {
                            if (!params.context.componentParent.privileges.currencyPrivilege) {
                                return params.data.currencyErrorMessage;
                            }
                            else {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                },
                {
                    headerName: 'Price Code *',
                    field: 'priceUnitId',
                    colId: 'priceUnitId',
                    hide: true,
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    pinnedRowCellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    pinnedRowCellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: (params.context.componentParent.privileges.priceCodePrivilege),
                            },
                            options: _this.masterdata.priceUnits,
                            valueProperty: 'priceUnitId',
                            codeProperty: 'priceCode',
                            displayProperty: 'description',
                        };
                    },
                    cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                            },
                            options: _this.masterdata.priceUnits,
                            valueProperty: 'priceUnitId',
                            codeProperty: 'priceCode',
                            displayProperty: 'description',
                            isRequired: true,
                        };
                    },
                    onCellValueChanged: function (params) {
                        var filteredPriceCode = _this.masterdata.priceUnits.find(function (e) {
                            return e.priceUnitId === params.data.priceUnitId;
                        });
                        if (filteredPriceCode) {
                            if ((params.data.portTermId !== params.value)) {
                                _this.contractValueCalculation(params);
                                _this.setAmmendedStatus(params);
                                params.data.priceCodeChange = true;
                            }
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced
                            || !params.context.componentParent.privileges.priceCodePrivilege)
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.priceCodeChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {
                            if (!params.context.componentParent.privileges.priceCodePrivilege) {
                                return params.data.priceCodeErrorMessage;
                            }
                            else {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                },
                {
                    field: 'priceCodeConversion',
                    colId: 'priceCodeConversion',
                    hide: true,
                },
                {
                    headerName: 'Contract Price *',
                    field: 'contractPrice',
                    colId: 'contractPrice',
                    hide: true,
                    editable: function (params) { return _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts); },
                    cellEditor: 'atlasNumeric',
                    cellRenderer: this.requiredString,
                    cellEditorParams: {
                        displayMask: Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_21__["CustomNumberMask"])(12, 10, false),
                        isRightAligned: false,
                    },
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    pinnedRowCellRenderer: 'atlasNumeric',
                    pinnedRowCellRendererParams: {
                        displayMask: Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_21__["CustomNumberMask"])(12, 10, false),
                        isRightAligned: false,
                        editable: true,
                    },
                    onCellValueChanged: function (params) {
                        _this.contractValueCalculation(params);
                        _this.setAmmendedStatus(params);
                        params.data.contractPriceChange = true;
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (params.data.isInvoiced
                            || !params.context.componentParent.privileges.contractPricePrivilege)
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.contractPriceChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {
                            if (!params.context.componentParent.privileges.contractPricePrivilege) {
                                return params.data.contractPriceErrorMessage;
                            }
                            else {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                },
                {
                    headerName: 'Contract Value',
                    field: 'contractValue',
                    colId: 'contractValue',
                    hide: true,
                    editable: false,
                    valueFormatter: this.numberFormatter.bind(this),
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView && (params.data.isInvoiced
                            || !params.context.componentParent.privileges.contractValuePrivilege)
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.contractValueChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                },
                {
                    headerName: 'Payment Term Code *',
                    field: 'paymentTermsId',
                    colId: 'paymentTermsId',
                    hide: true,
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    pinnedRowCellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    pinnedRowCellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: (!params.context.componentParent.isSummaryView
                                    && params.context.componentParent.privileges.paymentTermsPrivilege),
                            },
                            options: _this.masterdata.paymentTerms,
                            valueProperty: 'paymentTermsId',
                            codeProperty: 'paymentTermCode',
                            displayProperty: 'description',
                            displayCode: true,
                        };
                    },
                    cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                            },
                            options: _this.masterdata.paymentTerms,
                            valueProperty: 'paymentTermsId',
                            codeProperty: 'paymentTermCode',
                            displayProperty: 'description',
                            isRequired: true,
                            editable: _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                        };
                    },
                    onCellValueChanged: function (params) {
                        if (params.data.paymentTermsId !== params.value) {
                            _this.isValueChanged = true;
                        }
                        var filteredPaymentTerms = _this.masterdata.paymentTerms.find(function (e) {
                            return e.paymentTermsId === params.data.paymentTermsId;
                        });
                        if (filteredPaymentTerms) {
                            _this.setAmmendedStatus(params);
                            params.data.paymentTermChange = true;
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.paymentTermsPrivilege
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.paymentTermChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            if (!params.context.componentParent.privileges.paymentTermsPrivilege) {
                                return params.data.paymentTermsErrorMessage;
                            }
                            else {
                                return null;
                            }
                        }
                    },
                },
                {
                    headerName: 'Period Type *',
                    field: 'periodTypeDescription',
                    colId: 'periodTypeId',
                    hide: true,
                    editable: function (params) { return _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts); },
                    cellEditor: 'agRichSelectCellEditor',
                    cellEditorParams: function () {
                        return {
                            values: _this.masterdata.periodTypes.map(function (basis) { return basis.periodTypeDescription; }),
                            displayPropertyName: 'periodTypeDescription',
                            valuePropertyName: 'periodTypeId',
                        };
                    },
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.periodTypePrivilege
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.periodTypePrivilege || params.data.isCancelled || params.data.isClosed; }),
                    },
                    onCellValueChanged: function (params) {
                        var filteredPeriodType = _this.masterdata.periodTypes.find(function (e) {
                            return e.periodTypeDescription === params.newValue;
                        });
                        if (filteredPeriodType) {
                            params.node.setDataValue('periodTypeDescription', params.newValue);
                            _this.setAmmendedStatus(params);
                            params.data.periodTypeChange = true;
                        }
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            if (!params.context.componentParent.privileges.periodTypePrivilege) {
                                return params.data.periodTypeErrorMessage;
                            }
                            else {
                                return null;
                            }
                        }
                    },
                },
                {
                    headerName: 'Shipping Period Start *',
                    field: 'deliveryPeriodStart',
                    colId: 'deliveryPeriodStart',
                    hide: true,
                    editable: function (params) { return _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts); },
                    cellEditor: 'atlasDatePicker',
                    valueFormatter: this.uiService.dateFormatter,
                    cellEditorParams: {
                        isRequired: true,
                    },
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    onCellValueChanged: function (params) {
                        if (params.data.shipmentPeriodValidationStyleChange && (params.newValue && params.oldValue !== params.newValue)) {
                            _this.setAmmendedStatus(params);
                            params.data.shipmentperiodChange = true;
                            _this.isValueChanged = true;
                        }
                    },
                    cellClassRules: {
                        'ag-grid-invalid-mandatory-field': (function (params) { return !params.context.componentParent.isSummaryView
                            && !params.data.shipmentPeriodValidationStyleChange; }),
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView
                            && (!params.data.isPeriodEditable || !params.context.componentParent.privileges.fromDatePrivilege)
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.shipmentperiodChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            if (!params.context.componentParent.privileges.fromDatePrivilege) {
                                return params.data.fromDateErrorMessage;
                            }
                            else {
                                return _this.tradeEditService.ShipmentFromDateValidationMessage(params);
                            }
                        }
                    },
                },
                {
                    headerName: 'Shipping Period End *',
                    field: 'deliveryPeriodEnd',
                    colId: 'deliveryPeriodEnd',
                    hide: true,
                    editable: function (params) { return _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts); },
                    cellEditor: 'atlasDatePicker',
                    valueFormatter: this.uiService.dateFormatter,
                    cellEditorParams: {
                        isRequired: true,
                    },
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    cellClassRules: {
                        'ag-grid-invalid-mandatory-field': (function (params) { return !params.context.componentParent.isSummaryView
                            && !params.data.shipmentPeriodValidationStyleChange; }),
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView
                            && (!params.data.isPeriodEditable || !params.context.componentParent.privileges.toDatePrivilege)
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.shipmentToDateChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    onCellValueChanged: function (params) {
                        if (params.data.shipmentPeriodValidationStyleChange && (params.newValue && params.oldValue !== params.newValue)) {
                            _this.setAmmendedStatus(params);
                            params.data.shipmentToDateChange = true;
                            _this.isValueChanged = true;
                        }
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            if (!params.context.componentParent.privileges.toDatePrivilege) {
                                return params.data.toDateErrorMessage;
                            }
                            else {
                                return _this.tradeEditService.ShipmentToDateValidationMessage(params);
                            }
                        }
                    },
                },
                {
                    field: 'positionMonthType',
                    colId: 'positionMonthType',
                    hide: true,
                },
                {
                    field: 'monthPositionIndex',
                    colId: 'monthPositionIndex',
                    cellRenderer: this.positionMonthTypeFormatter.bind(this),
                    hide: true,
                },
                {
                    headerName: 'Position Month *',
                    field: 'positionMonthValue',
                    colId: 'positionMonthValue',
                    hide: true,
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    pinnedRowCellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    pinnedRowCellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: (!params.context.componentParent.isSummaryView
                                    && params.context.componentParent.privileges.positionTypePrivilege),
                            },
                            options: _this.masterdata.positionMonthTypes,
                            valueProperty: 'value',
                            codeProperty: 'value',
                            displayProperty: 'positionMonthTypeDescription',
                            displayCode: true,
                        };
                    },
                    cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                            },
                            options: _this.masterdata.positionMonthTypes,
                            valueProperty: 'value',
                            codeProperty: 'value',
                            displayProperty: 'positionMonthTypeDescription',
                            isRequired: false,
                            editable: _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                        };
                    },
                    onCellValueChanged: function (params) {
                        var filteredPositionMonth = params.context.componentParent.masterdata.positionMonthTypes.find(function (e) {
                            return e.value === params.data.positionMonthValue;
                        });
                        if (params.newValue && (params.data.positionMonthValue !== params.newValue)) {
                            if (filteredPositionMonth) {
                                _this.setAmmendedStatus(params);
                                params.data.positionMonthChange = true;
                                params.data.positionMonthType = filteredPositionMonth.positionMonthTypeCode.type;
                                params.data.monthPositionIndex = filteredPositionMonth.positionMonthTypeCode.month;
                            }
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.positionTypePrivilege
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.positionMonthChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            if (!params.context.componentParent.privileges.positionTypePrivilege) {
                                return params.data.positionTypeErrorMessage;
                            }
                            else {
                                return null;
                            }
                        }
                    },
                },
                {
                    headerName: 'Port of Origin',
                    field: 'portOriginId',
                    colId: 'portOriginId',
                    hide: true,
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    pinnedRowCellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    pinnedRowCellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: (params.context.componentParent.privileges.portOfOriginPrivilege),
                            },
                            options: _this.masterdata.ports,
                            valueProperty: 'portId',
                            codeProperty: 'portCode',
                            displayProperty: 'description',
                        };
                    },
                    cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                            },
                            options: _this.masterdata.ports,
                            valueProperty: 'portId',
                            codeProperty: 'portCode',
                            displayProperty: 'description',
                            isRequired: false,
                        };
                    },
                    onCellValueChanged: function (params) {
                        var filteredPortOriginCode = _this.masterdata.ports.find(function (e) {
                            return e.portId === params.data.portOriginId;
                        });
                        if (!params.data.portOfOriginChange && (params.data.portTermId !== params.value)) {
                            if (filteredPortOriginCode) {
                                _this.setAmmendedStatus(params);
                                params.data.portOfOriginChange = true;
                            }
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.portOfOriginPrivilege
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.portOfOriginChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            if (!params.context.componentParent.privileges.portOfOriginPrivilege) {
                                return params.data.portOfOriginErrorMessage;
                            }
                            else {
                                return null;
                            }
                        }
                    },
                },
                {
                    headerName: 'Port Destination',
                    field: 'portDestinationId',
                    colId: 'portDestinationId',
                    hide: true,
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    pinnedRowCellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    pinnedRowCellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: (params.context.componentParent.privileges.portOfDestinationPrivilege),
                            },
                            options: _this.masterdata.ports,
                            valueProperty: 'portId',
                            codeProperty: 'portCode',
                            displayProperty: 'description',
                        };
                    },
                    cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                            },
                            options: _this.masterdata.ports,
                            valueProperty: 'portId',
                            codeProperty: 'portCode',
                            displayProperty: 'description',
                            isRequired: false,
                        };
                    },
                    onCellValueChanged: function (params) {
                        var filteredPortDestinationCode = _this.masterdata.ports.find(function (e) {
                            return e.portId === params.data.portDestinationId;
                        });
                        if (!params.data.portTermChange && (params.data.portTermId !== params.value)) {
                            if (filteredPortDestinationCode) {
                                _this.setAmmendedStatus(params);
                                params.data.portDestinationChange = true;
                            }
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.portOfDestinationPrivilege
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.portDestinationChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            if (!params.context.componentParent.privileges.portOfDestinationPrivilege) {
                                return params.data.portOfDestinationErrorMessage;
                            }
                            else {
                                return null;
                            }
                        }
                    },
                },
                {
                    headerName: 'Business Sector',
                    field: 'businessSectorId',
                    colId: 'businessSectorId',
                    hide: true,
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    pinnedRowCellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    pinnedRowCellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: (!params.context.componentParent.isSummaryView
                                    && params.context.componentParent.privileges.businessSectorPrivilege),
                            },
                            options: _this.masterdata.businessSectors,
                            valueProperty: 'sectorId',
                            codeProperty: 'sectorCode',
                            displayProperty: 'description',
                            displayCode: true,
                        };
                    },
                    cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                            },
                            options: _this.masterdata.businessSectors,
                            valueProperty: 'sectorId',
                            codeProperty: 'sectorCode',
                            displayProperty: 'description',
                            isRequired: false,
                            displayCode: true,
                        };
                    },
                    onCellValueChanged: function (params) {
                        var filteredBusinessSectorCode = _this.masterdata.businessSectors.find(function (e) {
                            return e.sectorId === params.data.businessSectorId;
                        });
                        if (filteredBusinessSectorCode) {
                            params.node.setDataValue('businessSectorDescription', filteredBusinessSectorCode.description);
                            _this.setAmmendedStatus(params);
                            params.data.businessSectorChange = true;
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView && (params.data.isInvoiced
                            || !params.context.componentParent.privileges.businessSectorPrivilege)
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.businessSectorChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            if (!params.context.componentParent.privileges.businessSectorPrivilege) {
                                return params.data.businessSectorErrorMessage;
                            }
                            else {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                },
                {
                    headerName: 'Business Sector Description',
                    field: 'businessSectorDescription',
                    colId: 'businessSectorDescription',
                    cellRenderer: this.businessSectorDescriptionFormatter.bind(this),
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView && (params.data.isInvoiced
                            || !params.context.componentParent.privileges.businessSectorPrivilege)
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.businessSectorChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            if (!params.context.componentParent.privileges.businessSectorPrivilege) {
                                return params.data.businessSectorErrorMessage;
                            }
                            else {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                },
                {
                    headerName: 'Internal Memorandum',
                    field: 'memorandum',
                    colId: 'memorandum',
                    hide: true,
                    editable: function (params) { return _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts); },
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    cellEditor: 'agLargeTextCellEditor',
                    cellEditorParams: {
                        maxLength: 2000,
                        rows: 8,
                        cols: 50,
                    },
                    onCellValueChanged: function (params) {
                        if (params.data.memorandum !== params.value) {
                            _this.isValueChanged = true;
                        }
                        _this.setAmmendedStatus(params);
                        params.data.memoValueChange = true;
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.memoPrivilege || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.memoValueChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            if (!params.context.componentParent.privileges.memoPrivilege) {
                                return params.data.memoErrorMessage;
                            }
                            else {
                                return null;
                            }
                        }
                    },
                },
                {
                    headerName: 'Contract Issued Date',
                    field: 'contractIssuedDate',
                    colId: 'contractIssuedDate',
                    hide: true,
                    editable: function (params) { return _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts); },
                    cellEditor: 'atlasDatePicker',
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    valueFormatter: this.uiService.dateFormatter,
                    cellEditorParams: {
                        mode: _shared_enums_date_format_enum__WEBPACK_IMPORTED_MODULE_15__["DateFormats"].Date,
                    },
                    onCellValueChanged: function (params) {
                        _this.setAmmendedStatus(params);
                        params.data.contractIssuedDateChange = true;
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.contractIssuedOnPrivilege
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.contractIssuedDateChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            if (!params.context.componentParent.privileges.contractIssuedOnPrivilege) {
                                return params.data.contractIssuedErrorMessage;
                            }
                            else {
                                return null;
                            }
                        }
                    },
                },
                {
                    headerName: 'Other Reference',
                    field: 'otherReference',
                    colId: 'otherReference',
                    hide: true,
                    editable: function (params) { return _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts); },
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    cellEditor: 'agLargeTextCellEditor',
                    cellEditorParams: {
                        maxLength: 12,
                        rows: 1,
                        cols: 12,
                    },
                    onCellValueChanged: function (params) {
                        _this.setAmmendedStatus(params);
                        params.data.otherReferenceChange = true;
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.otherReferencePrivilege
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.otherReferenceChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            if (!params.context.componentParent.privileges.otherReferencePrivilege) {
                                return params.data.otherReferenceErrorMessage;
                            }
                            else {
                                return null;
                            }
                        }
                    },
                },
                {
                    headerName: 'Vessel Name',
                    field: 'vesselId',
                    colId: 'vesselId',
                    hide: true,
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    pinnedRowCellRendererFramework: _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_8__["AgGridContextualSearchComponent"],
                    pinnedRowCellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: (!params.context.componentParent.isSummaryView
                                    && params.context.componentParent.privileges.vesselNamePrivilege),
                            },
                            gridId: 'vesselsGrid',
                            options: _this.masterdata.vessels,
                            codeProperty: 'vesselName',
                            descriptionProperty: 'description',
                            valueProperty: 'vesselId',
                            displayProperty: 'vesselName',
                            showContextualSearchIcon: (!params.context.componentParent.isSummaryView
                                && params.context.componentParent.privileges.vesselNamePrivilege),
                        };
                    },
                    cellRendererFramework: _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_8__["AgGridContextualSearchComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                            },
                            gridId: 'vesselsGrid',
                            options: _this.masterdata.vessels,
                            codeProperty: 'vesselName',
                            descriptionProperty: 'description',
                            displayProperty: 'vesselName',
                            valueProperty: 'vesselId',
                            lightBoxTitle: 'Results for Vessels',
                            isRequired: false,
                            showContextualSearchIcon: _this.tradeEditService
                                .isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                        };
                    },
                    onCellValueChanged: function (params) {
                        var filteredVessel = _this.masterdata.vessels.find(function (e) {
                            return e.vesselId === params.data.vesselId;
                        });
                        if (filteredVessel) {
                            _this.setAmmendedStatus(params);
                            params.data.vesselValueChange = true;
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.vesselNamePrivilege
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.vesselValueChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            if (!params.context.componentParent.privileges.vesselNamePrivilege) {
                                return params.data.vesselNameErrorMessage;
                            }
                            else {
                                return null;
                            }
                        }
                    },
                },
                {
                    headerName: 'BL Date',
                    field: 'blDate',
                    colId: 'blDate',
                    hide: true,
                    editable: function (params) { return _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts); },
                    cellEditor: 'atlasDatePicker',
                    valueFormatter: this.uiService.dateFormatter,
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    cellEditorParams: {
                        maxDate: this.companyManager.getCurrentCompanyDate(),
                        isRequired: false,
                    },
                    cellClassRules: {
                        'ag-grid-invalid-mandatory-field': (function (params) { return params.data.blDateValidationStyleChange; }),
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.hasSuperTradePrivilege && (!params.data.isEditable
                            || !params.context.componentParent.privileges.blDatePrivilege)
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.blDateChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    onCellValueChanged: this.onblDateValueChanged.bind(this),
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            if (!params.context.componentParent.privileges.blDatePrivilege) {
                                return params.data.blDateErrorMessage;
                            }
                            else if (params.data.isInvoiced && !params.context.componentParent.privileges.hasSuperTradePrivilege) {
                                return params.data.invoicingConditionErrorMessage;
                            }
                            else {
                                return _this.tradeEditService.blDateValidation(params);
                            }
                        }
                    },
                },
                {
                    headerName: 'BL Reference',
                    field: 'blReference',
                    colId: 'blReference',
                    hide: true,
                    editable: function (params) { return _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts); },
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    cellEditor: 'agLargeTextCellEditor',
                    cellEditorParams: {
                        maxLength: 255,
                        rows: 4,
                        cols: 12,
                    },
                    onCellValueChanged: function (params) {
                        _this.setAmmendedStatus(params);
                        params.data.blReferenceChange = true;
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.blReferencePrivilege
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.blReferenceChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            if (!params.context.componentParent.privileges.blReferencePrivilege) {
                                return params.data.blReferenceErrorMessage;
                            }
                            else {
                                return null;
                            }
                        }
                    },
                },
                {
                    headerName: 'Discount/Premium',
                    field: 'premiumDiscountTypeId',
                    colId: 'premiumDiscountTypeId',
                    hide: true,
                    editable: function (params) { return _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts); },
                    cellEditor: 'agRichSelectCellEditor',
                    cellEditorParams: function () {
                        return {
                            values: _this.premiumDiscountType.map(function (basis) { return basis.discountPremium; }),
                            displayPropertyName: 'discountPremium',
                            valuePropertyName: 'discountPremium',
                            displayFormat: 'discountPremium',
                        };
                    },
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.hasSuperTradePrivilege
                            && params.data.discountPremiumTypeChange || params.data.isCancelled
                            || params.data.isClosed || params.data.isInvoiced; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.discountPremiumTypeChange || params.data.isCancelled
                            || params.data.isClosed; }),
                    },
                    onCellValueChanged: function (params) {
                        if (params.newValue && params.oldValue !== params.newValue) {
                            if (params.data.premiumDiscountTypeId) {
                                _this.isRequiredCell = (params.data.premiumDiscountTypeId) ? true : false;
                                _this.setAmmendedStatus(params);
                                params.data.discountPremiumTypeChange = true;
                                _this.contractValueCalculation(params);
                            }
                            if (_this.gridApi && params.data.premiumDiscountTypeId) {
                                _this.gridApi.refreshCells({
                                    rowNodes: [params.node],
                                    force: true,
                                });
                            }
                        }
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {
                            if (params.data.isInvoiced) {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                },
                {
                    headerName: 'D/P Ccy',
                    field: 'premiumDiscountCurrency',
                    colId: 'premiumDiscountCurrency',
                    hide: true,
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    pinnedRowCellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    pinnedRowCellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: (!params.context.componentParent.isSummaryView),
                            },
                            options: _this.masterdata.currencies,
                            valueProperty: 'currencyCode',
                            codeProperty: 'currencyCode',
                            displayProperty: 'description',
                            displayCode: true,
                        };
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.hasSuperTradePrivilege
                            && params.data.discountPremiumBasisChange || params.data.isCancelled
                            || params.data.isClosed || params.data.isInvoiced; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.discountPremiumBasisChange || params.data.isCancelled
                            || params.data.isClosed; }),
                    },
                    cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: (!params.context.componentParent.isSummaryView
                                    && params.data.premiumDiscountTypeId
                                    && !params.data.isInvoiced),
                            },
                            options: _this.masterdata.currencies,
                            valueProperty: 'currencyCode',
                            codeProperty: 'currencyCode',
                            displayProperty: 'description',
                            isRequired: function () {
                                return _this.isRequiredCell ? true : false;
                            },
                            displayCode: true,
                        };
                    },
                    onCellValueChanged: function (params) {
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {
                            if (params.data.isInvoiced) {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                },
                {
                    headerName: 'D/P Type',
                    field: 'premiumDiscountBasis',
                    colId: 'premiumDiscountBasis',
                    hide: true,
                    editable: function (params) { return (!params.context.componentParent.isSummaryView
                        && params.data.premiumDiscountTypeId
                        && !params.data.isInvoiced); },
                    cellEditor: 'agRichSelectCellEditor',
                    cellEditorParams: {
                        values: this.premiumDiscountBasis.map(function (basis) { return basis.discountPremiumBasis; }),
                        displayPropertyName: 'discountPremiumBasis',
                        valuePropertyName: 'discountPremiumBasis',
                        displayFormat: 'discountPremiumBasis',
                        isRequired: this.isRequiredCell,
                    },
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    pinnedRowCellRenderer: 'agRichSelectCellEditor',
                    pinnedRowCellRendererParams: {
                        values: this.premiumDiscountBasis.map(function (basis) { return basis.discountPremiumBasis; }),
                        displayPropertyName: 'discountPremiumBasis',
                        valuePropertyName: 'discountPremiumBasis',
                        displayFormat: 'discountPremiumBasis',
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.hasSuperTradePrivilege
                            && params.data.discountPremiumBasisChange || params.data.isCancelled
                            || params.data.isClosed || params.data.isInvoiced; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.discountPremiumBasisChange || params.data.isCancelled
                            || params.data.isClosed; }),
                    },
                    onCellValueChanged: function (params) {
                        if (params.newValue && params.oldValue !== params.newValue) {
                            if (params.data.premiumDiscountBasis) {
                                _this.setAmmendedStatus(params);
                                params.data.discountPremiumBasisChange = true;
                            }
                        }
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {
                            if (params.data.isInvoiced) {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                },
                {
                    headerName: 'D/P Value',
                    field: 'premiumDiscountValue',
                    colId: 'premiumDiscountValue',
                    hide: true,
                    editable: function (params) { return (!params.context.componentParent.isSummaryView
                        && params.data.premiumDiscountBasis
                        && !params.data.isInvoiced); },
                    cellEditor: 'atlasNumeric',
                    cellEditorParams: {
                        displayMask: Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_21__["CustomNumberMask"])(12, 10, false),
                        isRightAligned: false,
                        isRequired: this.isRequiredCell,
                    },
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    pinnedRowCellRenderer: 'atlasNumeric',
                    pinnedRowCellRendererParams: {
                        displayMask: Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_21__["CustomNumberMask"])(12, 10, false),
                        isRightAligned: true,
                    },
                    onCellValueChanged: function (params) {
                        if (params.data.premiumDiscountValue !== params.value) {
                            _this.isValueChanged = true;
                        }
                        _this.setAmmendedStatus(params);
                        params.data.discountPremiumValueChange = true;
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return params.context.componentParent.isSummaryView &&
                            !params.context.componentParent.privileges.hasSuperTradePrivilege
                            && params.data.discountPremiumValueChange || params.data.isCancelled
                            || params.data.isClosed || params.data.isInvoiced; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.discountPremiumValueChange || params.data.isCancelled
                            || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.hasSuperTradePrivilege) {
                            if (params.data.isInvoiced) {
                                return params.data.invoicingConditionErrorMessage;
                            }
                        }
                    },
                },
                {
                    headerName: 'Maturity Date',
                    field: 'maturityDate',
                    colId: 'maturityDate',
                    hide: true,
                    editable: function (params) { return _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts); },
                    cellEditor: 'atlasDatePicker',
                    valueFormatter: this.uiService.dateFormatter,
                    cellEditorParams: {
                        isRequired: false,
                    },
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.maturityDate || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.maturityDate || params.data.isCancelled || params.data.isClosed; }),
                    },
                    onCellValueChanged: function (params) {
                        if (params.newValue && params.oldValue !== params.newValue) {
                            _this.setAmmendedStatus(params);
                        }
                    },
                },
                {
                    headerName: 'Invoicing Status',
                    field: 'invoicingStatus',
                    colId: 'invoicingStatus',
                    hide: true,
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    pinnedRowCellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    pinnedRowCellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: (!params.context.componentParent.isSummaryView
                                    && params.context.componentParent.privileges.invoicingStatusPrivilege),
                            },
                            options: _this.masterdata.invoiceStatus,
                            valueProperty: 'code',
                            displayProperty: 'description',
                        };
                    },
                    cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                    cellRendererParams: function (params) {
                        return {
                            context: {
                                componentParent: _this,
                                gridEditable: _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts),
                            },
                            options: _this.masterdata.invoiceStatus,
                            valueProperty: 'code',
                            displayProperty: 'description',
                        };
                    },
                    onCellValueChanged: function (params) {
                        var filteredInvoiceStatus = _this.masterdata.invoiceStatus.find(function (e) {
                            return e.code === params.data.invoicingStatus;
                        });
                        if (filteredInvoiceStatus) {
                            _this.setAmmendedStatus(params);
                        }
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return !params.context.componentParent.isSummaryView
                            && !params.context.componentParent.privileges.invoicingStatusPrivilege
                            || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.invoicingStatusPrivilege || params.data.isCancelled || params.data.isClosed; }),
                    },
                    tooltip: function (params) {
                        if (!params.context.componentParent.isSummaryView) {
                            if (!params.context.componentParent.privileges.invoicingStatusPrivilege) {
                                return params.data.invoiceStatusErrorMessage;
                            }
                            else {
                                return null;
                            }
                        }
                    },
                },
                {
                    headerName: 'isLocked',
                    field: 'isLocked',
                    colId: 'isLocked',
                    hide: true,
                },
                {
                    headerName: 'lockMessage',
                    field: 'lockMessage',
                    colId: 'lockMessage',
                    hide: true,
                },
                {
                    headerName: 'Invoice Status',
                    field: 'invoicingStatusId',
                    colId: 'invoicingStatusId',
                    hide: true,
                    valueFormatter: this.invoiceStatus.bind(this),
                },
                {
                    headerName: 'allocatedInvoiceStatus',
                    field: 'allocatedInvoiceStatus',
                    colId: 'allocatedInvoiceStatus',
                    hide: true,
                },
                {
                    headerName: 'Contract Sent Date',
                    field: 'contractSentDate',
                    colId: 'contractSentDate',
                    hide: true,
                    editable: function (params) { return _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts); },
                    cellEditor: 'atlasDatePicker',
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    valueFormatter: this.uiService.dateFormatter,
                    cellEditorParams: {
                        mode: _shared_enums_date_format_enum__WEBPACK_IMPORTED_MODULE_15__["DateFormats"].Date,
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.contractSentDateChange || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.contractSentDateChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    onCellValueChanged: function (params) {
                        _this.setAmmendedStatus(params);
                        params.data.contractSentDateChange = true;
                    },
                },
                {
                    headerName: 'Contract Returned Date',
                    field: 'contractReturnedDate',
                    colId: 'contractReturnedDate',
                    hide: true,
                    editable: function (params) { return _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts); },
                    cellEditor: 'atlasDatePicker',
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    valueFormatter: this.uiService.dateFormatter,
                    cellEditorParams: {
                        mode: _shared_enums_date_format_enum__WEBPACK_IMPORTED_MODULE_15__["DateFormats"].Date,
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.contractReturnedDateChange || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.contractReturnedDateChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    onCellValueChanged: function (params) {
                        _this.setAmmendedStatus(params);
                        params.data.contractReturnedDateChange = true;
                    },
                },
                {
                    headerName: 'Email Received Date',
                    field: 'lastEmailReceivedDate',
                    colId: 'lastEmailReceivedDate',
                    hide: true,
                    editable: function (params) { return _this.tradeEditService.isGridCellEditable(params, _this.privileges, _this.lockedContracts); },
                    cellEditor: 'atlasDatePicker',
                    cellClass: function (params) {
                        if (params.node.rowPinned) {
                            return 'pinnedRow';
                        }
                    },
                    valueFormatter: this.uiService.dateFormatter,
                    cellEditorParams: {
                        mode: _shared_enums_date_format_enum__WEBPACK_IMPORTED_MODULE_15__["DateFormats"].Date,
                    },
                    cellClassRules: {
                        'ag-grid-disable-field': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.lastEmailReceivedDateChange || params.data.isCancelled || params.data.isClosed; }),
                        'ag-grid-row-gray-background': (function (params) { return params.context.componentParent.isSummaryView
                            && params.data.lastEmailReceivedDateChange || params.data.isCancelled || params.data.isClosed; }),
                    },
                    onCellValueChanged: function (params) {
                        _this.setAmmendedStatus(params);
                        params.data.lastEmailReceivedDateChange = true;
                    },
                },
            ];
        this.pinnedTopRowData = this.getPinnedTopData();
    };
    EditionMatrixComponent.prototype.numberFormatter = function (params) {
        if (isNaN(params.value) || params.value === null) {
            return '';
        }
        return new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(params.value);
    };
    EditionMatrixComponent.prototype.onblDateValueChanged = function (params) {
        var _this = this;
        if (params.newValue && params.oldValue !== params.newValue) {
            this.setAmmendedStatus(params);
            params.data.blDateChange = true;
            this.rowValue = params.data.blDate;
            var selectedSection_1 = params.data.allocatedSectionId;
            if (selectedSection_1) {
                var filteredRow = this.bulkEditGridRows.find(function (e) {
                    return e.sectionId === selectedSection_1;
                });
                if (filteredRow) {
                    this.gridApi.forEachNode(function (rowData) {
                        if (rowData.data.sectionId === selectedSection_1 && rowData.data.invoicingStatusId === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_19__["InvoicingStatus"].Uninvoiced) {
                            rowData.setDataValue('blDate', _this.rowValue);
                        }
                    });
                }
                else {
                    this.subscriptions.push(this.lockService.isLockedContract(selectedSection_1).subscribe(function (lock) {
                        if (lock.isLocked) {
                            var oldBlDateValue = _this.bulkEditGridRows.find(function (e) {
                                return e.sectionId === params.data.sectionId;
                            });
                            params.node.setDataValue('blDate', oldBlDateValue.blDate);
                        }
                        else {
                            if (params.data.allocatedInvoiceStatus === _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_19__["InvoicingStatus"].Uninvoiced) {
                                params.data.isBlDateUpdatable = true;
                            }
                        }
                    }));
                }
            }
        }
    };
    EditionMatrixComponent.prototype.setAmmendedStatus = function (params) {
        params.node.setDataValue('rowStatus', this.ammendedStatus);
    };
    EditionMatrixComponent.prototype.getPinnedTopData = function () {
        if (!this.isSummaryView) {
            return [
                {
                    rowstatus: '',
                    contractLabel: 'Master Row',
                    status: '',
                    contractDate: '',
                    userId: '',
                    departmentId: '',
                    departmentDescription: '',
                    buyerCounterpartyId: '',
                    buyerDescription: '',
                    sellerCounterpartyId: '',
                    sellerDescription: '',
                    counterpartyReference: '',
                    commodity1: '',
                    commodity2: '',
                    commodity3: '',
                    commodity4: '',
                    commodity5: '',
                    cropYear: '',
                    weightCodeConversion: '',
                    contractTermId: '',
                    contractTermDescription: '',
                    portTerm: '',
                    arbitrationCode: '',
                    arbitrationDescription: '',
                    currencyCode: '',
                    currencyDescription: '',
                    priceUnitId: '',
                    priceCodeConversion: '',
                    price: '',
                    contractValue: '',
                    paymentTermsId: '',
                    periodTypeId: '',
                    deliveryPeriodStart: '',
                    deliveryPeriodEnd: '',
                    positionMonthType: '',
                    portOrigin: '',
                    portDestination: '',
                    businessSector: '',
                    businessSectorDescription: '',
                    memorandum: '',
                    contractIssuedDate: '',
                    otherReference: '',
                    vesselId: '',
                    blDate: '',
                    blReference: '',
                    premiumDiscountBasis: '',
                    premiumDiscountCurrency: '',
                    premiumDiscountTypeId: '',
                    premiumDiscountValue: '',
                    maturityDate: '',
                    sectionId: '',
                    invoicingStatus: '',
                    allocatedSectionId: '',
                    contractType: '',
                    contractSentDate: '',
                    contractReturnedDate: '',
                    lastEmailReceivedDate: '',
                },
            ];
        }
    };
    EditionMatrixComponent.prototype.onCellValueChanged = function (params) {
        if (params.oldValue !== params.newValue) {
            params.node.data.isDirty = true;
            this.gridColumnApi.autoSizeAllColumns();
            if (params.colDef) {
                if (params.colDef.colId === 'premiumDiscountTypeId') {
                    if (params.data && params.data.premiumDiscountValue === 0) {
                        params.node.setDataValue('premiumDiscountValue', this.requiredString);
                    }
                    if (params.data && !params.data.premiumDiscountBasis) {
                        params.node.setDataValue('premiumDiscountBasis', this.requiredString);
                    }
                }
            }
        }
    };
    EditionMatrixComponent.prototype.onCellClicked = function (params) {
        if (this.bulkEditGridOptions.onCellClicked) {
            if (params.colDef.colId === 'premiumDiscountValue' ||
                params.colDef.colId === 'premiumDiscountBasis') {
                if (params.oldValue === 'Required*') {
                    params.node.setDataValue('premiumDiscountCurrency', '');
                    params.node.setDataValue('premiumDiscountValue', '');
                    params.node.setDataValue('premiumDiscountBasis', '');
                }
            }
        }
    };
    EditionMatrixComponent.prototype.onSaveButtonClicked = function () {
        this.isSave = true;
        this.gridApi.stopEditing();
        var errorMessage = this.validateGridData();
        this.blockingErrorMessage.emit(errorMessage);
    };
    EditionMatrixComponent.prototype.validateGridData = function () {
        var _this = this;
        var isRowDirty;
        var isRowDataValid;
        var errorMessage = this.noErrorMessage;
        this.gridApi.forEachNode(function (rowData) {
            isRowDirty = true;
            isRowDataValid = false;
            _this.columnDefs.forEach(function (column) {
                if (!isRowDataValid) {
                    isRowDataValid = _this.validateEmpty(column.colId, rowData);
                }
            });
            if (isRowDataValid) {
                if (_this.isNullEmptyOrRequiredString(rowData.data.contractDate) ||
                    _this.isNullEmptyOrRequiredString(rowData.data.userId) ||
                    _this.isNullEmptyOrRequiredString(rowData.data.departmentId) ||
                    _this.isNullEmptyOrRequiredString(rowData.data.buyerCounterpartyId) ||
                    _this.isNullEmptyOrRequiredString(rowData.data.sellerCounterpartyId) ||
                    _this.isNullEmptyOrRequiredString(rowData.data.commodityId) ||
                    _this.isNullEmptyOrRequiredString(rowData.data.contractTermId) ||
                    _this.isNullEmptyOrRequiredString(rowData.data.portTermId) ||
                    _this.isNullEmptyOrRequiredString(rowData.data.currencyCode) ||
                    _this.isNullEmptyOrRequiredString(rowData.data.priceUnitId) ||
                    _this.isNullEmptyOrRequiredString(rowData.data.paymentTermsId) ||
                    _this.isNullEmptyOrRequiredString(rowData.data.periodTypeId) ||
                    _this.isNullEmptyOrRequiredString(rowData.data.deliveryPeriodStart) ||
                    _this.isNullEmptyOrRequiredString(rowData.data.deliveryPeriodEnd) ||
                    rowData.data.contractPrice === _this.requiredString || rowData.data.contractPrice === '' ||
                    rowData.data.premiumDiscountCurrency === _this.requiredString ||
                    rowData.data.premiumDiscountTypeId === _this.requiredString ||
                    rowData.data.validationError === true ||
                    rowData.data.premiumDiscountValue === _this.requiredString) {
                    if (!(_this.isNullEmptyOrRequiredString(rowData.data.contractDate) &&
                        _this.isNullEmptyOrRequiredString(rowData.data.userId) &&
                        _this.isNullEmptyOrRequiredString(rowData.data.departmentId) &&
                        _this.isNullEmptyOrRequiredString(rowData.data.buyerCounterpartyId) &&
                        _this.isNullEmptyOrRequiredString(rowData.data.sellerCounterpartyId) &&
                        _this.isNullEmptyOrRequiredString(rowData.data.commodityId) &&
                        _this.isNullEmptyOrRequiredString(rowData.data.contractTermId) &&
                        _this.isNullEmptyOrRequiredString(rowData.data.portTermId) &&
                        _this.isNullEmptyOrRequiredString(rowData.data.currencyCode) &&
                        _this.isNullEmptyOrRequiredString(rowData.data.priceUnitId) &&
                        _this.isNullEmptyOrRequiredString(rowData.data.paymentTermsId) &&
                        _this.isNullEmptyOrRequiredString(rowData.data.periodTypeId) &&
                        _this.isNullEmptyOrRequiredString(rowData.data.deliveryPeriodStart) &&
                        _this.isNullEmptyOrRequiredString(rowData.data.deliveryPeriodEnd) &&
                        rowData.data.contractPrice !== _this.requiredString &&
                        rowData.data.validationError === false &&
                        rowData.data.premiumDiscountCurrency !== _this.requiredString &&
                        rowData.data.premiumDiscountTypeId !== _this.requiredString &&
                        rowData.data.premiumDiscountValue !== _this.requiredString)) {
                        errorMessage = 'Grid data is invalid. Please resolve the errors.';
                    }
                }
            }
        });
        return isRowDirty === true ? errorMessage : '';
    };
    EditionMatrixComponent.prototype.isNullEmptyOrRequiredString = function (value) {
        return value === null || value === '' || value === this.requiredString;
    };
    EditionMatrixComponent.prototype.validateEmpty = function (colId, rowData) {
        if (rowData.data[colId] && rowData.data[colId] !== null
            && rowData.data[colId].toString().trim() !== '' && rowData.data[colId] !== 'Required*') {
            return true;
        }
        else {
            return false;
        }
    };
    EditionMatrixComponent.prototype.getGridData = function () {
        var _this = this;
        var updatedSections = new Array();
        var updatedPhysicalContracts = new Array();
        var updatedPhysicalTradeList = new Array();
        var isRowDataValid;
        this.gridApi.forEachNode(function (rowdata) {
            isRowDataValid = false;
            _this.columnDefs.forEach(function (column) {
                if (column.colId === 'cropYear') {
                    _this.validateCropYearValue(rowdata);
                }
                if (column.colId === 'premiumDiscountBasis') {
                    _this.validateDiscountPremiumType(rowdata);
                }
                if (column.colId === 'premiumDiscountTypeId') {
                    _this.validateDiscountPremiumBasis(rowdata);
                }
                if (column.colId === 'periodTypeId') {
                    rowdata.data.periodTypeId = _this.validatePeriodType(rowdata);
                }
                if (column.colId === 'invoicingStatus') {
                    rowdata.data.invoicingStatusId = Number(rowdata.data.invoicingStatus);
                }
                if (column.colId === 'bldate' || column.colId === 'deliveryPeriodStart' || column.colId === 'deliveryPeriodEnd' ||
                    column.colId === 'contractIssuedDate' || column.colId === 'contractSentDate' || column.colId === 'contractReturnedDate'
                    || column.colId === 'lastEmailReceivedDate') {
                    _this.validateDateFunctions(rowdata);
                }
                if (!isRowDataValid) {
                    isRowDataValid = _this.validateEmpty(column.colId, rowdata);
                }
            });
            updatedSections.push(rowdata.data);
            updatedPhysicalContracts.push(rowdata.data);
            updatedPhysicalTradeList.push(rowdata.data);
        });
        var updatedContracts = new _shared_entities_physical_trade_bulk_edit__WEBPACK_IMPORTED_MODULE_14__["PhysicalTradeBulkEdit"](this.company, updatedPhysicalContracts, updatedSections);
        this.updatedContractRows = updatedPhysicalTradeList;
        return updatedContracts;
    };
    EditionMatrixComponent.prototype.validatePeriodType = function (rowData) {
        var pertiodType = this.masterdata.periodTypes.find(function (x) { return x.periodTypeDescription ===
            rowData.data.periodTypeDescription; });
        if (pertiodType) {
            rowData.data.periodTypeId = pertiodType.periodTypeId;
        }
        return rowData.data.periodTypeId;
    };
    EditionMatrixComponent.prototype.validateDateFunctions = function (rowdata) {
        var local = this.dateLocale || moment__WEBPACK_IMPORTED_MODULE_3__["locale"]();
        var blDateValue = rowdata.data.blDate ? moment__WEBPACK_IMPORTED_MODULE_3__(rowdata.data.blDate, 'YYYY-MM-DD').toDate() : null;
        rowdata.data.blDate = (blDateValue) ? moment__WEBPACK_IMPORTED_MODULE_3__["utc"](moment__WEBPACK_IMPORTED_MODULE_3__["parseZone"](blDateValue).format('YYYY-MM-DD')).locale(local) : null;
        var periodFromValue = rowdata.data.deliveryPeriodStart ? moment__WEBPACK_IMPORTED_MODULE_3__(rowdata.data.deliveryPeriodStart, 'YYYY-MM-DD').toDate() : null;
        rowdata.data.deliveryPeriodStart = moment__WEBPACK_IMPORTED_MODULE_3__["utc"](moment__WEBPACK_IMPORTED_MODULE_3__["parseZone"](periodFromValue).format('YYYY-MM-DD')).locale(local);
        var periodToValue = rowdata.data.deliveryPeriodEnd ? moment__WEBPACK_IMPORTED_MODULE_3__(rowdata.data.deliveryPeriodEnd, 'YYYY-MM-DD').toDate() : null;
        rowdata.data.deliveryPeriodEnd = moment__WEBPACK_IMPORTED_MODULE_3__["utc"](moment__WEBPACK_IMPORTED_MODULE_3__["parseZone"](periodToValue).format('YYYY-MM-DD')).locale(local);
        var contractIssuedDate = rowdata.data.contractIssuedDate ? moment__WEBPACK_IMPORTED_MODULE_3__(rowdata.data.contractIssuedDate, 'YYYY-MM-DD').toDate() : null;
        rowdata.data.contractIssuedDate = moment__WEBPACK_IMPORTED_MODULE_3__["utc"](moment__WEBPACK_IMPORTED_MODULE_3__["parseZone"](contractIssuedDate).format('YYYY-MM-DD')).locale(local);
        var contractSentDate = rowdata.data.contractSentDate ? moment__WEBPACK_IMPORTED_MODULE_3__(rowdata.data.contractSentDate, 'YYYY-MM-DD').toDate() : null;
        rowdata.data.contractSentDate = moment__WEBPACK_IMPORTED_MODULE_3__["utc"](moment__WEBPACK_IMPORTED_MODULE_3__["parseZone"](contractSentDate).format('YYYY-MM-DD')).locale(local);
        var contractReturnedDate = rowdata.data.contractReturnedDate
            ? moment__WEBPACK_IMPORTED_MODULE_3__(rowdata.data.contractReturnedDate, 'YYYY-MM-DD').toDate() : null;
        rowdata.data.contractReturnedDate = moment__WEBPACK_IMPORTED_MODULE_3__["utc"](moment__WEBPACK_IMPORTED_MODULE_3__["parseZone"](contractReturnedDate).format('YYYY-MM-DD')).locale(local);
        var lastEmailReceivedDate = rowdata.data.lastEmailReceivedDate
            ? moment__WEBPACK_IMPORTED_MODULE_3__(rowdata.data.lastEmailReceivedDate, 'YYYY-MM-DD').toDate() : null;
        rowdata.data.lastEmailReceivedDate = moment__WEBPACK_IMPORTED_MODULE_3__["utc"](moment__WEBPACK_IMPORTED_MODULE_3__["parseZone"](lastEmailReceivedDate).format('YYYY-MM-DD')).locale(local);
    };
    EditionMatrixComponent.prototype.updateAllRow = function (rowData) {
        var _this = this;
        this.bulkEditGridColumns.forEach(function (x) {
            _this.columnName = x.field;
            var columnValue;
            var columnDefs = _this.colDefSelected.find(function (item) { return item.columnName === _this.columnName; });
            columnValue = (columnDefs) ? columnDefs.columnName : null;
            if (rowData[_this.columnName] && rowData[_this.columnName] !== _this.bulkEditField) {
                _this.gridApi.forEachNode(function (rowNode) {
                    var isContractLocked = false;
                    if (_this.lockedContracts) {
                        var lockedContract = _this.lockedContracts.find(function (id) { return id === rowNode.data.sectionId; });
                        // selected contract is locked  by the user. So make grideditable to false;
                        if (lockedContract) {
                            isContractLocked = true;
                        }
                    }
                    if (!rowNode.data.isCancelled && !rowNode.data.isClosed && !isContractLocked) {
                        if (_this.columnName === 'deliveryPeriodStart' || _this.columnName === 'deliveryPeriodEnd') {
                            if (rowNode.data.blDate === null) {
                                rowNode.setDataValue(_this.columnName, rowData[_this.columnName]);
                            }
                        }
                        else if (_this.columnName === 'buyerCounterpartyId' || _this.columnName === 'buyerDescription') {
                            if (rowNode.data.invoicingStatusId === _shared_enums_invoice_status_enum__WEBPACK_IMPORTED_MODULE_18__["InvoiceStatus"].NotInvoiced) {
                                if (rowNode.data.contractType === 'Sale') {
                                    rowNode.setDataValue(_this.columnName, rowData[_this.columnName]);
                                }
                            }
                        }
                        else if (_this.columnName === 'sellerCounterpartyId' || _this.columnName === 'sellerDescription') {
                            if (rowNode.data.invoicingStatusId === _shared_enums_invoice_status_enum__WEBPACK_IMPORTED_MODULE_18__["InvoiceStatus"].NotInvoiced) {
                                if (rowNode.data.contractType === 'Purchase') {
                                    rowNode.setDataValue(_this.columnName, rowData[_this.columnName]);
                                }
                            }
                        }
                        else if (_this.columnName === 'contractDate' || _this.columnName === 'userId') {
                            if (rowNode.data.sectionOriginId === null) {
                                rowNode.setDataValue(_this.columnName, rowData[_this.columnName]);
                            }
                        }
                        else if (_this.columnName === 'departmentId' || _this.columnName === 'departmentDescription') {
                            if (rowNode.data.invoicingStatusId === _shared_enums_invoice_status_enum__WEBPACK_IMPORTED_MODULE_18__["InvoiceStatus"].NotInvoiced) {
                                if (rowNode.data.allocatedSectionId === null) {
                                    rowNode.setDataValue(_this.columnName, rowData[_this.columnName]);
                                }
                            }
                        }
                        else if (_this.columnName === 'blDate') {
                            if (rowNode.data.invoicingStatusId === _shared_enums_invoice_status_enum__WEBPACK_IMPORTED_MODULE_18__["InvoiceStatus"].NotInvoiced) {
                                if (rowNode.data.contractType === 'Purchase') {
                                    rowNode.setDataValue(_this.columnName, rowData[_this.columnName]);
                                }
                                else if (rowNode.data.contractType === 'Sale' && rowNode.data.allocatedSectionId !== null) {
                                    rowNode.setDataValue(_this.columnName, rowData[_this.columnName]);
                                }
                            }
                        }
                        else if (_this.columnName === columnValue) {
                            if (rowNode.data.invoicingStatusId === _shared_enums_invoice_status_enum__WEBPACK_IMPORTED_MODULE_18__["InvoiceStatus"].NotInvoiced) {
                                rowNode.setDataValue(_this.columnName, rowData[_this.columnName]);
                            }
                        }
                        else {
                            if (_this.columnName !== 'rowStatus') {
                                rowNode.setDataValue(_this.columnName, rowData[_this.columnName]);
                            }
                        }
                    }
                });
            }
        });
    };
    EditionMatrixComponent.prototype.validateCropYearValue = function (rowdata) {
        if (rowdata.data.cropYear) {
            var cropYearValues = Object(_trading_services_form_field_handler_service__WEBPACK_IMPORTED_MODULE_29__["getCropYearValue"])(rowdata.data.cropYear);
            rowdata.data.cropYearFrom = cropYearValues.from;
            rowdata.data.cropYearTo = cropYearValues.to;
        }
    };
    EditionMatrixComponent.prototype.validateDiscountPremiumBasis = function (rowdata) {
        if (rowdata.data.premiumDiscountBasis) {
            var value = this.premiumDiscountBasis.find(function (basis) { return basis.discountPremiumBasis === rowdata.data.premiumDiscountBasis; });
            rowdata.data.premiumDiscountBasis = value.discountPremiumBasisId;
        }
    };
    EditionMatrixComponent.prototype.validateDiscountPremiumType = function (rowdata) {
        if (rowdata.data.premiumDiscountTypeId) {
            var value = this.premiumDiscountType.find(function (basis) { return basis.discountPremium === rowdata.data.premiumDiscountTypeId; });
            rowdata.data.premiumDiscountTypeId = value.discountPremiumTypeId;
        }
    };
    EditionMatrixComponent.prototype.premiumDiscountBasisFormatter = function (params) {
        if (params.premiumDiscountBasis) {
            var selectedType = this.premiumDiscountBasis.find(function (x) {
                return x.discountPremiumBasisId === params.premiumDiscountBasis;
            });
            params.premiumDiscountBasis = (selectedType ? selectedType.discountPremiumBasis : '');
        }
        return params.premiumDiscountBasis;
    };
    EditionMatrixComponent.prototype.premiumDiscountTypeFormatter = function (params) {
        if (params.premiumDiscountTypeId) {
            var selectedType = this.premiumDiscountType.find(function (x) {
                return x.discountPremiumTypeId === params.premiumDiscountTypeId;
            });
            params.premiumDiscountTypeId = (selectedType ? selectedType.discountPremium : '');
        }
        return params.premiumDiscountTypeId;
    };
    EditionMatrixComponent.prototype.onGridReady = function (params) {
        params.columnApi.autoSizeAllColumns();
        params.columnDefs = this.bulkEditGridColumns;
        this.columnDefs = params.columnDefs;
        this.bulkEditGridOptions = params;
        this.gridApi = params.api;
        this.gridColumnApi = params.columnApi;
        this.gridApi.showNoRowsOverlay();
    };
    EditionMatrixComponent.prototype.onColumnVisibilityChanged = function (col) {
        this.userPreferencesComponent.onChangeColumnVisibility(col);
        this.autoSizeContractsGrid();
    };
    EditionMatrixComponent.prototype.autoSizeContractsGrid = function () {
        if (this.gridColumnApi) {
            this.gridColumnApi.autoSizeAllColumns();
        }
    };
    EditionMatrixComponent.prototype.departmentDescriptionFormatter = function (params) {
        if (params.data.departmentId) {
            var departmentDescription = params.context.componentParent.masterdata.departments.find(function (department) {
                return department.departmentId === params.data.departmentId;
            });
            params.data.departmentDescription = (departmentDescription ? departmentDescription.description : '');
        }
        return params.data.departmentDescription;
    };
    EditionMatrixComponent.prototype.commodityValueGetter = function (params) {
        if (params.data.commodityId) {
            var commodtityValues = params.context.componentParent.masterdata.commodities.find(function (commoidty) {
                return commoidty.commodityId === params.data.commodityId;
            });
            params.data.commodity2 = (commodtityValues ? commodtityValues.commodityOrigin : '');
            params.data.commodity3 = (commodtityValues ? commodtityValues.commodityGrade : '');
            params.data.commodity4 = (commodtityValues ? commodtityValues.commodityLvl4 : '');
            params.data.commodity5 = (commodtityValues ? commodtityValues.commodityLvl5 : '');
        }
        return params.data.commodity2;
    };
    EditionMatrixComponent.prototype.positionMonthTypeFormatter = function (params) {
        if (params.data.positionMonthType !== null && params.data.positionMonthType !== undefined) {
            if (params.data.monthPositionIndex !== null && params.data.monthPositionIndex !== undefined) {
                var monthType_1 = _shared_enums_position_month_type_enum__WEBPACK_IMPORTED_MODULE_20__["PositionMonthTypes"][params.data.positionMonthType];
                var positionMonthValue = params.context.componentParent.masterdata.positionMonthTypes.filter(function (position) {
                    return position.positionMonthTypeDescription.startsWith(monthType_1) &&
                        position.positionMonthTypeCode.month === params.data.monthPositionIndex;
                });
                params.node.setDataValue('positionMonthValue', positionMonthValue[0].value);
            }
        }
    };
    EditionMatrixComponent.prototype.businessSectorDescriptionFormatter = function (params) {
        if (params.data.businessSectorId) {
            var businessSectorDescription = params.context.componentParent.masterdata.businessSectors.find(function (businessSector) {
                return businessSector.sectorId === params.data.businessSectorId;
            });
            params.data.businessSectorDescription = (businessSectorDescription ? businessSectorDescription.description : '');
        }
        return params.data.businessSectorDescription;
    };
    EditionMatrixComponent.prototype.buyerDescriptionFormatter = function (params) {
        if (params.data.buyerCounterpartyId) {
            var selectedBuyerCode = params.context.componentParent.masterdata.counterparties.find(function (buyer) {
                return buyer.counterpartyID === params.data.buyerCounterpartyId;
            });
            params.data.buyerDescription = (selectedBuyerCode ? selectedBuyerCode.description : '');
        }
        return params.data.buyerDescription;
    };
    EditionMatrixComponent.prototype.sellerDescriptionFormatter = function (params) {
        if (params.data.sellerCounterpartyId) {
            var selectedSellerCode = params.context.componentParent.masterdata.counterparties.find(function (seller) {
                return seller.counterpartyID === params.data.sellerCounterpartyId;
            });
            params.data.sellerDescription = (selectedSellerCode ? selectedSellerCode.description : '');
        }
        return params.data.sellerDescription;
    };
    EditionMatrixComponent.prototype.contractTermDescriptionFormatter = function (params) {
        if (params.data.contractTermId) {
            var contractTerms = params.context.componentParent.masterdata.contractTerms.find(function (contractTerm) {
                return contractTerm.contractTermId === params.data.contractTermId;
            });
            params.data.contractTermDescription = (contractTerms ? contractTerms.description : '');
        }
        return params.data.contractTermDescription;
    };
    EditionMatrixComponent.prototype.arbitrationDescriptionFormatter = function (params) {
        if (params.data.arbitrationId) {
            var arbitration = params.context.componentParent.masterdata.arbitrations.find(function (description) {
                return description.arbitrationId === params.data.arbitrationId;
            });
            params.data.arbitrationDescription = (arbitration ? arbitration.description : '');
        }
        return params.data.arbitrationDescription;
    };
    EditionMatrixComponent.prototype.currencyDescriptionFormatter = function (params) {
        if (params.data.currencyCode) {
            var currency = params.context.componentParent.masterdata.currencies.find(function (description) {
                return description.currencyCode === params.data.currencyCode;
            });
            params.data.currencyDescription = (currency ? currency.description : '');
        }
        return params.data.currencyDescription;
    };
    EditionMatrixComponent.prototype.selectedContractsToEdit = function (isSummaryView, contracts, privileges) {
        var _this = this;
        this.isSummaryView = isSummaryView;
        contracts.forEach(function (contract) { return _this.periodTypeFormatter(contract); });
        this.bulkEditGridRows = contracts;
        contracts.forEach(function (contract) { return _this.bindValueToControls(contract); });
        this.privileges = privileges;
        this.initializeGridColumns();
    };
    EditionMatrixComponent.prototype.periodTypeFormatter = function (rowData) {
        if (rowData.periodTypeId) {
            var periodTypeDescription = this.masterdata.periodTypes.find(function (x) { return x.periodTypeId ===
                rowData.periodTypeId; });
            if (periodTypeDescription) {
                rowData.periodTypeDescription = periodTypeDescription.periodTypeDescription;
            }
        }
        return rowData.periodTypeDescription;
    };
    EditionMatrixComponent.prototype.bindValueToControls = function (contract) {
        this.maturtiyDateCalculation(contract);
        this.premiumDiscountBasisFormatter(contract);
        this.premiumDiscountTypeFormatter(contract);
        if (contract.invoicingStatusId) {
            contract.invoicingStatus = contract.invoicingStatusId.toString();
        }
        // update islocked property
        if (this.lockedContracts) {
            var lockedContract = this.lockedContracts.find(function (item) { return item.enumEntityId === contract.sectionId; });
            // selected contract is locked  by the user.
            if (lockedContract) {
                contract.islocked = true;
                contract.lockMessage = lockedContract.enumEntityValue;
            }
        }
    };
    EditionMatrixComponent.prototype.onContractPriceChage = function () {
        return true;
    };
    EditionMatrixComponent.prototype.contractValueCalculation = function (params) {
        var priceCodeConversion;
        var weightCodeConversion;
        var contractPrice = params.data.contractPrice ? params.data.contractPrice.toString().replace(/,/g, '') : null;
        var contractPriceDecimal = new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_13__["AtlasNumber"](contractPrice);
        var quantity = params.data.quantity ? params.data.quantity.toString().replace(/,/g, '') : null;
        var quantityDecimal = new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_13__["AtlasNumber"](quantity);
        // weight Code Conversion calculation
        var filteredWeight = this.masterdata.weightUnits;
        var selectedWeight = filteredWeight.find(function (e) {
            return e.weightUnitId === params.data.weightUnitId || e.weightCode === params.data.weightUnitCode;
        });
        if (selectedWeight) {
            weightCodeConversion = selectedWeight.conversionFactor;
        }
        // Price Code Conversion calculation
        var filteredPrice = this.masterdata.priceUnits;
        var selectedPrice = filteredPrice.find(function (e) {
            return e.priceUnitId === params.data.priceUnitId || e.priceUnitId === params.data.priceCode;
        });
        if (selectedPrice) {
            priceCodeConversion = selectedPrice.conversionFactor;
        }
        var calculatedContractValue = Object(_Library_trading_businessrules__WEBPACK_IMPORTED_MODULE_30__["getContractValue"])(params.data.premiumDiscountBasis, params.data.currencyCode, params.data.premiumDiscountBasis, params.data.premiumDiscountTypeId, weightCodeConversion, priceCodeConversion, contractPriceDecimal, quantityDecimal, params.data.premiumDiscountValue, false);
        if (calculatedContractValue) {
            params.node.setDataValue('contractValue', calculatedContractValue);
        }
    };
    EditionMatrixComponent.prototype.maturtiyDateCalculation = function (contract) {
        var creditAgainst;
        var creditDays;
        var companyDate = this.companyManager.getCurrentCompanyDate().toDate();
        var filteredcreditAgainst = this.masterdata.paymentTerms;
        var selectedcreditAgainst = filteredcreditAgainst.find(function (e) {
            return e.paymentTermsId === contract.paymentTermsId;
        });
        if (selectedcreditAgainst) {
            creditAgainst = selectedcreditAgainst.creditAgainst;
        }
        var filteredcreditDays = this.masterdata.paymentTerms;
        var selectedcreditDays = filteredcreditDays.find(function (e) {
            return e.paymentTermsId === contract.paymentTermsId;
        });
        if (selectedcreditDays) {
            creditDays = selectedcreditAgainst.creditDays;
        }
        var deliveryPeriodStart = new Date(contract.deliveryPeriodStart);
        var deliveryPeriodEnd = new Date(contract.deliveryPeriodEnd);
        var calculatedMaturityDate = Object(_Library_trading_businessrules__WEBPACK_IMPORTED_MODULE_30__["getMaturityDate"])(creditAgainst, creditDays, companyDate, contract.blDate, deliveryPeriodStart, deliveryPeriodEnd);
        if (calculatedMaturityDate) {
            contract.maturityDate = calculatedMaturityDate;
        }
    };
    // this will be removed and values will be fetched from DB once the configuration in step3 is completed
    EditionMatrixComponent.prototype.populateListofFields = function () {
        this.colDefSelected.push({
            id: 1,
            columnName: 'departmentId',
        });
        this.colDefSelected.push({
            id: 2,
            columnName: 'departmentDescription',
        });
        this.colDefSelected.push({
            id: 3,
            columnName: 'buyerCounterpartyId',
        });
        this.colDefSelected.push({
            id: 4,
            columnName: 'buyerDescription',
        });
        this.colDefSelected.push({
            id: 5,
            columnName: 'sellerCounterpartyId',
        });
        this.colDefSelected.push({
            id: 6,
            columnName: 'sellerDescription',
        });
        this.colDefSelected.push({
            id: 7,
            columnName: 'commodityId',
        });
        this.colDefSelected.push({
            id: 8,
            columnName: 'commodity1',
        });
        this.colDefSelected.push({
            id: 9,
            columnName: 'commodity2',
        });
        this.colDefSelected.push({
            id: 10,
            columnName: 'commodity3',
        });
        this.colDefSelected.push({
            id: 11,
            columnName: 'commodity4',
        });
        this.colDefSelected.push({
            id: 12,
            columnName: 'commodity5',
        });
        this.colDefSelected.push({
            id: 16,
            columnName: 'contractTermId',
        });
        this.colDefSelected.push({
            id: 17,
            columnName: 'contractTermDescription',
        });
        this.colDefSelected.push({
            id: 18,
            columnName: 'portTermId',
        });
        this.colDefSelected.push({
            id: 20,
            columnName: 'currencyCode',
        });
        this.colDefSelected.push({
            id: 21,
            columnName: 'currencyDescription',
        });
        this.colDefSelected.push({
            id: 22,
            columnName: 'priceUnitId',
        });
        this.colDefSelected.push({
            id: 23,
            columnName: 'contractValue',
        });
        this.colDefSelected.push({
            id: 24,
            columnName: 'contractPrice',
        });
        this.colDefSelected.push({
            id: 25,
            columnName: 'premiumDiscountCurrency',
        });
        this.colDefSelected.push({
            id: 26,
            columnName: 'premiumDiscountTypeId',
        });
        this.colDefSelected.push({
            id: 27,
            columnName: 'premiumDiscountValue',
        });
        this.colDefSelected.push({
            id: 28,
            columnName: 'businessSectorId',
        });
        this.colDefSelected.push({
            id: 29,
            columnName: 'businessSectorDescription',
        });
        this.colDefSelected.push({
            id: 30,
            columnName: 'blDate',
        });
    };
    EditionMatrixComponent.prototype.isContractLockedRowStyle = function (node) {
        if (node.data.islocked) {
            return { background: 'rgba(199, 194, 196, 0.5)', color: '#928D8F' };
        }
    };
    EditionMatrixComponent.prototype.getContractTooltipMessage = function (params) {
        if (params.data.islocked) {
            return params.data.lockMessage;
        }
    };
    EditionMatrixComponent.prototype.invoiceStatus = function (params) {
        if (params.data.invoicingStatusId) {
            return _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_19__["InvoicingStatus"][params.data.invoicingStatusId].toString();
        }
        return '';
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('userPreferences'),
        __metadata("design:type", _shared_components_ag_grid_user_preferences_ag_grid_user_preferences_component__WEBPACK_IMPORTED_MODULE_6__["AgGridUserPreferencesComponent"])
    ], EditionMatrixComponent.prototype, "userPreferencesComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], EditionMatrixComponent.prototype, "blockingErrorMessage", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Array)
    ], EditionMatrixComponent.prototype, "lockedContracts", void 0);
    EditionMatrixComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-edition-matrix',
            template: __webpack_require__(/*! ./edition-matrix.component.html */ "./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/edition-matrix.component.html"),
            styles: [__webpack_require__(/*! ./edition-matrix.component.scss */ "./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/edition-matrix.component.scss")],
        }),
        __param(11, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"])()), __param(11, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_1__["MAT_DATE_LOCALE"])),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_23__["FormConfigurationProviderService"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_22__["AgGridService"],
            _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_28__["UiService"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_26__["SnackbarService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_5__["CompanyManagerService"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_4__["AuthorizationService"],
            _shared_services_trade_edit_service__WEBPACK_IMPORTED_MODULE_27__["TradeEditService"],
            _services_trade_actions_service__WEBPACK_IMPORTED_MODULE_31__["TradeActionsService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_25__["TradingService"],
            _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_24__["LockService"], String])
    ], EditionMatrixComponent);
    return EditionMatrixComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_9__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/master-row-apply/master-row-apply.component.html":
/*!***************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/master-row-apply/master-row-apply.component.html ***!
  \***************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<button mat-button\r\n        class=\"button\"\r\n        [disabled]=\"params.context.componentParent.isSummaryView\"\r\n        (click)=\"onApplyButtonClicked()\">\r\n    APPLY\r\n</button>"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/master-row-apply/master-row-apply.component.scss":
/*!***************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/master-row-apply/master-row-apply.component.scss ***!
  \***************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".button {\n  width: 110%;\n  height: 95%;\n  margin: 0%; }\n"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/master-row-apply/master-row-apply.component.ts":
/*!*************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/master-row-apply/master-row-apply.component.ts ***!
  \*************************************************************************************************************************************/
/*! exports provided: MasterRowApplyComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MasterRowApplyComponent", function() { return MasterRowApplyComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var MasterRowApplyComponent = /** @class */ (function () {
    function MasterRowApplyComponent() {
    }
    MasterRowApplyComponent.prototype.agInit = function (params) {
        this.params = params;
        this.rowIndex = params.rowIndex;
        this.pinnedRowData = params.data;
    };
    MasterRowApplyComponent.prototype.ngOnInit = function () {
    };
    MasterRowApplyComponent.prototype.refresh = function (params) {
        return false;
    };
    MasterRowApplyComponent.prototype.onApplyButtonClicked = function () {
        if (!this.params.context.componentParent.isSummaryView) {
            this.params.context.componentParent.updateAllRow(this.pinnedRowData);
        }
    };
    MasterRowApplyComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-master-row-apply',
            template: __webpack_require__(/*! ./master-row-apply.component.html */ "./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/master-row-apply/master-row-apply.component.html"),
            styles: [__webpack_require__(/*! ./master-row-apply.component.scss */ "./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/master-row-apply/master-row-apply.component.scss")],
        }),
        __metadata("design:paramtypes", [])
    ], MasterRowApplyComponent);
    return MasterRowApplyComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-edit.component.html":
/*!******************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-edit.component.html ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<form [formGroup]=\"bulkEditionFormGroup\">\r\n    <div class=\"main-container\">\r\n        <mat-horizontal-stepper [linear]\r\n                                (selectionChange)=\"onChangeStepAction($event)\"\r\n                                #stepper>\r\n            <ng-template matStepperIcon=\"edit\">\r\n                <mat-icon>check</mat-icon>\r\n            </ng-template>\r\n            <mat-step>\r\n                <ng-template matStepLabel>Contracts</ng-template>\r\n                <atlas-group-function-warning #groupFunctionWarning></atlas-group-function-warning>\r\n                <atlas-group-function-contracts #contractSelection\r\n                                                (contractSelected)=\"isContractSelected($event)\">\r\n                </atlas-group-function-contracts>\r\n                <div fxLayout=\"row \"\r\n                     fxLayoutAlign=\"space-between start\"\r\n                     class=\"button-details\">\r\n                    <div fxLayout=\"column \"\r\n                         fxLayoutAlign=\"start \">\r\n                        <button (click)=\"onContractSelectionDiscardButtonClicked()\"\r\n                                mat-button>\r\n                            DISCARD\r\n                        </button>\r\n                    </div>\r\n                    <div fxLayout=\"column \"\r\n                         fxLayoutAlign=\"start \">\r\n                        <div fxLayout=\"row \"\r\n                             fxLayoutAlign=\"end start \">\r\n                            <button mat-raised-button\r\n                                    (click)=\"onContractSelectionNextButtonClicked()\"\r\n                                    [disabled]=\"isContractsNextDisabled\">\r\n                                NEXT\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </mat-step>\r\n            <mat-step>\r\n                <ng-template matStepLabel>Fields</ng-template>\r\n                <atlas-trade-bulk-fields #tradeBulkFields\r\n                                         (selectedFieldsToEdit)=\"getSelectedFieldsToEdit($event)\">\r\n                </atlas-trade-bulk-fields>\r\n                <div fxLayout=\"row \"\r\n                     fxLayoutAlign=\"space-between start\"\r\n                     class=\"button-details\">\r\n                    <div fxLayout=\"row \"\r\n                         fxLayoutAlign=\"start \">\r\n                        <button (click)=\"onFieldSelectionDiscardButtonClicked()\"\r\n                                mat-button>\r\n                            DISCARD\r\n                        </button>\r\n                        <button mat-button\r\n                                (click)=\"onFieldSelectionPreviousButtonClicked()\">\r\n                            PREVIOUS\r\n                        </button>\r\n                    </div>\r\n                    <div fxLayout=\"column \"\r\n                         fxLayoutAlign=\"start \">\r\n                        <div fxLayout=\"row \"\r\n                             fxLayoutAlign=\"end start \">\r\n                            <button mat-raised-button\r\n                                    (click)=\"onFieldSelectionNextButtonClicked()\">\r\n                                NEXT\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </mat-step>\r\n            <mat-step>\r\n                <ng-template matStepLabel>Details</ng-template>\r\n                <atlas-edition-matrix #editionMatrix\r\n                                      (blockingErrorMessage)=saveBlockingMessage($event)></atlas-edition-matrix>\r\n                <div fxLayout=\"row \"\r\n                     fxLayoutAlign=\"space-between start\"\r\n                     class=\"button-details\">\r\n                    <div fxLayout=\"row \"\r\n                         fxLayoutAlign=\"start \">\r\n                        <button (click)=\"onEditionMatrixDiscardButtonClicked()\"\r\n                                [disabled]=\"isSaveInProgress\"\r\n                                mat-button>\r\n                            DISCARD\r\n                        </button>\r\n                        <button mat-button\r\n                                (click)=\"onEditionMatrixPreviousButtonClicked()\"\r\n                                [disabled]=\"isSaveInProgress\">\r\n                            PREVIOUS\r\n                        </button>\r\n                    </div>\r\n                    <div fxLayout=\"column \"\r\n                         fxLayoutAlign=\"start \">\r\n                        <div fxLayout=\"row \"\r\n                             fxLayoutAlign=\"end start \">\r\n                            <button mat-raised-button\r\n                                    (click)=\"onBulkEditionSaveButtonClicked()\"\r\n                                    [disabled]=\"isSaveInProgress\">\r\n                                SAVE\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </mat-step>\r\n            <mat-step>\r\n                <ng-template matStepLabel>Summary</ng-template>\r\n                <atlas-edition-matrix #summaryGrid></atlas-edition-matrix>\r\n                <div fxLayout=\"row \"\r\n                     fxLayoutAlign=\"space-between start\"\r\n                     class=\"button-details\">\r\n                    <div fxLayout=\"row \"\r\n                         fxLayoutAlign=\"start \">\r\n                        <button mat-raised-button\r\n                                (click)=\"onSummaryEditButtonClicked()\"\r\n                                [disabled]=\"!fetchingInProgress\"\r\n                                mat-button>\r\n                            EDIT\r\n                        </button>\r\n                    </div>\r\n                    <div fxLayout=\"column \"\r\n                         fxLayoutAlign=\"start \">\r\n                        <div fxLayout=\"row \"\r\n                             fxLayoutAlign=\"end start \">\r\n                            <button mat-raised-button\r\n                                    (click)=\"onCloseButtonClicked()\">\r\n                                CLOSE\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </mat-step>\r\n        </mat-horizontal-stepper>\r\n    </div>\r\n</form>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-edit.component.scss":
/*!******************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-edit.component.scss ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-edit.component.ts":
/*!****************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-edit.component.ts ***!
  \****************************************************************************************************/
/*! exports provided: TradeBulkEditComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeBulkEditComponent", function() { return TradeBulkEditComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../shared/components/confirmation-dialog/confirmation-dialog.component */ "./Client/app/shared/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony import */ var _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../shared/entities/lock-functional-context.entity */ "./Client/app/shared/entities/lock-functional-context.entity.ts");
/* harmony import */ var _shared_enums_trade_approval_status_enum__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../shared/enums/trade-approval-status.enum */ "./Client/app/shared/enums/trade-approval-status.enum.ts");
/* harmony import */ var _shared_enums_trade_bulk_edit_fields_enum__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../shared/enums/trade-bulk-edit-fields.enum */ "./Client/app/shared/enums/trade-bulk-edit-fields.enum.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../shared/services/http-services/lock.service */ "./Client/app/shared/services/http-services/lock.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _shared_services_trade_edit_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../shared/services/trade-edit.service */ "./Client/app/shared/services/trade-edit.service.ts");
/* harmony import */ var _services_trade_actions_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../services/trade-actions.service */ "./Client/app/trading/services/trade-actions.service.ts");
/* harmony import */ var _group_function_contracts_group_function_contracts_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../group-function-contracts/group-function-contracts.component */ "./Client/app/trading/components/group-functions/group-function-contracts/group-function-contracts.component.ts");
/* harmony import */ var _group_function_warning_group_function_warning_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../group-function-warning/group-function-warning.component */ "./Client/app/trading/components/group-functions/group-function-warning/group-function-warning.component.ts");
/* harmony import */ var _edition_matrix_edition_matrix_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./edition-matrix/edition-matrix.component */ "./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/edition-matrix.component.ts");
/* harmony import */ var _trade_bulk_fields_trade_bulk_fields_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./trade-bulk-fields/trade-bulk-fields.component */ "./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-fields/trade-bulk-fields.component.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






















var TradeBulkEditComponent = /** @class */ (function (_super) {
    __extends(TradeBulkEditComponent, _super);
    function TradeBulkEditComponent(formConfigurationProvider, formBuilder, route, dialog, router, companyManager, lockService, tradingService, tradeEditService, snackbarService, tradeActionService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.formBuilder = formBuilder;
        _this.route = route;
        _this.dialog = dialog;
        _this.router = router;
        _this.companyManager = companyManager;
        _this.lockService = lockService;
        _this.tradingService = tradingService;
        _this.tradeEditService = tradeEditService;
        _this.snackbarService = snackbarService;
        _this.tradeActionService = tradeActionService;
        _this.formComponents = [];
        _this.tradeFieldList = [];
        _this.isContractsNextDisabled = true;
        _this.currentStep = 0;
        _this.noErrorMessage = 'noError';
        _this.selectedSectionIds = [];
        _this.selectedFieldsToEdit = [];
        _this.unlocking = [];
        // Additional Editable Columns in Edition Matrix Grid
        _this.departmentDescriptionColumn = 'departmentDescription';
        _this.buyerDescriptionColumn = 'buyerDescription';
        _this.sellerDescriptionColumn = 'sellerDescription';
        _this.commodityColumn = ['commodity2', 'commodity3', 'commodity4', 'commodity5'];
        _this.contractTermDescriptionColumn = 'contractTermDescription';
        _this.arbitrationDescriptionColumn = 'arbitrationDescription';
        _this.currencyDescriptionColumn = 'currencyDescription';
        _this.businessSectorDescription = 'businessSectorDescription';
        return _this;
    }
    TradeBulkEditComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
        this.bulkEditionFormGroup = this.formBuilder.group({
            contractSelection: this.contractSelection.getFormGroup(),
            editionMatrix: this.editionMatrix.getFormGroup(),
            summaryGrid: this.summaryGrid.getFormGroup(),
        });
        this.formComponents.push(this.contractSelection, this.editionMatrix, this.summaryGrid);
    };
    TradeBulkEditComponent.prototype.onChangeStepAction = function (event) {
        this.currentStep = event.selectedIndex;
    };
    TradeBulkEditComponent.prototype.isContractSelected = function (contractSelected) {
        this.isContractsNextDisabled = !contractSelected;
    };
    TradeBulkEditComponent.prototype.onContractSelectionNextButtonClicked = function () {
        this.editionMatrix.lockedContracts = this.contractSelection.lockedContracts;
        this.contractsSelected(this.isEditButtonClicked = false);
        this.stepper.next();
    };
    TradeBulkEditComponent.prototype.contractsSelected = function (buttonClicked) {
        var _this = this;
        this.isEditButtonClicked = buttonClicked;
        var selectedContracts = this.contractSelection.selectedContractsForBulkFunctions;
        var privileges = this.tradeActionService.getTradePropertyPrivileges();
        this.privileges = privileges;
        this.selectedSectionIds = [];
        selectedContracts.forEach(function (element) {
            _this.selectedSectionIds.push(element.sectionId);
        });
        if (this.selectedSectionIds) {
            this.fetchingInProgress = false;
            this.subscriptions.push(this.tradingService.getTradesForBulkEdit(this.selectedSectionIds)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["catchError"])(function (error) {
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["throwError"])(error);
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["finalize"])(function () {
                _this.fetchingInProgress = true;
            })).subscribe(function (data) {
                if (data) {
                    _this.selectedContractsForBulkFunctions = data.value;
                    if (_this.isEditButtonClicked) {
                        _this.afterContractsFetched();
                    }
                }
            }));
        }
    };
    TradeBulkEditComponent.prototype.getSelectedFieldsToEdit = function (selectedFields) {
        this.tradeFieldList = selectedFields;
    };
    TradeBulkEditComponent.prototype.onFieldSelectionNextButtonClicked = function () {
        this.populateEditableColumns();
        this.checkAdditionalFieldsSelected();
        this.editionMatrix.selectedContractsToEdit(false, this.selectedContractsForBulkFunctions, this.privileges);
        this.editionMatrix.gridColumnApi.setColumnsVisible(this.selectedFieldsToEdit, true);
        this.editionMatrix.gridColumnApi.setColumnVisible('rowStatus', true);
        this.summaryGrid.gridColumnApi.setColumnsVisible(this.selectedFieldsToEdit, true);
        this.isDescriptionColumnsVisible();
        this.stepper.next();
    };
    TradeBulkEditComponent.prototype.populateEditableColumns = function () {
        this.tradeFieldList = this.tradeFieldList.filter(function (e) { return e.isChecked === true; });
        var selectedFieldRows = this.tradeFieldList;
        this.selectedFieldsToEdit = [];
        this.selectedFieldsToEdit = selectedFieldRows.map(function (row) { return row.bulkEditFieldName; });
    };
    TradeBulkEditComponent.prototype.checkAdditionalFieldsSelected = function () {
        var departmentColumn = this.tradeFieldList.find(function (e) { return e.bulkEditFieldName === _shared_enums_trade_bulk_edit_fields_enum__WEBPACK_IMPORTED_MODULE_11__["TradeBulkEditFields"].DepartmentId; });
        this.isDepartmentselected = (departmentColumn) ? departmentColumn.isChecked : false;
        var buyerColumn = this.tradeFieldList.find(function (e) { return e.bulkEditFieldName === _shared_enums_trade_bulk_edit_fields_enum__WEBPACK_IMPORTED_MODULE_11__["TradeBulkEditFields"].BuyerId; });
        this.isBuyerSelected = (buyerColumn) ? buyerColumn.isChecked : false;
        var sellerColumn = this.tradeFieldList.find(function (e) { return e.bulkEditFieldName === _shared_enums_trade_bulk_edit_fields_enum__WEBPACK_IMPORTED_MODULE_11__["TradeBulkEditFields"].SellerId; });
        this.isSellerSelected = (sellerColumn) ? sellerColumn.isChecked : false;
        var commodityColumn = this.tradeFieldList.find(function (e) { return e.bulkEditFieldName === _shared_enums_trade_bulk_edit_fields_enum__WEBPACK_IMPORTED_MODULE_11__["TradeBulkEditFields"].CommodityId; });
        this.isCommoditySelected = (commodityColumn) ? commodityColumn.isChecked : false;
        var contractTermColumn = this.tradeFieldList.find(function (e) { return e.bulkEditFieldName === _shared_enums_trade_bulk_edit_fields_enum__WEBPACK_IMPORTED_MODULE_11__["TradeBulkEditFields"].ContractTermId; });
        this.isContractTermSelected = (contractTermColumn) ? contractTermColumn.isChecked : false;
        var arbitrationColumn = this.tradeFieldList.find(function (e) { return e.bulkEditFieldName === _shared_enums_trade_bulk_edit_fields_enum__WEBPACK_IMPORTED_MODULE_11__["TradeBulkEditFields"].ArbitrationId; });
        this.isArbitrationSelected = (arbitrationColumn) ? arbitrationColumn.isChecked : false;
        var currencyColumn = this.tradeFieldList.find(function (e) { return e.bulkEditFieldName === _shared_enums_trade_bulk_edit_fields_enum__WEBPACK_IMPORTED_MODULE_11__["TradeBulkEditFields"].CurrencyCode; });
        this.isCurrencySelected = (currencyColumn) ? currencyColumn.isChecked : false;
        var businessSectorColumn = this.tradeFieldList.find(function (e) { return e.bulkEditFieldName === _shared_enums_trade_bulk_edit_fields_enum__WEBPACK_IMPORTED_MODULE_11__["TradeBulkEditFields"].MarketSectorId; });
        this.isbusinessSectorSelected = (businessSectorColumn) ? businessSectorColumn.isChecked : false;
        var approvalStatus = this.tradeFieldList.find(function (e) { return e.unapproval === _shared_enums_trade_approval_status_enum__WEBPACK_IMPORTED_MODULE_10__["TradeApprovalStatus"].ApprovedStatus; });
        this.isStatusApproved = approvalStatus ? true : false;
    };
    TradeBulkEditComponent.prototype.isDescriptionColumnsVisible = function () {
        // for the edition matrix step
        this.editionMatrix.gridColumnApi.setColumnVisible(this.departmentDescriptionColumn, this.isDepartmentselected);
        this.editionMatrix.gridColumnApi.setColumnVisible(this.buyerDescriptionColumn, this.isBuyerSelected);
        this.editionMatrix.gridColumnApi.setColumnVisible(this.sellerDescriptionColumn, this.isSellerSelected);
        this.editionMatrix.gridColumnApi.setColumnsVisible(this.commodityColumn, this.isCommoditySelected);
        this.editionMatrix.gridColumnApi.setColumnVisible(this.contractTermDescriptionColumn, this.isContractTermSelected);
        this.editionMatrix.gridColumnApi.setColumnVisible(this.arbitrationDescriptionColumn, this.isArbitrationSelected);
        this.editionMatrix.gridColumnApi.setColumnVisible(this.currencyDescriptionColumn, this.isCurrencySelected);
        this.editionMatrix.gridColumnApi.setColumnVisible(this.businessSectorDescription, this.isbusinessSectorSelected);
        // for the summary step
        this.summaryGrid.gridColumnApi.setColumnVisible(this.departmentDescriptionColumn, this.isDepartmentselected);
        this.summaryGrid.gridColumnApi.setColumnVisible(this.buyerDescriptionColumn, this.isBuyerSelected);
        this.summaryGrid.gridColumnApi.setColumnVisible(this.sellerDescriptionColumn, this.isSellerSelected);
        this.summaryGrid.gridColumnApi.setColumnsVisible(this.commodityColumn, this.isCommoditySelected);
        this.summaryGrid.gridColumnApi.setColumnVisible(this.contractTermDescriptionColumn, this.isContractTermSelected);
        this.summaryGrid.gridColumnApi.setColumnVisible(this.arbitrationDescriptionColumn, this.isArbitrationSelected);
        this.summaryGrid.gridColumnApi.setColumnVisible(this.currencyDescriptionColumn, this.isCurrencySelected);
        this.summaryGrid.gridColumnApi.setColumnVisible(this.businessSectorDescription, this.isbusinessSectorSelected);
    };
    TradeBulkEditComponent.prototype.onFieldSelectionPreviousButtonClicked = function () {
        this.stepper.previous();
    };
    TradeBulkEditComponent.prototype.onEditionMatrixPreviousButtonClicked = function () {
        this.editionMatrix.gridColumnApi.setColumnsVisible(this.selectedFieldsToEdit, false);
        this.summaryGrid.gridColumnApi.setColumnsVisible(this.selectedFieldsToEdit, false);
        this.isDescriptionColumnsVisible();
        this.stepper.previous();
    };
    TradeBulkEditComponent.prototype.onBulkEditionSaveButtonClicked = function () {
        var _this = this;
        this.editionMatrix.onSaveButtonClicked();
        if (this.errorMessage !== '') {
            if (this.errorMessage !== this.noErrorMessage) {
                this.snackbarService.throwErrorSnackBar(this.errorMessage);
            }
            else {
                this.isSaveInProgress = true;
                this.getApprovalStatus();
                this.updatedContracts = this.editionMatrix.getGridData();
                this.updatedContracts.sectionToUpdate[0].contractStatusCode = Number(this.approvalStatus);
                this.subscriptions.push(this.tradingService.PhysicalTradeBulkEdit(this.updatedContracts)
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["catchError"])(function (error) {
                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["throwError"])(error);
                }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["finalize"])(function () {
                    _this.isSaveInProgress = false;
                })).subscribe(function () {
                    _this.afterContractsUpdated();
                }));
            }
        }
        else {
            this.snackbarService.informationSnackBar('Please Update any one grid row');
        }
    };
    TradeBulkEditComponent.prototype.getApprovalStatus = function () {
        if (this.isStatusApproved) {
            this.approvalStatus = this.editionMatrix.isValueChanged ? false : true;
        }
    };
    TradeBulkEditComponent.prototype.afterContractsUpdated = function () {
        var updatedContractRows = this.editionMatrix.updatedContractRows;
        if (this.isStatusApproved) {
            updatedContractRows[0].status = this.editionMatrix.isValueChanged ?
                _shared_enums_trade_approval_status_enum__WEBPACK_IMPORTED_MODULE_10__["TradeApprovalStatus"].Unapproved : _shared_enums_trade_approval_status_enum__WEBPACK_IMPORTED_MODULE_10__["TradeApprovalStatus"].Approved;
        }
        this.summaryGrid.selectedContractsToEdit(true, updatedContractRows, this.privileges);
        this.summaryGrid.gridColumnApi.setColumnVisible('rowStatus', false);
        this.editionMatrix.isValueChanged = false;
        this.stepper.next();
    };
    TradeBulkEditComponent.prototype.afterContractsFetched = function () {
        this.editionMatrix.selectedContractsToEdit(false, this.selectedContractsForBulkFunctions, this.privileges);
        this.stepper.previous();
    };
    TradeBulkEditComponent.prototype.saveBlockingMessage = function (message) {
        this.errorMessage = message;
    };
    TradeBulkEditComponent.prototype.onSummaryEditButtonClicked = function () {
        this.contractsSelected(this.isEditButtonClicked = true);
        this.editionMatrix.gridColumnApi.setColumnVisible('rowStatus', true);
    };
    TradeBulkEditComponent.prototype.onContractSelectionDiscardButtonClicked = function () {
        if (this.isContractsNextDisabled) {
            this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);
        }
        else {
            this.discardButtonDialog();
        }
    };
    TradeBulkEditComponent.prototype.onCloseButtonClicked = function () {
        var _this = this;
        var _loop_1 = function (i) {
            var sectionId = this_1.selectedSectionIds[i];
            this_1.subscriptions.push(this_1.lockService.unlockContract(sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_9__["LockFunctionalContext"].BulkEdition)
                .subscribe(function () {
                _this.selectedSectionIds = _this.selectedSectionIds.filter(function (id) { return id !== sectionId; });
            }));
        };
        var this_1 = this;
        for (var i = 0; i < this.selectedSectionIds.length; i++) {
            _loop_1(i);
        }
        this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades/groupfunctions']);
    };
    TradeBulkEditComponent.prototype.ngOnDestroy = function () {
        if (this.getTradesForSubscription) {
            this.getTradesForSubscription.unsubscribe();
        }
    };
    TradeBulkEditComponent.prototype.onFieldSelectionDiscardButtonClicked = function () {
        this.discardButtonDialog();
    };
    TradeBulkEditComponent.prototype.onEditionMatrixDiscardButtonClicked = function () {
        this.discardButtonDialog();
    };
    TradeBulkEditComponent.prototype.discardButtonDialog = function () {
        var _this = this;
        var confirmDiscardDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_8__["ConfirmationDialogComponent"], {
            data: {
                title: 'Discard Changes',
                text: 'You have some modification pending. Close and lose changes?',
                okButton: 'Ok',
                cancelButton: 'Cancel',
            },
        });
        confirmDiscardDialog.afterClosed().subscribe(function (answer) {
            if (answer) {
                _this.router.navigate(['/' + _this.companyManager.getCurrentCompanyId() + '/trades']);
            }
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('stepper'),
        __metadata("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatStepper"])
    ], TradeBulkEditComponent.prototype, "stepper", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('contractSelection'),
        __metadata("design:type", _group_function_contracts_group_function_contracts_component__WEBPACK_IMPORTED_MODULE_18__["GroupFunctionContractsComponent"])
    ], TradeBulkEditComponent.prototype, "contractSelection", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('groupFunctionWarning'),
        __metadata("design:type", _group_function_warning_group_function_warning_component__WEBPACK_IMPORTED_MODULE_19__["GroupFunctionWarningComponent"])
    ], TradeBulkEditComponent.prototype, "groupFunctionWarning", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('editionMatrix'),
        __metadata("design:type", _edition_matrix_edition_matrix_component__WEBPACK_IMPORTED_MODULE_20__["EditionMatrixComponent"])
    ], TradeBulkEditComponent.prototype, "editionMatrix", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('tradeBulkFields'),
        __metadata("design:type", _trade_bulk_fields_trade_bulk_fields_component__WEBPACK_IMPORTED_MODULE_21__["TradeBulkFieldsComponent"])
    ], TradeBulkEditComponent.prototype, "tradeBulkFields", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('summaryGrid'),
        __metadata("design:type", _edition_matrix_edition_matrix_component__WEBPACK_IMPORTED_MODULE_20__["EditionMatrixComponent"])
    ], TradeBulkEditComponent.prototype, "summaryGrid", void 0);
    TradeBulkEditComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-trade-bulk-edit',
            template: __webpack_require__(/*! ./trade-bulk-edit.component.html */ "./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-edit.component.html"),
            styles: [__webpack_require__(/*! ./trade-bulk-edit.component.scss */ "./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-edit.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_12__["FormConfigurationProviderService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"],
            _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialog"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_6__["CompanyManagerService"],
            _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_13__["LockService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_14__["TradingService"],
            _shared_services_trade_edit_service__WEBPACK_IMPORTED_MODULE_16__["TradeEditService"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_15__["SnackbarService"],
            _services_trade_actions_service__WEBPACK_IMPORTED_MODULE_17__["TradeActionsService"]])
    ], TradeBulkEditComponent);
    return TradeBulkEditComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_7__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-fields/trade-bulk-fields.component.html":
/*!**************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-fields/trade-bulk-fields.component.html ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"main-container\"\r\n     fxLayout=\"column\"\r\n     fxLayoutAlign=\"start none\">\r\n    <mat-card>\r\n        <form [formGroup]=\"searchFieldForm\">\r\n            <div fxLayout=\"row\"\r\n                 fxLayoutAlign=\"start none\"\r\n                 class=\"search\">\r\n                <mat-form-field>\r\n                    <input specialIsAlphaNumeric\r\n                           matInput\r\n                           (keydown.enter)=\"onSearchFields()\"\r\n                           (keyup.backspace)=\"onSearchFields()\"\r\n                           placeholder=\"Field Name\"\r\n                           formControlName=\"searchFieldCtrl\" />\r\n                </mat-form-field>\r\n                <button mat-raised-button\r\n                        (click)=\"onSearchFields()\"\r\n                        class=\"heroGradient\">\r\n                    <mat-icon aria-label=\"Search\"\r\n                              class=\"search-icon\">search</mat-icon>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    </mat-card>\r\n    <div>\r\n        <button mat-button\r\n                (click)=\"onTickButtonClicked()\">\r\n            TICK\r\n        </button>\r\n        <button mat-button\r\n                (click)=\"onUntickButtonClicked()\">\r\n            UNTICK\r\n        </button>\r\n    </div>\r\n    <mat-card>\r\n        <mat-card-content>\r\n            <div fxLayout=\"row wrap\"\r\n                 fxLayoutAlign=\"space-around start\">\r\n                <div fxLayout=\"column\"\r\n                     fxLayoutAlign=\"start left\"\r\n                     fxFlex=\"18\"\r\n                     *ngFor=\"let fields of tradeBulkFieldList1\">\r\n                    <mat-card class=\"active-card field-container\">\r\n                        <mat-card-title>\r\n                            <h2 class=\"no-margin\"> {{fields[0].tradeFieldHeader}}</h2>\r\n                        </mat-card-title>\r\n                        <div *ngFor=\"let field of fields\">\r\n                            <mat-checkbox #bulkEditFieldSelectionctrl\r\n                                          [formControl]=\"tradeBulkEditFieldCtrl\"\r\n                                          [value]=\"field.fieldName\"\r\n                                          [checked]=\"isFieldSelected\"\r\n                                          (change)=\"onSelectionChanged(bulkEditFieldSelectionctrl.checked, field.fieldId, field.fieldName)\">\r\n                                {{field.friendlyName}}\r\n                            </mat-checkbox>\r\n                        </div>\r\n                    </mat-card>\r\n                </div>\r\n            </div>\r\n        </mat-card-content>\r\n    </mat-card>\r\n    <mat-card>\r\n        <mat-card-content>\r\n            <div fxLayout=\"row wrap\"\r\n                 fxLayoutAlign=\"space-around start\">\r\n                <div fxLayout=\"column\"\r\n                     fxLayoutAlign=\"start left\"\r\n                     fxFlex=\"18\"\r\n                     *ngFor=\"let fields of tradeBulkFieldList2\">\r\n                    <mat-card class=\"active-card field-container\">\r\n                        <mat-card-title>\r\n                            <h2 class=\"no-margin\"> {{fields[0].tradeFieldHeader}}</h2>\r\n                        </mat-card-title>\r\n                        <div *ngFor=\"let field of fields\">\r\n                            <mat-checkbox #bulkEditFieldSelectionctrl\r\n                                          [value]=\"field.fieldName\"\r\n                                          [formControl]=\"tradeBulkEditFieldCtrl\"\r\n                                          [checked]=\"isFieldSelected\"\r\n                                          (change)=\"onSelectionChanged(bulkEditFieldSelectionctrl.checked, field.fieldId, field.fieldName)\">\r\n                                {{field.friendlyName}}\r\n                            </mat-checkbox>\r\n                        </div>\r\n                    </mat-card>\r\n                </div>\r\n            </div>\r\n        </mat-card-content>\r\n    </mat-card>\r\n    <mat-card>\r\n        <mat-card-content>\r\n            <div fxLayout=\"row\"\r\n                 fxLayoutAlign=\"start\">\r\n                <div fxLayout.xs=\"column\"\r\n                     fxLayoutAlign=\"space-between\"\r\n                     fxLayoutGap=\"5px\"\r\n                     fxLayoutGap.sm=\"10\"\r\n                     fxFlex=\"21\"\r\n                     *ngFor=\"let fields of tradeBulkFieldList3\">\r\n                    <mat-card class=\"active-card list3-field-container\">\r\n                        <mat-card-title>\r\n                            <h2 class=\"no-margin\"> {{fields[0].tradeFieldHeader}}</h2>\r\n                        </mat-card-title>\r\n                        <div *ngFor=\"let field of fields\">\r\n                            <mat-checkbox #bulkEditFieldSelectionctrl\r\n                                          [value]=\"field.fieldName\"\r\n                                          [formControl]=\"tradeBulkEditFieldCtrl\"\r\n                                          [checked]=\"isFieldSelected\"\r\n                                          (change)=\"onSelectionChanged(bulkEditFieldSelectionctrl.checked, field.fieldId, field.fieldName)\">\r\n                                {{field.friendlyName}}\r\n                            </mat-checkbox>\r\n                        </div>\r\n                    </mat-card>\r\n                </div>\r\n            </div>\r\n        </mat-card-content>\r\n    </mat-card>\r\n</div>"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-fields/trade-bulk-fields.component.scss":
/*!**************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-fields/trade-bulk-fields.component.scss ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".field-container {\n  height: 140px; }\n\n.list3-field-container {\n  height: 270px; }\n"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-fields/trade-bulk-fields.component.ts":
/*!************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-fields/trade-bulk-fields.component.ts ***!
  \************************************************************************************************************************/
/*! exports provided: TradeBulkFieldsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeBulkFieldsComponent", function() { return TradeBulkFieldsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_enums_trade_bulk_edit_fields_enum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/enums/trade-bulk-edit-fields.enum */ "./Client/app/shared/enums/trade-bulk-edit-fields.enum.ts");
/* harmony import */ var _shared_enums_trade_field_header_bulk_edit_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/enums/trade-field-header-bulk-edit.enum */ "./Client/app/shared/enums/trade-field-header-bulk-edit.enum.ts");
/* harmony import */ var _shared_numberMask__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/numberMask */ "./Client/app/shared/numberMask.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};










var TradeBulkFieldsComponent = /** @class */ (function (_super) {
    __extends(TradeBulkFieldsComponent, _super);
    function TradeBulkFieldsComponent(formConfigurationProvider, tradingService, formBuilder, route) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.tradingService = tradingService;
        _this.formBuilder = formBuilder;
        _this.route = route;
        _this.selectedFieldsToEdit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.bulkEditFieldSearchList = [];
        _this.tradeBulkEditFieldCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_4__["AtlasFormControl"]('TradeBulkEditField');
        _this.tradeBulkEditFieldList = [];
        _this.tradeBulkFieldList1 = [];
        _this.tradeBulkFieldList2 = [];
        _this.tradeBulkFieldList3 = [];
        _this.tradeBulkFieldSearchList = [];
        _this.subscription = [];
        _this.isFieldSelected = false;
        _this.tradeFieldList = [];
        _this.BulkEditFieldSearchResult = [];
        _this.searchFieldForm = _this.formBuilder.group({
            searchFieldCtrl: [''],
        });
        return _this;
    }
    TradeBulkFieldsComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
        this.populateTradeFieldList();
    };
    TradeBulkFieldsComponent.prototype.populateTradeFieldList = function () {
        var _this = this;
        this.subscription.push(this.tradingService.getTradeFieldsForBulkEdit()
            .subscribe(function (data) {
            if (data) {
                _this.tradeFieldList = data.value;
                _this.bulkEditFieldSearchList = data.value;
                _this.tradeFieldList = _this.tradeFieldList.map(function (filter) {
                    return {
                        tradeFieldHeader: filter.tradeFieldHeader,
                        fieldName: filter.fieldName,
                        fieldId: filter.fieldId,
                        tradeFieldHeaderId: filter.tradeFieldHeaderId,
                        mandatory: filter.mandatory,
                        friendlyName: filter.friendlyName,
                        isChecked: filter.isChecked,
                        bulkEditFieldName: _shared_enums_trade_bulk_edit_fields_enum__WEBPACK_IMPORTED_MODULE_5__["TradeBulkEditFields"][filter.fieldName],
                        unapproval: filter.unapproval,
                    };
                });
                _this.populateTradeFieldSubList();
            }
        }));
    };
    TradeBulkFieldsComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            tradeBulkEditFieldCtrl: this.tradeBulkEditFieldCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    TradeBulkFieldsComponent.prototype.onSearchFields = function () {
        var _this = this;
        this.searchField = this.searchFieldForm.get('searchFieldCtrl').value;
        if (this.searchField) {
            this.tradeBulkFieldSearchList = this.bulkEditFieldSearchList.filter(function (item) { return item.fieldName != null; });
            this.BulkEditFieldSearchResult = this.bulkEditFieldSearchList.filter(function (item) {
                return item.fieldName.toString().toUpperCase().includes(_this.searchField.toUpperCase());
            });
            this.clearBulkEditSearchList();
            this.tradeFieldList = this.BulkEditFieldSearchResult;
            this.populateTradeFieldSubList();
        }
        else {
            this.clearBulkEditSearchList();
            this.tradeFieldList = this.bulkEditFieldSearchList;
            this.populateTradeFieldSubList();
        }
    };
    TradeBulkFieldsComponent.prototype.populateTradeFieldSubList = function () {
        var _this = this;
        if (this.tradeFieldList) {
            for (var item in _shared_enums_trade_field_header_bulk_edit_enum__WEBPACK_IMPORTED_MODULE_6__["TradeFieldHeader"]) {
                if (Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_7__["ConvertToNumber"])(item)) {
                    this.headerId = Number(item);
                    this.tradeBulkEditFieldList = [];
                    this.tradeBulkEditFieldList = this.tradeFieldList.filter(function (x) { return x.tradeFieldHeaderId === _this.headerId; });
                    if (this.tradeBulkEditFieldList && this.tradeBulkEditFieldList.length > 0) {
                        if (this.headerId <= _shared_enums_trade_field_header_bulk_edit_enum__WEBPACK_IMPORTED_MODULE_6__["TradeFieldHeader"].ShipmentPeriod) {
                            this.tradeBulkFieldList1.push(this.tradeBulkEditFieldList);
                        }
                        else if (this.headerId <= _shared_enums_trade_field_header_bulk_edit_enum__WEBPACK_IMPORTED_MODULE_6__["TradeFieldHeader"].InternalMemorandum) {
                            this.tradeBulkFieldList2.push(this.tradeBulkEditFieldList);
                        }
                        else {
                            this.tradeBulkFieldList3.push(this.tradeBulkEditFieldList);
                        }
                    }
                }
            }
        }
    };
    TradeBulkFieldsComponent.prototype.clearBulkEditSearchList = function () {
        this.tradeFieldList = [];
        this.tradeBulkFieldList1 = [];
        this.tradeBulkFieldList2 = [];
        this.tradeBulkFieldList3 = [];
    };
    TradeBulkFieldsComponent.prototype.onTickButtonClicked = function () {
        this.tradeFieldList.forEach(function (e) { return e.isChecked = true; });
        this.selectedFieldsToEdit.emit(this.tradeFieldList);
        this.isFieldSelected = true;
    };
    TradeBulkFieldsComponent.prototype.onSelectionChanged = function (isChecked, fieldId, fieldName) {
        this.tradeFieldList.forEach(function (e) {
            if (e.fieldName === fieldName) {
                e.isChecked = isChecked;
            }
        });
        this.selectedFieldsToEdit.emit(this.tradeFieldList);
    };
    TradeBulkFieldsComponent.prototype.onUntickButtonClicked = function () {
        this.tradeFieldList.forEach(function (e) { return e.isChecked = false; });
        this.selectedFieldsToEdit.emit(this.tradeFieldList);
        this.isFieldSelected = false;
    };
    TradeBulkFieldsComponent.prototype.ngOnDestroy = function () {
        this.subscription.forEach(function (subscription) {
            if (subscription) {
                subscription.unsubscribe();
            }
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], TradeBulkFieldsComponent.prototype, "selectedFieldsToEdit", void 0);
    TradeBulkFieldsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-trade-bulk-fields',
            template: __webpack_require__(/*! ./trade-bulk-fields.component.html */ "./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-fields/trade-bulk-fields.component.html"),
            styles: [__webpack_require__(/*! ./trade-bulk-fields.component.scss */ "./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-fields/trade-bulk-fields.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_8__["FormConfigurationProviderService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_9__["TradingService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"]])
    ], TradeBulkFieldsComponent);
    return TradeBulkFieldsComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/cost-bulk-update-summary/cost-bulk-update-summary.component.html":
/*!***********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-cost-bulk-update/cost-bulk-update-summary/cost-bulk-update-summary.component.html ***!
  \***********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"center center\"\r\n             fxLayoutWrap\r\n             *ngIf=\"isLoading\"\r\n             class=\"loading\">\r\n            <mat-spinner color=\"accent\"></mat-spinner>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayout.xs=\"column\"\r\n             fxLayoutAlign=\"space-between left\"\r\n             fxLayoutWrap\r\n             fxLayoutGap=\"20px\"\r\n             class=\"atlas-grid-card-header\">\r\n            <h2 class=\"atlas-grid-card-title\">Costs List</h2>\r\n            <atlas-ag-grid-user-preferences *ngIf=\"costContractSummaryGridOptions && costContractSummaryGridOptions.columnDefs\"\r\n                                            [gridOptions]=\"costContractSummaryGridOptions\"\r\n                                            [company]=\"company\"\r\n                                            [gridId]=\"componentId\"\r\n                                            [sharingEnabled]=\"hasGridSharing\"\r\n                                            #userPreferences>\r\n            </atlas-ag-grid-user-preferences>\r\n        </div>\r\n        <div ag-grid=\"costContractSummeryGridOptions\"\r\n             class=\"costContractsBulkEdit\"\r\n             style=\"width: 100%; height:100%\">\r\n            <ag-grid-angular style=\" height:100%;\"\r\n                             class=\"ag-theme-material\"\r\n                             [gridOptions]=\"costContractSummaryGridOptions\"\r\n                             [rowData]=\"costContractSummaryGridRows\"\r\n                             [columnDefs]=\"costContractSummaryGridColumns\"\r\n                             domLayout=\"autoHeight\"\r\n                             (gridReady)=\"onGridReady($event)\"\r\n                             [pagination]=\"true\"\r\n                             [paginationPageSize]=\"10\"\r\n                             [enableSorting]=\"true\"\r\n                             [enableColResize]=\"true\"\r\n                             rowSelection=\"multiple\"\r\n                             rowMultiSelectWithClick=true\r\n                             enableFilter\r\n                             [rowHeight]=atlasAgGridParam.rowHeight\r\n                             [singleClickEdit]=true\r\n                             [frameworkComponents]=\"gridComponents\">\r\n            </ag-grid-angular>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/cost-bulk-update-summary/cost-bulk-update-summary.component.scss":
/*!***********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-cost-bulk-update/cost-bulk-update-summary/cost-bulk-update-summary.component.scss ***!
  \***********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".mat-card {\n  margin: 8px 0 16px 0 !important; }\n"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/cost-bulk-update-summary/cost-bulk-update-summary.component.ts":
/*!*********************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-cost-bulk-update/cost-bulk-update-summary/cost-bulk-update-summary.component.ts ***!
  \*********************************************************************************************************************************************/
/*! exports provided: CostBulkUpdateSummaryComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CostBulkUpdateSummaryComponent", function() { return CostBulkUpdateSummaryComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_components_ag_contextual_menu_ag_contextual_menu_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component */ "./Client/app/shared/components/ag-contextual-menu/ag-contextual-menu.component.ts");
/* harmony import */ var _shared_components_ag_grid_checkbox_ag_grid_checkbox_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component */ "./Client/app/shared/components/ag-grid-checkbox/ag-grid-checkbox.component.ts");
/* harmony import */ var _shared_components_ag_grid_user_preferences_ag_grid_user_preferences_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component */ "./Client/app/shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component.ts");
/* harmony import */ var _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component */ "./Client/app/shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component.ts");
/* harmony import */ var _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/enums/cost-direction.enum */ "./Client/app/shared/enums/cost-direction.enum.ts");
/* harmony import */ var _shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/enums/invoice-type.enum */ "./Client/app/shared/enums/invoice-type.enum.ts");
/* harmony import */ var _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/enums/permission-level.enum */ "./Client/app/shared/enums/permission-level.enum.ts");
/* harmony import */ var _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/enums/rate-type.enum */ "./Client/app/shared/enums/rate-type.enum.ts");
/* harmony import */ var _shared_numberMask__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/numberMask */ "./Client/app/shared/numberMask.ts");
/* harmony import */ var _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/services/ag-grid.service */ "./Client/app/shared/services/ag-grid.service.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

















var CostBulkUpdateSummaryComponent = /** @class */ (function () {
    function CostBulkUpdateSummaryComponent(masterDataService, route, formBuilder, formConfigurationProvider, tradingService, router, gridService, authorizationService) {
        this.masterDataService = masterDataService;
        this.route = route;
        this.formBuilder = formBuilder;
        this.formConfigurationProvider = formConfigurationProvider;
        this.tradingService = tradingService;
        this.router = router;
        this.gridService = gridService;
        this.authorizationService = authorizationService;
        this.gridContext = {
            gridEditable: true,
            componentParent: this,
            editPrivileges: true,
            deletePrivileges: true,
            inPNLPrivileges: true,
        };
        this.costsSummaryMenuActions = {
            invoiceCost: 'invoice',
        };
        this.gridComponents = {
            atlasCheckbox: _shared_components_ag_grid_checkbox_ag_grid_checkbox_component__WEBPACK_IMPORTED_MODULE_5__["AgGridCheckboxComponent"],
        };
        this.invoicePrivilege = {
            profileId: null,
            privilegeName: 'Invoice',
            permission: _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_10__["PermissionLevels"].ReadWrite,
            privilegeParentLevelOne: 'Invoices',
            privilegeParentLevelTwo: 'InvoiceCreation',
        };
        this.costContractSummaryGridOptions = {};
        this.componentId = 'UpdateBulkCostsSummaryGrid';
        this.hasGridSharing = false;
    }
    CostBulkUpdateSummaryComponent.prototype.ngOnInit = function () {
        this.masterdata = this.route.snapshot.data.masterdata;
        this.atlasAgGridParam = this.gridService.getAgGridParam();
        this.company = this.route.snapshot.paramMap.get('company');
        this.gridContext.gridEditable = this.checkIfUserHasRequiredPrivileges(this.invoicePrivilege);
        this.init();
        this.rateTypes = [
            {
                code: _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_11__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_11__["RateTypes"].Rate],
                description: '',
            },
            {
                code: _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_11__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_11__["RateTypes"].Amount],
                description: '',
            },
            {
                code: _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_11__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_11__["RateTypes"].Percent],
                description: '',
            },
        ];
        this.costDirections = [
            {
                costDirectionId: _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_8__["CostDirections"].Payable,
                costDirection: 'Pay',
            },
            {
                costDirectionId: _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_8__["CostDirections"].Receivable,
                costDirection: 'Receive',
            },
        ];
        this.initializeGridColumns();
    };
    CostBulkUpdateSummaryComponent.prototype.init = function () {
        this.costSummaryGridContextualMenuActions = [
            {
                icon: '',
                text: 'Invoice',
                action: this.costsSummaryMenuActions.invoiceCost,
            },
        ];
    };
    CostBulkUpdateSummaryComponent.prototype.onGridReady = function (params) {
        var _this = this;
        this.gridApi = params.api;
        params.columnDefs = this.costContractSummaryGridColumns;
        this.costContractSummaryGridOptions = params;
        this.gridColumnApi = params.columnApi;
        this.gridColumnApi.autoSizeAllColumns();
        window.onresize = function () {
            _this.gridColumnApi.autoSizeAllColumns();
        };
        this.gridApi.showNoRowsOverlay();
        this.autoSizeContractsGrid();
    };
    CostBulkUpdateSummaryComponent.prototype.autoSizeContractsGrid = function () {
        if (this.gridColumnApi !== undefined) {
            var allColumnIds_1 = [];
            if (this.costContractSummaryGridColumns) {
                this.costContractSummaryGridColumns.forEach(function (columnDefs) {
                    allColumnIds_1.push(columnDefs.field);
                });
            }
            this.gridColumnApi.autoSizeColumns(allColumnIds_1);
        }
    };
    CostBulkUpdateSummaryComponent.prototype.initializeGridColumns = function () {
        var _this = this;
        this.costContractSummaryGridOptions = {
            context: this.gridContext,
            getRowStyle: this.isCostInvoicedRowStyle.bind(this),
            isRowSelectable: this.isCostInvoiced.bind(this),
        };
        this.costContractSummaryGridColumns = [
            {
                width: 50,
                minWidth: 50,
                maxWidth: 50,
                headerCheckboxSelection: true,
                checkboxSelection: true,
                pinned: 'left',
            },
            {
                headerName: 'Status',
                colId: 'rowStatus',
                field: 'rowStatus',
                width: 100,
                minWidth: 100,
                maxWidth: 100,
                cellRenderer: function (params) {
                    if (params.value) {
                        return '<mat-chip-list><mat-chip class="status-flag-chip">' + params.value + '</mat-chip></mat-chip-list>';
                    }
                    return '';
                },
                pinned: 'left',
            },
            {
                headerName: 'contract Reference',
                field: 'contractReference',
                colId: 'contractReference',
                hide: false,
                editable: false,
            },
            {
                headerName: 'Cost type*',
                field: 'costTypeCode',
                colId: 'costTypeCode',
                cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                cellRendererParams: function () {
                    return {
                        options: _this.masterdata.costTypes.filter(function (cost) { return cost.isATradeCost === true; })
                            .sort(function (a, b) { return a.costTypeCode.localeCompare(b.costTypeCode); }),
                        valueProperty: 'costTypeCode',
                        codeProperty: 'costTypeCode',
                        displayProperty: 'costTypeCode',
                    };
                },
            },
            {
                headerName: 'Description',
                field: 'description',
                colId: 'description',
            },
            {
                headerName: 'Matrix Name',
                field: 'costMatrixName',
                colId: 'costMatrixName',
                hide: false,
            },
            {
                headerName: 'Supplier',
                field: 'supplierCode',
                cellRendererParams: function () {
                    return {
                        gridId: 'counterpartiesGrid',
                        options: _this.masterdata.counterparties,
                        isRequired: false,
                        displayProperty: 'counterpartyCode',
                        valueProperty: 'counterpartyCode',
                        lightBoxTitle: 'Results for Counterparty',
                    };
                },
            },
            {
                headerName: 'CCY',
                field: 'currencyCode',
                colId: 'currencyCode',
                cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_7__["AgGridAutocompleteComponent"],
                cellRendererParams: function () {
                    return {
                        options: _this.masterdata.currencies,
                        valueProperty: 'currencyCode',
                        codeProperty: 'currencyCode',
                        displayProperty: 'description',
                        isRequired: true,
                    };
                },
                width: 120,
            },
            {
                headerName: 'Rate Type*',
                field: 'rateTypeCode',
                cellEditorParams: {
                    values: this.rateTypes.map(function (rateType) { return rateType.code; }),
                    valuePropertyName: 'code',
                    displayFormat: 'code',
                    context: this.masterdata,
                },
                width: 120,
            },
            {
                headerName: 'Price Code',
                field: 'priceCode',
                colId: 'priceCode',
                cellEditorParams: {
                    values: this.masterdata.priceUnits.map(function (priceUnit) { return priceUnit.priceCode; }),
                    displayPropertyName: 'description',
                    valuePropertyName: 'priceCode',
                    displayFormat: 'priceCode | description',
                    context: this.masterdata,
                },
                width: 120,
            },
            {
                headerName: 'Pay/Rec*',
                field: 'costDirection',
                cellEditorParams: {
                    values: this.costDirections.map(function (costDirection) { return costDirection.costDirection; }),
                    displayPropertyName: 'costDirection',
                    valuePropertyName: 'costDirection',
                    displayFormat: 'costDirection',
                },
            },
            {
                headerName: 'Rate/Amount',
                field: 'rate',
                type: 'numberColumn',
                cellEditorParams: {
                    displayMask: Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_12__["CustomNumberMask"])(12, 10, false),
                    isRightAligned: false,
                },
            },
            {
                headerName: 'in P&L',
                field: 'inPL',
                colId: 'inPL',
                cellRenderer: 'atlasCheckbox',
                cellRendererParams: {
                    disabled: true,
                    params: this.gridContext,
                },
            },
            {
                headerName: 'No Act',
                field: 'noAction',
                colId: 'noAction',
                cellRenderer: 'atlasCheckbox',
                cellRendererParams: {
                    disabled: true,
                    params: this.gridContext,
                },
            },
            {
                headerName: '%Invoiced',
                field: 'invoicePercent',
                width: 120,
                type: 'numericColumn',
            },
            {
                pinned: 'right',
                cellRendererFramework: _shared_components_ag_contextual_menu_ag_contextual_menu_component__WEBPACK_IMPORTED_MODULE_4__["AgContextualMenuComponent"],
                cellRendererParams: function (params) {
                    return {
                        context: {
                            componentParent: _this,
                            actionContext: _this.gridContext,
                        },
                        isDisabled: _this.isInvoiceDisabled.bind(_this),
                        menuActions: _this.costSummaryGridContextualMenuActions,
                    };
                },
                cellClass: 'ag-contextual-menu',
                width: 40,
            },
        ];
    };
    CostBulkUpdateSummaryComponent.prototype.getRateCodeFromId = function (id) {
        var rateCode = _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_11__["RateTypes"][id];
        return rateCode;
    };
    CostBulkUpdateSummaryComponent.prototype.getPriceCodeFromId = function (id) {
        var priceCode = this.masterdata.priceUnits.find(function (e) { return e.priceUnitId === id; });
        return priceCode ? priceCode.priceCode : '';
    };
    CostBulkUpdateSummaryComponent.prototype.getCostDirectionCodeFromId = function (id, costDirections) {
        var costDirection = costDirections.find(function (e) { return e.costDirectionId === id; });
        return costDirection ? costDirection.costDirection : '';
    };
    CostBulkUpdateSummaryComponent.prototype.getCostTypeDescriptionFromCode = function (code, masterdata) {
        var descrption = masterdata.costTypes.find(function (e) { return e.costTypeCode === code; });
        return descrption ? descrption.name : null;
    };
    CostBulkUpdateSummaryComponent.prototype.setCosts = function (costs) {
        var _this = this;
        if (costs) {
            costs.forEach(function (cost) {
                cost.rateTypeCode = _this.getRateCodeFromId(cost.rateTypeId);
                cost.costDirection = _this.getCostDirectionCodeFromId(cost.costDirectionId, _this.costDirections);
                cost.priceCode = _this.getPriceCodeFromId(cost.priceUnitId);
                cost.description = _this.getCostTypeDescriptionFromCode(cost.costTypeCode, _this.masterdata);
            });
            this.costContractSummaryGridRows = costs;
        }
    };
    CostBulkUpdateSummaryComponent.prototype.handleAction = function (action, cost) {
        switch (action) {
            case this.costsSummaryMenuActions.invoiceCost:
                if (cost.costId) {
                    this.router.navigate(['/' + this.company +
                            '/execution/invoicing/' + encodeURIComponent(_shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_9__["InvoiceTypes"].Cost.toString())], {
                        queryParams: { costIds: cost.costId },
                    });
                }
                break;
            default: throw new Error('Unknown action');
        }
    };
    CostBulkUpdateSummaryComponent.prototype.invoiceSelectedCosts = function () {
        var costs = this.gridApi.getSelectedRows();
        if (costs) {
            var selectedCostIds_1 = [];
            costs.forEach(function (cost) {
                selectedCostIds_1.push(cost.costId);
            });
            this.router.navigate(['/' + this.company +
                    '/execution/invoicing/' + encodeURIComponent(_shared_enums_invoice_type_enum__WEBPACK_IMPORTED_MODULE_9__["InvoiceTypes"].Cost.toString())], {
                queryParams: { costIds: selectedCostIds_1 },
            });
        }
    };
    CostBulkUpdateSummaryComponent.prototype.isCostInvoicedRowStyle = function (node) {
        if (node.data.invoicePercent === 100 || !node.data.isApproved) {
            return { background: 'rgba(199, 194, 196, 0.5)', color: '#928D8F' };
        }
    };
    CostBulkUpdateSummaryComponent.prototype.isCostInvoiced = function (node) {
        return (node.data.invoicePercent === 100 || !node.data.isApproved) ? false : true;
    };
    CostBulkUpdateSummaryComponent.prototype.checkIfUserHasRequiredPrivileges = function (userCompanyPrivilege) {
        if (this.authorizationService.isUserAllowedForCompany(this.company)) {
            var userPermissionLevel = this.authorizationService.getPermissionLevel(this.company, userCompanyPrivilege.privilegeName, userCompanyPrivilege.privilegeParentLevelOne, userCompanyPrivilege.privilegeParentLevelTwo);
            if (userPermissionLevel >= userCompanyPrivilege.permission) {
                return true;
            }
        }
        return false;
    };
    CostBulkUpdateSummaryComponent.prototype.isInvoiceDisabled = function (node) {
        return (node.data.invoicePercent === 100 || !node.data.isApproved) ? true : false;
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('userPreferences'),
        __metadata("design:type", _shared_components_ag_grid_user_preferences_ag_grid_user_preferences_component__WEBPACK_IMPORTED_MODULE_6__["AgGridUserPreferencesComponent"])
    ], CostBulkUpdateSummaryComponent.prototype, "userPreferencesComponent", void 0);
    CostBulkUpdateSummaryComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-cost-bulk-update-summary',
            template: __webpack_require__(/*! ./cost-bulk-update-summary.component.html */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/cost-bulk-update-summary/cost-bulk-update-summary.component.html"),
            styles: [__webpack_require__(/*! ./cost-bulk-update-summary.component.scss */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/cost-bulk-update-summary/cost-bulk-update-summary.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_15__["MasterdataService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_14__["FormConfigurationProviderService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_16__["TradingService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_13__["AgGridService"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__["AuthorizationService"]])
    ], CostBulkUpdateSummaryComponent);
    return CostBulkUpdateSummaryComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/select-contracts/select-contracts.component.html":
/*!*******************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-cost-bulk-update/select-contracts/select-contracts.component.html ***!
  \*******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<form [formGroup]=\"searchContractForm\">\r\n    <div class=\"main-container\"\r\n         fxLayout=\"column\"\r\n         fxLayoutAlign=\"start none\">\r\n        <mat-card>\r\n            <div fxLayout=\"row\"\r\n                 fxLayoutAlign=\"start none\"\r\n                 class=\"search\">\r\n                <mat-form-field>\r\n                    <input specialIsAlphaNumeric\r\n                           matInput\r\n                           placeholder=\"Contract Search\"\r\n                           formControlName=\"searchContractReferenceCtrl\" />\r\n                </mat-form-field>\r\n                <mat-form-field>\r\n                    <input matInput\r\n                           placeholder=\"Charter Reference\"\r\n                           [matAutocomplete]=\"charterReference\"\r\n                           formControlName=\"charterReferenceCtrl\"\r\n                           [matTooltip]=\"'Charter Reference'\">\r\n                    <mat-autocomplete #charterReference=\"matAutocomplete\">\r\n                        <mat-option *ngFor=\"let charCode of filteredCharters\"\r\n                                    [value]=\"charCode.charterCode\">\r\n                            {{charCode.charterCode}}|\r\n                            {{charCode.description}}\r\n                        </mat-option>\r\n                    </mat-autocomplete>\r\n                    <mat-error *ngIf=\"charterReferenceCtrl.hasError('inDropdownList')\">\r\n                        Value not in list\r\n                    </mat-error>\r\n                </mat-form-field>\r\n                <atlas-masterdata-user-preferences-input isEditable=\"true\"\r\n                                                         [fieldControl]=\"counterPartyCtrl\"\r\n                                                         [options]=\"filteredCounterPartyList\"\r\n                                                         label=\"Counter Party\"\r\n                                                         displayProperty=\"counterpartyCode\"\r\n                                                         [selectProperties]=\"['counterpartyCode', 'description']\"\r\n                                                         [errorMap]=\"counterpartyErrorMap\"\r\n                                                         lightBoxTitle=\"Results for Counterparty\"\r\n                                                         gridId=\"counterpartiesGrid\"\r\n                                                         [dataLoader]=\"counterpartyDataLoader\">\r\n                </atlas-masterdata-user-preferences-input>\r\n                <atlas-dropdown-select fxFlex=\"60%\"\r\n                                       [label]=\"'Database'\"\r\n                                       [fieldControl]=\"databaseCtrl\"\r\n                                       isEditable=true\r\n                                       [options]=\"databaseList\"\r\n                                       displayProperty=\"freezeDate\"\r\n                                       [selectProperties]=\"['freezeDate']\"></atlas-dropdown-select>\r\n                <button mat-raised-button\r\n                        (click)=\"onSearchContracts()\"\r\n                        class=\"heroGradient\">\r\n                    <mat-icon aria-label=\"Search\"\r\n                              class=\"search-icon\">search</mat-icon>\r\n                </button>\r\n            </div>\r\n        </mat-card>\r\n    </div>\r\n    <atlas-filter-set-display (filtersChanged)=\"onFilterSetDetailsChange($event)\"\r\n                              [columnConfiguration]=\"columnConfiguration\"\r\n                              [gridCode]=\"gridCode\"\r\n                              [company]=\"company\">\r\n    </atlas-filter-set-display>\r\n    <div fxLayout=\"row\"\r\n         fxLayoutAlign=\"start none\">\r\n        <mat-card *ngIf=\"isLoading\"\r\n                  fxFlex=\"100\">\r\n            <h2 class=\"atlas-grid-card-title\">Searching for results</h2>\r\n            <div fxLayout=\"row\"\r\n                 fxLayoutAlign=\"center center\"\r\n                 fxLayoutWrap\r\n                 class=\"loading\">\r\n                <mat-spinner color=\"accent\"></mat-spinner>\r\n            </div>\r\n        </mat-card>\r\n        <mat-card [ngClass]=\"{'hidden-during-loading':isLoading}\"\r\n                  fxFlex=\"100\">\r\n            <div fxLayout=\"row\"\r\n                 class=\"atlas-grid-card-header\">\r\n                <span class=\"fill-space\"></span>\r\n                <atlas-ag-grid-user-preferences *ngIf=\"groupFunctionsGridOptions && groupFunctionsGridOptions.columnDefs && groupFunctionsGridOptions.columnApi\"\r\n                                                [gridOptions]=\"groupFunctionsGridOptions\"\r\n                                                [company]=\"company\"\r\n                                                [gridId]=\"gridCode\"\r\n                                                [sharingEnabled]=\"hasGridSharing\"\r\n                                                [hasDeleteViewPrivilege]=\"hasDeleteViewPrivilege\"\r\n                                                #userPreferences>\r\n                </atlas-ag-grid-user-preferences>\r\n            </div>\r\n            <div ag-grid=\"groupFunctionsGridOptions\"\r\n                 class=\"ag-theme-material pointer-cursor\">\r\n                <ag-grid-angular style=\"height:100%;\"\r\n                                 class=\"ag-theme-material\"\r\n                                 [rowData]=\"contractGridRows\"\r\n                                 [gridOptions]=\"groupFunctionsGridOptions\"\r\n                                 [columnDefs]=\"columnDefs\"\r\n                                 domLayout=\"autoHeight\"\r\n                                 (gridReady)=\"onGridReady($event)\"\r\n                                 rowSelection=\"multiple\"\r\n                                 [singleClickEdit]=\"true\"\r\n                                 [suppressRowClickSelection]=\"true\"\r\n                                 (rowSelected)=\"onSelectionChanged($event)\"\r\n                                 (columnVisible)=\"onColumnVisibilityChanged($event)\"\r\n                                 (firstDataRendered)=\"onFirstDataRendered()\"\r\n                                 [pagination]=\"true\"\r\n                                 [paginationPageSize]=\"10\"\r\n                                 [enableSorting]=\"true\"\r\n                                 [enableColResize]=\"true\"\r\n                                 enableFilter\r\n                                 [rowHeight]=atlasAgGridParam.rowHeight>\r\n                </ag-grid-angular>\r\n            </div>\r\n        </mat-card>\r\n        <atlas-lock-interval [resourcesInformation]=\"resourcesInformation\">\r\n        </atlas-lock-interval>\r\n    </div>\r\n</form>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/select-contracts/select-contracts.component.scss":
/*!*******************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-cost-bulk-update/select-contracts/select-contracts.component.scss ***!
  \*******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".main-container {\n  margin: 8px 0 16px 0 !important; }\n"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/select-contracts/select-contracts.component.ts":
/*!*****************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-cost-bulk-update/select-contracts/select-contracts.component.ts ***!
  \*****************************************************************************************************************************/
/*! exports provided: SelectContractsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectContractsComponent", function() { return SelectContractsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _shared_components_ag_grid_user_preferences_ag_grid_user_preferences_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component */ "./Client/app/shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/components/confirmation-dialog/confirmation-dialog.component */ "./Client/app/shared/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_list_and_search_list_and_search_filter_entity__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/entities/list-and-search/list-and-search-filter.entity */ "./Client/app/shared/entities/list-and-search/list-and-search-filter.entity.ts");
/* harmony import */ var _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/entities/lock-functional-context.entity */ "./Client/app/shared/entities/lock-functional-context.entity.ts");
/* harmony import */ var _shared_entities_lock_resource_information_entity__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/entities/lock-resource-information.entity */ "./Client/app/shared/entities/lock-resource-information.entity.ts");
/* harmony import */ var _shared_entities_masterdata_entity__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/entities/masterdata.entity */ "./Client/app/shared/entities/masterdata.entity.ts");
/* harmony import */ var _shared_entities_window_injection_token__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../shared/entities/window-injection-token */ "./Client/app/shared/entities/window-injection-token.ts");
/* harmony import */ var _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../shared/enums/group-function-type */ "./Client/app/shared/enums/group-function-type.ts");
/* harmony import */ var _shared_enums_list_and_search_filter_type_enum__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../../shared/enums/list-and-search-filter-type.enum */ "./Client/app/shared/enums/list-and-search-filter-type.enum.ts");
/* harmony import */ var _shared_models_freeze_display_view__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../../shared/models/freeze-display-view */ "./Client/app/shared/models/freeze-display-view.ts");
/* harmony import */ var _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../../shared/services/ag-grid.service */ "./Client/app/shared/services/ag-grid.service.ts");
/* harmony import */ var _shared_services_execution_charter_data_loader__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../../../shared/services/execution/charter-data-loader */ "./Client/app/shared/services/execution/charter-data-loader.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_grid_configuration_provider_service__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../../../../shared/services/grid-configuration-provider.service */ "./Client/app/shared/services/grid-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_freeze_service__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../../../../shared/services/http-services/freeze.service */ "./Client/app/shared/services/http-services/freeze.service.ts");
/* harmony import */ var _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../../../../shared/services/http-services/lock.service */ "./Client/app/shared/services/http-services/lock.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_masterdata_counterparty_data_loader__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../../../../shared/services/masterdata/counterparty-data-loader */ "./Client/app/shared/services/masterdata/counterparty-data-loader.ts");
/* harmony import */ var _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../../../../shared/services/ui.service */ "./Client/app/shared/services/ui.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};




























var SelectContractsComponent = /** @class */ (function (_super) {
    __extends(SelectContractsComponent, _super);
    function SelectContractsComponent(formBuilder, gridService, agGridService, formConfigurationProvider, gridConfigurationProvider, utilService, uiService, route, lockService, tradingService, charterDataLoader, counterpartyDataLoader, freezeService, window, dialog) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.gridService = gridService;
        _this.agGridService = agGridService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.gridConfigurationProvider = gridConfigurationProvider;
        _this.utilService = utilService;
        _this.uiService = uiService;
        _this.route = route;
        _this.lockService = lockService;
        _this.tradingService = tradingService;
        _this.charterDataLoader = charterDataLoader;
        _this.counterpartyDataLoader = counterpartyDataLoader;
        _this.freezeService = freezeService;
        _this.window = window;
        _this.dialog = dialog;
        _this.contractSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.hasDeleteViewPrivilege = true;
        _this.searchContractReferenceCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_9__["AtlasFormControl"]('contractReference');
        _this.charterReferenceCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_9__["AtlasFormControl"]('charterReference');
        _this.counterPartyCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_9__["AtlasFormControl"]('CounterPartyCommercial');
        _this.databaseCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_9__["AtlasFormControl"]('Database');
        _this.isLoading = false;
        _this.groupFunctionsGridOptions = {};
        _this.gridCode = 'tradeList';
        _this.hasGridSharing = false;
        _this.columnConfiguration = [];
        _this.dataLength = 0;
        _this.masterdata = new _shared_entities_masterdata_entity__WEBPACK_IMPORTED_MODULE_13__["MasterData"]();
        _this.counterpartyErrorMap = new Map()
            .set('inDropdownList', 'Invalid entry. Counter Party not in the list.');
        _this.destroy$ = new rxjs__WEBPACK_IMPORTED_MODULE_4__["Subject"]();
        _this.databaseList = [];
        _this.currentDatabase = new _shared_models_freeze_display_view__WEBPACK_IMPORTED_MODULE_17__["FreezeDisplayView"](-1, 'CURRENT');
        _this.isContractsNextDisabled = true;
        _this.isContractSelected = false;
        _this.charterList = [];
        _this.model = [];
        _this.contractsAssignedToCharter = [];
        _this.totalQuantity = 0;
        _this.resourcesInformation = new Array();
        _this.locking = [];
        _this.unlocking = [];
        _this.subscriptions = [];
        _this.atlasAgGridParam = _this.gridService.getAgGridParam();
        _this.bulkActionTypeId = Number(decodeURIComponent(_this.route.snapshot.paramMap.get('bulkActionTypeId')));
        return _this;
    }
    SelectContractsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.company = this.route.snapshot.paramMap.get('company');
        this.charterId = this.route.snapshot.params['charterId'];
        this.getFormGroup();
        this.masterdata = this.route.snapshot.data.masterdata;
        this.filteredCounterPartyList = this.masterdata.counterparties;
        this.counterPartyList = this.filteredCounterPartyList;
        this.counterPartyCtrl.valueChanges.subscribe(function (input) {
            _this.filterCounterParty(input);
        });
        this.populateCharterList();
        this.charterReferenceCtrl.valueChanges.subscribe(function (input) {
            _this.filterCharterReference(input);
        });
        this.loadGridConfiguration();
        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe());
        this.loadSnapshots();
    };
    SelectContractsComponent.prototype.onGridReady = function (params) {
        var _this = this;
        this.groupFunctionsGridOptions.columnDefs = this.columnDefs;
        this.groupFunctionsGridOptions = params;
        this.gridApi = this.groupFunctionsGridOptions.api;
        this.gridColumnApi = this.groupFunctionsGridOptions.columnApi;
        this.agGridService.sizeColumns(this.groupFunctionsGridOptions);
        this.gridApi.sizeColumnsToFit();
        this.gridColumnApi.autoSizeAllColumns();
        this.gridApi.showNoRowsOverlay();
        this.gridColumnApi.autoSizeAllColumns();
        this.window.onresize = function () {
            _this.agGridService.sizeColumns(_this.groupFunctionsGridOptions);
        };
    };
    SelectContractsComponent.prototype.getFormGroup = function () {
        this.searchContractForm = this.formBuilder.group({
            searchContractReferenceCtrl: new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"](),
            charterReferenceCtrl: new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"](),
            counterPartyCtrl: new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"](),
            databaseCtrl: new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"](),
        });
        return this.searchContractForm;
    };
    SelectContractsComponent.prototype.loadGridConfiguration = function () {
        var _this = this;
        this.gridConfigurationProvider.getConfiguration(this.company, this.gridCode)
            .subscribe(function (configuration) {
            _this.columnConfiguration = configuration.columns;
            _this.initColumns(_this.columnConfiguration);
            _this.getContractsToEditCost();
            _this.hasGridSharing = configuration.hasMultipleViewsPerUser;
        });
    };
    SelectContractsComponent.prototype.initColumns = function (configuration) {
        var _this = this;
        this.columnDefs = [];
        // selection column
        this.columnDefs.push({
            headerName: '',
            colId: 'selection',
            headerCheckboxSelection: true,
            checkboxSelection: true,
            width: 40,
            pinned: 'left',
        });
        // grid config
        var numericColumns = [];
        configuration.forEach(function (column) {
            if (column.gridType === 'numeric') {
                numericColumns.push(column.fieldName.toLowerCase());
            }
        });
        this.columnDefs = this.columnDefs.concat(configuration.map(function (config) {
            var columnDef = {
                colId: _this.utilService.convertToCamelCase(config.fieldName),
                headerName: config.friendlyName,
                field: _this.utilService.convertToCamelCase(config.fieldName),
                hide: !config.isVisible,
            };
            var formatter = _this.uiService.getFormatterForType(config.gridType);
            if (formatter) {
                columnDef.valueFormatter = formatter;
            }
            var dateGetter = _this.uiService.getterForDateType(config.gridType);
            if (dateGetter) {
                columnDef.cellClass = 'dateFormat';
                columnDef.valueGetter = dateGetter;
            }
            return columnDef;
        }));
        if (this.groupFunctionsGridOptions) {
            this.groupFunctionsGridOptions.columnDefs = this.columnDefs;
        }
    };
    SelectContractsComponent.prototype.getContractsToEditCost = function () {
        var _this = this;
        if (!this.filters || !(this.columnConfiguration)) {
            return;
        }
        else if (this.columnConfiguration && this.columnConfiguration.length > 0) {
            var filters = this.filters.map(function (x) { return (__assign({}, x)); });
            this.isLoading = true;
            if (this.charterId) {
                var charterIdField = this.columnConfiguration
                    .find(function (column) { return column.fieldName === 'CharterId'; });
                if (charterIdField) {
                    var filterCharterId = new _shared_entities_list_and_search_list_and_search_filter_entity__WEBPACK_IMPORTED_MODULE_10__["ListAndSearchFilter"]();
                    filterCharterId.fieldId = charterIdField.fieldId;
                    filterCharterId.fieldName = charterIdField.fieldName;
                    filterCharterId.predicate = {
                        filterType: _shared_enums_list_and_search_filter_type_enum__WEBPACK_IMPORTED_MODULE_16__["ListAndSearchFilterType"].Numeric,
                        operator: 'eq',
                        value1: this.charterId.toString(),
                    };
                    filterCharterId.isActive = true;
                    filters.push(filterCharterId);
                }
            }
            this.tradingService.searchContractsForBulkEdit(filters)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["finalize"])(function () {
                _this.isLoading = false;
            })).subscribe(function (data) {
                if (data) {
                    _this.contractsToEdit = data;
                    _this.contractGridRows = _this.contractsToEdit;
                    _this.dataLength = _this.contractGridRows.length;
                    _this.totalContractList = _this.contractGridRows;
                }
            });
        }
    };
    SelectContractsComponent.prototype.loadSnapshots = function () {
        var _this = this;
        this.freezeService.getFreezeList().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(function (data) {
            return data.value.map(function (freeze) {
                return new _shared_models_freeze_display_view__WEBPACK_IMPORTED_MODULE_17__["FreezeDisplayView"](freeze.dataVersionId, _this.freezeService.toFormattedDate(freeze.dataVersionTypeId, freeze.freezeDate));
            });
        }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["takeUntil"])(this.destroy$)).subscribe(function (snapshots) {
            _this.databaseList = snapshots;
            _this.databaseList.unshift(_this.currentDatabase);
            _this.databaseCtrl.patchValue(_this.currentDatabase);
        });
    };
    SelectContractsComponent.prototype.filterCounterParty = function (input) {
        this.filteredCounterPartyList = this.utilService.filterListforAutocomplete(input, this.masterdata.counterparties, ['counterpartyCode', 'description']);
        if (this.counterPartyCtrl.valid || !this.counterPartyCtrl.value) {
            this.onSearchContracts();
        }
    };
    SelectContractsComponent.prototype.onColumnVisibilityChanged = function (col) {
        this.userPreferencesComponent.onChangeColumnVisibility(col);
        this.autoSizeContractsGrid();
    };
    SelectContractsComponent.prototype.autoSizeContractsGrid = function () {
        if (this.gridColumnApi) {
            this.gridColumnApi.autoSizeAllColumns();
        }
    };
    SelectContractsComponent.prototype.onFirstDataRendered = function () {
        if (this.gridColumnApi) {
            this.gridColumnApi.autoSizeAllColumns();
        }
    };
    SelectContractsComponent.prototype.onSearchContracts = function () {
        var _this = this;
        this.searchContractReference = this.searchContractForm.get('searchContractReferenceCtrl').value;
        this.searchCharterReference = this.searchContractForm.get('charterReferenceCtrl').value;
        this.contractGridRows = [];
        if (this.counterPartyCtrl.value) {
            this.searchCounterParty = this.counterPartyCtrl.value.counterpartyCode;
        }
        if (this.databaseCtrl.value) {
            this.searchDatabase = this.databaseCtrl.value.dataVersionId.toString();
        }
        var rows = [];
        var contractRows = 0;
        var charterRows = 0;
        if (!this.searchContractReference) {
            this.contractGridRows = this.totalContractList;
        }
        if (!this.searchCharterReference) {
            this.contractGridRows = this.totalContractList;
        }
        if (!this.searchCounterParty) {
            this.contractGridRows = this.totalContractList;
        }
        if (this.totalContractList && this.totalContractList.length > 0) {
            this.isLoading = true;
            if (this.searchContractReference) {
                this.contractsToEdit = this.totalContractList.filter(function (item) { return item.contractLabel != null; });
                rows = this.contractsToEdit.filter(function (item) {
                    return item.contractLabel.toString().toUpperCase().includes(_this.searchContractReference.toUpperCase());
                });
                contractRows = -1;
            }
            if (this.searchCharterReference) {
                this.contractsToEdit = this.totalContractList.filter(function (item) { return item.charterReference != null; });
                rows = this.contractsToEdit.filter(function (item) {
                    return item.charterReference.toString().toUpperCase().includes(_this.searchCharterReference.toUpperCase());
                });
                charterRows = -1;
            }
            else if (charterRows === -1) {
                rows = rows.filter(function (item) { return item.charterReference != null; });
                rows = rows.filter(function (item) { return item.charterReference.toString().toUpperCase().
                    includes(_this.searchCharterReference.toUpperCase()); });
            }
            charterRows = -1;
            if (this.searchCounterParty) {
                this.contractsToEdit = this.totalContractList.filter(function (item) { return item.counterparty != null; });
                rows = this.contractsToEdit.filter(function (item) {
                    return item.counterparty.toString().toUpperCase().includes(_this.searchCounterParty.toUpperCase());
                });
            }
            if (this.searchDatabase && this.searchDatabase !== '-1') {
                var databaseField = this.columnConfiguration
                    .find(function (column) { return column.fieldName === 'DataVersionId'; });
                var filterDatabase = new _shared_entities_list_and_search_list_and_search_filter_entity__WEBPACK_IMPORTED_MODULE_10__["ListAndSearchFilter"]();
                filterDatabase.fieldId = databaseField.fieldId;
                filterDatabase.fieldName = databaseField.fieldName;
                filterDatabase.predicate = {
                    filterType: _shared_enums_list_and_search_filter_type_enum__WEBPACK_IMPORTED_MODULE_16__["ListAndSearchFilterType"].Numeric,
                    operator: 'eq',
                    value1: this.searchDatabase,
                };
                filterDatabase.isActive = true;
                this.filters.push(filterDatabase);
                this.getContractsToEditCost();
            }
        }
        var selectedRows = this.gridApi.getSelectedRows();
        if (selectedRows) {
            selectedRows.forEach(function (row) {
                var rowAlreadyExists = rows.find(function (section) { return section.sectionId === row.sectionId; });
                if (!rowAlreadyExists) {
                    rows.push(row);
                }
            });
        }
        this.contractGridRows = rows;
        this.gridApi.setRowData(this.contractGridRows);
        this.dataLength = this.contractGridRows.length;
        this.autoSizeContractsGrid();
        this.isLoading = false;
        (this.contractGridRows) ? this.gridApi.hideOverlay() : this.gridApi.showNoRowsOverlay();
        this.gridApi.forEachNode(function (node) {
            var row = selectedRows.find(function (data) { return data.sectionId === node.data.sectionId; });
            if (row) {
                node.setSelected(true);
            }
        });
    };
    SelectContractsComponent.prototype.getSelectedContracts = function () {
        this.selectedContractsForBulkEdit = this.gridApi.getSelectedRows();
        return this.selectedContractsForBulkEdit;
    };
    SelectContractsComponent.prototype.getSelectedContractQuantity = function () {
        return this.totalQuantity;
    };
    SelectContractsComponent.prototype.onSelectionChanged = function (event) {
        var _this = this;
        this.totalQuantity = 0;
        var selectedRows = this.gridApi.getSelectedRows();
        this.gridApi.forEachNode(function (node) {
            if (event.node.isSelected() && event.node.data.sectionId === node.data.sectionId) {
                node.setSelected(true);
            }
        });
        if (event.node.isSelected()) {
            selectedRows.forEach(function (contract) {
                _this.totalQuantity += contract.quantity;
            });
        }
        this.isContractSelected = selectedRows.length > 0;
        this.contractSelected.emit(this.isContractSelected);
        this.grantLock(Number(event.data.sectionId), event.node);
        this.gridApi.refreshCells(event.data);
    };
    SelectContractsComponent.prototype.populateCharterList = function () {
        var _this = this;
        this.charterDataLoader.getData().subscribe(function (charter) {
            _this.charters = charter;
            _this.filteredCharters = _this.charters;
        });
    };
    SelectContractsComponent.prototype.filterCharterReference = function (input) {
        this.filteredCharters = this.utilService.filterListforAutocomplete(input, this.charters, ['charterCode', 'description']);
        if (this.charterReferenceCtrl.valid || !this.charterReferenceCtrl.value) {
            this.onSearchContracts();
        }
    };
    SelectContractsComponent.prototype.onFilterSetDetailsChange = function (filters) {
        this.filters = filters;
        if (this.bulkActionTypeId === _shared_enums_group_function_type__WEBPACK_IMPORTED_MODULE_15__["GroupFunctionTypes"].Costs) {
            this.getContractsToEditCost();
        }
    };
    SelectContractsComponent.prototype.grantLock = function (sectionId, node) {
        var _this = this;
        if (node.isSelected()) {
            if (!this.locking.includes(sectionId)) {
                this.locking.push(sectionId);
                this.subscriptions.push(this.lockService.isLockedContract(sectionId).subscribe(function (lock) {
                    if (lock.isLocked) {
                        _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_8__["ConfirmationDialogComponent"], {
                            data: {
                                title: 'Lock',
                                text: lock.message,
                                okButton: 'Got it',
                            },
                        });
                        _this.groupFunctionsGridOptions.api.deselectNode(node);
                        _this.locking = _this.locking.filter(function (id) { return id !== sectionId; });
                    }
                    else {
                        _this.subscriptions.push(_this.lockService.lockContract(sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_11__["LockFunctionalContext"].BulkEdition)
                            .subscribe(function () {
                            _this.refeshResourceInformation();
                            _this.locking = _this.locking.filter(function (id) { return id !== sectionId; });
                        }));
                    }
                }));
            }
        }
        else {
            if (!this.unlocking.includes(sectionId)) {
                this.unlocking.push(sectionId);
                this.refeshResourceInformation();
                this.subscriptions.push(this.lockService.unlockContract(sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_11__["LockFunctionalContext"].BulkEdition)
                    .subscribe(function () {
                    node.setRowSelectable(true);
                    _this.unlocking = _this.unlocking.filter(function (id) { return id !== sectionId; });
                }));
            }
        }
    };
    SelectContractsComponent.prototype.refeshResourceInformation = function () {
        var _this = this;
        this.resourcesInformation = new Array();
        this.groupFunctionsGridOptions.api.forEachNode(function (node) {
            if (node.isSelected()) {
                var resourceInformation = new _shared_entities_lock_resource_information_entity__WEBPACK_IMPORTED_MODULE_12__["LockResourceInformation"]();
                resourceInformation.resourceType = 'Contract';
                resourceInformation.resourceId = node.data.sectionId;
                resourceInformation.resourceCode = node.data.contractReference;
                _this.resourcesInformation.push(resourceInformation);
            }
        });
    };
    SelectContractsComponent.prototype.ngOnDestroy = function () {
        var _this = this;
        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe(function () {
            _this.subscriptions.forEach(function (subscription) {
                subscription.unsubscribe();
            });
        }));
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], SelectContractsComponent.prototype, "contractSelected", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Object)
    ], SelectContractsComponent.prototype, "hasDeleteViewPrivilege", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('userPreferences'),
        __metadata("design:type", _shared_components_ag_grid_user_preferences_ag_grid_user_preferences_component__WEBPACK_IMPORTED_MODULE_6__["AgGridUserPreferencesComponent"])
    ], SelectContractsComponent.prototype, "userPreferencesComponent", void 0);
    SelectContractsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-select-contracts',
            template: __webpack_require__(/*! ./select-contracts.component.html */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/select-contracts/select-contracts.component.html"),
            styles: [__webpack_require__(/*! ./select-contracts.component.scss */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/select-contracts/select-contracts.component.scss")],
            providers: [_shared_services_masterdata_counterparty_data_loader__WEBPACK_IMPORTED_MODULE_25__["CounterPartyDataLoader"], _shared_services_execution_charter_data_loader__WEBPACK_IMPORTED_MODULE_19__["CharterDataLoader"]],
        }),
        __param(13, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"])(_shared_entities_window_injection_token__WEBPACK_IMPORTED_MODULE_14__["WINDOW"])),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_18__["AgGridService"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_18__["AgGridService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_20__["FormConfigurationProviderService"],
            _shared_services_grid_configuration_provider_service__WEBPACK_IMPORTED_MODULE_21__["GridConfigurationProviderService"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_27__["UtilService"],
            _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_26__["UiService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"],
            _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_23__["LockService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_24__["TradingService"],
            _shared_services_execution_charter_data_loader__WEBPACK_IMPORTED_MODULE_19__["CharterDataLoader"],
            _shared_services_masterdata_counterparty_data_loader__WEBPACK_IMPORTED_MODULE_25__["CounterPartyDataLoader"],
            _shared_services_http_services_freeze_service__WEBPACK_IMPORTED_MODULE_22__["FreezeService"],
            Window,
            _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialog"]])
    ], SelectContractsComponent);
    return SelectContractsComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_7__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/trade-cost-bulk-update.component.html":
/*!********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-cost-bulk-update/trade-cost-bulk-update.component.html ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<form [formGroup]=\"bulkCostUpdateForm\">\r\n    <div class=\"main-container\">\r\n        <mat-horizontal-stepper [linear]\r\n                                (selectionChange)=\"onChangeStepAction($event)\"\r\n                                #stepper>\r\n            <ng-template matStepperIcon=\"edit\">\r\n                <mat-icon>check</mat-icon>\r\n            </ng-template>\r\n            <mat-step>\r\n                <ng-template matStepLabel>Selection</ng-template>\r\n                <atlas-select-contracts #selectContractsComponent\r\n                                        (contractSelected)=\"isContractSelected($event)\">\r\n                </atlas-select-contracts>\r\n                <div fxLayout=\"row \"\r\n                     fxLayoutAlign=\"space-between start\"\r\n                     class=\"button-details\">\r\n                    <div fxLayout=\"column \"\r\n                         fxLayoutAlign=\"start \">\r\n                        <button (click)=\"onContractSelectionDiscardButtonClicked()\"\r\n                                mat-button>\r\n                            DISCARD\r\n                        </button>\r\n                    </div>\r\n                    <div fxLayout=\"column \"\r\n                         fxLayoutAlign=\"start \">\r\n                        <div fxLayout=\"row \"\r\n                             fxLayoutAlign=\"end start \">\r\n                            <button mat-raised-button\r\n                                    *ifAuthorized=\"'Trades.CostTab',company:company,level: PermissionLevels.ReadWrite\"\r\n                                    (click)=\"onContractSelectionNextButtonClicked()\"\r\n                                    [disabled]=\"isContractsNextDisabled\">\r\n                                NEXT\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </mat-step>\r\n            <mat-step>\r\n                <ng-template matStepLabel>Edit Costs</ng-template>\r\n                <atlas-update-costs #updateCostsComponent></atlas-update-costs>\r\n                <div fxLayout=\"row \"\r\n                     fxLayoutAlign=\"space-between start\"\r\n                     class=\"button-details\">\r\n                    <div fxLayout=\"column \"\r\n                         fxLayoutAlign=\"start \">\r\n                        <button (click)=\"onContractSelectionDiscardButtonClicked()\"\r\n                                mat-button>\r\n                            DISCARD\r\n                        </button>\r\n                    </div>\r\n                    <div fxLayout=\"column \"\r\n                         fxLayoutAlign=\"start \">\r\n                        <div fxLayout=\"row \"\r\n                             fxLayoutAlign=\"end start \">\r\n                            <button mat-button\r\n                                    (click)=\"onFieldSelectionPreviousButtonClicked()\">\r\n                                PREVIOUS\r\n                            </button>\r\n                            <button mat-raised-button\r\n                                    (click)=\"onSaveButtonClicked()\">\r\n                                Save\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </mat-step>\r\n            <mat-step>\r\n                <ng-template matStepLabel>Summary</ng-template>\r\n                <atlas-cost-bulk-update-summary #CostBulkUpdateSummaryComponent></atlas-cost-bulk-update-summary>\r\n                <div fxLayout=\"row \"\r\n                     fxLayoutAlign=\"start end\">\r\n                    <span class=\"fill-space\"></span>\r\n                    <button mat-button\r\n                            *ifAuthorized=\"'Invoices.InvoiceCreation', company:this.company\"\r\n                            (click)=\"onInvoiceButtonClicked()\">\r\n                        INVOICE SELECTED\r\n                    </button>\r\n                </div>\r\n            </mat-step>\r\n        </mat-horizontal-stepper>\r\n    </div>\r\n</form>"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/trade-cost-bulk-update.component.scss":
/*!********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-cost-bulk-update/trade-cost-bulk-update.component.scss ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/trade-cost-bulk-update.component.ts":
/*!******************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-cost-bulk-update/trade-cost-bulk-update.component.ts ***!
  \******************************************************************************************************************/
/*! exports provided: TradeCostBulkUpdateComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeCostBulkUpdateComponent", function() { return TradeCostBulkUpdateComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material/dialog */ "./node_modules/@angular/material/esm5/dialog.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../shared/components/confirmation-dialog/confirmation-dialog.component */ "./Client/app/shared/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony import */ var _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../shared/enums/permission-level.enum */ "./Client/app/shared/enums/permission-level.enum.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _cost_bulk_update_summary_cost_bulk_update_summary_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./cost-bulk-update-summary/cost-bulk-update-summary.component */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/cost-bulk-update-summary/cost-bulk-update-summary.component.ts");
/* harmony import */ var _select_contracts_select_contracts_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./select-contracts/select-contracts.component */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/select-contracts/select-contracts.component.ts");
/* harmony import */ var _update_costs_update_costs_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./update-costs/update-costs.component */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/update-costs.component.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};














var TradeCostBulkUpdateComponent = /** @class */ (function (_super) {
    __extends(TradeCostBulkUpdateComponent, _super);
    function TradeCostBulkUpdateComponent(formConfigurationProvider, formBuilder, route, dialog, router, companyManager, tradingService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.formBuilder = formBuilder;
        _this.route = route;
        _this.dialog = dialog;
        _this.router = router;
        _this.companyManager = companyManager;
        _this.tradingService = tradingService;
        _this.currentStep = 0;
        _this.isContractsNextDisabled = true;
        _this.formComponents = [];
        _this.PermissionLevels = _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_8__["PermissionLevels"];
        return _this;
    }
    TradeCostBulkUpdateComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.paramMap.get('company');
        this.bulkCostUpdateForm = this.formBuilder.group({
            selectContractsComponent: this.selectContractsComponent.getFormGroup(),
            updateCostsComponent: this.updateCostsComponent.getFormGroup(),
        });
        this.formComponents.push(this.selectContractsComponent, this.updateCostsComponent);
    };
    TradeCostBulkUpdateComponent.prototype.onChangeStepAction = function (event) {
        this.currentStep = event.selectedIndex;
    };
    TradeCostBulkUpdateComponent.prototype.onContractSelectionDiscardButtonClicked = function () {
        if (this.isContractsNextDisabled) {
            this.router.navigate(['/' + this.companyManager.getCurrentCompanyId() + '/trades']);
        }
        else {
            this.discardButtonDialog();
        }
    };
    TradeCostBulkUpdateComponent.prototype.isContractSelected = function (contractSelected) {
        this.isContractsNextDisabled = !contractSelected;
    };
    TradeCostBulkUpdateComponent.prototype.onContractSelectionNextButtonClicked = function () {
        var contracts = this.selectContractsComponent.getSelectedContracts();
        var quantity = this.selectContractsComponent.getSelectedContractQuantity();
        if (contracts) {
            var sectionIds = contracts.map(function (contract) { return contract.sectionId; });
            this.updateCostsComponent.addCostsComponent.setCostsBySectionIds(contracts, quantity);
            this.updateCostsComponent.editCostsComponent.setCostsBySectionIds(sectionIds);
        }
        this.stepper.next();
    };
    TradeCostBulkUpdateComponent.prototype.discardButtonDialog = function () {
        var _this = this;
        var confirmDiscardDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_7__["ConfirmationDialogComponent"], {
            data: {
                title: 'Discard Changes',
                text: 'You have some modification pending. Close and lose changes?',
                okButton: 'Ok',
                cancelButton: 'Cancel',
            },
        });
        confirmDiscardDialog.afterClosed().subscribe(function (answer) {
            if (answer) {
                _this.router.navigate(['/' + _this.companyManager.getCurrentCompanyId() + '/trades']);
            }
        });
    };
    TradeCostBulkUpdateComponent.prototype.onFieldSelectionPreviousButtonClicked = function () {
        this.stepper.previous();
    };
    TradeCostBulkUpdateComponent.prototype.onSaveButtonClicked = function () {
        var _this = this;
        var costs = [];
        this.formComponents.forEach(function (comp) {
            costs = comp.populateEntity(costs);
        });
        this.subscriptions.push(this.tradingService
            .saveBulkCost(costs)
            .subscribe(function (data) {
            var contractsToSummary = _this.updateCostsComponent.editCostsComponent.getGridData().
                filter(function (cost) { return cost.rowStatus !== 'N' && cost.rowStatus !== 'D'; });
            if (contractsToSummary) {
                if (data.value) {
                    data.value.forEach(function (cost) {
                        contractsToSummary.push(cost);
                    });
                }
                _this.CostBulkUpdateSummaryComponent.setCosts(contractsToSummary);
            }
            _this.stepper.next();
        }, function (err) {
            throw err;
        }));
    };
    TradeCostBulkUpdateComponent.prototype.onInvoiceButtonClicked = function () {
        this.CostBulkUpdateSummaryComponent.invoiceSelectedCosts();
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('stepper'),
        __metadata("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatStepper"])
    ], TradeCostBulkUpdateComponent.prototype, "stepper", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('selectContractsComponent'),
        __metadata("design:type", _select_contracts_select_contracts_component__WEBPACK_IMPORTED_MODULE_12__["SelectContractsComponent"])
    ], TradeCostBulkUpdateComponent.prototype, "selectContractsComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('updateCostsComponent'),
        __metadata("design:type", _update_costs_update_costs_component__WEBPACK_IMPORTED_MODULE_13__["UpdateCostsComponent"])
    ], TradeCostBulkUpdateComponent.prototype, "updateCostsComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('CostBulkUpdateSummaryComponent'),
        __metadata("design:type", _cost_bulk_update_summary_cost_bulk_update_summary_component__WEBPACK_IMPORTED_MODULE_11__["CostBulkUpdateSummaryComponent"])
    ], TradeCostBulkUpdateComponent.prototype, "CostBulkUpdateSummaryComponent", void 0);
    TradeCostBulkUpdateComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-trade-cost-bulk-update',
            template: __webpack_require__(/*! ./trade-cost-bulk-update.component.html */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/trade-cost-bulk-update.component.html"),
            styles: [__webpack_require__(/*! ./trade-cost-bulk-update.component.scss */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/trade-cost-bulk-update.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_9__["FormConfigurationProviderService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _angular_router__WEBPACK_IMPORTED_MODULE_4__["ActivatedRoute"],
            _angular_material_dialog__WEBPACK_IMPORTED_MODULE_3__["MatDialog"],
            _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_5__["CompanyManagerService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_10__["TradingService"]])
    ], TradeCostBulkUpdateComponent);
    return TradeCostBulkUpdateComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_6__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/add-costs/add-costs.component.html":
/*!*****************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/add-costs/add-costs.component.html ***!
  \*****************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div fxLayout=\"row\"\r\n     fxLayoutAlign=\"start center\"\r\n     fxLayoutGap=\"10px\"\r\n     class=\"add-line-container add-line-container-add-costs\">\r\n    <div fxLayout=\"column\"\r\n         fxLayoutAlign=\"start start\">\r\n        <h6>Add new lines:</h6>\r\n    </div>\r\n    <div fxLayout=\"column\"\r\n         fxLayoutAlign=\"start start\"\r\n         fxFlex=\"2\">\r\n        <mat-form-field>\r\n            <input matInput\r\n                   [formControl]=\"addNewLineCtrl\">\r\n        </mat-form-field>\r\n    </div>\r\n    <div fxLayout=\"column\"\r\n         fxLayoutAlign=\"start start\"\r\n         class=\"add-button-container\">\r\n        <button mat-button\r\n                (click)=\"onAddRowButtonClicked(addNewLineCtrl.value)\">ADD</button>\r\n    </div>\r\n\r\n    <div fxLayout=\"column\"\r\n         fxLayoutAlign=\"start start\">\r\n        <button mat-button\r\n                (click)=\"onAddCostMatrixClicked()\">ADD COST MATRIX</button>\r\n    </div>\r\n</div>\r\n<mat-card>\r\n    <h2 class=\"atlas-grid-card-title\">Costs to add in Bulk</h2>\r\n    <mat-card-content>\r\n        <div ag-grid=\"costsGridOptions\"\r\n             class=\"ag-theme-material pointer-cursor costContractsBulkEdit\"\r\n             style=\"width: 100%; height: 100%\">\r\n            <ag-grid-angular style=\" height: 100%;\"\r\n                             class=\"ag-theme-material\"\r\n                             [rowData]=\"costsGridRows\"\r\n                             [columnDefs]=\"costsGridCols\"\r\n                             [gridOptions]=\"costGridOptions\"\r\n                             [enableColResize]=\"true\"\r\n                             [enableSorting]=\"true\"\r\n                             domLayout=autoHeight\r\n                             (gridReady)=\"onGridReady($event)\"\r\n                             (cellValueChanged)=\"onCellValueChanged($event)\"\r\n                             [frameworkComponents]=\"gridComponents\"\r\n                             enableFilter\r\n                             [rowHeight]=\"atlasAgGridParam.rowHeight\"\r\n                             [singleClickEdit]=true>\r\n            </ag-grid-angular>\r\n        </div>\r\n        <div fxLayout=\"column\"\r\n             fxLayoutAlign=\"end end\"\r\n             fxLayoutGap=\"10px\">\r\n            <span class=\"fill-space\"></span>\r\n            <button mat-button\r\n                    (click)=\"onProceedButtonClicked()\">PROCEED</button>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/add-costs/add-costs.component.scss":
/*!*****************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/add-costs/add-costs.component.scss ***!
  \*****************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".add-line-container.add-line-container-add-costs {\n  margin-top: 8px !important; }\n\n.add-line-container.add-line-container-add-costs h6 {\n  margin: 0 !important; }\n\n.add-button-container {\n  margin-right: 0 !important; }\n"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/add-costs/add-costs.component.ts":
/*!***************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/add-costs/add-costs.component.ts ***!
  \***************************************************************************************************************************************/
/*! exports provided: AddCostsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddCostsComponent", function() { return AddCostsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_ag_grid_checkbox_ag_grid_checkbox_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component */ "./Client/app/shared/components/ag-grid-checkbox/ag-grid-checkbox.component.ts");
/* harmony import */ var _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component */ "./Client/app/shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component.ts");
/* harmony import */ var _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../../../shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component */ "./Client/app/shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component.ts");
/* harmony import */ var _shared_components_cell_editor_numeric_cell_editor_numeric_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component */ "./Client/app/shared/components/cell-editor-numeric/cell-editor-numeric.component.ts");
/* harmony import */ var _shared_components_cell_editor_select_cell_editor_select_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../../../shared/components/cell-editor-select/cell-editor-select.component */ "./Client/app/shared/components/cell-editor-select/cell-editor-select.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_bulk_edit_cost_entity__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../../../shared/entities/bulk-edit-cost.entity */ "./Client/app/shared/entities/bulk-edit-cost.entity.ts");
/* harmony import */ var _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../../../shared/enums/cost-direction.enum */ "./Client/app/shared/enums/cost-direction.enum.ts");
/* harmony import */ var _shared_enums_cost_edit_options_enum__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../../../shared/enums/cost-edit-options.enum */ "./Client/app/shared/enums/cost-edit-options.enum.ts");
/* harmony import */ var _shared_enums_currency_codes_enum__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../../../shared/enums/currency-codes.enum */ "./Client/app/shared/enums/currency-codes.enum.ts");
/* harmony import */ var _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../../../shared/enums/invoicing-status.enum */ "./Client/app/shared/enums/invoicing-status.enum.ts");
/* harmony import */ var _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../../../shared/enums/rate-type.enum */ "./Client/app/shared/enums/rate-type.enum.ts");
/* harmony import */ var _shared_enums_yes_no_confirmation_enum__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../../../shared/enums/yes-no-confirmation.enum */ "./Client/app/shared/enums/yes-no-confirmation.enum.ts");
/* harmony import */ var _shared_numberMask__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../../../../shared/numberMask */ "./Client/app/shared/numberMask.ts");
/* harmony import */ var _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../../../../shared/services/ag-grid.service */ "./Client/app/shared/services/ag-grid.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _trading_components_contract_physical_capture_costs_tab_cost_matrix_dialog_cost_matrix_dialog_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../../../../../../trading/components/contract-physical-capture/costs-tab/cost-matrix-dialog/cost-matrix-dialog.component */ "./Client/app/trading/components/contract-physical-capture/costs-tab/cost-matrix-dialog/cost-matrix-dialog.component.ts");
/* harmony import */ var _edit_costs_dialog_edit_costs_dialog_component__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../edit-costs-dialog/edit-costs-dialog.component */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs-dialog/edit-costs-dialog.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};























var AddCostsComponent = /** @class */ (function () {
    function AddCostsComponent(masterdataService, dialog, tradingService, route, snackbarService, gridService) {
        this.masterdataService = masterdataService;
        this.dialog = dialog;
        this.tradingService = tradingService;
        this.route = route;
        this.snackbarService = snackbarService;
        this.gridService = gridService;
        this.newCostsAdded = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.addNewLineCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_8__["AtlasFormControl"]('addNewLineCtrl');
        this.gridComponents = {
            atlasSelect: _shared_components_cell_editor_select_cell_editor_select_component__WEBPACK_IMPORTED_MODULE_7__["CellEditorSelectComponent"],
            atlasNumeric: _shared_components_cell_editor_numeric_cell_editor_numeric_component__WEBPACK_IMPORTED_MODULE_6__["CellEditorNumericComponent"],
            atlasCheckbox: _shared_components_ag_grid_checkbox_ag_grid_checkbox_component__WEBPACK_IMPORTED_MODULE_3__["AgGridCheckboxComponent"],
        };
        this.gridContext = {
            contractStatus: '',
            gridEditable: true,
            editPrivileges: true,
            deletePrivileges: true,
            inPNLPrivileges: true,
        };
        this.filteredLines = [];
        this.costGridOptions = {};
        this.isProRataCheck = false;
        this.newCosts = [];
        this.existingSectionIds = [];
        this.totalQuantity = 0;
        this.selectedContracts = [];
        this.costIdsForOverrideCosts = [];
        this.sectionIdsForAddNewCosts = [];
        this.costIdsForFullyInvoicedCosts = [];
        this.contractReferenceForFullyInvoicedCosts = [];
        this.contractSelected = [];
        this.contractLabelSelected = [];
    }
    AddCostsComponent.prototype.ngOnInit = function () {
        this.masterdata = this.route.snapshot.data.masterdata;
        this.atlasAgGridParam = this.gridService.getAgGridParam();
        this.company = this.route.snapshot.paramMap.get('company');
        this.rateTypes = [
            {
                code: _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_14__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_14__["RateTypes"].Rate],
                description: '',
            },
            {
                code: _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_14__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_14__["RateTypes"].Amount],
                description: '',
            },
            {
                code: _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_14__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_14__["RateTypes"].Percent],
                description: '',
            },
        ];
        this.costDirections = [
            {
                costDirectionId: _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_10__["CostDirections"].Payable,
                costDirection: 'Pay',
            },
            {
                costDirectionId: _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_10__["CostDirections"].Receivable,
                costDirection: 'Receive',
            },
        ];
        this.updateOptions = [
            {
                option: _shared_enums_cost_edit_options_enum__WEBPACK_IMPORTED_MODULE_11__["CostBulkEditUpdateOptions"].AddNewCost,
            },
            {
                option: _shared_enums_cost_edit_options_enum__WEBPACK_IMPORTED_MODULE_11__["CostBulkEditUpdateOptions"].OverRideCost,
            },
        ];
        this.confirmationOptions = [
            {
                option: _shared_enums_yes_no_confirmation_enum__WEBPACK_IMPORTED_MODULE_15__["YesNoConfirmation"][_shared_enums_yes_no_confirmation_enum__WEBPACK_IMPORTED_MODULE_15__["YesNoConfirmation"].Yes],
            },
            {
                option: _shared_enums_yes_no_confirmation_enum__WEBPACK_IMPORTED_MODULE_15__["YesNoConfirmation"][_shared_enums_yes_no_confirmation_enum__WEBPACK_IMPORTED_MODULE_15__["YesNoConfirmation"].No],
            },
        ];
        this.initCostsGridColumns();
    };
    AddCostsComponent.prototype.onGridReady = function (params) {
        var _this = this;
        this.gridApi = params.api;
        params.columnDefs = this.costsGridCols;
        this.costGridOptions = params;
        this.gridColumnApi = params.columnApi;
        this.gridColumnApi.autoSizeAllColumns();
        window.onresize = function () {
            _this.gridColumnApi.autoSizeAllColumns();
        };
        this.gridApi.showNoRowsOverlay();
    };
    AddCostsComponent.prototype.initCostsGridColumns = function () {
        var _this = this;
        this.costGridOptions = {
            context: this.gridContext,
        };
        this.costsGridCols = [
            {
                headerName: 'Cost type*',
                field: 'costTypeCode',
                colId: 'costTypeCode',
                cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_4__["AgGridAutocompleteComponent"],
                cellRendererParams: function (params) {
                    return {
                        context: {
                            componentParent: _this,
                            gridEditable: _this.isGridEditable(params),
                        },
                        options: _this.masterdata.costTypes.filter(function (cost) { return cost.isATradeCost === true; })
                            .sort(function (a, b) { return a.costTypeCode.localeCompare(b.costTypeCode); }),
                        valueProperty: 'costTypeCode',
                        codeProperty: 'costTypeCode',
                        displayProperty: 'costTypeCode',
                        isRequired: true,
                    };
                },
                onCellValueChanged: function (params) {
                    var filteredCostType = _this.masterdata.costTypes.find(function (e) { return e.costTypeCode === params.data.costTypeCode; });
                    if (filteredCostType) {
                        params.node.setDataValue('description', filteredCostType.name);
                        params.node.setDataValue('inPL', filteredCostType.inPNL);
                        params.node.setDataValue('noAction', filteredCostType.noAction);
                    }
                },
            },
            {
                headerName: 'Description',
                field: 'description',
                colId: 'description',
            },
            {
                headerName: 'Matrix Name',
                field: 'costMatrixName',
            },
            {
                headerName: 'Supplier',
                field: 'supplierCode',
                cellRendererFramework: _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_5__["AgGridContextualSearchComponent"],
                cellRendererParams: function () {
                    return {
                        context: {
                            componentParent: _this,
                        },
                        gridId: 'counterpartiesGrid',
                        options: _this.masterdata.counterparties,
                        isRequired: false,
                        displayProperty: 'counterpartyCode',
                        valueProperty: 'counterpartyCode',
                        lightBoxTitle: 'Results for Counterparty',
                        showContextualSearchIcon: true,
                    };
                },
                onCellValueChanged: function (params) {
                    if ((params.data.supplierCode || params.data.supplierCode === '') && _this.masterdata.counterparties) {
                        var selectedClientAccount = _this.masterdata.counterparties.find(function (clientAccount) { return clientAccount.counterpartyCode === params.data.supplierCode; });
                        if (selectedClientAccount) {
                            params.node.data.isDirty = true;
                        }
                        else if (params.data.supplierCode === '') {
                            params.node.data.isDirty = true;
                        }
                    }
                },
            },
            {
                headerName: 'CCY',
                field: 'currencyCode',
                colId: 'currencyCode',
                cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_4__["AgGridAutocompleteComponent"],
                cellRendererParams: function (params) {
                    return {
                        context: {
                            componentParent: _this,
                            gridEditable: _this.isGridEditable(params),
                        },
                        options: _this.masterdata.currencies,
                        valueProperty: 'currencyCode',
                        codeProperty: 'currencyCode',
                        displayProperty: 'description',
                        isRequired: true,
                    };
                },
                onCellValueChanged: function (params) {
                    if (params.data.currencyCode && _this.masterdata.currencies) {
                        var currencyCode = _this.masterdata.currencies.find(function (currency) {
                            return currency.currencyCode === params.data.currencyCode;
                        });
                        if (currencyCode) {
                            params.node.setDataValue('currencyCode', params.data.currencyCode);
                            params.node.data.isDirty = true;
                        }
                    }
                },
            },
            {
                headerName: 'Rate Type*',
                field: 'rateTypeCode',
                editable: this.isGridEditable.bind(this),
                cellRenderer: this.requiredCell,
                cellEditor: 'agRichSelectCellEditor',
                cellEditorParams: {
                    values: this.rateTypes.map(function (rateType) { return rateType.code; }),
                    valuePropertyName: 'code',
                    displayFormat: 'code',
                    context: this.masterdata,
                },
                onCellValueChanged: function (params) {
                    _this.onRateTypeChange(params);
                },
            },
            {
                headerName: 'Price Code',
                field: 'priceCode',
                colId: 'priceCode',
                editable: this.isPriceCodeEditable.bind(this),
                cellEditor: 'agRichSelectCellEditor',
                cellRenderer: this.priceCodeRequired.bind(this),
                cellEditorParams: {
                    values: this.masterdata.priceUnits.map(function (priceUnit) { return priceUnit.priceCode; }),
                    displayPropertyName: 'description',
                    valuePropertyName: 'priceCode',
                    displayFormat: 'priceCode | description',
                    context: this.masterdata,
                },
            },
            {
                headerName: 'Pay/Rec*',
                field: 'costDirection',
                editable: true,
                cellRenderer: this.requiredCell,
                cellEditor: 'agRichSelectCellEditor',
                cellEditorParams: {
                    values: this.costDirections.map(function (costDirection) { return costDirection.costDirection; }),
                    displayPropertyName: 'costDirection',
                    valuePropertyName: 'costDirection',
                    displayFormat: 'costDirection',
                },
            },
            {
                headerName: 'Rate/Amount',
                field: 'rate',
                editable: this.isGridEditable.bind(this),
                cellEditor: 'atlasNumeric',
                type: 'numberColumn',
                cellEditorParams: {
                    displayMask: Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_16__["CustomNumberMask"])(12, 10, false),
                    isRightAligned: false,
                },
            },
            {
                headerName: 'in P&L',
                field: 'inPL',
                colId: 'inPL',
                cellRenderer: 'atlasCheckbox',
                cellRendererParams: {
                    disabled: !this.pnlPrivilege,
                    params: this.gridContext,
                },
            },
            {
                headerName: 'No Act',
                field: 'noAction',
                colId: 'noAction',
                cellRenderer: 'atlasCheckbox',
                cellRendererParams: {
                    disabled: !this.noActPrivilege,
                    params: this.gridContext,
                },
            },
            {
                headerName: '%Invoiced',
                field: 'invoicePercent',
                hide: true,
            },
            {
                headerName: 'Add or Override?',
                field: 'isAddOrOverride',
                editable: false,
                hide: true,
            },
            {
                headerName: 'Pro Rata',
                field: 'isProRata',
                colId: 'isProRata',
                cellRenderer: 'atlasCheckbox',
                cellRendererParams: {
                    disabled: function () { return !_this.isProRataCheck; },
                    params: this.gridContext,
                },
                pinned: 'right',
            },
            {
                headerName: 'Update Options',
                field: 'updateOptions',
                editable: this.isGridEditable.bind(this),
                cellRenderer: this.requiredCell,
                cellEditor: 'agRichSelectCellEditor',
                cellEditorParams: {
                    values: this.updateOptions.map(function (options) { return options.option; }),
                    displayPropertyName: 'option',
                    valuePropertyName: 'option',
                    displayFormat: 'option',
                },
                onCellValueChanged: this.onUpdateOptionChange.bind(this),
                pinned: 'right',
            },
        ];
    };
    AddCostsComponent.prototype.requiredCell = function (params) {
        if (!params.value || params.value === '') {
            return '<div class=\'cost-cell-value-required\'>Required*</div>';
        }
        return params.value;
    };
    AddCostsComponent.prototype.isGridEditable = function (params) {
        return params.context.gridEditable;
    };
    AddCostsComponent.prototype.isPriceCodeEditable = function (params) {
        if (params.data.rateTypeCode === _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_14__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_14__["RateTypes"].Rate]) {
            return params.context.gridEditable;
        }
        else {
            params.node.setDataValue('priceCode', '');
        }
    };
    AddCostsComponent.prototype.onRateTypeChange = function (params) {
        if (params.newValue === _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_14__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_14__["RateTypes"].Rate]) {
            this.priceCodeRequired(params);
        }
        else if (params.newValue === _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_14__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_14__["RateTypes"].Amount]) {
            this.isPriceCodeEditable(params);
        }
        else {
            this.isPriceCodeEditable(params);
        }
        // prorata check
        this.isProRataCheck = (params.data.rateTypeCode === _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_14__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_14__["RateTypes"].Amount]);
        if (this.gridApi) {
            this.gridApi.refreshCells({
                rowNodes: [params.node],
                force: true,
            });
        }
    };
    AddCostsComponent.prototype.priceCodeRequired = function (params) {
        if ((!params.value || params.value === '') && (params.data.rateTypeCode === _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_14__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_14__["RateTypes"].Rate])) {
            params.node.setDataValue('priceCode', this.requiredCell(this));
        }
        return params.value;
    };
    AddCostsComponent.prototype.onAddRowButtonClicked = function (numberOfLines) {
        if (numberOfLines && numberOfLines > 0) {
            this.gridContext.gridEditable = true;
            this.gridApi.onFilterChanged();
            for (var count = 1; count <= numberOfLines; count++) {
                var newItem = this.createNewRowData();
                this.gridApi.updateRowData({ add: [newItem], addIndex: 0 });
            }
            this.addNewLineCtrl.setValue('');
        }
    };
    AddCostsComponent.prototype.createNewRowData = function () {
        var newCostRow = new _shared_entities_bulk_edit_cost_entity__WEBPACK_IMPORTED_MODULE_9__["BulkCost"]();
        newCostRow.costDirectionId = _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_10__["CostDirections"].Payable;
        newCostRow.currencyCode = _shared_enums_currency_codes_enum__WEBPACK_IMPORTED_MODULE_12__["CurrencyCodes"].USD;
        newCostRow.rowStatus = 'N';
        newCostRow.costIds = [];
        newCostRow.invoicingStatusId = _shared_enums_invoicing_status_enum__WEBPACK_IMPORTED_MODULE_13__["InvoicingStatus"].Uninvoiced;
        return newCostRow;
    };
    AddCostsComponent.prototype.onCellValueChanged = function (params) {
        if (params.oldValue !== params.newValue) {
            params.node.data.isDirty = true;
            this.gridColumnApi.autoSizeAllColumns();
        }
    };
    AddCostsComponent.prototype.onAddCostMatrixClicked = function () {
        var _this = this;
        this.tradingService.getCostmatricesByCompanyId(this.company).subscribe(function (data) {
            _this.costMatrix = data.value;
            if (_this.costMatrix) {
                var openCostMatrixDialog = _this.dialog.open(_trading_components_contract_physical_capture_costs_tab_cost_matrix_dialog_cost_matrix_dialog_component__WEBPACK_IMPORTED_MODULE_21__["CostMatrixDialogComponent"], {
                    data: {
                        matrixData: _this.costMatrix,
                    },
                    width: '45%',
                });
                openCostMatrixDialog.afterClosed().subscribe(function (matrixId) {
                    if (matrixId) {
                        _this.importMatrices(matrixId);
                    }
                });
            }
        });
    };
    AddCostsComponent.prototype.importMatrices = function (matrixId) {
        var _this = this;
        this.tradingService.getCostmatricesListByCostmatrixId(matrixId).subscribe(function (data) {
            _this.selectCostmatrix = data.name;
            data.costMatrixLines.filter(function (line) {
                data.costMatrixId = line.costMatrixId;
                _this.filteredLines = data.costMatrixLines;
            });
            if (_this.filteredLines && _this.filteredLines.length > 0) {
                _this.addCostMatrixLinesToCostGrid();
            }
        });
    };
    AddCostsComponent.prototype.addCostMatrixLinesToCostGrid = function () {
        var _this = this;
        this.filteredLines.forEach(function (rows) {
            var costRow = new _shared_entities_bulk_edit_cost_entity__WEBPACK_IMPORTED_MODULE_9__["BulkCost"]();
            costRow.costMatrixName = _this.selectCostmatrix;
            costRow.costTypeCode = _this.getCostTypeCodeFromId(rows.costTypeId);
            costRow.description = rows.description;
            costRow.supplierCode = _this.getSupplierCodeFromId(rows.supplierId);
            costRow.costDirection = _this.getCostDirectionCodeFromId(rows.payReceive, _this.costDirections);
            costRow.currencyCode = rows.currencyCode;
            costRow.rateTypeCode = _this.getRateCodeFromId(rows.rateType);
            costRow.priceCode = _this.getPriceCodeFromId(rows.priceUnitId);
            costRow.rate = rows.rateAmount;
            costRow.inPL = rows.inPL;
            costRow.noAction = rows.noAct;
            costRow.narrative = rows.narrative;
            costRow.costMatrixLineId = rows.costMatrixLineId;
            costRow.isAddOrOverride = 'No';
            _this.gridApi.updateRowData({ add: [costRow] });
        });
    };
    AddCostsComponent.prototype.getCostTypeCodeFromId = function (id) {
        var costTypeCode = this.masterdata.costTypes.find(function (e) { return e.costTypeId === id; });
        return costTypeCode ? costTypeCode.costTypeCode : null;
    };
    AddCostsComponent.prototype.getSupplierCodeFromId = function (id) {
        var counterparty = this.masterdata.counterparties.find(function (e) { return e.counterpartyID === id; });
        return counterparty ? counterparty.counterpartyCode : null;
    };
    AddCostsComponent.prototype.getRateCodeFromId = function (id) {
        var rateCode = _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_14__["RateTypes"][id];
        return rateCode;
    };
    AddCostsComponent.prototype.getPriceCodeFromId = function (id) {
        var priceCode = this.masterdata.priceUnits.find(function (e) { return e.priceUnitId === id; });
        return priceCode ? priceCode.priceCode : '';
    };
    AddCostsComponent.prototype.getCostDirectionCodeFromId = function (id, costDirections) {
        var costDirection = costDirections.find(function (e) { return e.costDirectionId === id; });
        return costDirection ? costDirection.costDirection : '';
    };
    AddCostsComponent.prototype.setCostsBySectionIds = function (contracts, quantity) {
        var _this = this;
        if (contracts) {
            this.selectedContracts = contracts;
            var sectionIds = contracts.map(function (contract) { return contract.sectionId; });
            this.contractSelected = sectionIds;
            var contractLabel = contracts.map(function (contract) { return contract.contractLabel; });
            this.contractLabelSelected = contractLabel;
            this.totalQuantity = quantity;
            this.existingSectionIds = sectionIds;
            this.tradingService.getCostForSelectedContracts(sectionIds)
                .subscribe(function (data) {
                _this.existingCosts = data.value;
                if (_this.existingCosts) {
                    _this.existingCosts.forEach(function (cost) {
                        cost.costTypeCode = _this.getCostTypeCodeFromId(cost.costTypeId);
                        cost.rateTypeCode = _this.getRateCodeFromId(cost.rateTypeId);
                        cost.priceCode = _this.getPriceCodeFromId(cost.priceUnitId);
                        cost.costDirection = _this.getCostDirectionCodeFromId(cost.costDirectionId, _this.costDirections);
                    });
                }
            });
        }
    };
    AddCostsComponent.prototype.onUpdateOptionChange = function (params) {
        var _this = this;
        this.contracts = [];
        var costIds = [];
        var sectionIds = [];
        // override cost is selected
        if (params.data.updateOptions === this.updateOptions[1].option) {
            if (this.existingCosts && this.existingCosts.length > 0 && params.data.costTypeCode) {
                // the list of contracts without the cost type code & cost direction different from new cost
                // to be displyed in the dialog with an option to add as new cost
                this.sectionIdsForAddNewCosts = Array.from(new Set(this.existingCosts.filter(function (cost) {
                    return cost.costTypeCode === params.data.costTypeCode && cost.costDirection === params.data.costDirection;
                }).
                    map(function (contract) { return contract.sectionId; })));
                this.costIdsForFullyInvoicedCosts = Array.from(new Set(this.existingCosts.filter(function (cost) {
                    return cost.costTypeCode === params.data.costTypeCode && cost.costDirection === params.data.costDirection
                        && cost.invoicePercent === 100;
                }).map(function (contract) { return contract.costId; })));
                this.contractReferenceForFullyInvoicedCosts = Array.from(new Set(this.existingCosts.filter(function (cost) {
                    return cost.costTypeCode === params.data.costTypeCode && cost.costDirection === params.data.costDirection
                        && cost.invoicePercent === 100;
                }).map(function (contract) { return contract.contractReference; })));
                this.costIdsForOverrideCosts = Array.from(new Set(this.existingCosts.filter(function (cost) {
                    return cost.costTypeCode === params.data.costTypeCode && cost.costDirection === params.data.costDirection
                        && cost.invoicePercent < 100;
                }).
                    map(function (contract) { return contract.costId; })));
                this.contracts = Array.from(new Set(this.existingCosts.filter(function (cost) {
                    return !_this.costIdsForOverrideCosts.includes(cost.costId) && !_this.sectionIdsForAddNewCosts.includes(cost.sectionId);
                }).
                    map(function (contract) { return contract.contractReference; })));
                // section ids where the cost will be added when yes is selected from dialog
                sectionIds = Array.from(new Set(this.existingCosts.filter(function (cost) {
                    return !_this.costIdsForOverrideCosts.includes(cost.costId) && !_this.sectionIdsForAddNewCosts.includes(cost.sectionId);
                }).
                    map(function (contract) { return contract.sectionId; })));
                costIds = Array.from(new Set(this.existingCosts.filter(function (cost) {
                    return !_this.costIdsForOverrideCosts.includes(cost.costId) && !_this.sectionIdsForAddNewCosts.includes(cost.sectionId);
                }).map(function (contract) { return contract.costId; })));
                if (this.costIdsForFullyInvoicedCosts && this.costIdsForFullyInvoicedCosts.length > 0) {
                    this.fullyInvoicedContracts = this.contractReferenceForFullyInvoicedCosts;
                    this.snackbarService.throwErrorSnackBar('Some costs could not be overridden, since they are fully invoiced ' + this.fullyInvoicedContracts);
                }
                if (this.contracts && this.contracts.length > 0) {
                    var overrideDialog = this.dialog.open(_edit_costs_dialog_edit_costs_dialog_component__WEBPACK_IMPORTED_MODULE_22__["EditCostsDialogComponent"], {
                        width: '40%',
                        height: '40%',
                        data: {
                            confirmationMessage: 'The cost ' + params.data.costTypeCode + ' to ' +
                                params.data.costDirection + ' doesn’t exist in the following trades. Do you want to add the cost item?',
                            contractReference: this.contracts,
                        },
                    });
                    overrideDialog.afterClosed().subscribe(function (result) {
                        params.data.isAddOrOverride = result ? 'Yes' : 'No';
                        if (result) {
                            params.data.sectionIds = sectionIds;
                        }
                        _this.gridApi.refreshCells();
                    });
                }
            }
            else if (this.existingCosts && this.existingCosts.length === 0 && params.data.costTypeCode) {
                // the list of contracts without the cost type code & cost direction different from new cost
                // to be displyed in the dialog with an option to add as new cost
                this.sectionIdsForAddNewCosts = this.contractSelected;
                this.contracts = this.contractLabelSelected;
                if (this.contracts && this.contracts.length > 0) {
                    var overrideDialog = this.dialog.open(_edit_costs_dialog_edit_costs_dialog_component__WEBPACK_IMPORTED_MODULE_22__["EditCostsDialogComponent"], {
                        width: '40%',
                        height: '40%',
                        data: {
                            confirmationMessage: 'The cost ' + params.data.costTypeCode + ' to ' +
                                params.data.costDirection + ' doesn’t exist in the following trades. Do you want to add the cost item?',
                            contractReference: this.contracts,
                        },
                    });
                    overrideDialog.afterClosed().subscribe(function (result) {
                        params.data.isAddOrOverride = result ? 'Yes' : 'No';
                        if (result) {
                            params.data.sectionIds = _this.sectionIdsForAddNewCosts;
                        }
                        _this.gridApi.refreshCells();
                    });
                }
            }
            else {
                this.showErroMessageForRequiredFields();
                params.data.updateOptions = '';
                this.gridApi.refreshCells();
            }
            // Add new cost is selected
        }
        else if (params.data.updateOptions === this.updateOptions[0].option) {
            if (this.existingCosts && params.data.costTypeCode) {
                // the list of contracts with the cost type code & cost direction same as new cost
                // to be displyed in the dialog, with an option to override
                this.contracts = Array.from(new Set(this.existingCosts.filter(function (cost) {
                    return cost.costTypeCode === params.data.costTypeCode && cost.costDirection === params.data.costDirection;
                }).
                    map(function (contract) { return contract.contractReference; })));
                this.costIdsForFullyInvoicedCosts = Array.from(new Set(this.existingCosts.filter(function (cost) {
                    return cost.costTypeCode === params.data.costTypeCode && cost.costDirection === params.data.costDirection
                        && cost.invoicePercent === 100;
                }).map(function (contract) { return contract.costId; })));
                this.contractReferenceForFullyInvoicedCosts = Array.from(new Set(this.existingCosts.filter(function (cost) {
                    return cost.costTypeCode === params.data.costTypeCode && cost.costDirection === params.data.costDirection
                        && cost.invoicePercent === 100;
                }).map(function (contract) { return contract.contractReference; })));
                // costids where the override has to take place
                costIds = Array.from(new Set(this.existingCosts.filter(function (cost) {
                    return cost.costTypeCode === params.data.costTypeCode && cost.costDirection === params.data.costDirection
                        && cost.invoicePercent < 100;
                }).map(function (contract) { return contract.costId; })));
                // section ids where the costs have to be newly added
                this.sectionIdsForAddNewCosts = Array.from(new Set(this.existingCosts.filter(function (cost) {
                    return !_this.contracts.includes(cost.contractReference);
                }).map(function (contract) { return contract.sectionId; })));
                if (this.contracts && this.contracts.length > 0) {
                    var overrideDialog = this.dialog.open(_edit_costs_dialog_edit_costs_dialog_component__WEBPACK_IMPORTED_MODULE_22__["EditCostsDialogComponent"], {
                        width: '40%',
                        height: '40%',
                        data: {
                            confirmationMessage: 'The cost ' + params.data.costTypeCode + ' to ' +
                                params.data.costDirection + ' already exists in the following trades. Do you want to override the cost item?',
                            contractReference: this.contracts,
                        },
                    });
                    overrideDialog.afterClosed().subscribe(function (result) {
                        params.data.isAddOrOverride = result ? 'Yes' : 'No';
                        if (result) {
                            params.data.costIds = costIds;
                            if (_this.costIdsForFullyInvoicedCosts && _this.costIdsForFullyInvoicedCosts.length > 0) {
                                _this.fullyInvoicedContracts = _this.contractReferenceForFullyInvoicedCosts;
                                _this.snackbarService.throwErrorSnackBar('Some costs could not be overridden, since they are fully invoiced ' + _this.fullyInvoicedContracts);
                            }
                        }
                        _this.gridApi.refreshCells();
                    });
                }
            }
            else {
                this.showErroMessageForRequiredFields();
                params.data.updateOptions = '';
                this.gridApi.refreshCells();
            }
        }
    };
    AddCostsComponent.prototype.onProceedButtonClicked = function () {
        var _this = this;
        if (!this.validate()) {
            this.snackbarService.throwErrorSnackBar('Form is invalid. Please resolve the errors.');
            return;
        }
        else {
            this.newCosts = [];
            this.gridApi.forEachNode(function (row) {
                if ((row.data.costIds && row.data.costIds.length > 0)) {
                    if (row.data.updateOptions === _shared_enums_cost_edit_options_enum__WEBPACK_IMPORTED_MODULE_11__["CostBulkEditUpdateOptions"].AddNewCost && row.data.isAddOrOverride === 'Yes') {
                        // override existing cost when cost type & cost direction is different
                        for (var index in row.data.costIds) {
                            var newCost = new _shared_entities_bulk_edit_cost_entity__WEBPACK_IMPORTED_MODULE_9__["BulkCost"]();
                            _this.GetRowDataForNewCost(newCost, row);
                            newCost.costId = row.data.costIds[index];
                            newCost.sectionId = _this.getSectionIdFromExistingCosts(row.data.costIds[index]);
                            newCost.contractReference = _this.getContractReferenceByCostId(row.data.costIds[index]);
                            newCost.quantity = _this.getContractQuantityByCostId(row.data.costIds[index]);
                            _this.newCosts.push(newCost);
                        }
                        // add new costs for the rest of the contracts selected
                        if (_this.sectionIdsForAddNewCosts && _this.sectionIdsForAddNewCosts.length > 0) {
                            _this.sectionIdsForAddNewCosts.forEach(function (sectionId) {
                                var newCost = new _shared_entities_bulk_edit_cost_entity__WEBPACK_IMPORTED_MODULE_9__["BulkCost"]();
                                newCost.sectionId = sectionId;
                                _this.GetRowDataForNewCost(newCost, row);
                                newCost.contractReference = _this.getContractReferenceBySectionId(sectionId);
                                newCost.quantity = _this.getContractQuantityBySectionId(sectionId);
                                _this.newCosts.push(newCost);
                            });
                        }
                    }
                }
                else if ((row.data.sectionIds && row.data.sectionIds.length > 0)) {
                    if (row.data.updateOptions === _shared_enums_cost_edit_options_enum__WEBPACK_IMPORTED_MODULE_11__["CostBulkEditUpdateOptions"].OverRideCost && row.data.isAddOrOverride === 'Yes') {
                        // Add new cost item when update option is Override when cost type and
                        // cost direction is different
                        for (var index in row.data.sectionIds) {
                            var newCost = new _shared_entities_bulk_edit_cost_entity__WEBPACK_IMPORTED_MODULE_9__["BulkCost"]();
                            _this.GetRowDataForNewCost(newCost, row);
                            newCost.sectionId = row.data.sectionIds[index];
                            newCost.contractReference = _this.getContractReferenceBySectionId(row.data.sectionIds[index]);
                            newCost.quantity = _this.getContractQuantityBySectionId(row.data.sectionIds[index]);
                            _this.newCosts.push(newCost);
                        }
                        // override costs for the rest of the contracts selected if costtype & cost direction is same
                        if (_this.costIdsForOverrideCosts && _this.costIdsForOverrideCosts.length > 0) {
                            _this.costIdsForOverrideCosts.forEach(function (costId) {
                                var newCost = new _shared_entities_bulk_edit_cost_entity__WEBPACK_IMPORTED_MODULE_9__["BulkCost"]();
                                _this.GetRowDataForNewCost(newCost, row);
                                newCost.costId = costId;
                                newCost.sectionId = _this.getSectionIdFromExistingCosts(costId);
                                newCost.contractReference = _this.getContractReferenceByCostId(costId);
                                newCost.quantity = _this.getContractQuantityByCostId(costId);
                                _this.newCosts.push(newCost);
                            });
                        }
                    }
                }
                else {
                    if (row.data.updateOptions === _shared_enums_cost_edit_options_enum__WEBPACK_IMPORTED_MODULE_11__["CostBulkEditUpdateOptions"].OverRideCost) {
                        // Override the existing costs if cost type and cost direction is same
                        _this.existingCosts.forEach(function (cost) {
                            if (cost.costTypeCode === row.data.costTypeCode && cost.costDirection === row.data.costDirection
                                && cost.invoicePercent < 100) {
                                var newCost = new _shared_entities_bulk_edit_cost_entity__WEBPACK_IMPORTED_MODULE_9__["BulkCost"]();
                                newCost.costId = cost.costId;
                                newCost.sectionId = cost.sectionId;
                                _this.GetRowDataForNewCost(newCost, row);
                                newCost.contractReference = cost.contractReference;
                                newCost.quantity = _this.getContractQuantityByCostId(cost.costId);
                                _this.newCosts.push(newCost);
                            }
                        });
                    }
                    else if (row.data.updateOptions === _shared_enums_cost_edit_options_enum__WEBPACK_IMPORTED_MODULE_11__["CostBulkEditUpdateOptions"].AddNewCost) {
                        _this.existingSectionIds.forEach(function (sectionId) {
                            var newCost = new _shared_entities_bulk_edit_cost_entity__WEBPACK_IMPORTED_MODULE_9__["BulkCost"]();
                            newCost.sectionId = sectionId;
                            _this.GetRowDataForNewCost(newCost, row);
                            newCost.contractReference = _this.getContractReferenceBySectionId(sectionId);
                            newCost.quantity = _this.getContractQuantityBySectionId(sectionId);
                            _this.newCosts.push(newCost);
                        });
                    }
                }
            });
            // check for prorata and perform the calculation if isProrata is set to YES
            if (this.existingSectionIds.length > 1) {
                this.newCosts.forEach(function (newCost) {
                    if (newCost.isProRata) {
                        if (newCost.rate) {
                            newCost.rate = (newCost.rate * newCost.quantity) / _this.totalQuantity;
                        }
                    }
                });
            }
            this.newCostsAdded.emit({
                costs: this.newCosts,
            });
            // setting the grid to empty on click of proceed button
            this.gridApi.setRowData([]);
        }
    };
    AddCostsComponent.prototype.GetRowDataForNewCost = function (newCost, row) {
        newCost.rowStatus = row.data.rowStatus;
        newCost.costTypeCode = row.data.costTypeCode;
        newCost.description = row.data.description;
        newCost.costMatrixName = row.data.costMatrixName;
        newCost.supplierCode = row.data.supplierCode;
        newCost.currencyCode = row.data.currencyCode;
        newCost.rateTypeCode = row.data.rateTypeCode;
        newCost.priceCode = row.data.priceCode;
        newCost.rate = row.data.rate;
        newCost.inPL = row.data.inPL;
        newCost.noAction = row.data.noAction;
        newCost.costDirection = row.data.costDirection;
        newCost.isProRata = row.data.isProRata;
    };
    AddCostsComponent.prototype.getContractReferenceByCostId = function (costId) {
        if (costId) {
            return this.existingCosts.find(function (cost) { return cost.costId === costId; }).contractReference;
        }
    };
    AddCostsComponent.prototype.getSectionIdFromExistingCosts = function (costId) {
        if (costId) {
            return this.existingCosts.find(function (cost) { return cost.costId === costId; }).sectionId;
        }
    };
    AddCostsComponent.prototype.getContractQuantityByCostId = function (costId) {
        if (costId) {
            return this.existingCosts.find(function (cost) { return cost.costId === costId; }).quantity;
        }
    };
    AddCostsComponent.prototype.getContractReferenceBySectionId = function (sectionId) {
        if (sectionId) {
            return this.selectedContracts.find(function (contract) { return contract.sectionId === sectionId; }).contractLabel;
        }
    };
    AddCostsComponent.prototype.validate = function () {
        var isValid = true;
        this.gridApi.forEachNode(function (rowData) {
            if (rowData.data.costTypeCode && rowData.data.costDirection
                && rowData.data.currencyCode && rowData.data.rateTypeCode && rowData.data.updateOptions) {
                if (((rowData.data.rateTypeCode === 'Rate') && (rowData.data.priceCode.includes('Required*')))) {
                    isValid = false;
                }
            }
            else if (!(rowData.data.costTypeCode || rowData.data.costDirection
                || rowData.data.currencyCode || rowData.data.rateTypeCode || rowData.data.updateOptions)) {
                isValid = false;
            }
            else if (!(rowData.data.costTypeCode && rowData.data.costDirection
                && rowData.data.currencyCode && rowData.data.rateTypeCode && rowData.data.updateOptions)) {
                isValid = false;
            }
        });
        return isValid;
    };
    AddCostsComponent.prototype.getContractQuantityBySectionId = function (sectionId) {
        if (sectionId) {
            return this.selectedContracts.find(function (contract) { return contract.sectionId === sectionId; }).quantity;
        }
    };
    AddCostsComponent.prototype.showErroMessageForRequiredFields = function () {
        this.snackbarService.throwErrorSnackBar('Select cost type and cost direction to proceed');
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], AddCostsComponent.prototype, "newCostsAdded", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Boolean)
    ], AddCostsComponent.prototype, "noActPrivilege", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Boolean)
    ], AddCostsComponent.prototype, "pnlPrivilege", void 0);
    AddCostsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-add-costs',
            template: __webpack_require__(/*! ./add-costs.component.html */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/add-costs/add-costs.component.html"),
            styles: [__webpack_require__(/*! ./add-costs.component.scss */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/add-costs/add-costs.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_18__["MasterdataService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialog"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_19__["TradingService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_20__["SnackbarService"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_17__["AgGridService"]])
    ], AddCostsComponent);
    return AddCostsComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs-dialog/edit-costs-dialog.component.html":
/*!*********************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs-dialog/edit-costs-dialog.component.html ***!
  \*********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"edit-costs-dialog\">\r\n    <div fxLayoutAlign=\"space-between center\">\r\n        <h1 class=\"no-margin\">Overriding a non - existing cost</h1>\r\n        <button mat-button\r\n                class=\"close-button\">\r\n            <mat-icon (click)=\"onCloseButtonClicked()\">close</mat-icon>\r\n        </button>\r\n    </div>\r\n    <mat-dialog-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"center center\">\r\n            <p>{{dialogText}}</p>\r\n        </div>\r\n\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"space-between start\">\r\n            <div class=\"chip-list\">\r\n                <atlas-chip-list *ngIf=\"chipStringList\"\r\n                                 [textList]='chipStringList'></atlas-chip-list>\r\n            </div>\r\n        </div>\r\n    </mat-dialog-content>\r\n    <mat-dialog-actions>\r\n        <div fxFlex=\"50\"\r\n             fxLayout=\"row\"\r\n             fxAlignLayout=\"start start\">\r\n            <button mat-button\r\n                    (click)=\"onNoButtonClicked()\">NO</button>\r\n        </div>\r\n        <div fxFlex=\"50\"\r\n             fxLayout=\"row\"\r\n             fxAlignLayout=\"start end\">\r\n            <span class=\"fill-space\"></span>\r\n            <button mat-button\r\n                    class=\"add-cost-button\"\r\n                    (click)=\"onYesButtonClicked()\">YES</button>\r\n        </div>\r\n    </mat-dialog-actions>\r\n</div>"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs-dialog/edit-costs-dialog.component.scss":
/*!*********************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs-dialog/edit-costs-dialog.component.scss ***!
  \*********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".edit-costs-dialog .mat-button.add-cost-button {\n  text-transform: none !important; }\n\n.chip-list .mat-chip-list-wrapper .mat-standard-chip {\n  margin: 8px 8px 8px 0 !important; }\n"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs-dialog/edit-costs-dialog.component.ts":
/*!*******************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs-dialog/edit-costs-dialog.component.ts ***!
  \*******************************************************************************************************************************************************/
/*! exports provided: EditCostsDialogComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditCostsDialogComponent", function() { return EditCostsDialogComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};


var EditCostsDialogComponent = /** @class */ (function () {
    function EditCostsDialogComponent(thisDialogRef, data) {
        this.thisDialogRef = thisDialogRef;
        this.data = data;
        this.dialogText = '';
        this.dialogData = data;
        this.dialogText = this.dialogData.confirmationMessage;
        this.chipStringList = this.dialogData.contractReference;
    }
    EditCostsDialogComponent.prototype.ngOnInit = function () {
    };
    EditCostsDialogComponent.prototype.onCloseButtonClicked = function () {
        this.thisDialogRef.close();
    };
    EditCostsDialogComponent.prototype.onYesButtonClicked = function () {
        this.thisDialogRef.close(true);
    };
    EditCostsDialogComponent.prototype.onNoButtonClicked = function () {
        this.thisDialogRef.close(false);
    };
    EditCostsDialogComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-edit-costs-dialog',
            template: __webpack_require__(/*! ./edit-costs-dialog.component.html */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs-dialog/edit-costs-dialog.component.html"),
            styles: [__webpack_require__(/*! ./edit-costs-dialog.component.scss */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs-dialog/edit-costs-dialog.component.scss")],
        }),
        __param(1, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_1__["MAT_DIALOG_DATA"])),
        __metadata("design:paramtypes", [_angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialogRef"], Object])
    ], EditCostsDialogComponent);
    return EditCostsDialogComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs/edit-costs.component.html":
/*!*******************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs/edit-costs.component.html ***!
  \*******************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"center center\"\r\n             fxLayoutWrap\r\n             *ngIf=\"isLoading\"\r\n             class=\"loading\">\r\n            <mat-spinner color=\"accent\"></mat-spinner>\r\n        </div>\r\n        <div fxLayout=\"row\"\r\n             fxLayout.xs=\"column\"\r\n             fxLayoutAlign=\"space-between left\"\r\n             fxLayoutWrap\r\n             fxLayoutGap=\"20px\"\r\n             class=\"atlas-grid-card-header\">\r\n            <h2 class=\"atlas-grid-card-title\">Costs List</h2>\r\n            <atlas-ag-grid-user-preferences *ngIf=\"costContractGridOptions && costContractGridOptions.columnDefs\"\r\n                                            [gridOptions]=\"costContractGridOptions\"\r\n                                            [company]=\"company\"\r\n                                            [gridId]=\"componentId\"\r\n                                            [sharingEnabled]=\"hasGridSharing\"\r\n                                            #userPreferences>\r\n            </atlas-ag-grid-user-preferences>\r\n        </div>\r\n        <div ag-grid=\"costContractGridOptions\"\r\n             class=\"costContractsBulkEdit\"\r\n             style=\"width: 100%; height:100%\">\r\n            <ag-grid-angular style=\" height:100%;\"\r\n                             class=\"ag-theme-material\"\r\n                             [gridOptions]=\"costContractGridOptions\"\r\n                             [rowData]=\"costContractGridRows\"\r\n                             [columnDefs]=\"costContractGridColumns\"\r\n                             domLayout=\"autoHeight\"\r\n                             (gridReady)=\"onGridReady($event)\"\r\n                             [pagination]=\"true\"\r\n                             (cellValueChanged)=\"onCellValueChanged($event)\"\r\n                             [paginationPageSize]=\"30\"\r\n                             [enableSorting]=\"true\"\r\n                             [enableColResize]=\"true\"\r\n                             enableFilter\r\n                             [rowHeight]=atlasAgGridParam.rowHeight\r\n                             [singleClickEdit]=true\r\n                             [frameworkComponents]=\"gridComponents\">\r\n            </ag-grid-angular>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs/edit-costs.component.scss":
/*!*******************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs/edit-costs.component.scss ***!
  \*******************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs/edit-costs.component.ts":
/*!*****************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs/edit-costs.component.ts ***!
  \*****************************************************************************************************************************************/
/*! exports provided: EditCostsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EditCostsComponent", function() { return EditCostsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_components_ag_contextual_menu_ag_contextual_menu_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../../../shared/components/ag-contextual-menu/ag-contextual-menu.component */ "./Client/app/shared/components/ag-contextual-menu/ag-contextual-menu.component.ts");
/* harmony import */ var _shared_components_ag_grid_checkbox_ag_grid_checkbox_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../../../shared/components/ag-grid-checkbox/ag-grid-checkbox.component */ "./Client/app/shared/components/ag-grid-checkbox/ag-grid-checkbox.component.ts");
/* harmony import */ var _shared_components_ag_grid_user_preferences_ag_grid_user_preferences_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../../../shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component */ "./Client/app/shared/components/ag-grid-user-preferences/ag-grid-user-preferences.component.ts");
/* harmony import */ var _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../../../shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component */ "./Client/app/shared/components/ag-grid/autocomplete/ag-grid-autocomplete.component.ts");
/* harmony import */ var _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../../../shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component */ "./Client/app/shared/components/ag-grid/contextual-search/ag-grid-contextual-search.component.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_components_cell_editor_numeric_cell_editor_numeric_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../../../shared/components/cell-editor-numeric/cell-editor-numeric.component */ "./Client/app/shared/components/cell-editor-numeric/cell-editor-numeric.component.ts");
/* harmony import */ var _shared_components_cell_editor_select_cell_editor_select_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../../../shared/components/cell-editor-select/cell-editor-select.component */ "./Client/app/shared/components/cell-editor-select/cell-editor-select.component.ts");
/* harmony import */ var _shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../../../shared/components/confirmation-dialog/confirmation-dialog.component */ "./Client/app/shared/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony import */ var _shared_entities_bulk_edit_cost_entity__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../../../shared/entities/bulk-edit-cost.entity */ "./Client/app/shared/entities/bulk-edit-cost.entity.ts");
/* harmony import */ var _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../../../shared/enums/cost-direction.enum */ "./Client/app/shared/enums/cost-direction.enum.ts");
/* harmony import */ var _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../../../../shared/enums/rate-type.enum */ "./Client/app/shared/enums/rate-type.enum.ts");
/* harmony import */ var _shared_numberMask__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../../../../shared/numberMask */ "./Client/app/shared/numberMask.ts");
/* harmony import */ var _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../../../../shared/services/ag-grid.service */ "./Client/app/shared/services/ag-grid.service.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../../../../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../../../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
























var EditCostsComponent = /** @class */ (function (_super) {
    __extends(EditCostsComponent, _super);
    function EditCostsComponent(masterDataService, route, formBuilder, formConfigurationProvider, tradingService, snackbarService, dialog, authorizationService, securityService, gridService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.masterDataService = masterDataService;
        _this.route = route;
        _this.formBuilder = formBuilder;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.tradingService = tradingService;
        _this.snackbarService = snackbarService;
        _this.dialog = dialog;
        _this.authorizationService = authorizationService;
        _this.securityService = securityService;
        _this.gridService = gridService;
        _this.costsBulkEditMenuActions = {
            deleteCost: 'delete',
        };
        _this.gridComponents = {
            atlasSelect: _shared_components_cell_editor_select_cell_editor_select_component__WEBPACK_IMPORTED_MODULE_12__["CellEditorSelectComponent"],
            atlasNumeric: _shared_components_cell_editor_numeric_cell_editor_numeric_component__WEBPACK_IMPORTED_MODULE_11__["CellEditorNumericComponent"],
            atlasCheckbox: _shared_components_ag_grid_checkbox_ag_grid_checkbox_component__WEBPACK_IMPORTED_MODULE_6__["AgGridCheckboxComponent"],
        };
        _this.costContractGridOptions = {};
        _this.componentId = 'EditCostsGrid';
        _this.hasGridSharing = false;
        _this.costsToSummary = [];
        _this.updatedCostsToSummary = [];
        _this.existingCosts = [];
        _this.costsToDelete = [];
        _this.gridContext = {
            gridEditable: true,
            componentParent: _this,
            editPrivileges: true,
            deletePrivileges: _this.costsDeletePrivilege,
            inPNLPrivileges: true,
        };
        return _this;
    }
    EditCostsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.masterdata = this.route.snapshot.data.masterdata;
        this.atlasAgGridParam = this.gridService.getAgGridParam();
        this.company = this.route.snapshot.paramMap.get('company');
        this.securityService.isSecurityReady().subscribe(function () {
            if (_this.authorizationService.isPrivilegeAllowed(_this.company, 'Trades')
                && _this.authorizationService.isPrivilegeAllowed(_this.company, 'CostTab')) {
                _this.costsDeletePrivilege = _this.authorizationService.isPrivilegeAllowed(_this.company, 'COSTSDEL');
            }
        });
        this.init();
        this.rateTypes = [
            {
                code: _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_16__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_16__["RateTypes"].Rate],
                description: '',
            },
            {
                code: _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_16__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_16__["RateTypes"].Amount],
                description: '',
            },
            {
                code: _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_16__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_16__["RateTypes"].Percent],
                description: '',
            },
        ];
        this.costDirections = [
            {
                costDirectionId: _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_15__["CostDirections"].Payable,
                costDirection: 'Pay',
            },
            {
                costDirectionId: _shared_enums_cost_direction_enum__WEBPACK_IMPORTED_MODULE_15__["CostDirections"].Receivable,
                costDirection: 'Receive',
            },
        ];
        this.initializeGridColumns();
    };
    EditCostsComponent.prototype.isGridEditable = function (params) {
        // edit based on invoice percent
        if (params.data.invoicePercent === 100) {
            params.data.fullyInvoiced = false;
            return params.data.fullyInvoiced;
        }
        else {
            params.data.fullyInvoiced = true;
            return params.data.fullyInvoiced;
        }
    };
    EditCostsComponent.prototype.init = function () {
        this.costEditBulkUpdateGridContextualMenuActions = [
            {
                icon: 'delete',
                text: 'Delete',
                action: this.costsBulkEditMenuActions.deleteCost,
                disabled: (!this.costsDeletePrivilege),
            },
        ];
    };
    EditCostsComponent.prototype.onGridReady = function (params) {
        var _this = this;
        this.gridApi = params.api;
        params.columnDefs = this.costContractGridColumns;
        this.costContractGridOptions = params;
        this.gridColumnApi = params.columnApi;
        this.gridColumnApi.autoSizeAllColumns();
        window.onresize = function () {
            _this.gridColumnApi.autoSizeAllColumns();
        };
        this.gridApi.showNoRowsOverlay();
        this.autoSizeContractsGrid();
    };
    EditCostsComponent.prototype.autoSizeContractsGrid = function () {
        if (this.gridColumnApi !== undefined) {
            var allColumnIds_1 = [];
            if (this.costContractGridColumns) {
                this.costContractGridColumns.forEach(function (columnDefs) {
                    allColumnIds_1.push(columnDefs.field);
                });
            }
            this.gridColumnApi.autoSizeColumns(allColumnIds_1);
        }
    };
    EditCostsComponent.prototype.isCostInvoicedRowStyle = function (node) {
        if (node.data.invoicePercent === 100) {
            return { background: 'rgba(199, 194, 196, 0.5)', color: '#928D8F' };
        }
    };
    EditCostsComponent.prototype.initializeGridColumns = function () {
        var _this = this;
        this.costContractGridOptions = {
            context: this.gridContext,
            getRowStyle: this.isCostInvoicedRowStyle.bind(this),
        };
        this.costContractGridColumns = [
            {
                headerName: 'Status',
                colId: 'rowStatus',
                field: 'rowStatus',
                width: 110,
                minWidth: 110,
                maxWidth: 110,
                cellRenderer: function (params) {
                    if (params.value) {
                        return '<mat-chip-list><mat-chip class="status-flag-chip">' + params.value + '</mat-chip></mat-chip-list>';
                    }
                    return '';
                },
                pinned: 'left',
                sort: 'desc',
            },
            {
                headerName: 'Contract Reference',
                field: 'contractReference',
                colId: 'contractReference',
                hide: false,
                editable: false,
                pinned: 'left',
            },
            {
                headerName: 'Cost type*',
                field: 'costTypeCode',
                colId: 'costTypeCode',
                cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_8__["AgGridAutocompleteComponent"],
                cellRendererParams: function (params) {
                    return {
                        context: {
                            componentParent: _this,
                            gridEditable: _this.isGridEditable(params),
                        },
                        options: _this.masterdata.costTypes.filter(function (cost) { return cost.isATradeCost === true; })
                            .sort(function (a, b) { return a.costTypeCode.localeCompare(b.costTypeCode); }),
                        valueProperty: 'costTypeCode',
                        codeProperty: 'costTypeCode',
                        displayProperty: 'costTypeCode',
                        isRequired: true,
                    };
                },
                onCellValueChanged: function (params) {
                    var filteredCostType = _this.masterdata.costTypes.find(function (e) { return e.costTypeCode === params.data.costTypeCode; });
                    if (filteredCostType) {
                        params.node.setDataValue('description', filteredCostType.name);
                        params.node.setDataValue('inPL', filteredCostType.inPNL);
                        params.node.setDataValue('noAction', filteredCostType.noAction);
                    }
                },
            },
            {
                headerName: 'Description',
                field: 'description',
                colId: 'description',
            },
            {
                headerName: 'Matrix Name',
                field: 'costMatrixName',
                colId: 'costMatrixName',
                hide: false,
            },
            {
                headerName: 'Supplier',
                field: 'supplierCode',
                cellRendererFramework: _shared_components_ag_grid_contextual_search_ag_grid_contextual_search_component__WEBPACK_IMPORTED_MODULE_9__["AgGridContextualSearchComponent"],
                cellRendererParams: function (params) {
                    return {
                        context: {
                            componentParent: _this,
                            gridEditable: _this.isGridEditable(params),
                        },
                        gridId: 'counterpartiesGrid',
                        options: _this.masterdata.counterparties,
                        isRequired: false,
                        displayProperty: 'counterpartyCode',
                        valueProperty: 'counterpartyCode',
                        lightBoxTitle: 'Results for Counterparty',
                        showContextualSearchIcon: _this.isGridEditable(params),
                    };
                },
                onCellValueChanged: function (params) {
                    if ((params.data.supplierCode || params.data.supplierCode === '') && _this.masterdata.counterparties) {
                        var selectedClientAccount = _this.masterdata.counterparties.find(function (clientAccount) { return clientAccount.counterpartyCode === params.data.supplierCode; });
                        if (selectedClientAccount) {
                            params.node.data.isDirty = true;
                        }
                        else if (params.data.supplierCode === '') {
                            params.node.data.isDirty = true;
                        }
                    }
                },
            },
            {
                headerName: 'CCY',
                field: 'currencyCode',
                colId: 'currencyCode',
                cellRendererFramework: _shared_components_ag_grid_autocomplete_ag_grid_autocomplete_component__WEBPACK_IMPORTED_MODULE_8__["AgGridAutocompleteComponent"],
                cellRendererParams: function (params) {
                    return {
                        context: {
                            componentParent: _this,
                            gridEditable: _this.isGridEditable(params),
                        },
                        options: _this.masterdata.currencies,
                        valueProperty: 'currencyCode',
                        codeProperty: 'currencyCode',
                        displayProperty: 'description',
                        isRequired: true,
                    };
                },
                onCellValueChanged: function (params) {
                    if (params.data.currencyCode && _this.masterdata.currencies) {
                        var currencyCode = _this.masterdata.currencies.find(function (currency) { return currency.currencyCode === params.data.currencyCode; });
                        if (currencyCode) {
                            params.node.setDataValue('currencyCode', currencyCode);
                            params.node.data.isDirty = true;
                        }
                    }
                },
                width: 120,
            },
            {
                headerName: 'Rate Type*',
                field: 'rateTypeCode',
                editable: function (params) { return _this.isGridEditable(params); },
                cellRenderer: this.requiredCell,
                cellEditor: 'agRichSelectCellEditor',
                cellEditorParams: {
                    values: this.rateTypes.map(function (rateType) { return rateType.code; }),
                    valuePropertyName: 'code',
                    displayFormat: 'code',
                    context: this.masterdata,
                },
                onCellValueChanged: this.onRateTypeChange.bind(this),
                width: 120,
            },
            {
                headerName: 'Price Code',
                field: 'priceCode',
                colId: 'priceCode',
                editable: this.isPriceCodeEditable.bind(this),
                cellEditor: 'agRichSelectCellEditor',
                cellRenderer: this.priceCodeRequired.bind(this),
                cellEditorParams: {
                    values: this.masterdata.priceUnits.map(function (priceUnit) { return priceUnit.priceCode; }),
                    displayPropertyName: 'description',
                    valuePropertyName: 'priceCode',
                    displayFormat: 'priceCode | description',
                    context: this.masterdata,
                },
                width: 120,
            },
            {
                headerName: 'Pay/Rec*',
                field: 'costDirection',
                editable: function (params) { return _this.isGridEditable(params); },
                cellRenderer: this.requiredCell,
                cellEditor: 'agRichSelectCellEditor',
                cellEditorParams: {
                    values: this.costDirections.map(function (costDirection) { return costDirection.costDirection; }),
                    displayPropertyName: 'costDirection',
                    valuePropertyName: 'costDirection',
                    displayFormat: 'costDirection',
                },
            },
            {
                headerName: 'Rate/Amount',
                field: 'rate',
                editable: function (params) { return _this.isGridEditable(params); },
                cellEditor: 'atlasNumeric',
                type: 'numberColumn',
                onCellValueChanged: this.onRateAmountChanged.bind(this),
                cellEditorParams: {
                    displayMask: Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_17__["CustomNumberMask"])(12, 10, false),
                    isRightAligned: false,
                },
            },
            {
                headerName: 'in P&L',
                field: 'inPL',
                colId: 'inPL',
                cellRenderer: 'atlasCheckbox',
                cellRendererParams: function (params) {
                    return {
                        disabled: !_this.pnlPrivilege || (!params.data.fullyInvoiced),
                        params: _this.gridContext,
                    };
                },
            },
            {
                headerName: 'No Act',
                field: 'noAction',
                colId: 'noAction',
                cellRenderer: 'atlasCheckbox',
                cellRendererParams: function (params) {
                    return {
                        disabled: !_this.noActPrivilege || (!params.data.fullyInvoiced),
                        params: _this.gridContext,
                    };
                },
            },
            {
                headerName: '%Invoiced',
                field: 'invoicePercent',
                colId: 'invoicePercent',
                width: 120,
                type: 'numericColumn',
            },
            {
                pinned: 'right',
                cellRendererFramework: _shared_components_ag_contextual_menu_ag_contextual_menu_component__WEBPACK_IMPORTED_MODULE_5__["AgContextualMenuComponent"],
                cellRendererParams: {
                    context: {
                        componentParent: this,
                        actionContext: this.gridContext,
                    },
                    menuActions: this.costEditBulkUpdateGridContextualMenuActions,
                },
                cellClass: 'ag-contextual-menu',
                width: 40,
            },
        ];
    };
    EditCostsComponent.prototype.requiredCell = function (params) {
        if (!params.value || params.value === '') {
            return '<div class=\'cost-cell-value-required\'>Required*</div>';
        }
        return params.value;
    };
    EditCostsComponent.prototype.isPriceCodeEditable = function (params) {
        if (params.data.rateTypeCode === _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_16__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_16__["RateTypes"].Rate]) {
            return params.context.gridEditable;
        }
        else {
            params.node.setDataValue('priceCode', '');
        }
    };
    EditCostsComponent.prototype.priceCodeRequired = function (params) {
        if ((!params.value || params.value === '') && (params.data.rateTypeCode === _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_16__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_16__["RateTypes"].Rate])) {
            params.node.setDataValue('priceCode', this.requiredCell(this));
        }
        return params.value;
    };
    EditCostsComponent.prototype.onRateTypeChange = function (params) {
        if (params.newValue === _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_16__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_16__["RateTypes"].Rate]) {
            this.priceCodeRequired(params);
        }
        else if (params.newValue === _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_16__["RateTypes"][_shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_16__["RateTypes"].Amount]) {
            this.isPriceCodeEditable(params);
        }
        else {
            this.isPriceCodeEditable(params);
        }
    };
    EditCostsComponent.prototype.getRateCodeFromId = function (id) {
        var rateCode = _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_16__["RateTypes"][id];
        return rateCode;
    };
    EditCostsComponent.prototype.getPriceCodeFromId = function (id) {
        var priceCode = this.masterdata.priceUnits.find(function (e) { return e.priceUnitId === id; });
        return priceCode ? priceCode.priceCode : '';
    };
    EditCostsComponent.prototype.getCostDirectionCodeFromId = function (id, costDirections) {
        var costDirection = costDirections.find(function (e) { return e.costDirectionId === id; });
        return costDirection ? costDirection.costDirection : '';
    };
    EditCostsComponent.prototype.getCostTypeCodeFromId = function (id, masterdata) {
        var costTypeCode = masterdata.costTypes.find(function (e) { return e.costTypeId === id; });
        return costTypeCode ? costTypeCode.costTypeCode : null;
    };
    EditCostsComponent.prototype.getCostTypeDescriptionFromId = function (id, masterdata) {
        var descrption = masterdata.costTypes.find(function (e) { return e.costTypeId === id; });
        return descrption ? descrption.name : null;
    };
    EditCostsComponent.prototype.setCostsBySectionIds = function (sectionIds) {
        var _this = this;
        if (sectionIds) {
            this.tradingService.getCostForSelectedContracts(sectionIds)
                .subscribe(function (data) {
                _this.existingCosts = data.value;
                if (_this.existingCosts) {
                    _this.existingCosts.forEach(function (cost) {
                        cost.rateTypeCode = _this.getRateCodeFromId(cost.rateTypeId);
                        cost.priceCode = _this.getPriceCodeFromId(cost.priceUnitId);
                        cost.costDirection = _this.getCostDirectionCodeFromId(cost.costDirectionId, _this.costDirections);
                        cost.costTypeCode = _this.getCostTypeCodeFromId(cost.costTypeId, _this.masterdata);
                        cost.description = _this.getCostTypeDescriptionFromId(cost.costTypeId, _this.masterdata);
                    });
                    _this.costContractGridRows = _this.existingCosts;
                }
            });
        }
    };
    EditCostsComponent.prototype.setNewCosts = function (costs) {
        var _this = this;
        costs.forEach(function (cost) {
            if (cost.costId) {
                // overriding existing costs and update the rowstatus as amended
                if (_this.existingCosts) {
                    var index = _this.existingCosts.findIndex(function (existingCost) { return existingCost.costId === cost.costId; });
                    if (index !== -1) {
                        if (_this.existingCosts[index].invoicePercent > 0) {
                            _this.existingCosts[index].invoicePercent = (_this.existingCosts[index].invoicePercent * _this.existingCosts[index].rate) / cost.rate;
                        }
                        _this.existingCosts[index].rate = cost.rate;
                        _this.existingCosts[index].costMatrixName = cost.costMatrixName;
                        _this.existingCosts[index].supplierCode = cost.supplierCode;
                        _this.existingCosts[index].currencyCode = cost.currencyCode;
                        _this.existingCosts[index].rateTypeCode = cost.rateTypeCode;
                        _this.existingCosts[index].priceCode = cost.priceCode;
                        _this.existingCosts[index].rate = cost.rate;
                        _this.existingCosts[index].inPL = cost.inPL;
                        _this.existingCosts[index].noAction = cost.noAction;
                        _this.existingCosts[index].costDirection = cost.costDirection;
                        _this.existingCosts[index].rowStatus = 'A';
                        // Calculate invoice percent here
                        _this.gridApi.updateRowData({ update: [_this.existingCosts[index]] });
                    }
                }
            }
            else if (_this.existingCosts) {
                if (!_this.costContractGridRows) {
                    _this.costContractGridRows = [];
                }
                _this.costContractGridRows.push(cost);
                _this.gridApi.updateRowData({ add: [cost] });
            }
        });
        this.gridApi.refreshCells();
    };
    EditCostsComponent.prototype.getGridData = function () {
        var _this = this;
        this.gridApi.forEachNode(function (rowData) {
            _this.costsToSummary.push(rowData.data);
            _this.updatedCostsToSummary = _this.costsToSummary;
        });
        return this.updatedCostsToSummary;
    };
    EditCostsComponent.prototype.onCellValueChanged = function (params) {
        if (params.oldValue !== params.newValue) {
            params.node.data.isDirty = true;
            params.node.setDataValue('rowStatus', params.node.data.costId ? 'A' : 'N');
            this.gridColumnApi.autoSizeAllColumns();
        }
    };
    EditCostsComponent.prototype.getFormGroup = function () {
        return _super.prototype.getFormGroup.call(this);
    };
    EditCostsComponent.prototype.populateEntity = function (entity) {
        var _this = this;
        var selectedCosts = entity;
        if (this.costsToDelete && this.costsToDelete.length > 0) {
            this.costsToDelete.forEach(function (costToDelete) {
                var cost = new _shared_entities_bulk_edit_cost_entity__WEBPACK_IMPORTED_MODULE_14__["BulkCost"]();
                cost.costId = costToDelete.costId;
                cost.sectionId = costToDelete.sectionId;
                cost.rowStatus = costToDelete.rowStatus;
                cost.costTypeCode = costToDelete.costTypeCode;
                cost.description = costToDelete.description;
                cost.costMatrixName = costToDelete.costMatrixName;
                cost.supplierCode = costToDelete.supplierCode;
                cost.currencyCode = costToDelete.currencyCode;
                cost.rateTypeId = _this.getRateTypeIdFromCode(costToDelete.rateTypeCode);
                cost.priceUnitId = costToDelete.priceUnitId ? costToDelete.priceUnitId : (costToDelete.priceCode ?
                    _this.masterdata.priceUnits.find(function (priceUnit) {
                        return priceUnit.priceCode === costToDelete.priceCode;
                    }).priceUnitId : null);
                cost.rate = costToDelete.rate;
                cost.inPL = costToDelete.inPL;
                cost.noAction = costToDelete.noAction;
                cost.invoicingStatusId = costToDelete.invoicingStatusId;
                cost.costDirectionId = costToDelete.costDirection ?
                    _this.costDirections.find(function (costDirection) {
                        return costDirection.costDirection === costToDelete.costDirection;
                    }).costDirectionId : null;
                cost.isDelete = costToDelete.isDelete;
                if (costToDelete.rowStatus) {
                    selectedCosts.push(cost);
                }
            });
        }
        this.gridApi.forEachNode(function (rowData) {
            if (rowData.data && (rowData.data.rowStatus && (rowData.data.rowStatus === 'N' || rowData.data.rowStatus === 'A'))) {
                var cost = new _shared_entities_bulk_edit_cost_entity__WEBPACK_IMPORTED_MODULE_14__["BulkCost"]();
                cost.costId = rowData.data.costId;
                cost.sectionId = rowData.data.sectionId;
                cost.rowStatus = rowData.data.rowStatus;
                cost.costTypeCode = rowData.data.costTypeCode;
                cost.description = rowData.data.description;
                cost.costMatrixName = rowData.data.costMatrixName;
                cost.supplierCode = rowData.data.supplierCode;
                cost.currencyCode = rowData.data.currencyCode;
                cost.rateTypeId = _this.getRateTypeIdFromCode(rowData.data.rateTypeCode);
                cost.priceUnitId = rowData.data.priceUnitId ? rowData.data.priceUnitId : (rowData.data.priceCode ?
                    _this.masterdata.priceUnits.find(function (priceUnit) {
                        return priceUnit.priceCode === rowData.data.priceCode;
                    }).priceUnitId : null);
                cost.rate = rowData.data.rate;
                cost.inPL = rowData.data.inPL;
                cost.noAction = rowData.data.noAction;
                cost.invoicingStatusId = rowData.data.invoicingStatusId;
                cost.costDirectionId = rowData.data.costDirection ?
                    _this.costDirections.find(function (costDirection) {
                        return costDirection.costDirection === rowData.data.costDirection;
                    }).costDirectionId : null;
                cost.invoicePercent = rowData.data.invoicePercent;
                if (rowData.data.rowStatus) {
                    selectedCosts.push(cost);
                }
            }
        });
        return selectedCosts;
    };
    EditCostsComponent.prototype.getRateTypeIdFromCode = function (code) {
        var rateTypeId = _shared_enums_rate_type_enum__WEBPACK_IMPORTED_MODULE_16__["RateTypes"][code];
        return rateTypeId;
    };
    EditCostsComponent.prototype.handleAction = function (action, cost) {
        var _this = this;
        switch (action) {
            case this.costsBulkEditMenuActions.deleteCost:
                var confirmDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_13__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Cost Deletion',
                        text: 'Deleting a cost is permanent. Do you wish to proceed?',
                        okButton: 'Delete anyway',
                        cancelButton: 'Cancel',
                    },
                });
                var confirmationSubscription = confirmDialog.afterClosed().subscribe(function (answer) {
                    if (answer) {
                        if (cost.costId && cost.invoicePercent === 0) {
                            cost.isDelete = true;
                            cost.rowStatus = 'D';
                            _this.costsToDelete.push(cost);
                            if (_this.gridApi) {
                                _this.gridApi.refreshCells({
                                    force: true,
                                });
                            }
                        }
                        else if (!(cost.costId)) {
                            _this.gridApi.updateRowData({ remove: [cost] });
                        }
                        else {
                            _this.snackbarService.informationSnackBar('Cannot delete invoiced cost');
                        }
                    }
                });
                this.subscriptions.push(confirmationSubscription);
                break;
            default:
                break;
        }
    };
    EditCostsComponent.prototype.onRateAmountChanged = function (params) {
        if (params && params.data && params.data.invoicePercent) {
            if (params.newValue && params.newValue !== 0) {
                var invoicePercent = (params.data.invoicePercent * params.oldValue) / params.newValue;
                if (invoicePercent > 100) {
                    params.data.invoicePercent = 100;
                }
                else {
                    params.data.invoicePercent = invoicePercent;
                }
            }
            else {
                params.data.rate = params.oldValue;
            }
        }
        if (this.gridApi) {
            this.gridApi.refreshCells(params.data);
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Boolean)
    ], EditCostsComponent.prototype, "noActPrivilege", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Boolean)
    ], EditCostsComponent.prototype, "pnlPrivilege", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('userPreferences'),
        __metadata("design:type", _shared_components_ag_grid_user_preferences_ag_grid_user_preferences_component__WEBPACK_IMPORTED_MODULE_7__["AgGridUserPreferencesComponent"])
    ], EditCostsComponent.prototype, "userPreferencesComponent", void 0);
    EditCostsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-edit-costs',
            template: __webpack_require__(/*! ./edit-costs.component.html */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs/edit-costs.component.html"),
            styles: [__webpack_require__(/*! ./edit-costs.component.scss */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs/edit-costs.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_20__["MasterdataService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_19__["FormConfigurationProviderService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_21__["TradingService"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_23__["SnackbarService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialog"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_4__["AuthorizationService"],
            _shared_services_security_service__WEBPACK_IMPORTED_MODULE_22__["SecurityService"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_18__["AgGridService"]])
    ], EditCostsComponent);
    return EditCostsComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_10__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/update-costs.component.html":
/*!***********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/update-costs.component.html ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<atlas-add-costs #addCostsComponent\r\n                 (newCostsAdded)=\"OnNewCostsAdded($event)\"\r\n                 [noActPrivilege]='noActPrivilege'\r\n                 [pnlPrivilege]='pnlPrivilege'></atlas-add-costs>\r\n\r\n<atlas-edit-costs #editCostsComponent\r\n                  [noActPrivilege]='noActPrivilege'\r\n                  [pnlPrivilege]='pnlPrivilege'></atlas-edit-costs>"

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/update-costs.component.scss":
/*!***********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/update-costs.component.scss ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/update-costs.component.ts":
/*!*********************************************************************************************************************!*\
  !*** ./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/update-costs.component.ts ***!
  \*********************************************************************************************************************/
/*! exports provided: UpdateCostsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UpdateCostsComponent", function() { return UpdateCostsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
/* harmony import */ var _components_add_costs_add_costs_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/add-costs/add-costs.component */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/add-costs/add-costs.component.ts");
/* harmony import */ var _components_edit_costs_edit_costs_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/edit-costs/edit-costs.component */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs/edit-costs.component.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









var UpdateCostsComponent = /** @class */ (function (_super) {
    __extends(UpdateCostsComponent, _super);
    function UpdateCostsComponent(formConfigurationProvider, companyManager, authorizationService, securityService, formBuilder) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.companyManager = companyManager;
        _this.authorizationService = authorizationService;
        _this.securityService = securityService;
        _this.formBuilder = formBuilder;
        _this.formComponents = [];
        _this.noActPrivilege = false;
        _this.pnlPrivilege = false;
        return _this;
    }
    UpdateCostsComponent.prototype.ngOnInit = function () {
        this.tradeCostBulkUpdateFormGroup = this.formBuilder.group({
            editCostsComponent: this.editCostsComponent.getFormGroup(),
        });
        this.formComponents.push(this.editCostsComponent);
        this.getCostsPrivilege();
    };
    UpdateCostsComponent.prototype.getFormGroup = function () {
        return _super.prototype.getFormGroup.call(this);
    };
    UpdateCostsComponent.prototype.OnNewCostsAdded = function ($event) {
        if ($event) {
            this.editCostsComponent.setNewCosts($event.costs);
        }
    };
    UpdateCostsComponent.prototype.populateEntity = function (model) {
        this.formComponents.forEach(function (comp) {
            comp.populateEntity(model);
        });
        return model;
    };
    UpdateCostsComponent.prototype.getCostsPrivilege = function () {
        var _this = this;
        var company = this.companyManager.getCurrentCompanyId();
        this.securityService.isSecurityReady().subscribe(function () {
            if (_this.authorizationService.isPrivilegeAllowed(company, 'Trades')
                && _this.authorizationService.isPrivilegeAllowed(company, 'CostTab')) {
                _this.noActPrivilege = _this.authorizationService.isPrivilegeAllowed(company, 'COSTSNOACT');
                _this.pnlPrivilege = _this.authorizationService.isPrivilegeAllowed(company, 'COSTSINP&L');
            }
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('addCostsComponent'),
        __metadata("design:type", _components_add_costs_add_costs_component__WEBPACK_IMPORTED_MODULE_7__["AddCostsComponent"])
    ], UpdateCostsComponent.prototype, "addCostsComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('editCostsComponent'),
        __metadata("design:type", _components_edit_costs_edit_costs_component__WEBPACK_IMPORTED_MODULE_8__["EditCostsComponent"])
    ], UpdateCostsComponent.prototype, "editCostsComponent", void 0);
    UpdateCostsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-update-costs',
            template: __webpack_require__(/*! ./update-costs.component.html */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/update-costs.component.html"),
            styles: [__webpack_require__(/*! ./update-costs.component.scss */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/update-costs.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_5__["FormConfigurationProviderService"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_3__["CompanyManagerService"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_2__["AuthorizationService"],
            _shared_services_security_service__WEBPACK_IMPORTED_MODULE_6__["SecurityService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"]])
    ], UpdateCostsComponent);
    return UpdateCostsComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_4__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/section-new/section-new.component.html":
/*!******************************************************************************!*\
  !*** ./Client/app/trading/components/section-new/section-new.component.html ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div>\r\n\t<h2 mat-dialog-title>CREATE A SPLIT</h2>\r\n\t<mat-dialog-content>\r\n\t\t<form [formGroup]=\"splitForm\">\r\n\t\t\t<div fxLayout=\"row\" fxLayoutAlign=\"none center\" fxLayoutWrap fxLayoutGap=\"10px\">\r\n\t\t\t\t<div fxFlex=\"45%\" fxFlex.xs=\"50%\" fxFlex.sm=\"100%\">\r\n\t\t\t\t\t<mat-form-field>\r\n\t\t\t\t\t\t<input atlas-number-decimals maxdecimals=\"4\"\r\n\t\t\t\t\t\t\t   autocomplete=\"off\"\r\n\t\t\t\t\t\t\t   required\r\n\t\t\t\t\t\t\t   matInput\r\n\t\t\t\t\t\t\t   type=\"number\"\r\n\t\t\t\t\t\t\t   min=\"0\"\r\n\t\t\t\t\t\t\t   placeholder=\"Available Quantity\"\r\n\t\t\t\t\t\t\t   formControlName=\"availableQuantityCtrl\">\r\n\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div fxFlex=\"50%\" fxFlex.xs=\"50%\" fxFlex.sm=\"100%\">\r\n\t\t\t\t\t<mat-form-field>\r\n\t\t\t\t\t\t<input atlas-number-decimals maxdecimals=\"4\"\r\n\t\t\t\t\t\t\t   autocomplete=\"off\"\r\n\t\t\t\t\t\t\t   required\r\n\t\t\t\t\t\t\t   matInput\r\n\t\t\t\t\t\t\t   type=\"number\"\r\n\t\t\t\t\t\t\t   min=\"0\"\r\n\t\t\t\t\t\t\t   placeholder=\"Split Quantity\"\r\n\t\t\t\t\t\t\t   formControlName=\"splitQuantityCtrl\">\r\n\t\t\t\t\t\t<mat-error *ngIf=\"splitForm.get('splitQuantityCtrl').hasError('isPositiveError')\">\r\n\t\t\t\t\t\t\tNumber should not be negative\r\n\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t\t<mat-error *ngIf=\"splitForm.get('splitQuantityCtrl').hasError('isDifferencePositiveError')\">\r\n\t\t\t\t\t\t\tThere are not enough remaining quantity\r\n\t\t\t\t\t\t</mat-error>\r\n\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div fxFlex=\"45%\" fxFlex.xs=\"50%\" fxFlex.sm=\"100%\">\r\n\t\t\t\t\t<mat-form-field>\r\n\t\t\t\t\t\t<input atlas-number-decimals maxdecimals=\"4\"\r\n\t\t\t\t\t\t\t   autocomplete=\"off\"\r\n\t\t\t\t\t\t\t   required\r\n\t\t\t\t\t\t\t   matInput\r\n\t\t\t\t\t\t\t   type=\"number\"\r\n\t\t\t\t\t\t\t   min=\"0\"\r\n\t\t\t\t\t\t\t   placeholder=\"Remaining Quantity\"\r\n\t\t\t\t\t\t\t   formControlName=\"remainingQuantityCtrl\">\r\n\t\t\t\t\t</mat-form-field>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<div style=\"margin:20px; text-align:right\">\r\n\t\t\t\t\t<div style=\"margin:20px; text-align:right\">\r\n\t\t\t\t\t\t<span class=\"fill-space\"></span>\r\n\t\t\t\t\t\t<button mat-raised-button color=\"primary\" (click)=\"onCloseConfirm()\" [disabled]=\"!splitForm.valid\">CREATE</button>&nbsp;\r\n\t\t\t\t\t\t<button mat-raised-button color=\"accent\" (click)=\"onCloseCancel()\" [disabled]=\"savingInProgress\">CANCEL</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t</mat-dialog-content>\r\n</div>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/section-new/section-new.component.scss":
/*!******************************************************************************!*\
  !*** ./Client/app/trading/components/section-new/section-new.component.scss ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/section-new/section-new.component.ts":
/*!****************************************************************************!*\
  !*** ./Client/app/trading/components/section-new/section-new.component.ts ***!
  \****************************************************************************/
/*! exports provided: SectionNewComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SectionNewComponent", function() { return SectionNewComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _shared_directives_number_validators_directive__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../shared/directives/number-validators.directive */ "./Client/app/shared/directives/number-validators.directive.ts");
/* harmony import */ var _shared_entities_section_entity__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../shared/entities/section.entity */ "./Client/app/shared/entities/section.entity.ts");
/* harmony import */ var _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../shared/services/http-services/execution.service */ "./Client/app/shared/services/http-services/execution.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};







var SectionNewComponent = /** @class */ (function () {
    function SectionNewComponent(thisDialogRef, data, fb, tradingService, executionService) {
        this.thisDialogRef = thisDialogRef;
        this.data = data;
        this.fb = fb;
        this.tradingService = tradingService;
        this.executionService = executionService;
        this.savingInProgress = false;
        this.model = data;
    }
    SectionNewComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.availableQuantityCtrl = new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"]({ value: '', disabled: true }, [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required]);
        this.remainingQuantityCtrl = new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"]({ value: '', disabled: true }, _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required]));
        this.splitQuantityCtrl = new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"]({ value: '', disabled: false }, _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required, Object(_shared_directives_number_validators_directive__WEBPACK_IMPORTED_MODULE_3__["isPositive"])(), Object(_shared_directives_number_validators_directive__WEBPACK_IMPORTED_MODULE_3__["isDifferencePositive"])(this.model.quantity)]));
        this.splitForm = this.fb.group({
            availableQuantityCtrl: this.availableQuantityCtrl,
            splitQuantityCtrl: this.splitQuantityCtrl,
            remainingQuantityCtrl: this.remainingQuantityCtrl,
        });
        this.splitForm.patchValue({
            availableQuantityCtrl: this.model.quantity,
            remainingQuantityCtrl: this.model.quantity,
        });
        this.splitQuantityCtrl.valueChanges.subscribe(function (qty) {
            _this.remainingQuantityCtrl.setValue(_this.availableQuantityCtrl.value - qty);
            if (_this.availableQuantityCtrl.value - qty < 0) {
                _this.remainingQuantityCtrl.setErrors({ isPositiveError: true });
            }
            else {
                _this.remainingQuantityCtrl.setErrors({});
            }
        });
    };
    SectionNewComponent.prototype.onCloseConfirm = function () {
        var _this = this;
        this.savingInProgress = true;
        if (this.splitForm.hasError) {
            this.model.quantity = this.splitQuantityCtrl.value;
            this.model.sectionOriginId = this.model.sectionId;
            this.model.sectionId = 0;
            this.splitCreationSubscription = this.tradingService.createSplit(this.model).subscribe(function (data) {
                if (data && data.length > 1) {
                }
                _this.thisDialogRef.close(data);
            }, function (error) {
                _this.thisDialogRef.close(error);
                throw (error);
            });
        }
        else {
            this.savingInProgress = false;
        }
    };
    SectionNewComponent.prototype.onCloseCancel = function () {
        this.thisDialogRef.close(null);
    };
    SectionNewComponent.prototype.ngOnDestroy = function () {
        if (this.splitCreationSubscription) {
            this.splitCreationSubscription.unsubscribe();
        }
    };
    SectionNewComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atr-section-new',
            template: __webpack_require__(/*! ./section-new.component.html */ "./Client/app/trading/components/section-new/section-new.component.html"),
            styles: [__webpack_require__(/*! ./section-new.component.scss */ "./Client/app/trading/components/section-new/section-new.component.scss")],
        }),
        __param(1, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_2__["MAT_DIALOG_DATA"])),
        __metadata("design:paramtypes", [_angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialogRef"],
            _shared_entities_section_entity__WEBPACK_IMPORTED_MODULE_4__["Section"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_6__["TradingService"],
            _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_5__["ExecutionService"]])
    ], SectionNewComponent);
    return SectionNewComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/trade-allocation/allocation-form-components/allocation-table-form-component/allocation-table-form-component.component.html":
/*!******************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-allocation/allocation-form-components/allocation-table-form-component/allocation-table-form-component.component.html ***!
  \******************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card>\r\n    <div fxLayout=\"row\"\r\n         fxLayoutAlign=\"start none\"\r\n         class=\"search\">\r\n        <mat-form-field>\r\n            <input matInput\r\n                   placeholder=\"Contract Reference\"\r\n                   [formControl]=\"searchedValueCtrl\"\r\n                   (input)=\"onSearchChange()\"\r\n                   #message>\r\n        </mat-form-field>\r\n\r\n        <button mat-raised-button\r\n                class=\"heroGradient\"\r\n                (click)=\"onSearchChange()\">\r\n            <mat-icon aria-label=\"Search\"\r\n                      class=\"search-icon\">search</mat-icon>\r\n        </button>\r\n    </div>\r\n</mat-card>\r\n<div [hidden]=\"isEmptyStateShowed\">\r\n    <atlas-list-and-search class=\"default-height\"\r\n                           [gridCode]=\"gridCode\"\r\n                           [gridTitle]=\"'Possible Allocations'\"\r\n                           [additionalFilters]=\"additionalFilters\"\r\n                           (rowSelected)=\"rowSelected($event)\"\r\n                           [company]=\"company\"\r\n                           [dataLoader]=\"dataLoader\"\r\n                           [dataVersionId]=\"dataVersionId\"\r\n                           waitBeforeLoadingData=true\r\n                           (configurationLoaded)=\"initAdditionnalFilters()\"\r\n                           #listAndSearchComponent>\r\n    </atlas-list-and-search>\r\n</div>\r\n<div [hidden]=\"!isEmptyStateShowed\">\r\n    <atlas-empty-state [title]=\"emptySearchResultTitle\"\r\n                       message=\"Try another search\"></atlas-empty-state>\r\n</div>\r\n<atlas-lock-interval [resourcesInformation]=\"resourcesInformation\">\r\n</atlas-lock-interval>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/trade-allocation/allocation-form-components/allocation-table-form-component/allocation-table-form-component.component.scss":
/*!******************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-allocation/allocation-form-components/allocation-table-form-component/allocation-table-form-component.component.scss ***!
  \******************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".atr-ag-grid {\n  width: 100%;\n  height: 100%; }\n\n.ag-theme-material .ag-header-select-all {\n  width: 100% !important;\n  text-align: center !important; }\n\n.atr-grid-left-margin {\n  left: 20px; }\n"

/***/ }),

/***/ "./Client/app/trading/components/trade-allocation/allocation-form-components/allocation-table-form-component/allocation-table-form-component.component.ts":
/*!****************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-allocation/allocation-form-components/allocation-table-form-component/allocation-table-form-component.component.ts ***!
  \****************************************************************************************************************************************************************/
/*! exports provided: AllocationTableFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AllocationTableFormComponent", function() { return AllocationTableFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_enums_list_and_search_filter_type_enum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../..//shared/enums/list-and-search-filter-type.enum */ "./Client/app/shared/enums/list-and-search-filter-type.enum.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_components_commodity_input_commodity_input_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/components/commodity-input/commodity-input.component */ "./Client/app/shared/components/commodity-input/commodity-input.component.ts");
/* harmony import */ var _shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/components/confirmation-dialog/confirmation-dialog.component */ "./Client/app/shared/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony import */ var _shared_components_list_and_search_list_and_search_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/components/list-and-search/list-and-search.component */ "./Client/app/shared/components/list-and-search/list-and-search.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_list_and_search_list_and_search_filter_entity__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/entities/list-and-search/list-and-search-filter.entity */ "./Client/app/shared/entities/list-and-search/list-and-search-filter.entity.ts");
/* harmony import */ var _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/entities/lock-functional-context.entity */ "./Client/app/shared/entities/lock-functional-context.entity.ts");
/* harmony import */ var _shared_entities_lock_resource_information_entity__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/entities/lock-resource-information.entity */ "./Client/app/shared/entities/lock-resource-information.entity.ts");
/* harmony import */ var _shared_entities_user_grid_preferences_parameters_entity__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../shared/entities/user-grid-preferences-parameters.entity */ "./Client/app/shared/entities/user-grid-preferences-parameters.entity.ts");
/* harmony import */ var _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../../shared/enums/contract-type.enum */ "./Client/app/shared/enums/contract-type.enum.ts");
/* harmony import */ var _shared_models_allocated_trade_display_view__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../../shared/models/allocated-trade-display-view */ "./Client/app/shared/models/allocated-trade-display-view.ts");
/* harmony import */ var _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../../shared/models/section-complete-display-view */ "./Client/app/shared/models/section-complete-display-view.ts");
/* harmony import */ var _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../../shared/services/ag-grid.service */ "./Client/app/shared/services/ag-grid.service.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_grid_configuration_provider_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../../../shared/services/grid-configuration-provider.service */ "./Client/app/shared/services/grid-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_configuration_service__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../../../../shared/services/http-services/configuration.service */ "./Client/app/shared/services/http-services/configuration.service.ts");
/* harmony import */ var _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../../../../shared/services/http-services/execution.service */ "./Client/app/shared/services/http-services/execution.service.ts");
/* harmony import */ var _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../../../../shared/services/http-services/lock.service */ "./Client/app/shared/services/http-services/lock.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_list_and_search_tradeAllocation_data_loader__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../../../../shared/services/list-and-search/tradeAllocation-data-loader */ "./Client/app/shared/services/list-and-search/tradeAllocation-data-loader.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../../../../../shared/services/ui.service */ "./Client/app/shared/services/ui.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
/* harmony import */ var _shared_validators_warning_messages_validator_validator__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../../../../../shared/validators/warning-messages-validator.validator */ "./Client/app/shared/validators/warning-messages-validator.validator.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






























var AllocationTableFormComponent = /** @class */ (function (_super) {
    __extends(AllocationTableFormComponent, _super);
    function AllocationTableFormComponent(tradingService, activeroute, snackbarService, formConfigurationProvider, executionService, route, uiService, lockService, dialog, companyManagementService, gridService, configurationService, gridConfigurationProvider, utilService, dataLoader) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.tradingService = tradingService;
        _this.activeroute = activeroute;
        _this.snackbarService = snackbarService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.executionService = executionService;
        _this.route = route;
        _this.uiService = uiService;
        _this.lockService = lockService;
        _this.dialog = dialog;
        _this.companyManagementService = companyManagementService;
        _this.gridService = gridService;
        _this.configurationService = configurationService;
        _this.gridConfigurationProvider = gridConfigurationProvider;
        _this.utilService = utilService;
        _this.dataLoader = dataLoader;
        _this.validateWarningMessages = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.disableAllocateButton = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.contractRowSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.counterpartyForContractRowSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.allocationMessage = [];
        _this.allocationGridOptions = {};
        _this.allocationGridRows = [];
        _this.searchedValueCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_10__["AtlasFormControl"]('searchedValue');
        _this.tradeRowData = [];
        _this.tradeRowDataForWashout = [];
        _this.isEmptyStateShowed = false;
        _this.resourcesInformation = new Array();
        _this.locking = [];
        _this.unlocking = [];
        _this.rowId = [];
        _this.columnConfiguration = [];
        _this.allocationSetUpData = [];
        _this.gridCode = 'tradeForTradeAllocationList';
        _this.filters = [];
        _this.additionalFilters = [];
        _this.hasGridSharing = false;
        _this.gridPreferences = new _shared_entities_user_grid_preferences_parameters_entity__WEBPACK_IMPORTED_MODULE_14__["UserGridPreferencesParameters"]();
        return _this;
    }
    AllocationTableFormComponent.prototype.ngOnInit = function () {
        this.company = this.route.snapshot.params['company'];
        this.atlasAgGridParam = this.gridService.getAgGridParam();
        this.sectionId = Number(this.activeroute.snapshot.paramMap.get('sectionId'));
        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;
        this.masterData = this.route.snapshot.data.masterdata;
        this.getAllocationSetUpData(this.company);
    };
    AllocationTableFormComponent.prototype.externalFilterPresent = function () {
        return true;
    };
    AllocationTableFormComponent.prototype.externalFilterPass = function (node) {
        var contractLabel = node.data.contractLabel;
        if (!this.searchedValueCtrl.value || !contractLabel) {
            return contractLabel === 'No Value';
        }
        else {
            return contractLabel === this.searchedValueCtrl.value.toUpperCase()
                || contractLabel.toUpperCase().toString().startsWith(this.searchedValueCtrl.value.toUpperCase());
        }
    };
    AllocationTableFormComponent.prototype.initForm = function (entity, isEdit) {
        var tradeRecord = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_17__["SectionCompleteDisplayView"](entity);
        this.contractType = tradeRecord.type;
        return entity;
    };
    AllocationTableFormComponent.prototype.onGridReady = function (params) {
        this.allocationGridOptions.columnDefs = this.allocationGridCols;
        this.gridApi = this.allocationGridOptions.api;
        this.gridColumnApi = this.allocationGridOptions.columnApi;
        this.gridService.sizeColumns(this.allocationGridOptions);
        this.gridApi.showNoRowsOverlay();
    };
    AllocationTableFormComponent.prototype.onSearchChange = function () {
        this.additionalFilters = [];
        var contractRefField = this.listAndSearchComponent.columnConfiguration
            .find(function (column) { return column.fieldName === 'PhysicalContractCode'; });
        var ParentSectionIdField = this.listAndSearchComponent.columnConfiguration
            .find(function (column) { return column.fieldName === 'PhysicalContractSectionId'; });
        if (!this.listAndSearchComponent) {
            return;
        }
        else {
            if (this.searchedValueCtrl.value) {
                if ((this.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_15__["ContractTypes"][_shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_15__["ContractTypes"].Purchase])
                    && this.searchedValueCtrl.value.substr(0, 1).toUpperCase() === 'P') {
                    this.displayMessageWhenPruchaseAllocatedToSales();
                }
                else if ((this.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_15__["ContractTypes"][_shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_15__["ContractTypes"].Sale])
                    && this.searchedValueCtrl.value.substr(0, 1).toUpperCase() === 'S') {
                    this.displayMessageWhenSaleAllocatedToPurchase();
                }
                else {
                    if (contractRefField) {
                        var filterContractReference = new _shared_entities_list_and_search_list_and_search_filter_entity__WEBPACK_IMPORTED_MODULE_11__["ListAndSearchFilter"]();
                        filterContractReference.fieldId = contractRefField.fieldId;
                        filterContractReference.fieldName = contractRefField.fieldName;
                        filterContractReference.predicate = {
                            filterType: _shared_enums_list_and_search_filter_type_enum__WEBPACK_IMPORTED_MODULE_5__["ListAndSearchFilterType"].Text,
                            operator: 'eq',
                            value1: this.searchedValueCtrl.value + '%',
                        };
                        filterContractReference.isActive = true;
                        this.additionalFilters.push(filterContractReference);
                    }
                    if (ParentSectionIdField) {
                        var filterParentContractReference = new _shared_entities_list_and_search_list_and_search_filter_entity__WEBPACK_IMPORTED_MODULE_11__["ListAndSearchFilter"]();
                        filterParentContractReference.fieldId = ParentSectionIdField.fieldId;
                        filterParentContractReference.fieldName = ParentSectionIdField.fieldName;
                        filterParentContractReference.predicate = {
                            filterType: _shared_enums_list_and_search_filter_type_enum__WEBPACK_IMPORTED_MODULE_5__["ListAndSearchFilterType"].Numeric,
                            operator: 'eq',
                            value1: this.sectionId.toString(),
                        };
                        filterParentContractReference.isActive = true;
                        this.additionalFilters.push(filterParentContractReference);
                    }
                    this.listAndSearchComponent.additionalFilters = this.additionalFilters;
                    this.listAndSearchComponent.loadData(true);
                }
            }
        }
    };
    AllocationTableFormComponent.prototype.initAdditionnalFilters = function () {
        if (this.additionalFilters.length === 0) {
            this.additionalFilters = [];
        }
        if (this.listAndSearchComponent &&
            this.listAndSearchComponent.columnConfiguration &&
            this.listAndSearchComponent.columnConfiguration.length > 0) {
            var ParentSectionIdField = this.listAndSearchComponent.columnConfiguration
                .find(function (column) { return column.fieldName === 'PhysicalContractSectionId'; });
            if (ParentSectionIdField) {
                var filterParentContractReference = new _shared_entities_list_and_search_list_and_search_filter_entity__WEBPACK_IMPORTED_MODULE_11__["ListAndSearchFilter"]();
                filterParentContractReference.fieldId = ParentSectionIdField.fieldId;
                filterParentContractReference.fieldName = ParentSectionIdField.fieldName;
                filterParentContractReference.predicate = {
                    filterType: _shared_enums_list_and_search_filter_type_enum__WEBPACK_IMPORTED_MODULE_5__["ListAndSearchFilterType"].Numeric,
                    operator: 'eq',
                    value1: this.sectionId.toString(),
                };
                filterParentContractReference.isActive = true;
                this.additionalFilters.push(filterParentContractReference);
            }
            this.listAndSearchComponent.waitBeforeLoadingData = false;
            this.listAndSearchComponent.additionalFilters = this.additionalFilters;
            this.listAndSearchComponent.loadData(true);
        }
        else {
            return;
        }
    };
    AllocationTableFormComponent.prototype.filter = function (search) {
        if (search) {
            var abc_1 = [];
            this.allocationGridRows.forEach(function (row) {
                if (row.contractLabel.toLowerCase().startsWith(search.toLowerCase())) {
                    abc_1.push(row);
                }
            });
            this.gridApi.setRowData(abc_1);
        }
    };
    AllocationTableFormComponent.prototype.onRowDataChanged = function () {
        this.gridService.sizeColumns(this.allocationGridOptions);
    };
    AllocationTableFormComponent.prototype.rowSelected = function (event) {
        var _this = this;
        this.tradeRowData = [];
        this.tradeRowDataForWashout = [];
        if (event.node.selected === true) {
            this.rowId = [];
            this.selectedTradeAllocationData = event.data;
            this.listAndSearchComponent.unCheckSelectContracts(this.selectedTradeAllocationData.physicalContractCode, false);
            this.rowId.push(event.node.id);
            this.tradeRowData.push(event.data.quantity);
            this.tradeRowData.push(event.data.weightCode);
            this.contractRowSelected.emit(this.tradeRowData);
            this.tradeRowDataForWashout.push(event.data.counterparty);
            this.tradeRowDataForWashout.push(event.data.currencyCode);
            this.counterpartyForContractRowSelected.emit(this.tradeRowDataForWashout);
        }
        else {
            if (this.rowId && this.rowId[0] === event.node.id) {
                this.contractRowSelected.emit(this.tradeRowData);
            }
        }
        if (event.data.type === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_15__["ContractTypes"].Purchase.toString() && event.node.selected &&
            this.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_15__["ContractTypes"][_shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_15__["ContractTypes"].Purchase]) {
            this.displayMessageWhenPruchaseAllocatedToSales();
        }
        else {
            if (event.node.selected === true) {
                // check box selected.
                // fetch all warning messages.
                this.allocationMessage = [];
                this.getAllocationWarningMessagesSubscription =
                    this.executionService.getWarningMessages(this.sectionId, event.data.sectionId)
                        .subscribe(function (data) {
                        if (data.value.length > 1) {
                            _this.allocationMessage = Object(_shared_validators_warning_messages_validator_validator__WEBPACK_IMPORTED_MODULE_29__["GetWarningMessages"])(data.value, _this.allocationSetUpData);
                        }
                        _this.validateWarningMessages.emit(_this.allocationMessage);
                    });
            }
            else {
                // checkbox is unselected.
                this.validateWarningMessages.emit('ClearTradeSelection');
            }
        }
        this.grantLock(event.data.sectionId, event.node);
    };
    AllocationTableFormComponent.prototype.grantLock = function (sectionId, node) {
        var _this = this;
        if (this.dataVersionId) {
            return;
        }
        if (node.isSelected()) {
            if (!this.locking.includes(sectionId)) {
                this.locking.push(sectionId);
                this.subscriptions.push(this.lockService.isLockedContract(sectionId).subscribe(function (lock) {
                    if (lock.isLocked) {
                        _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_8__["ConfirmationDialogComponent"], {
                            data: {
                                title: 'Lock',
                                text: lock.message,
                                okButton: 'Got it',
                            },
                        });
                        _this.gridApi.deselectNode(node);
                        _this.locking = _this.locking.filter(function (id) { return id !== sectionId; });
                    }
                    else {
                        _this.subscriptions.push(_this.lockService.lockContract(sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_12__["LockFunctionalContext"].Allocation)
                            .subscribe(function () {
                            _this.refeshResourceInformation();
                            _this.locking = _this.locking.filter(function (id) { return id !== sectionId; });
                        }));
                    }
                }));
            }
        }
        else {
            if (!this.unlocking.includes(sectionId)) {
                this.unlocking.push(sectionId);
                this.refeshResourceInformation();
                if (this.resourcesInformation.filter(function (rsc) { return rsc.resourceId === sectionId; }).length === 0) {
                    this.subscriptions.push(this.lockService.unlockContract(sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_12__["LockFunctionalContext"].Allocation).subscribe(function () {
                        node.setRowSelectable(true);
                        _this.unlocking = _this.unlocking.filter(function (id) { return id !== sectionId; });
                    }));
                }
                else {
                    node.setRowSelectable(true);
                    this.unlocking = this.unlocking.filter(function (id) { return id !== sectionId; });
                }
            }
        }
    };
    AllocationTableFormComponent.prototype.refeshResourceInformation = function () {
        var _this = this;
        this.resourcesInformation = new Array();
        var mainContractInformation = new _shared_entities_lock_resource_information_entity__WEBPACK_IMPORTED_MODULE_13__["LockResourceInformation"]();
        mainContractInformation.resourceType = 'Contract';
        mainContractInformation.resourceId = this.sectionId;
        this.resourcesInformation.push(mainContractInformation);
        if (this.gridApi) {
            this.gridApi.forEachNode(function (node) {
                if (node.isSelected()) {
                    var resourceInformation = new _shared_entities_lock_resource_information_entity__WEBPACK_IMPORTED_MODULE_13__["LockResourceInformation"]();
                    resourceInformation.resourceType = 'Contract';
                    resourceInformation.resourceId = node.data.sectionId;
                    resourceInformation.resourceCode = node.data.contractReference;
                    _this.resourcesInformation.push(resourceInformation);
                }
            });
        }
    };
    AllocationTableFormComponent.prototype.displayMessageWhenPruchaseAllocatedToSales = function () {
        this.disableAllocateButton.emit(true);
        this.snackbarService.throwErrorSnackBar('Purchase contract can only be allocated to a Sale contract');
    };
    AllocationTableFormComponent.prototype.displayMessageWhenSaleAllocatedToPurchase = function () {
        this.disableAllocateButton.emit(true);
        this.snackbarService.throwErrorSnackBar('Sale contract can only be allocated to a Purchase contract');
    };
    AllocationTableFormComponent.prototype.loadGridConfiguration = function () {
        var _this = this;
        this.gridConfigurationProvider.getConfiguration(this.company, this.gridCode)
            .subscribe(function (configuration) {
            _this.columnConfiguration = configuration.columns;
            _this.initColumns(_this.columnConfiguration);
            _this.hasGridSharing = configuration.hasMultipleViewsPerUser;
            _this.gridPreferences = {
                company: _this.company,
                gridId: _this.gridCode,
                gridOptions: _this.allocationGridOptions,
                sharingEnabled: _this.hasGridSharing,
            };
        });
    };
    AllocationTableFormComponent.prototype.initColumns = function (configuration) {
        var _this = this;
        this.columnDefs = [];
        // selection column
        this.columnDefs.push({
            headerName: '',
            colId: 'selection',
            headerCheckboxSelection: true,
            checkboxSelection: true,
            pinned: 'left',
            minWidth: 40,
            maxWidth: 40,
        });
        // grid config
        var numericColumns = [];
        configuration.forEach(function (column) {
            if (column.gridType === 'numeric') {
                numericColumns.push(column.fieldName.toLowerCase());
            }
        });
        this.columnDefs = this.columnDefs.concat(configuration.map(function (config) {
            var columnDef = {
                colId: _this.utilService.convertToCamelCase(config.fieldName),
                headerName: config.friendlyName,
                field: _this.utilService.convertToCamelCase(config.fieldName),
                hide: !config.isVisible,
            };
            var formatter = _this.uiService.getFormatterForType(config.gridType);
            if (formatter) {
                columnDef.valueFormatter = formatter;
            }
            var dateGetter = _this.uiService.getterForDateType(config.gridType);
            if (dateGetter) {
                columnDef.cellClass = 'dateFormat';
                columnDef.valueGetter = dateGetter;
            }
            return columnDef;
        }));
    };
    AllocationTableFormComponent.prototype.quantityFormatter = function (params) {
        return params.value.toFixed(2) + ' ' + params.value.quantityUnitCode;
    };
    AllocationTableFormComponent.prototype.getTradesForAllocation = function () {
        var _this = this;
        var filters = this.filters.map(function (x) { return (__assign({}, x)); });
        this.tradingService.searchContractsToAllocate(filters)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["finalize"])(function () {
            _this.isLoading = false;
        }))
            .subscribe(function (data) {
            _this.allocatedTrades = data;
            data.forEach(function (trade) {
                _this.allocationGridRows.push(new _shared_models_allocated_trade_display_view__WEBPACK_IMPORTED_MODULE_16__["AllocatedTradeDisplayView"](trade));
            });
            _this.gridApi.setRowData([]);
            _this.onSearchChange();
        });
    };
    AllocationTableFormComponent.prototype.populateEntity = function (command) {
        var allocateSection = command;
        allocateSection.allocatedSectionId = this.selectedTradeAllocationData.sectionId;
        allocateSection.targetQuantity = this.selectedTradeAllocationData.quantity;
        allocateSection.allocatedSectionReference = this.selectedTradeAllocationData.physicalContractCode;
        return allocateSection;
    };
    AllocationTableFormComponent.prototype.resetAllocationgrid = function () {
        this.gridApi.deselectAll();
    };
    AllocationTableFormComponent.prototype.ngOnDestroy = function () {
        var _this = this;
        if (this.getAllocationWarningMessagesSubscription) {
            this.getAllocationWarningMessagesSubscription.unsubscribe();
        }
        this.subscriptions.push(this.lockService.cleanSessionLocks().subscribe(function () {
            _this.subscriptions.forEach(function (subscription) {
                subscription.unsubscribe();
            });
        }));
    };
    // this method will fetch allocationsetupdata for a company
    AllocationTableFormComponent.prototype.getAllocationSetUpData = function (company) {
        var _this = this;
        this.configurationService.getAllocationSetUpByCompany(company)
            .subscribe(function (data) {
            if (data && data.length > 0) {
                _this.allocationSetUpData = data;
            }
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], AllocationTableFormComponent.prototype, "validateWarningMessages", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], AllocationTableFormComponent.prototype, "disableAllocateButton", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], AllocationTableFormComponent.prototype, "contractRowSelected", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], AllocationTableFormComponent.prototype, "counterpartyForContractRowSelected", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('commodityInput'),
        __metadata("design:type", _shared_components_commodity_input_commodity_input_component__WEBPACK_IMPORTED_MODULE_7__["CommodityInputComponent"])
    ], AllocationTableFormComponent.prototype, "commodityInput", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('listAndSearchComponent'),
        __metadata("design:type", _shared_components_list_and_search_list_and_search_component__WEBPACK_IMPORTED_MODULE_9__["ListAndSearchComponent"])
    ], AllocationTableFormComponent.prototype, "listAndSearchComponent", void 0);
    AllocationTableFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-allocation-table-form-component',
            template: __webpack_require__(/*! ./allocation-table-form-component.component.html */ "./Client/app/trading/components/trade-allocation/allocation-form-components/allocation-table-form-component/allocation-table-form-component.component.html"),
            styles: [__webpack_require__(/*! ./allocation-table-form-component.component.scss */ "./Client/app/trading/components/trade-allocation/allocation-form-components/allocation-table-form-component/allocation-table-form-component.component.scss")],
            providers: [_shared_services_list_and_search_tradeAllocation_data_loader__WEBPACK_IMPORTED_MODULE_25__["TradeAllocationDataLoader"]],
        }),
        __metadata("design:paramtypes", [_shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_24__["TradingService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_26__["SnackbarService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_19__["FormConfigurationProviderService"],
            _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_22__["ExecutionService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_27__["UiService"],
            _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_23__["LockService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialog"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_4__["CompanyManagerService"],
            _shared_services_ag_grid_service__WEBPACK_IMPORTED_MODULE_18__["AgGridService"],
            _shared_services_http_services_configuration_service__WEBPACK_IMPORTED_MODULE_21__["ConfigurationService"],
            _shared_services_grid_configuration_provider_service__WEBPACK_IMPORTED_MODULE_20__["GridConfigurationProviderService"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_28__["UtilService"],
            _shared_services_list_and_search_tradeAllocation_data_loader__WEBPACK_IMPORTED_MODULE_25__["TradeAllocationDataLoader"]])
    ], AllocationTableFormComponent);
    return AllocationTableFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_6__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/trade-allocation/allocation-form-components/header-allocation-form-component/header-allocation-form-component.component.html":
/*!********************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-allocation/allocation-form-components/header-allocation-form-component/header-allocation-form-component.component.html ***!
  \********************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"card-header-luke\">\r\n\r\n    <mat-content class=\"content-size\">\r\n        <mat-card-title>\r\n            Main Information\r\n        </mat-card-title>\r\n        <div fxLayout=\"row\">\r\n            <div fxFlex=\"35\"\r\n                 fxFlex.lt-md=\"40\">\r\n                <div fxLayout=\"column\"\r\n                     fxLayoutAlign=\"start\">\r\n                    <div fxLayout=\"row\">\r\n                        <mat-form-field class=\"mat-read-only-field\"\r\n                                        fxFlex=\"35%\">\r\n                            <input matInput\r\n                                   placeholder=\"Contract Reference Number\"\r\n                                   readonly\r\n                                   autocomplete=\"off\"\r\n                                   [formControl]=\"counterReferenceNumberCtrl\">\r\n                        </mat-form-field>\r\n                        <mat-form-field class=\"mat-read-only-field\"\r\n                                        fxFlex=\"55%\">\r\n                            <input matInput\r\n                                   placeholder=\"Shipping period\"\r\n                                   readonly\r\n                                   [formControl]=\"shippingPeriodCtrl\"\r\n                                   autocomplete=\"off\">\r\n                        </mat-form-field>\r\n                    </div>\r\n                    <div fxLayout=\"row\">\r\n                        <mat-form-field class=\"mat-read-only-field\"\r\n                                        fxFlex=\"35%\">\r\n                            <input matInput\r\n                                   placeholder=\"Counter Party\"\r\n                                   readonly\r\n                                   autocomplete=\"off\"\r\n                                   [formControl]=\"counterpartyCtrl\">\r\n                        </mat-form-field>\r\n                        <mat-form-field class=\"mat-read-only-field\"\r\n                                        fxFlex=\"55%\">\r\n                            <input matInput\r\n                                   placeholder=\"Description\"\r\n                                   readonly\r\n                                   [formControl]=\"descriptionCtrl\"\r\n                                   autocomplete=\"off\">\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div fxFlex=\"45\"\r\n                 fxFlex.lt-md=\"60\">\r\n                <div fxLayout=\"column\">\r\n                    <div fxLayout=\"row\">\r\n                        <atlas-commodity-input #commodityInput\r\n                                               isFromAllocationPage=true\r\n                                               fxFlex=100></atlas-commodity-input>\r\n                    </div>\r\n                    <div fxLayout=\"row\">\r\n                        <div fxFlex=\"65\">\r\n                            <mat-form-field class=\"mat-read-only-field\"\r\n                                            fxFlex=\"21%\">\r\n                                <input matInput\r\n                                       placeholder=\"Currency\"\r\n                                       readonly\r\n                                       [formControl]=\"currencyValueCtrl\"\r\n                                       autocomplete=\"off\">\r\n                            </mat-form-field>\r\n                            <mat-form-field class=\"mat-read-only-field\"\r\n                                            fxFlex=\"21%\">\r\n                                <input matInput\r\n                                       placeholder=\"Price Code\"\r\n                                       readonly\r\n                                       [formControl]=\"priceCodeCtrl\"\r\n                                       autocomplete=\"off\">\r\n                            </mat-form-field>\r\n                            <mat-form-field class=\"mat-read-only-field\"\r\n                                            fxFlex=\"21%\">\r\n                                <input matInput\r\n                                       placeholder=\"Quantity Code\"\r\n                                       readonly\r\n                                       [formControl]=\"quantityCodeCtrl\"\r\n                                       autocomplete=\"off\">\r\n                            </mat-form-field>\r\n                            <mat-form-field class=\"mat-read-only-field\"\r\n                                            fxFlex=\"24%\">\r\n                                <input matInput\r\n                                       placeholder=\"Quantity\"\r\n                                       readonly\r\n                                       [formControl]=\"quantityValueCtrl\"\r\n                                       autocomplete=\"off\">\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div fxFlex=\"fill\"></div>\r\n        </div>\r\n    </mat-content>\r\n\r\n</mat-card>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/trade-allocation/allocation-form-components/header-allocation-form-component/header-allocation-form-component.component.scss":
/*!********************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-allocation/allocation-form-components/header-allocation-form-component/header-allocation-form-component.component.scss ***!
  \********************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".content-size {\n  font-size: 14px; }\n"

/***/ }),

/***/ "./Client/app/trading/components/trade-allocation/allocation-form-components/header-allocation-form-component/header-allocation-form-component.component.ts":
/*!******************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-allocation/allocation-form-components/header-allocation-form-component/header-allocation-form-component.component.ts ***!
  \******************************************************************************************************************************************************************/
/*! exports provided: HeaderAllocationFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeaderAllocationFormComponent", function() { return HeaderAllocationFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_components_commodity_input_commodity_input_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/components/commodity-input/commodity-input.component */ "./Client/app/shared/components/commodity-input/commodity-input.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/entities/masterdata-props.entity */ "./Client/app/shared/entities/masterdata-props.entity.ts");
/* harmony import */ var _shared_entities_masterdata_entity__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/entities/masterdata.entity */ "./Client/app/shared/entities/masterdata.entity.ts");
/* harmony import */ var _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/enums/contract-type.enum */ "./Client/app/shared/enums/contract-type.enum.ts");
/* harmony import */ var _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/models/section-complete-display-view */ "./Client/app/shared/models/section-complete-display-view.ts");
/* harmony import */ var _shared_pipes_format_date_pipe_pipe__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/pipes/format-date-pipe.pipe */ "./Client/app/shared/pipes/format-date-pipe.pipe.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};












var HeaderAllocationFormComponent = /** @class */ (function (_super) {
    __extends(HeaderAllocationFormComponent, _super);
    function HeaderAllocationFormComponent(formBuilder, formConfigurationProvider, formatDate, route) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.formatDate = formatDate;
        _this.route = route;
        _this.counterpartyCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('counterparty');
        _this.counterReferenceNumberCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('counterparty');
        _this.quantityValueCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('quantityValue');
        _this.quantityCodeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('quantityCode');
        _this.priceCodeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('priceCode');
        _this.currencyValueCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('currencyValue');
        _this.descriptionCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('description');
        _this.shippingPeriodCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('shippingPeriod');
        _this.model = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_9__["SectionCompleteDisplayView"]();
        _this.masterData = new _shared_entities_masterdata_entity__WEBPACK_IMPORTED_MODULE_7__["MasterData"]();
        _this.listOfMasterData = [
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_6__["MasterDataProps"].Counterparties,
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_6__["MasterDataProps"].Commodities,
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_6__["MasterDataProps"].Currencies,
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_6__["MasterDataProps"].PriceUnits,
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_6__["MasterDataProps"].WeightUnits,
        ];
        return _this;
    }
    HeaderAllocationFormComponent.prototype.ngOnInit = function () {
        this.masterData = this.route.snapshot.data.masterdata;
    };
    HeaderAllocationFormComponent.prototype.populateEntity = function (command) {
        var allocateSection = command;
        allocateSection.sourceQuantity = this.quantityValueCtrl.value ? this.quantityValueCtrl.value : null;
        allocateSection.sectionReference = this.counterReferenceNumberCtrl.value ? this.counterReferenceNumberCtrl.value : null;
        return allocateSection;
    };
    HeaderAllocationFormComponent.prototype.initForm = function (entity) {
        var _this = this;
        if (entity) {
            this.model = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_9__["SectionCompleteDisplayView"](entity);
            this.counterReferenceNumberCtrl.setValue(this.model.reference);
            this.shippingPeriodCtrl.setValue(this.formatDate.transform(this.model.deliveryPeriodStart)
                + ' - ' +
                this.formatDate.transform(this.model.deliveryPeriodEnd));
            if (this.model.type === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_8__["ContractTypes"][_shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_8__["ContractTypes"].Purchase]) {
                this.counterpartyCtrl.setValue(this.model.sellerCode);
            }
            else if (this.model.type === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_8__["ContractTypes"][_shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_8__["ContractTypes"].Sale]) {
                this.counterpartyCtrl.setValue(this.model.buyerCode);
            }
            var description = this.masterData.counterparties
                .find(function (counterpartyitem) { return counterpartyitem.counterpartyCode === _this.counterpartyCtrl.value; });
            this.descriptionCtrl.setValue(description ? description.description : '');
            var commodity = this.masterData.commodities.find(function (cmy) {
                return cmy.commodityId === _this.model.commodityId;
            });
            this.commodityInput.patchValue(commodity);
            this.commodityInput.getFormGroup().disable({ emitEvent: false });
            var price = this.masterData.priceUnits
                .find(function (priceunit) { return priceunit.priceUnitId === _this.model.priceUnitId; });
            this.priceCodeCtrl.setValue(price ? price.priceCode : '');
            var weightUnit = this.masterData.weightUnits
                .find(function (weightUnitItem) { return weightUnitItem.weightUnitId === _this.model.weightUnitId; });
            this.quantityCodeCtrl.setValue(weightUnit ? weightUnit.weightCode : '');
            this.quantityValueCtrl.setValue(this.model.quantity);
            this.currencyValueCtrl.setValue(this.model.currency);
        }
        this.commodityInput.isEditableCommodityForm();
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('commodityInput'),
        __metadata("design:type", _shared_components_commodity_input_commodity_input_component__WEBPACK_IMPORTED_MODULE_4__["CommodityInputComponent"])
    ], HeaderAllocationFormComponent.prototype, "commodityInput", void 0);
    HeaderAllocationFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-header-allocation-form-component',
            template: __webpack_require__(/*! ./header-allocation-form-component.component.html */ "./Client/app/trading/components/trade-allocation/allocation-form-components/header-allocation-form-component/header-allocation-form-component.component.html"),
            styles: [__webpack_require__(/*! ./header-allocation-form-component.component.scss */ "./Client/app/trading/components/trade-allocation/allocation-form-components/header-allocation-form-component/header-allocation-form-component.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_11__["FormConfigurationProviderService"],
            _shared_pipes_format_date_pipe_pipe__WEBPACK_IMPORTED_MODULE_10__["FormatDatePipe"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"]])
    ], HeaderAllocationFormComponent);
    return HeaderAllocationFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/trade-allocation/allocation-form-components/search-allocation-form-component/search-allocation-form-component.component.html":
/*!********************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-allocation/allocation-form-components/search-allocation-form-component/search-allocation-form-component.component.html ***!
  \********************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"trade-allocation-card\">\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"left start\"\r\n             fxLayoutGap=\"10%\">\r\n            <mat-form-field fxFlex=\"85%\">\r\n                <input matInput\r\n                       placeholder=\"Search\"\r\n                       value=\"Searched Value\">\r\n            </mat-form-field>\r\n            <mat-icon>search</mat-icon>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>"

/***/ }),

/***/ "./Client/app/trading/components/trade-allocation/allocation-form-components/search-allocation-form-component/search-allocation-form-component.component.scss":
/*!********************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-allocation/allocation-form-components/search-allocation-form-component/search-allocation-form-component.component.scss ***!
  \********************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/trade-allocation/allocation-form-components/search-allocation-form-component/search-allocation-form-component.component.ts":
/*!******************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-allocation/allocation-form-components/search-allocation-form-component/search-allocation-form-component.component.ts ***!
  \******************************************************************************************************************************************************************/
/*! exports provided: SearchAllocationFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SearchAllocationFormComponent", function() { return SearchAllocationFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var SearchAllocationFormComponent = /** @class */ (function (_super) {
    __extends(SearchAllocationFormComponent, _super);
    function SearchAllocationFormComponent(formConfigurationProvider) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        return _this;
    }
    SearchAllocationFormComponent.prototype.ngOnInit = function () {
    };
    SearchAllocationFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-search-allocation-form-component',
            template: __webpack_require__(/*! ./search-allocation-form-component.component.html */ "./Client/app/trading/components/trade-allocation/allocation-form-components/search-allocation-form-component/search-allocation-form-component.component.html"),
            styles: [__webpack_require__(/*! ./search-allocation-form-component.component.scss */ "./Client/app/trading/components/trade-allocation/allocation-form-components/search-allocation-form-component/search-allocation-form-component.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_2__["FormConfigurationProviderService"]])
    ], SearchAllocationFormComponent);
    return SearchAllocationFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_1__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/trade-allocation/allocation-form-components/shipping-allocation-form-component/shipping-allocation-form-component.component.html":
/*!************************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-allocation/allocation-form-components/shipping-allocation-form-component/shipping-allocation-form-component.component.html ***!
  \************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-card class=\"trade-allocation-shipping-card\">\r\n    <div class=\"mat-card-title\">\r\n        Allocation Options\r\n    </div>\r\n    <mat-card-content>\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"start left\"\r\n             fxFlex=\"100%\">\r\n            <mat-form-field fxFlex=\"14%\">\r\n                <mat-select placeholder=\"Transfer Shipping\"\r\n                            [formControl]=\"shippingTypeCtrl\">\r\n                    <mat-option *ngFor=\"let type of shippingTypes\"\r\n                                [value]=\"type.value\">{{type.shippingDescription}}</mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n            <mat-form-field fxFlex=\"14%\"\r\n                            *ngIf=\"!dataVersionId\">\r\n                <mat-select placeholder=\"Allocation option\"\r\n                            [formControl]=\"allocationSourceTypeCtrl\">\r\n                    <mat-option *ngFor=\"let type of allocationSourceTypes\"\r\n                                [value]=\"type.value\">{{type.allocationDescription}} </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n            <mat-form-field fxFlex=\"14%\">\r\n                <input matInput\r\n                       [textMask]=\"{mask:mask}\"\r\n                       [formControl]=\"sourceQuantityCtrl\"\r\n                       placeholder=\"Quantity to allocate\"\r\n                       (keydown.enter)=\"$event.preventDefault()\"\r\n                       [required]=\"sourceQuantityCtrl.isRequired\"\r\n                       autocomplete=\"off\"\r\n                       (blur)=\"updateQuantityValue($event.target.value)\">\r\n                <mat-error *ngIf=\"sourceQuantityCtrl.hasError('required')\">\r\n                    Quantity to allocate is required\r\n                </mat-error>\r\n                <mat-error *ngIf=\"sourceQuantityCtrl.hasError('isPositiveError')\">\r\n                    Quantity to allocate must be positive.\r\n                </mat-error>\r\n                <mat-error *ngIf=\"sourceQuantityCtrl.hasError('max')\">\r\n                    Cannot be greater than quantity available.\r\n                </mat-error>\r\n                <mat-error *ngIf=\"sourceQuantityCtrl.hasError('min')\">\r\n                    Quantity cannot be zero.\r\n                </mat-error>\r\n            </mat-form-field>\r\n            <mat-form-field fxFlex=\"12%\">\r\n                <input matInput\r\n                       [formControl]=\"sourceQuantityCodeCtrl\"\r\n                       placeholder=\"Quantity Code\"\r\n                       autocomplete=\"off\"\r\n                       (keydown.enter)=\"$event.preventDefault()\"\r\n                       readonly>\r\n            </mat-form-field>\r\n            <mat-form-field fxFlex=\"14%\"\r\n                            *ngIf=\"!dataVersionId\">\r\n                <mat-select placeholder=\"Allocation option\"\r\n                            [formControl]=\"allocationTargetTypeCtrl\">\r\n                    <mat-option *ngFor=\"let type of allocationTargetTypes\"\r\n                                [value]=\"type.value\">{{type.allocationDescription}} </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n            <atlas-form-input fxFlex=\"14%\"\r\n                              [fieldControl]=\"targetQuantityCtrl\"\r\n                              [isEditable]=\"targetQuantityCtrl.enabled\"\r\n                              label=\"Quantity to allocate\"\r\n                              [textMask]=\"{mask:mask}\"\r\n                              (keydown.enter)=\"$event.preventDefault()\"\r\n                              (blur)=\"updateQuantityValue($event.target.value)\"\r\n                              [errorMap]=\"targetQuantityErrorMap\"\r\n                              class=\"custom-input\">\r\n            </atlas-form-input>\r\n            <mat-form-field fxFlex=\"12%\">\r\n                <input matInput\r\n                       [formControl]=\"targetQuantityCodeCtrl\"\r\n                       placeholder=\"Quantity Code\"\r\n                       autocomplete=\"off\"\r\n                       (keydown.enter)=\"$event.preventDefault()\"\r\n                       readonly>\r\n                <mat-error *ngIf=\"targetQuantityCodeCtrl.hasError('required')\">\r\n                    Quantity Code is required\r\n                </mat-error>\r\n            </mat-form-field>\r\n        </div>\r\n    </mat-card-content>\r\n</mat-card>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/trade-allocation/allocation-form-components/shipping-allocation-form-component/shipping-allocation-form-component.component.scss":
/*!************************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-allocation/allocation-form-components/shipping-allocation-form-component/shipping-allocation-form-component.component.scss ***!
  \************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".custom-input {\n  margin: 0 8px 0 0; }\n"

/***/ }),

/***/ "./Client/app/trading/components/trade-allocation/allocation-form-components/shipping-allocation-form-component/shipping-allocation-form-component.component.ts":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-allocation/allocation-form-components/shipping-allocation-form-component/shipping-allocation-form-component.component.ts ***!
  \**********************************************************************************************************************************************************************/
/*! exports provided: ShippingAllocationFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShippingAllocationFormComponent", function() { return ShippingAllocationFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_directives_number_validators_directive__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../shared/directives/number-validators.directive */ "./Client/app/shared/directives/number-validators.directive.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../shared/entities/masterdata-props.entity */ "./Client/app/shared/entities/masterdata-props.entity.ts");
/* harmony import */ var _shared_entities_masterdata_entity__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../shared/entities/masterdata.entity */ "./Client/app/shared/entities/masterdata.entity.ts");
/* harmony import */ var _shared_enums_allocation_type_enum__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../shared/enums/allocation-type.enum */ "./Client/app/shared/enums/allocation-type.enum.ts");
/* harmony import */ var _shared_enums_shipping_type_enum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../shared/enums/shipping-type-enum */ "./Client/app/shared/enums/shipping-type-enum.ts");
/* harmony import */ var _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../../shared/models/section-complete-display-view */ "./Client/app/shared/models/section-complete-display-view.ts");
/* harmony import */ var _shared_numberMask__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../../shared/numberMask */ "./Client/app/shared/numberMask.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../../shared/services/http-services/masterdata.service */ "./Client/app/shared/services/http-services/masterdata.service.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};















var ShippingAllocationFormComponent = /** @class */ (function (_super) {
    __extends(ShippingAllocationFormComponent, _super);
    function ShippingAllocationFormComponent(formConfigurationProvider, masterdataService, cdr, utilService, formBuilder, route) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.masterdataService = masterdataService;
        _this.cdr = cdr;
        _this.utilService = utilService;
        _this.formBuilder = formBuilder;
        _this.route = route;
        _this.isShippingFormInvalid = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.shippingTypeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('shippingType');
        _this.allocationSourceTypeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('allocationSourceType');
        _this.sourceQuantityCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('sourceQuantity');
        _this.sourceQuantityCodeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('sourceQuantityCode');
        _this.allocationTargetTypeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('allocationTargetType');
        _this.targetQuantityCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('targetQuantity');
        _this.targetQuantityCodeCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_5__["AtlasFormControl"]('targetQuantityCode');
        _this.mask = Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_11__["CustomNumberMask"])(12, 10, true);
        _this.shippingTypes = [];
        _this.allocationSourceTypes = [];
        _this.allocationTargetTypes = [];
        _this.model = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_10__["SectionCompleteDisplayView"]();
        _this.masterData = new _shared_entities_masterdata_entity__WEBPACK_IMPORTED_MODULE_7__["MasterData"]();
        _this.targetQuantity = 0;
        _this.defaultQuantiy = 0;
        _this.listOfMasterData = [
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_6__["MasterDataProps"].WeightUnits,
        ];
        _this.quantityUpdate = false;
        _this.targetQuantityErrorMap = new Map();
        _this.dataVersionId = _this.route.snapshot.params['dataVersionId'] ? Number(_this.route.snapshot.params['dataVersionId']) : null;
        _this.masterData = _this.route.snapshot.data.masterdata;
        _this.targetQuantityErrorMap
            .set('required', 'Required *')
            .set('isPositiveError', 'Quantity to allocate must be positive.')
            .set('min', ' Quantity cannot be zero.')
            .set('max', 'Cannot be greater than quantity available.');
        return _this;
    }
    ShippingAllocationFormComponent.prototype.ngOnInit = function () {
        for (var type in _shared_enums_shipping_type_enum__WEBPACK_IMPORTED_MODULE_9__["ShippingType"]) {
            if (typeof _shared_enums_shipping_type_enum__WEBPACK_IMPORTED_MODULE_9__["ShippingType"][type] === 'number') {
                this.shippingTypes.push({ value: _shared_enums_shipping_type_enum__WEBPACK_IMPORTED_MODULE_9__["ShippingType"][type], shippingDescription: type });
            }
        }
        this.shippingTypeCtrl.patchValue(_shared_enums_shipping_type_enum__WEBPACK_IMPORTED_MODULE_9__["ShippingType"].PurchaseToSale);
        for (var type in _shared_enums_allocation_type_enum__WEBPACK_IMPORTED_MODULE_8__["AllocationType"]) {
            if (typeof _shared_enums_allocation_type_enum__WEBPACK_IMPORTED_MODULE_8__["AllocationType"][type] === 'number') {
                this.allocationSourceTypes.push({
                    value: _shared_enums_allocation_type_enum__WEBPACK_IMPORTED_MODULE_8__["AllocationType"][type],
                    allocationDescription: this.getDescription(_shared_enums_allocation_type_enum__WEBPACK_IMPORTED_MODULE_8__["AllocationType"][type], 'contract'),
                });
                this.allocationTargetTypes.push({
                    value: _shared_enums_allocation_type_enum__WEBPACK_IMPORTED_MODULE_8__["AllocationType"][type],
                    allocationDescription: this.getDescription(_shared_enums_allocation_type_enum__WEBPACK_IMPORTED_MODULE_8__["AllocationType"][type], 'contract'),
                });
            }
        }
        this.allocationSourceTypeCtrl.patchValue(_shared_enums_allocation_type_enum__WEBPACK_IMPORTED_MODULE_8__["AllocationType"].SplitWhereNecessary);
        this.allocationTargetTypeCtrl.patchValue(_shared_enums_allocation_type_enum__WEBPACK_IMPORTED_MODULE_8__["AllocationType"].SplitWhereNecessary);
        if (this.dataVersionId) {
            this.targetQuantityCtrl.disable();
        }
    };
    ShippingAllocationFormComponent.prototype.initForm = function (entity) {
        this.getQuantityData(entity);
        this.setValidators();
        this.cdr.detectChanges();
    };
    ShippingAllocationFormComponent.prototype.getQuantityData = function (entity) {
        var _this = this;
        if (entity) {
            this.model = new _shared_models_section_complete_display_view__WEBPACK_IMPORTED_MODULE_10__["SectionCompleteDisplayView"](entity);
            var weightUnit = this.masterData.weightUnits
                .filter(function (weightUnitItem) { return weightUnitItem.weightUnitId === _this.model.weightUnitId; });
            this.sourceQuantityCodeCtrl.setValue((weightUnit.length > 0) ? weightUnit[0].weightCode : '');
            this.sourceQuantityCtrl.setValue(this.model.quantity);
            this.defaultQuantiy = this.model.quantity;
        }
    };
    ShippingAllocationFormComponent.prototype.populateEntity = function (command) {
        var allocateSection = command;
        allocateSection.shippingType = this.shippingTypeCtrl.value ? this.shippingTypeCtrl.value : null;
        allocateSection.quantity = this.sourceQuantityCtrl.value ?
            Number(this.sourceQuantityCtrl.value.toString().replace(/,/g, '')) : null;
        allocateSection.allocationSourceType = this.allocationSourceTypeCtrl.value ? this.allocationSourceTypeCtrl.value : null;
        allocateSection.allocationTargetType = this.allocationTargetTypeCtrl.value ? this.allocationTargetTypeCtrl.value : null;
        return allocateSection;
    };
    ShippingAllocationFormComponent.prototype.getDescription = function (id, entityName) {
        switch (id) {
            case _shared_enums_allocation_type_enum__WEBPACK_IMPORTED_MODULE_8__["AllocationType"].SplitWhereNecessary:
                return 'Split ' + entityName + ' where necessary';
            case _shared_enums_allocation_type_enum__WEBPACK_IMPORTED_MODULE_8__["AllocationType"].AdjustWhereNecessary:
                return 'Adjust ' + entityName + ' where necessary';
        }
    };
    ShippingAllocationFormComponent.prototype.contractRowSelected = function (quantityData) {
        if (quantityData.length > 1) {
            this.targetQuantity = Number(quantityData[0]);
            if (this.defaultQuantiy >= this.targetQuantity) {
                this.sourceQuantityCtrl.setValue(quantityData[0]);
                this.targetQuantityCtrl.setValue(quantityData[0]);
            }
            else if (this.defaultQuantiy < this.targetQuantity) {
                this.sourceQuantityCtrl.setValue(this.defaultQuantiy);
                this.targetQuantityCtrl.setValue(this.defaultQuantiy);
            }
            this.targetQuantityCodeCtrl.setValue(quantityData[1]);
        }
        else {
            this.targetQuantityCtrl.setValue('');
            this.targetQuantityCodeCtrl.setValue('');
        }
        this.setValidators();
    };
    ShippingAllocationFormComponent.prototype.getFormGroup = function () {
        this.formGroup = this.formBuilder.group({
            shippingTypeCtrl: this.shippingTypeCtrl,
            allocationSourceTypeCtrl: this.allocationSourceTypeCtrl,
            sourceQuantityCtrl: this.sourceQuantityCtrl,
            allocationTargetTypeCtrl: this.allocationTargetTypeCtrl,
            targetQuantityCtrl: this.targetQuantityCtrl,
            targetQuantityCodeCtrl: this.targetQuantityCodeCtrl,
        });
        return _super.prototype.getFormGroup.call(this);
    };
    ShippingAllocationFormComponent.prototype.setValidators = function () {
        var _this = this;
        this.sourceQuantityCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([Object(_shared_directives_number_validators_directive__WEBPACK_IMPORTED_MODULE_4__["isPositive"])(),
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].min(0.0000000001), _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].max(Number(this.model.quantity))]));
        this.targetQuantityCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([Object(_shared_directives_number_validators_directive__WEBPACK_IMPORTED_MODULE_4__["isPositive"])(),
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].min(0.0000000001),
            function (control) { return _angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].max(Number(_this.targetQuantity) > 0 ? Number(_this.targetQuantity) : null); }]));
        this.targetQuantityCodeCtrl.setValidators(_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_1__["Validators"].required]));
    };
    ShippingAllocationFormComponent.prototype.updateQuantityValue = function (value) {
        if (value) {
            this.targetQuantityCtrl.setValue(value);
            this.sourceQuantityCtrl.setValue(value);
            var formattedTargetNumber = Number(this.targetQuantityCtrl.value.toString().replace(/,/g, ''));
            var formattedSourceNumber = Number(this.sourceQuantityCtrl.value.toString().replace(/,/g, ''));
            if (formattedTargetNumber > this.defaultQuantiy || formattedTargetNumber > this.targetQuantity) {
                this.targetQuantityCtrl.setErrors({ max: true });
            }
            if (formattedSourceNumber > this.defaultQuantiy || formattedSourceNumber > this.targetQuantity) {
                this.sourceQuantityCtrl.setErrors({ max: true });
            }
        }
        if (!this.formGroup.valid) {
            this.isShippingFormInvalid.emit(true);
        }
        else {
            this.isShippingFormInvalid.emit(false);
        }
        this.quantityUpdate = true;
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], ShippingAllocationFormComponent.prototype, "isShippingFormInvalid", void 0);
    ShippingAllocationFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-shipping-allocation-form-component',
            template: __webpack_require__(/*! ./shipping-allocation-form-component.component.html */ "./Client/app/trading/components/trade-allocation/allocation-form-components/shipping-allocation-form-component/shipping-allocation-form-component.component.html"),
            styles: [__webpack_require__(/*! ./shipping-allocation-form-component.component.scss */ "./Client/app/trading/components/trade-allocation/allocation-form-components/shipping-allocation-form-component/shipping-allocation-form-component.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_12__["FormConfigurationProviderService"],
            _shared_services_http_services_masterdata_service__WEBPACK_IMPORTED_MODULE_13__["MasterdataService"],
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_14__["UtilService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"]])
    ], ShippingAllocationFormComponent);
    return ShippingAllocationFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_3__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/trade-allocation/allocation-form-components/warning-allocation-form-component/warning-allocation-form-component.component.html":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-allocation/allocation-form-components/warning-allocation-form-component/warning-allocation-form-component.component.html ***!
  \**********************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"trade-allocation-messages\">\r\n    <mat-card class=\"trade-allocation-warning-card\"\r\n              *ngIf=\"showRestrictedDescriptionCard\">\r\n        <div class=\"error-circle-icon\">\r\n            <mat-icon>remove_circle</mat-icon>\r\n        </div>\r\n        <mat-card-header>\r\n            <mat-card-title>\r\n                Allocation cannot be completed\r\n            </mat-card-title>\r\n            <mat-card-subtitle>\r\n                {{restrictedWarningMessage}}\r\n            </mat-card-subtitle>\r\n            <button class=\"remove-button\"\r\n                    mat-button\r\n                    (click)=\"onRestrictRemoveclicked()\">REMOVE\r\n            </button>\r\n        </mat-card-header>\r\n    </mat-card>\r\n\r\n    <mat-card class=\"trade-allocation-warning-card\"\r\n              *ngIf=\"showWarningDescriptionCard\">\r\n        <div class=\"warning-circle-icon\">\r\n            <mat-icon>warning_outline</mat-icon>\r\n        </div>\r\n        <mat-card-header>\r\n            <mat-card-title>\r\n                Allocation can be completed\r\n            </mat-card-title>\r\n            <mat-card-subtitle>\r\n                {{WarningMessage}}\r\n            </mat-card-subtitle>\r\n            <button class=\"remove-button\"\r\n                    mat-button\r\n                    (click)=\"onWarningRemoveButtonClicked()\">REMOVE\r\n            </button>\r\n\r\n        </mat-card-header>\r\n    </mat-card>\r\n\r\n    <mat-card class=\"trade-allocation-warning-card\"\r\n              *ngIf=\"showAllowDescriptionCard\">\r\n        <div class=\"success-circle-icon\">\r\n            <mat-icon>check</mat-icon>\r\n        </div>\r\n        <mat-card-header>\r\n            <mat-card-title>\r\n                Allocation is allowed\r\n            </mat-card-title>\r\n        </mat-card-header>\r\n    </mat-card>\r\n</div>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/trade-allocation/allocation-form-components/warning-allocation-form-component/warning-allocation-form-component.component.scss":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-allocation/allocation-form-components/warning-allocation-form-component/warning-allocation-form-component.component.scss ***!
  \**********************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "mat-card.trade-allocation-warning-card.mat-card {\n  padding: 0 !important;\n  height: 50px;\n  display: flex;\n  align-items: center; }\n  mat-card.trade-allocation-warning-card.mat-card button {\n    margin: 0px 15px 0 10px;\n    box-shadow: none; }\n  mat-card.trade-allocation-warning-card.mat-card mat-card-header.mat-card-header mat-card-title.mat-card-title {\n    margin: 0;\n    padding: 0; }\n  mat-card.trade-allocation-warning-card.mat-card mat-card-header.mat-card-header mat-card-subtitle.mat-card-subtitle {\n    margin: 0; }\n  button.remove-button.mat-button {\n  position: absolute;\n  right: 10px;\n  bottom: 15px; }\n  .mat-card-header-text {\n  display: flex;\n  align-items: center; }\n"

/***/ }),

/***/ "./Client/app/trading/components/trade-allocation/allocation-form-components/warning-allocation-form-component/warning-allocation-form-component.component.ts":
/*!********************************************************************************************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-allocation/allocation-form-components/warning-allocation-form-component/warning-allocation-form-component.component.ts ***!
  \********************************************************************************************************************************************************************/
/*! exports provided: WarningAllocationFormComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WarningAllocationFormComponent", function() { return WarningAllocationFormComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_enums_warning_message_type_enum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../shared/enums/warning-message-type.enum */ "./Client/app/shared/enums/warning-message-type.enum.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var WarningAllocationFormComponent = /** @class */ (function (_super) {
    __extends(WarningAllocationFormComponent, _super);
    function WarningAllocationFormComponent(formConfigurationProvider) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.restrictionRemoveClick = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        _this.allocationMessage = [];
        _this.showAllowDescriptionCard = false;
        _this.showRestrictedDescriptionCard = false;
        _this.showWarningDescriptionCard = false;
        return _this;
    }
    WarningAllocationFormComponent.prototype.ngOnInit = function () {
    };
    WarningAllocationFormComponent.prototype.validateWarningMessages = function (warningMessages) {
        var _this = this;
        var isValidTrade = true;
        this.resetAllDescriptionComponents();
        if (warningMessages.length > 0) {
            warningMessages.forEach(function (item) {
                // trade is Restricted , so return isValid =false;
                if (item.errorTypeId === _shared_enums_warning_message_type_enum__WEBPACK_IMPORTED_MODULE_2__["WarningMessageTypes"].Restricted) {
                    _this.showRestrictedDescriptionCard = true;
                    _this.restrictedWarningMessage = item.message;
                    isValidTrade = false;
                }
                else if (item.errorTypeId === _shared_enums_warning_message_type_enum__WEBPACK_IMPORTED_MODULE_2__["WarningMessageTypes"].Warning) {
                    // trade is Warning, allocation can be done , so return isValid =true;
                    _this.showWarningDescriptionCard = true;
                    _this.WarningMessage = item.message;
                }
            });
            this.showAllowDescriptionCard = isValidTrade;
        }
        this.showAllowDescriptionCard = isValidTrade;
        return isValidTrade;
    };
    WarningAllocationFormComponent.prototype.resetAllDescriptionComponents = function () {
        this.showAllowDescriptionCard = false;
        this.showRestrictedDescriptionCard = false;
        this.showWarningDescriptionCard = false;
    };
    WarningAllocationFormComponent.prototype.onRestrictRemoveclicked = function () {
        this.showRestrictedDescriptionCard = !this.showRestrictedDescriptionCard;
        // reset ag grid.
        this.restrictionRemoveClick.emit(true);
    };
    WarningAllocationFormComponent.prototype.onWarningRemoveButtonClicked = function () {
        this.showWarningDescriptionCard = !this.showWarningDescriptionCard;
    };
    WarningAllocationFormComponent.prototype.showAllowWarningMessages = function () {
        this.showAllowDescriptionCard = true;
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], WarningAllocationFormComponent.prototype, "restrictionRemoveClick", void 0);
    WarningAllocationFormComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-warning-allocation-form-component',
            template: __webpack_require__(/*! ./warning-allocation-form-component.component.html */ "./Client/app/trading/components/trade-allocation/allocation-form-components/warning-allocation-form-component/warning-allocation-form-component.component.html"),
            styles: [__webpack_require__(/*! ./warning-allocation-form-component.component.scss */ "./Client/app/trading/components/trade-allocation/allocation-form-components/warning-allocation-form-component/warning-allocation-form-component.component.scss")],
        }),
        __metadata("design:paramtypes", [_shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_3__["FormConfigurationProviderService"]])
    ], WarningAllocationFormComponent);
    return WarningAllocationFormComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_1__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/trade-allocation/trade-allocation.component.html":
/*!****************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-allocation/trade-allocation.component.html ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"main-container\">\r\n    <form [formGroup]=\"allocationFormGroup\">\r\n        <atlas-header-allocation-form-component #headerAllocationComponent></atlas-header-allocation-form-component>\r\n        <atlas-allocation-table-form-component #allocationDetailsComponent\r\n                                               (validateWarningMessages)=\"validateWarningMessages($event)\"\r\n                                               (disableAllocateButton)=\"disableAllocateButton($event)\"\r\n                                               (contractRowSelected)=\"contractRowSelected($event)\"\r\n                                               (counterpartyForContractRowSelected)=\"counterpartyForContractRowSelected($event)\">\r\n        </atlas-allocation-table-form-component>\r\n        <atlas-warning-allocation-form-component #warningAllocationComponent\r\n                                                 (restrictionRemoveClick)=\"restrictionRemoveClick($event)\">\r\n        </atlas-warning-allocation-form-component>\r\n\r\n        <atlas-shipping-allocation-form-component #shippingAllocationComponent\r\n                                                  (isShippingFormInvalid)=\"disableAllocationButton($event)\">\r\n        </atlas-shipping-allocation-form-component>\r\n\r\n        <atlas-floating-action-button [fabTitle]=\"fabTitle\"\r\n                                      [fabType]=\"fabType\"\r\n                                      [fabActions]=\"fabMenuActions\"\r\n                                      [isParentLoaded]=\"isLoaded\"\r\n                                      (fabActionClicked)=\"onFabActionClicked($event)\">\r\n        </atlas-floating-action-button>\r\n    </form>\r\n</div>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/trade-allocation/trade-allocation.component.scss":
/*!****************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-allocation/trade-allocation.component.scss ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/trade-allocation/trade-allocation.component.ts":
/*!**************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-allocation/trade-allocation.component.ts ***!
  \**************************************************************************************/
/*! exports provided: TradeAllocationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeAllocationComponent", function() { return TradeAllocationComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var text_mask_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! text-mask-core */ "./node_modules/text-mask-core/dist/textMaskCore.js");
/* harmony import */ var text_mask_core__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(text_mask_core__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../shared/components/base-form-component/base-form-component.component */ "./Client/app/shared/components/base-form-component/base-form-component.component.ts");
/* harmony import */ var _shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../shared/components/confirmation-dialog/confirmation-dialog.component */ "./Client/app/shared/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony import */ var _shared_components_floating_action_button_floating_action_button_type_enum__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../shared/components/floating-action-button/floating-action-button-type.enum */ "./Client/app/shared/components/floating-action-button/floating-action-button-type.enum.ts");
/* harmony import */ var _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../shared/entities/atlas-number.entity */ "./Client/app/shared/entities/atlas-number.entity.ts");
/* harmony import */ var _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../shared/entities/lock-functional-context.entity */ "./Client/app/shared/entities/lock-functional-context.entity.ts");
/* harmony import */ var _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../shared/entities/masterdata-props.entity */ "./Client/app/shared/entities/masterdata-props.entity.ts");
/* harmony import */ var _shared_entities_masterdata_entity__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../shared/entities/masterdata.entity */ "./Client/app/shared/entities/masterdata.entity.ts");
/* harmony import */ var _shared_enums_allocation_type_enum__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../shared/enums/allocation-type.enum */ "./Client/app/shared/enums/allocation-type.enum.ts");
/* harmony import */ var _shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../shared/enums/discount-basis.enum */ "./Client/app/shared/enums/discount-basis.enum.ts");
/* harmony import */ var _shared_enums_discount_type_enum__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../shared/enums/discount-type.enum */ "./Client/app/shared/enums/discount-type.enum.ts");
/* harmony import */ var _shared_enums_pricing_method_enum__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../shared/enums/pricing-method.enum */ "./Client/app/shared/enums/pricing-method.enum.ts");
/* harmony import */ var _shared_enums_split_type_enum__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../shared/enums/split-type.enum */ "./Client/app/shared/enums/split-type.enum.ts");
/* harmony import */ var _shared_services_execution_dtos_allocate_section_command__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../../shared/services/execution/dtos/allocate-section-command */ "./Client/app/shared/services/execution/dtos/allocate-section-command.ts");
/* harmony import */ var _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../../shared/services/form-configuration-provider.service */ "./Client/app/shared/services/form-configuration-provider.service.ts");
/* harmony import */ var _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../../shared/services/http-services/execution.service */ "./Client/app/shared/services/http-services/execution.service.ts");
/* harmony import */ var _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../../shared/services/http-services/lock.service */ "./Client/app/shared/services/http-services/lock.service.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _services_trade_actions_service__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../../services/trade-actions.service */ "./Client/app/trading/services/trade-actions.service.ts");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./../../../shared/enums/contract-status.enum */ "./Client/app/shared/enums/contract-status.enum.ts");
/* harmony import */ var _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./../../../shared/enums/permission-level.enum */ "./Client/app/shared/enums/permission-level.enum.ts");
/* harmony import */ var _shared_numberMask__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./../../../shared/numberMask */ "./Client/app/shared/numberMask.ts");
/* harmony import */ var _shared_services_http_services_freeze_service__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./../../../shared/services/http-services/freeze.service */ "./Client/app/shared/services/http-services/freeze.service.ts");
/* harmony import */ var _shared_services_http_services_preaccounting_service__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./../../../shared/services/http-services/preaccounting.service */ "./Client/app/shared/services/http-services/preaccounting.service.ts");
/* harmony import */ var _shared_services_split_create_and_allocate_service__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./../../../shared/services/split-create-and-allocate.service */ "./Client/app/shared/services/split-create-and-allocate.service.ts");
/* harmony import */ var _shared_services_title_service__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./../../../shared/services/title.service */ "./Client/app/shared/services/title.service.ts");
/* harmony import */ var _entities_section_reference__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./../../entities/section-reference */ "./Client/app/trading/entities/section-reference.ts");
/* harmony import */ var _allocation_form_components_allocation_table_form_component_allocation_table_form_component_component__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./allocation-form-components/allocation-table-form-component/allocation-table-form-component.component */ "./Client/app/trading/components/trade-allocation/allocation-form-components/allocation-table-form-component/allocation-table-form-component.component.ts");
/* harmony import */ var _allocation_form_components_header_allocation_form_component_header_allocation_form_component_component__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./allocation-form-components/header-allocation-form-component/header-allocation-form-component.component */ "./Client/app/trading/components/trade-allocation/allocation-form-components/header-allocation-form-component/header-allocation-form-component.component.ts");
/* harmony import */ var _allocation_form_components_shipping_allocation_form_component_shipping_allocation_form_component_component__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./allocation-form-components/shipping-allocation-form-component/shipping-allocation-form-component.component */ "./Client/app/trading/components/trade-allocation/allocation-form-components/shipping-allocation-form-component/shipping-allocation-form-component.component.ts");
/* harmony import */ var _allocation_form_components_warning_allocation_form_component_warning_allocation_form_component_component__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./allocation-form-components/warning-allocation-form-component/warning-allocation-form-component.component */ "./Client/app/trading/components/trade-allocation/allocation-form-components/warning-allocation-form-component/warning-allocation-form-component.component.ts");
/* harmony import */ var _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./../../../shared/enums/contract-type.enum */ "./Client/app/shared/enums/contract-type.enum.ts");
/* harmony import */ var _shared_enums_contract_invoice_type_enum__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./../../../shared/enums/contract-invoice-type.enum */ "./Client/app/shared/enums/contract-invoice-type.enum.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











































var TradeAllocationComponent = /** @class */ (function (_super) {
    __extends(TradeAllocationComponent, _super);
    function TradeAllocationComponent(formBuilder, companyManager, router, route, executionService, snackbarService, formConfigurationProvider, tradingService, dialog, lockService, tradeActionsService, freezeService, preaccountingService, authorizationService, splitCreateAndAllocateService, titleService) {
        var _this = _super.call(this, formConfigurationProvider) || this;
        _this.formBuilder = formBuilder;
        _this.companyManager = companyManager;
        _this.router = router;
        _this.route = route;
        _this.executionService = executionService;
        _this.snackbarService = snackbarService;
        _this.formConfigurationProvider = formConfigurationProvider;
        _this.tradingService = tradingService;
        _this.dialog = dialog;
        _this.lockService = lockService;
        _this.tradeActionsService = tradeActionsService;
        _this.freezeService = freezeService;
        _this.preaccountingService = preaccountingService;
        _this.authorizationService = authorizationService;
        _this.splitCreateAndAllocateService = splitCreateAndAllocateService;
        _this.titleService = titleService;
        _this.formComponents = [];
        _this.childFlag = 0;
        _this.isDisabled = true;
        _this.isSave = false;
        _this.isShippingValid = false;
        _this.allocationMessage = [];
        _this.masterData = new _shared_entities_masterdata_entity__WEBPACK_IMPORTED_MODULE_15__["MasterData"]();
        _this.listOfMasterData = [
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_14__["MasterDataProps"].Counterparties,
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_14__["MasterDataProps"].Commodities,
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_14__["MasterDataProps"].Currencies,
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_14__["MasterDataProps"].PriceUnits,
            _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_14__["MasterDataProps"].WeightUnits,
        ];
        _this.isTradeAvailableForWashout = false;
        // FAB
        _this.fabMenuActions = [];
        _this.isLoaded = false;
        return _this;
    }
    TradeAllocationComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.masterData = this.route.snapshot.data.masterdata;
        this.titleService.setTitle(this.route.snapshot.data.title);
        this.sectionId = Number(this.route.snapshot.paramMap.get('sectionId'));
        this.dataVersionId = this.route.snapshot.params['dataVersionId'] ? Number(this.route.snapshot.params['dataVersionId']) : null;
        this.company = this.route.snapshot.paramMap.get('company');
        this.allocationFormGroup = this.formBuilder.group({
            shippingGroup: this.shippingAllocationComponent.getFormGroup(),
        });
        if (this.dataVersionId) {
            this.subscriptions.push(Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["forkJoin"])([
                this.freezeService.getFreezeByDataVersionId(this.dataVersionId).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["map"])(function (freeze) {
                    return moment__WEBPACK_IMPORTED_MODULE_4__(freeze.freezeDate);
                })),
                this.preaccountingService.getAccountingSetupDetails().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["map"])(function (setup) {
                    return moment__WEBPACK_IMPORTED_MODULE_4__(setup.lastMonthClosed);
                }))
            ])
                .subscribe(function (result) {
                var freezeDate = result[0];
                var closedMonthDate = result[1];
                if (freezeDate.year() < closedMonthDate.year() || (freezeDate.year() === closedMonthDate.year() && freezeDate.month() <= closedMonthDate.month())) {
                    _this.snackbarService.throwErrorSnackBar('You cannot allocate a trade in a freeze that is closed for accounting.');
                    if (_this.dataVersionId) {
                        _this.tradeActionsService.displaySectionInSnapshotSubject
                            .next(new _entities_section_reference__WEBPACK_IMPORTED_MODULE_36__["SectionReference"](_this.sectionId, _this.dataVersionId));
                    }
                    else {
                        _this.tradeActionsService.displaySectionSubject.next(_this.sectionId);
                    }
                }
            }));
        }
        this.formComponents.push(this.allocationDetailsComponent, this.headerAllocationComponent, this.warningAllocationComponent, this.shippingAllocationComponent);
        this.lockContract();
        this.tradingService.getSection(this.sectionId, _shared_enums_pricing_method_enum__WEBPACK_IMPORTED_MODULE_19__["PricingMethods"].Priced, this.dataVersionId)
            .subscribe(function (data) {
            _this.sectionModel = data;
            // Adding condition for this.dataVersionId as for a snapshot trade, we can allocate a trade even if it is not approved
            if (_this.dataVersionId || _this.sectionModel.status === _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_29__["ContractStatus"].Approved ||
                _this.authorizationService.getPermissionLevel(_this.company, 'Trades', 'Physicals', 'SuperTradeEdition') <= _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_30__["PermissionLevels"].None) {
                _this.formComponents.forEach(function (comp) {
                    comp.initForm(data, false);
                });
            }
            else {
                if (_this.dataVersionId) {
                    _this.tradeActionsService.displaySectionInSnapshotSubject
                        .next(new _entities_section_reference__WEBPACK_IMPORTED_MODULE_36__["SectionReference"](_this.sectionId, _this.dataVersionId));
                }
                else {
                    _this.tradeActionsService.displaySectionSubject.next(_this.sectionId);
                }
            }
        });
        this.initFABActions();
        this.isLoaded = true;
    };
    TradeAllocationComponent.prototype.canDeactivate = function () {
        if ((this.allocationFormGroup.dirty) && this.isSave === false) {
            if (this.shippingAllocationComponent.quantityUpdate === true) {
                return true;
            }
            else {
                return window.confirm('Leave an unsave form? \nYour changes won\'t be applied!');
            }
        }
        return true;
    };
    TradeAllocationComponent.prototype.unloadNotification = function ($event) {
        if (this.allocationFormGroup.dirty) {
            $event.returnValue = true;
        }
    };
    TradeAllocationComponent.prototype.lockContract = function () {
        var _this = this;
        if (!this.dataVersionId) {
            this.subscriptions.push(this.lockService.lockContract(this.sectionId, _shared_entities_lock_functional_context_entity__WEBPACK_IMPORTED_MODULE_13__["LockFunctionalContext"].Allocation)
                .subscribe(function () { }, function (err) {
                _this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_10__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Lock',
                        text: err.error.detail,
                        okButton: 'Got it',
                    },
                });
                if (_this.dataVersionId) {
                    _this.tradeActionsService.displaySectionInSnapshotSubject
                        .next(new _entities_section_reference__WEBPACK_IMPORTED_MODULE_36__["SectionReference"](_this.sectionId, _this.dataVersionId));
                }
                else {
                    _this.tradeActionsService.displaySectionSubject.next(_this.sectionId);
                }
            }));
        }
    };
    TradeAllocationComponent.prototype.validateWarningMessages = function (warningMessage) {
        if (warningMessage === 'ClearFilter' || warningMessage === 'ClearTradeSelection') {
            this.resetAllocation();
        }
        else if (warningMessage) {
            this.warningAllocationComponent.resetAllDescriptionComponents();
            if (warningMessage.length > 0) {
                var isValidTrade = this.warningAllocationComponent.validateWarningMessages(warningMessage);
                this.isDisabled = !isValidTrade;
            }
            else {
                this.isDisabled = false;
                this.warningAllocationComponent.showAllowWarningMessages();
            }
        }
        this.initFABActions();
    };
    TradeAllocationComponent.prototype.disableAllocateButton = function (disable) {
        this.isDisabled = disable;
    };
    TradeAllocationComponent.prototype.restrictionRemoveClick = function (removeRestrictClick) {
        if (removeRestrictClick) {
            this.allocationDetailsComponent.resetAllocationgrid();
            this.resetAllocation();
        }
    };
    TradeAllocationComponent.prototype.resetAllocation = function () {
        this.warningAllocationComponent.resetAllDescriptionComponents();
        this.isDisabled = true;
    };
    TradeAllocationComponent.prototype.onTradeAllocateButtonClicked = function () {
        var _this = this;
        this.isSave = true;
        if (this.allocationFormGroup.valid) {
            var allocationDetails_1 = this.getAllocationDetails();
            if (this.isTradeAvailableForWashout) {
                var confirmDiscardDialog = this.dialog.open(_shared_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_10__["ConfirmationDialogComponent"], {
                    data: {
                        title: 'Washout Contract',
                        text: 'Do you want to mark this contract as washout ?',
                        okButton: 'Yes',
                        cancelButton: 'No',
                    },
                });
                confirmDiscardDialog.afterClosed().subscribe(function (answer) {
                    if (answer) {
                        allocationDetails_1.contractInvoiceTypeId = _shared_enums_contract_invoice_type_enum__WEBPACK_IMPORTED_MODULE_42__["ContractInvoiceType"].Washout;
                        _this.onAllocation(allocationDetails_1);
                    }
                    else {
                        _this.onAllocation(allocationDetails_1);
                    }
                });
            }
            else {
                this.onAllocation(allocationDetails_1);
            }
        }
    };
    TradeAllocationComponent.prototype.updateSplitDetails = function (allocationDetails) {
        var sectionIds = [];
        var contractedValues = [];
        switch (allocationDetails.splitType) {
            case _shared_enums_split_type_enum__WEBPACK_IMPORTED_MODULE_20__["SplitType"].SourceSplit:
                sectionIds.push(allocationDetails.sectionId);
                contractedValues.push(this.setContractValue(this.sectionModel, allocationDetails.quantity, false));
                this.createSplitAndAllocate(sectionIds, allocationDetails, contractedValues);
                break;
            case _shared_enums_split_type_enum__WEBPACK_IMPORTED_MODULE_20__["SplitType"].TargetSplit:
                contractedValues.push(this.setContractValue(this.tragetSectionModel, allocationDetails.quantity, false));
                sectionIds.push(allocationDetails.allocatedSectionId);
                this.createSplitAndAllocate(sectionIds, allocationDetails, contractedValues);
                break;
            case _shared_enums_split_type_enum__WEBPACK_IMPORTED_MODULE_20__["SplitType"].Both:
                contractedValues.push(this.setContractValue(this.sectionModel, allocationDetails.quantity, false));
                contractedValues.push(this.setContractValue(this.tragetSectionModel, allocationDetails.quantity, false));
                sectionIds.push(allocationDetails.sectionId);
                sectionIds.push(allocationDetails.allocatedSectionId);
                this.createSplitAndAllocate(sectionIds, allocationDetails, contractedValues);
                break;
            case _shared_enums_split_type_enum__WEBPACK_IMPORTED_MODULE_20__["SplitType"].None:
                this.allocateTrade(allocationDetails);
        }
    };
    TradeAllocationComponent.prototype.createSplitAndAllocate = function (sectionIds, allocationDetails, contractedValues) {
        var _this = this;
        this.allocateSectionSubscription = this.tradingService
            .createSplitForContract(sectionIds, allocationDetails.quantity, null, contractedValues)
            .subscribe(function (data) {
            _this.splitResult = data;
            var sectionId = sectionIds[0];
            var splitResult = _this.splitResult[0];
            if (splitResult) {
                if (allocationDetails.splitType === _shared_enums_split_type_enum__WEBPACK_IMPORTED_MODULE_20__["SplitType"].SourceSplit) {
                    allocationDetails.sectionId = splitResult.sectionId;
                    allocationDetails.sectionReference = splitResult.contractLabel;
                }
                else if (allocationDetails.splitType === _shared_enums_split_type_enum__WEBPACK_IMPORTED_MODULE_20__["SplitType"].TargetSplit) {
                    allocationDetails.allocatedSectionId = splitResult.sectionId;
                    allocationDetails.allocatedSectionReference = splitResult.contractLabel;
                }
                else if (_this.splitResult.length > 1) {
                    allocationDetails.sectionId = splitResult.sectionId;
                    allocationDetails.allocatedSectionId = _this.splitResult[1].sectionId;
                    allocationDetails.sectionReference = splitResult.contractLabel;
                    allocationDetails.allocatedSectionReference = _this.splitResult[1].contractLabel;
                }
            }
            _this.allocateTrade(allocationDetails, true);
        }, function (err) {
            _this.isSave = false;
            throw err;
        });
    };
    TradeAllocationComponent.prototype.allocateTrade = function (allocationDetails, status) {
        var _this = this;
        if (status === void 0) { status = false; }
        this.allocateSectionSubscription = this.executionService
            .allocate(allocationDetails)
            .subscribe(function (data) {
            _this.assignCharter(allocationDetails);
            var message = 'The trade' + ' ' + allocationDetails.sectionReference + ' ' +
                ' has been properly allocated to ' + ' ' +
                allocationDetails.allocatedSectionReference + ' ' + ' with the number ' + ' ' + data;
            _this.isSave = false;
            _this.snackbarService.informationAndCopySnackBar(message, message);
            if (_this.dataVersionId) {
                _this.tradeActionsService.displaySectionInSnapshotSubject
                    .next(new _entities_section_reference__WEBPACK_IMPORTED_MODULE_36__["SectionReference"](allocationDetails.sectionId, _this.dataVersionId));
            }
            else {
                _this.tradeActionsService.displaySectionSubject.next(allocationDetails.sectionId);
            }
        }, function (err) {
            _this.isSave = false;
            throw err;
        });
    };
    TradeAllocationComponent.prototype.getAllocationDetails = function () {
        var allocationDetails = new _shared_services_execution_dtos_allocate_section_command__WEBPACK_IMPORTED_MODULE_21__["AllocateSectionCommand"]();
        allocationDetails.sectionId = this.sectionId;
        this.formComponents.forEach(function (comp) {
            allocationDetails = comp.populateEntity(allocationDetails);
        });
        allocationDetails.dataVersionId = this.dataVersionId;
        return allocationDetails;
    };
    TradeAllocationComponent.prototype.ngOnDestroy = function () {
        if (this.allocateSectionSubscription) {
            this.allocateSectionSubscription.unsubscribe();
        }
    };
    TradeAllocationComponent.prototype.contractRowSelected = function (quantityData) {
        this.shippingAllocationComponent.contractRowSelected(quantityData);
    };
    TradeAllocationComponent.prototype.assignCharterToAllocatedContract = function (sectionId, charterId) {
        var _this = this;
        var assignCharterPromise = [];
        this.executionService.GetSectionTrafficDetails(sectionId, this.dataVersionId)
            .subscribe(function (data) {
            if (data) {
                _this.sectionTrafficModel = data;
                _this.sectionModel.sectionId = sectionId;
                var sectionTrafficList = [];
                sectionTrafficList.push(_this.sectionTrafficModel);
                if (!_this.dataVersionId) {
                    assignCharterPromise.push(_this.executionService.assignSectionsToCharter(charterId, sectionTrafficList).toPromise());
                }
            }
        });
    };
    TradeAllocationComponent.prototype.setContractValue = function (sectionModel, quantityValue, formatValue) {
        if (formatValue === void 0) { formatValue = true; }
        var quantityVal;
        quantityVal = quantityValue;
        var mask = Object(_shared_numberMask__WEBPACK_IMPORTED_MODULE_31__["CustomNumberMask"])(12, 10, true);
        if (this.masterData === undefined) {
            return;
        }
        var weightCodeConversion = this.masterData.weightUnits.
            find(function (weightUnit) { return weightUnit.weightUnitId === sectionModel.weightUnitId; }).conversionFactor;
        var selectedPriceUnit = this.masterData.priceUnits.filter(function (priceUnit) { return priceUnit.priceUnitId === sectionModel.priceUnitId; });
        var priceCodeConversion = selectedPriceUnit.length > 0
            ? selectedPriceUnit[0].conversionFactor
            : undefined;
        if (!weightCodeConversion || !priceCodeConversion
            || !quantityValue
            || !sectionModel.price) {
            sectionModel.contractedValue = '';
            return;
        }
        var contractPrice = sectionModel.price.toString().replace(/,/g, '');
        var contractPriceDecimal = new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_12__["AtlasNumber"](contractPrice);
        var quantity = quantityVal.toString().replace(/,/g, '');
        var quantityDecimal = new _shared_entities_atlas_number_entity__WEBPACK_IMPORTED_MODULE_12__["AtlasNumber"](quantity);
        if (sectionModel.premiumDiscountTypeId !== undefined &&
            sectionModel.currencyCode !== sectionModel.premiumDiscountCurrency &&
            sectionModel.premiumDiscountTypeId !== undefined) {
            // discountPremiumValue exists
            var discountPremiumContractedPrice = 0;
            var discountPremiumSign = (sectionModel.premiumDiscountTypeId === _shared_enums_discount_type_enum__WEBPACK_IMPORTED_MODULE_18__["DiscountTypes"].Discount ? -1 : 1);
            // tslint:disable-next-line:prefer-conditional-expression
            if (sectionModel.premiumDiscountBasis === _shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_17__["DiscountBasis"].Rate) {
                discountPremiumContractedPrice = sectionModel.premiumDiscountValue * discountPremiumSign;
            }
            else if (sectionModel.premiumDiscountBasis === _shared_enums_discount_basis_enum__WEBPACK_IMPORTED_MODULE_17__["DiscountBasis"].Percent) {
                discountPremiumContractedPrice = contractPriceDecimal
                    .times((sectionModel.premiumDiscountValue * discountPremiumSign / 100));
            }
            contractPriceDecimal = contractPriceDecimal.plus(discountPremiumContractedPrice);
        }
        var contractValue = contractPriceDecimal.times(quantityDecimal).times(weightCodeConversion *
            priceCodeConversion).toString();
        if (formatValue) {
            var contractValueFormatted = Object(text_mask_core__WEBPACK_IMPORTED_MODULE_7__["conformToMask"])(contractValue, mask, { guide: false }).conformedValue;
            sectionModel.contractedValue = contractValueFormatted;
        }
        else {
            sectionModel.contractedValue = contractValue;
        }
        return sectionModel.contractedValue;
    };
    TradeAllocationComponent.prototype.assignCharterToParentContract = function (sectionIdAllocated, sectionIdParent) {
        var _this = this;
        this.tradingService.getSection(sectionIdAllocated, 0, this.dataVersionId)
            .subscribe(function (data) {
            if (data && data.charterId) {
                _this.assignCharterToAllocatedContract(sectionIdParent, data.charterId);
            }
        });
    };
    TradeAllocationComponent.prototype.onTradeDiscardButtonClicked = function () {
        if (this.dataVersionId) {
            this.tradeActionsService.displaySectionInSnapshotSubject
                .next(new _entities_section_reference__WEBPACK_IMPORTED_MODULE_36__["SectionReference"](this.sectionId, this.dataVersionId));
        }
        else {
            this.tradeActionsService.displaySectionSubject.next(this.sectionId);
        }
    };
    TradeAllocationComponent.prototype.assignCharter = function (allocationDetails) {
        var _this = this;
        this.tradingService.getSection(allocationDetails.sectionId, 0, this.dataVersionId)
            .subscribe(function (data) {
            if (data && data.charterId) {
                _this.assignCharterToAllocatedContract(allocationDetails.allocatedSectionId, data.charterId);
            }
            else {
                _this.assignCharterToParentContract(allocationDetails.allocatedSectionId, allocationDetails.sectionId);
            }
        });
    };
    TradeAllocationComponent.prototype.disableAllocationButton = function (value) {
        this.isShippingValid = (value) ? true : false;
    };
    TradeAllocationComponent.prototype.counterpartyForContractRowSelected = function (allocatedCouterparty) {
        if (this.sectionModel.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_41__["ContractTypes"].Purchase) {
            if (this.sectionModel.sellerCode === allocatedCouterparty[0] && this.sectionModel.currencyCode === allocatedCouterparty[1]) {
                this.isTradeAvailableForWashout = true;
            }
            else {
                this.isTradeAvailableForWashout = false;
            }
        }
        if (this.sectionModel.contractType === _shared_enums_contract_type_enum__WEBPACK_IMPORTED_MODULE_41__["ContractTypes"].Sale) {
            if (this.sectionModel.buyerCode === allocatedCouterparty[0] && this.sectionModel.currencyCode === allocatedCouterparty[1]) {
                this.isTradeAvailableForWashout = true;
            }
            else {
                this.isTradeAvailableForWashout = false;
            }
        }
    };
    TradeAllocationComponent.prototype.onAllocation = function (allocationDetails) {
        var _this = this;
        if ((allocationDetails.quantity === allocationDetails.sourceQuantity) &&
            (allocationDetails.quantity === allocationDetails.targetQuantity)) {
            this.allocateTrade(allocationDetails);
        }
        else if (this.dataVersionId) {
            this.snackbarService.throwErrorSnackBar('In a snapshot, you can only allocate the full quantity of both trades');
        }
        else {
            if ((allocationDetails.allocationSourceType !== _shared_enums_allocation_type_enum__WEBPACK_IMPORTED_MODULE_16__["AllocationType"].SplitWhereNecessary) &&
                (allocationDetails.allocationTargetType !== _shared_enums_allocation_type_enum__WEBPACK_IMPORTED_MODULE_16__["AllocationType"].SplitWhereNecessary)) {
                this.allocateTrade(allocationDetails);
            }
            else {
                if ((allocationDetails.sourceQuantity > allocationDetails.quantity) &&
                    (allocationDetails.allocationTargetType === _shared_enums_allocation_type_enum__WEBPACK_IMPORTED_MODULE_16__["AllocationType"].AdjustWhereNecessary ||
                        allocationDetails.targetQuantity === allocationDetails.quantity) &&
                    (allocationDetails.allocationSourceType === _shared_enums_allocation_type_enum__WEBPACK_IMPORTED_MODULE_16__["AllocationType"].SplitWhereNecessary)) {
                    allocationDetails.splitType = _shared_enums_split_type_enum__WEBPACK_IMPORTED_MODULE_20__["SplitType"].SourceSplit;
                }
                else if ((allocationDetails.allocationTargetType === _shared_enums_allocation_type_enum__WEBPACK_IMPORTED_MODULE_16__["AllocationType"].SplitWhereNecessary) &&
                    (allocationDetails.targetQuantity > allocationDetails.quantity) &&
                    (allocationDetails.allocationSourceType === _shared_enums_allocation_type_enum__WEBPACK_IMPORTED_MODULE_16__["AllocationType"].AdjustWhereNecessary ||
                        allocationDetails.sourceQuantity === allocationDetails.quantity)) {
                    allocationDetails.splitType = _shared_enums_split_type_enum__WEBPACK_IMPORTED_MODULE_20__["SplitType"].TargetSplit;
                }
                else if ((allocationDetails.sourceQuantity > allocationDetails.quantity) &&
                    (allocationDetails.targetQuantity > allocationDetails.quantity) &&
                    (allocationDetails.allocationSourceType === _shared_enums_allocation_type_enum__WEBPACK_IMPORTED_MODULE_16__["AllocationType"].SplitWhereNecessary) &&
                    (allocationDetails.allocationTargetType === _shared_enums_allocation_type_enum__WEBPACK_IMPORTED_MODULE_16__["AllocationType"].SplitWhereNecessary)) {
                    allocationDetails.splitType = _shared_enums_split_type_enum__WEBPACK_IMPORTED_MODULE_20__["SplitType"].Both;
                }
                else {
                    allocationDetails.splitType = _shared_enums_split_type_enum__WEBPACK_IMPORTED_MODULE_20__["SplitType"].None;
                }
                this.tradingService.getSection(allocationDetails.allocatedSectionId, _shared_enums_pricing_method_enum__WEBPACK_IMPORTED_MODULE_19__["PricingMethods"].Priced, this.dataVersionId)
                    .subscribe(function (data) {
                    _this.tragetSectionModel = data;
                    _this.updateSplitDetails(allocationDetails);
                }, function (err) {
                    _this.isSave = false;
                    throw err;
                });
            }
        }
    };
    // For FAB
    TradeAllocationComponent.prototype.initFABActions = function () {
        this.fabMenuActions = [];
        this.fabTitle = 'Allocation FAB Mini';
        this.fabType = _shared_components_floating_action_button_floating_action_button_type_enum__WEBPACK_IMPORTED_MODULE_11__["FABType"].MiniFAB;
        var actionDiscard = {
            icon: 'keyboard_backspace',
            text: 'Discard',
            action: 'discardClick',
            disabled: false,
            index: 1,
        };
        var actionAllocate = {
            icon: 'swap_vert',
            text: 'Allocate',
            action: 'allocateClick',
            disabled: false,
            index: 0,
        };
        this.fabMenuActions.push(actionDiscard);
        actionAllocate.disabled = (this.isDisabled || this.isSave || this.isShippingValid);
        this.fabMenuActions.push(actionAllocate);
    };
    TradeAllocationComponent.prototype.onFabActionClicked = function (action) {
        switch (action) {
            case 'allocateClick': {
                this.onTradeAllocateButtonClicked();
                break;
            }
            case 'discardClick': {
                this.onTradeDiscardButtonClicked();
                break;
            }
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('headerAllocationComponent'),
        __metadata("design:type", _allocation_form_components_header_allocation_form_component_header_allocation_form_component_component__WEBPACK_IMPORTED_MODULE_38__["HeaderAllocationFormComponent"])
    ], TradeAllocationComponent.prototype, "headerAllocationComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('warningAllocationComponent'),
        __metadata("design:type", _allocation_form_components_warning_allocation_form_component_warning_allocation_form_component_component__WEBPACK_IMPORTED_MODULE_40__["WarningAllocationFormComponent"])
    ], TradeAllocationComponent.prototype, "warningAllocationComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('shippingAllocationComponent'),
        __metadata("design:type", _allocation_form_components_shipping_allocation_form_component_shipping_allocation_form_component_component__WEBPACK_IMPORTED_MODULE_39__["ShippingAllocationFormComponent"])
    ], TradeAllocationComponent.prototype, "shippingAllocationComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('allocationDetailsComponent'),
        __metadata("design:type", _allocation_form_components_allocation_table_form_component_allocation_table_form_component_component__WEBPACK_IMPORTED_MODULE_37__["AllocationTableFormComponent"])
    ], TradeAllocationComponent.prototype, "allocationDetailsComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"])('window:beforeunload', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], TradeAllocationComponent.prototype, "unloadNotification", null);
    TradeAllocationComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-trade-allocation',
            template: __webpack_require__(/*! ./trade-allocation.component.html */ "./Client/app/trading/components/trade-allocation/trade-allocation.component.html"),
            styles: [__webpack_require__(/*! ./trade-allocation.component.scss */ "./Client/app/trading/components/trade-allocation/trade-allocation.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormBuilder"],
            _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_8__["CompanyManagerService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"],
            _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_23__["ExecutionService"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_26__["SnackbarService"],
            _shared_services_form_configuration_provider_service__WEBPACK_IMPORTED_MODULE_22__["FormConfigurationProviderService"],
            _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_25__["TradingService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialog"],
            _shared_services_http_services_lock_service__WEBPACK_IMPORTED_MODULE_24__["LockService"],
            _services_trade_actions_service__WEBPACK_IMPORTED_MODULE_27__["TradeActionsService"],
            _shared_services_http_services_freeze_service__WEBPACK_IMPORTED_MODULE_32__["FreezeService"],
            _shared_services_http_services_preaccounting_service__WEBPACK_IMPORTED_MODULE_33__["PreaccountingService"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_28__["AuthorizationService"],
            _shared_services_split_create_and_allocate_service__WEBPACK_IMPORTED_MODULE_34__["SplitCreateAndAllocateService"],
            _shared_services_title_service__WEBPACK_IMPORTED_MODULE_35__["TitleService"]])
    ], TradeAllocationComponent);
    return TradeAllocationComponent;
}(_shared_components_base_form_component_base_form_component_component__WEBPACK_IMPORTED_MODULE_9__["BaseFormComponent"]));



/***/ }),

/***/ "./Client/app/trading/components/trade-cost-report/trade-cost-report.component.html":
/*!******************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-cost-report/trade-cost-report.component.html ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div fxLayoutAlign=\"space-between center\">\r\n    <h2>Trade Cost Report</h2>\r\n    <button mat-button>\r\n        <mat-icon (click)=\"onCloseButtonClicked()\">close</mat-icon>\r\n    </button>\r\n</div>\r\n<div class=\"report-container-full-content\">\r\n    <atlas-ssrsreport-viewer [reportServer]=\"reportServerUrl\" [reportUrl]=\"reportPath\"\r\n                                                              [parameters]=\"parameters\"\r\n                                                              #ssrsReportViewer></atlas-ssrsreport-viewer>\r\n</div>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/trade-cost-report/trade-cost-report.component.scss":
/*!******************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-cost-report/trade-cost-report.component.scss ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/trade-cost-report/trade-cost-report.component.ts":
/*!****************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-cost-report/trade-cost-report.component.ts ***!
  \****************************************************************************************/
/*! exports provided: TradeCostReportComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeCostReportComponent", function() { return TradeCostReportComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../environments/environment */ "./Client/environments/environment.ts");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_ssrs_report_viewer_ssrsreport_viewer_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../shared/components/ssrs-report-viewer/ssrsreport-viewer.component */ "./Client/app/shared/components/ssrs-report-viewer/ssrsreport-viewer.component.ts");
/* harmony import */ var _shared_entities_trade_status_entity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../shared/entities/trade-status.entity */ "./Client/app/shared/entities/trade-status.entity.ts");
/* harmony import */ var _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../shared/enums/contract-status.enum */ "./Client/app/shared/enums/contract-status.enum.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};







var TradeCostReportComponent = /** @class */ (function () {
    function TradeCostReportComponent(thisDialogRef, data, companyManager) {
        this.thisDialogRef = thisDialogRef;
        this.data = data;
        this.companyManager = companyManager;
        this.parameters = [];
        this.constractStatusList = [];
        this.reportServerUrl = _environments_environment__WEBPACK_IMPORTED_MODULE_2__["environment"].reportServerLink;
        this.reportPath = 'LDC Atlas/TradeCost/TradeCost';
        this.dialogData = data;
        this.constractStatusList = _shared_entities_trade_status_entity__WEBPACK_IMPORTED_MODULE_5__["TradeStatus"].getStatusList();
    }
    TradeCostReportComponent.prototype.ngOnInit = function () {
        this.company = this.companyManager.getCurrentCompanyId();
        var goodsIncluded = this.includeGoods ? 1 : 0;
        var tradeStatus;
        if (this.constractStatusList && this.dialogData.contractStatus) {
            var status_1 = this.dialogData.contractStatus !== _shared_enums_contract_status_enum__WEBPACK_IMPORTED_MODULE_6__["ContractStatus"].Closed ?
                'Open' : 'Closed';
            tradeStatus = this.constractStatusList.find(function (e) { return e.name === status_1; });
        }
        this.parameters = [
            { name: 'Company', value: this.company },
            { name: 'SectionId', value: this.dialogData.sectionId },
            { name: 'IncludeGoods', value: goodsIncluded },
        ];
        if (tradeStatus) {
            this.parameters.push({ name: 'TradeStatus', value: tradeStatus.value });
        }
        if (this.dialogData.dataVersionId) {
            this.parameters.push({ name: 'Database', value: this.dialogData.dataVersionId });
        }
        if (this.company) {
            this.parameters.push({ name: 'UserLoginCompany', value: this.company });
        }
        this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPath, this.parameters);
    };
    TradeCostReportComponent.prototype.onCloseButtonClicked = function () {
        this.thisDialogRef.close(true);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('ssrsReportViewer'),
        __metadata("design:type", _shared_components_ssrs_report_viewer_ssrsreport_viewer_component__WEBPACK_IMPORTED_MODULE_4__["SSRSReportViewerComponent"])
    ], TradeCostReportComponent.prototype, "ssrsReportViewer", void 0);
    TradeCostReportComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-trade-cost-report',
            template: __webpack_require__(/*! ./trade-cost-report.component.html */ "./Client/app/trading/components/trade-cost-report/trade-cost-report.component.html"),
            styles: [__webpack_require__(/*! ./trade-cost-report.component.scss */ "./Client/app/trading/components/trade-cost-report/trade-cost-report.component.scss")],
        }),
        __param(1, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_1__["MAT_DIALOG_DATA"])),
        __metadata("design:paramtypes", [_angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialogRef"], Object, _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_3__["CompanyManagerService"]])
    ], TradeCostReportComponent);
    return TradeCostReportComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/trade-pnl-report/trade-pnl-report.component.html":
/*!****************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-pnl-report/trade-pnl-report.component.html ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div fxLayoutAlign=\"space-between center\">\r\n    <h2>Trade P&L Report</h2>\r\n    <button mat-button>\r\n        <mat-icon (click)=\"onCloseButtonClicked()\">close</mat-icon>\r\n    </button>\r\n</div>\r\n<div class=\"report-container-full-content\">\r\n    <atlas-ssrsreport-viewer [reportServer]=\"reportServerUrl\" [reportUrl]=\"reportPath\"\r\n                                                              [parameters]=\"parameters\"\r\n                                                              #ssrsReportViewer></atlas-ssrsreport-viewer>\r\n</div>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/trade-pnl-report/trade-pnl-report.component.scss":
/*!****************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-pnl-report/trade-pnl-report.component.scss ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./Client/app/trading/components/trade-pnl-report/trade-pnl-report.component.ts":
/*!**************************************************************************************!*\
  !*** ./Client/app/trading/components/trade-pnl-report/trade-pnl-report.component.ts ***!
  \**************************************************************************************/
/*! exports provided: TradePnlReportComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradePnlReportComponent", function() { return TradePnlReportComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../environments/environment */ "./Client/environments/environment.ts");
/* harmony import */ var _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/services/company-manager.service */ "./Client/app/core/services/company-manager.service.ts");
/* harmony import */ var _shared_components_ssrs_report_viewer_ssrsreport_viewer_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../shared/components/ssrs-report-viewer/ssrsreport-viewer.component */ "./Client/app/shared/components/ssrs-report-viewer/ssrsreport-viewer.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};





var TradePnlReportComponent = /** @class */ (function () {
    function TradePnlReportComponent(thisDialogRef, data, companyManager) {
        this.thisDialogRef = thisDialogRef;
        this.data = data;
        this.companyManager = companyManager;
        this.parameters = [];
        this.reportServerUrl = _environments_environment__WEBPACK_IMPORTED_MODULE_2__["environment"].reportServerLink;
        this.reportPath = 'LDC Atlas/PnL/PnL_TradeCharter';
        this.dialogData = data;
    }
    TradePnlReportComponent.prototype.ngOnInit = function () {
        this.company = this.companyManager.getCurrentCompanyId();
        this.parameters = [
            { name: 'CompanyID', value: this.company },
            { name: 'ContractSectionCode', value: this.dialogData.contractSectionCode },
        ];
        if (this.dialogData.dataVersionId) {
            this.parameters.push({ name: 'Database', value: this.dialogData.dataVersionId });
        }
        this.ssrsReportViewer.generateReport(this.reportServerUrl, this.reportPath, this.parameters);
    };
    TradePnlReportComponent.prototype.onCloseButtonClicked = function () {
        this.thisDialogRef.close(true);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('ssrsReportViewer'),
        __metadata("design:type", _shared_components_ssrs_report_viewer_ssrsreport_viewer_component__WEBPACK_IMPORTED_MODULE_4__["SSRSReportViewerComponent"])
    ], TradePnlReportComponent.prototype, "ssrsReportViewer", void 0);
    TradePnlReportComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-trade-pnl-report',
            template: __webpack_require__(/*! ./trade-pnl-report.component.html */ "./Client/app/trading/components/trade-pnl-report/trade-pnl-report.component.html"),
            styles: [__webpack_require__(/*! ./trade-pnl-report.component.scss */ "./Client/app/trading/components/trade-pnl-report/trade-pnl-report.component.scss")],
        }),
        __param(1, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_1__["MAT_DIALOG_DATA"])),
        __metadata("design:paramtypes", [_angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialogRef"], Object, _core_services_company_manager_service__WEBPACK_IMPORTED_MODULE_3__["CompanyManagerService"]])
    ], TradePnlReportComponent);
    return TradePnlReportComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/trades-tab/trades-tab.component.html":
/*!****************************************************************************!*\
  !*** ./Client/app/trading/components/trades-tab/trades-tab.component.html ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div matToolbarHighlight\r\n     class=\"dark-tab header-tab mat-elevation-z6\">\r\n    <div class=\"header-tab-container\">\r\n        <div>\r\n            <mat-tab-group [selectedIndex]=\"tabIndex\"\r\n                           (selectedIndexChange)=onSelectedIndexChanged($event)>\r\n                <mat-tab label=\"Physical Trades\"></mat-tab>\r\n                <div *ifAuthorized=\"'Trades.CostMatrices', company:company\">\r\n                    <mat-tab *ngIf=\"!dataVersionId\"\r\n                             label=\"Cost Matrices\"></mat-tab>\r\n                    <mat-tab label=\"FX DEALS\"></mat-tab>\r\n                </div>\r\n            </mat-tab-group>\r\n        </div>\r\n\r\n        <div class=\"content-tab\">\r\n            <mat-tab-group [selectedIndex]=\"tabIndex\"\r\n                           (selectedIndexChange)=\"onSelectedTabChanged($event)\">\r\n                <mat-tab>\r\n                    <atlas-trades [sideNavOpened]=\"sideNavOpened\"\r\n                                  #tradesComponent></atlas-trades>\r\n                </mat-tab>\r\n                <mat-tab>\r\n                    <atlas-costmatrices #costmatricesComponent></atlas-costmatrices>\r\n                </mat-tab>\r\n                <mat-tab>\r\n                    <atlas-fx-deals #fxDealsComponent></atlas-fx-deals>\r\n                </mat-tab>\r\n            </mat-tab-group>\r\n        </div>\r\n    </div>\r\n</div>\r\n"

/***/ }),

/***/ "./Client/app/trading/components/trades-tab/trades-tab.component.scss":
/*!****************************************************************************!*\
  !*** ./Client/app/trading/components/trades-tab/trades-tab.component.scss ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".header-tab {\n  margin-bottom: 40px; }\n\n.menu-header {\n  background-color: #53c234;\n  color: white; }\n\n.menu-header mat-icon {\n    color: white; }\n\n.floating-menu {\n  top: -1px; }\n\n.has-header .mat-menu-content {\n  padding: 0 !important; }\n"

/***/ }),

/***/ "./Client/app/trading/components/trades-tab/trades-tab.component.ts":
/*!**************************************************************************!*\
  !*** ./Client/app/trading/components/trades-tab/trades-tab.component.ts ***!
  \**************************************************************************/
/*! exports provided: TradesTabComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradesTabComponent", function() { return TradesTabComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_components_favourites_list_display_favourites_list_display_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../shared/components/favourites-list-display/favourites-list-display.component */ "./Client/app/shared/components/favourites-list-display/favourites-list-display.component.ts");
/* harmony import */ var _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../shared/enums/permission-level.enum */ "./Client/app/shared/enums/permission-level.enum.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
/* harmony import */ var _shared_services_title_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../shared/services/title.service */ "./Client/app/shared/services/title.service.ts");
/* harmony import */ var _costmatrices_costmatrices_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../costmatrices/costmatrices.component */ "./Client/app/trading/components/costmatrices/costmatrices.component.ts");
/* harmony import */ var _fx_deals_fx_deals_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../fx-deals/fx-deals.component */ "./Client/app/trading/components/fx-deals/fx-deals.component.ts");
/* harmony import */ var _trades_trades_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../trades/trades.component */ "./Client/app/trading/components/trades/trades.component.ts");
/* harmony import */ var _services_trade_actions_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./../../services/trade-actions.service */ "./Client/app/trading/services/trade-actions.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};












var TradesTabComponent = /** @class */ (function () {
    function TradesTabComponent(route, router, dialog, tradeActionsService, securityService, authorizationService, titleService) {
        this.route = route;
        this.router = router;
        this.dialog = dialog;
        this.tradeActionsService = tradeActionsService;
        this.securityService = securityService;
        this.authorizationService = authorizationService;
        this.titleService = titleService;
        this.tabIndex = 0;
        this.isTrade = false;
        this.isFxDeal = false;
        this.isTradeCreationPrivilege = false;
        this.isCostMatrixCreationPrivilege = false;
        this.isAmendSnapshotPrivilege = false;
        this.sideNavOpened = false;
        this.PermissionLevels = _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_5__["PermissionLevels"];
    }
    TradesTabComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.company = this.route.snapshot.paramMap.get('company');
        this.securityService.isSecurityReady().subscribe(function () {
        });
        this.dataVersionId = this.route.snapshot.paramMap.get('dataVersionId') ?
            Number(this.route.snapshot.paramMap.get('dataVersionId')) : null;
        this.tabIndex = 0;
        this.route.queryParams.subscribe(function (params) {
            _this.tabIndex = Number(params['index']);
        });
        this.onSelectedButtonChanged(this.tabIndex);
        this.titleService.setTitle('Trades');
    };
    TradesTabComponent.prototype.onTradeOrCostMatrixButtonClicked = function () {
        if (this.isTrade) {
            if (this.dataVersionId) {
                this.tradeActionsService.newTradeInSnapshotSubject.next(this.dataVersionId);
            }
            else {
                this.tradeActionsService.newTradeSubject.next();
            }
        }
        else {
            this.router.navigate([this.company + '/trades/costmatrix/create']);
        }
    };
    TradesTabComponent.prototype.onSelectedIndexChanged = function (value) {
        this.tabIndex = value;
        this.onSelectedButtonChanged(this.tabIndex);
    };
    TradesTabComponent.prototype.onSelectedButtonChanged = function (tabIndex) {
        tabIndex === 1 ? this.isTrade = false : this.isTrade = true;
        this.isFxDeal = tabIndex === 2 ? true : false;
        if (this.isFxDeal) {
            this.titleService.setTitle('FX Deals');
        }
        else if (this.isTrade) {
            this.titleService.setTitle('Trades');
        }
        else {
            this.titleService.setTitle('Cost Matrices');
        }
    };
    TradesTabComponent.prototype.onSelectedTabChanged = function (index) {
        if (index === 1) {
            this.costmatricesComponent.onTabSelected();
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('tradesComponent'),
        __metadata("design:type", _trades_trades_component__WEBPACK_IMPORTED_MODULE_10__["TradesComponent"])
    ], TradesTabComponent.prototype, "tradesComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('costmatricesComponent'),
        __metadata("design:type", _costmatrices_costmatrices_component__WEBPACK_IMPORTED_MODULE_8__["CostmatricesComponent"])
    ], TradesTabComponent.prototype, "costmatricesComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('fxDealsComponent'),
        __metadata("design:type", _fx_deals_fx_deals_component__WEBPACK_IMPORTED_MODULE_9__["FxDealsComponent"])
    ], TradesTabComponent.prototype, "fxDealsComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('favouritesListDisplayComponent'),
        __metadata("design:type", _shared_components_favourites_list_display_favourites_list_display_component__WEBPACK_IMPORTED_MODULE_4__["FavouritesListDisplayComponent"])
    ], TradesTabComponent.prototype, "favouritesListDisplayComponent", void 0);
    TradesTabComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-trades-tab',
            template: __webpack_require__(/*! ./trades-tab.component.html */ "./Client/app/trading/components/trades-tab/trades-tab.component.html"),
            styles: [__webpack_require__(/*! ./trades-tab.component.scss */ "./Client/app/trading/components/trades-tab/trades-tab.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            _angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialog"],
            _services_trade_actions_service__WEBPACK_IMPORTED_MODULE_11__["TradeActionsService"],
            _shared_services_security_service__WEBPACK_IMPORTED_MODULE_6__["SecurityService"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_3__["AuthorizationService"],
            _shared_services_title_service__WEBPACK_IMPORTED_MODULE_7__["TitleService"]])
    ], TradesTabComponent);
    return TradesTabComponent;
}());



/***/ }),

/***/ "./Client/app/trading/components/trades/trades.component.css":
/*!*******************************************************************!*\
  !*** ./Client/app/trading/components/trades/trades.component.css ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = " .mat-table {\r\n     overflow: auto;\r\n }\r\n\r\n .mat-tab-group {\r\n     padding-left: 24px;\r\n     padding-right: 24px;\r\n }\r\n\r\n :host ::ng-deep.ag-menu {\r\n     overflow-y: hidden !important;\r\n }\r\n\r\n .main-container.margin-adjustment {\r\n     margin-top: 16px !important;\r\n }\r\n\r\n .atr-sidenav-margin {\r\n     margin: 16px;\r\n }\r\n\r\n .side-nav-reassignscreen {\r\n     width: 1024px;\r\n }\r\n"

/***/ }),

/***/ "./Client/app/trading/components/trades/trades.component.html":
/*!********************************************************************!*\
  !*** ./Client/app/trading/components/trades/trades.component.html ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-sidenav-container>\r\n    <mat-sidenav #sidenav\r\n                 class=\"side-nav-screen side-nav-reassignscreen\"\r\n                 position=\"end\"\r\n                 disableClose\r\n                 mode=\"over\"\r\n                 [fixedTopGap]=\"56\"\r\n                 [fixedInViewport]=\"true\"\r\n                 [(opened)]=\"sideNavOpened\">\r\n        <div class=\"atr-sidenav-margin\">\r\n            <atlas-favourites-list-display #favouritesListDisplayComponent></atlas-favourites-list-display>\r\n\r\n            <div fxLayout=\"row\"\r\n                 fxLayoutAlign=\"space-between center\">\r\n                <div fxLayout=\"column\"\r\n                     fxLayoutAlign=\"start start\">\r\n                    <button mat-button\r\n                            type=\"button\"\r\n                            (click)=\"onDiscardButtonClick()\">\r\n                        DISCARD\r\n                    </button>\r\n                </div>\r\n                <div fxLayout=\"column\"\r\n                     fxLayoutAlign=\"start end\">\r\n                    <div fxLayout=\"row\"\r\n                         fxLayoutAlign=\"end start\">\r\n                        <button mat-raised-button\r\n                                type=\"button\"\r\n                                (click)=\"onSideNavSaveButtonClick()\">\r\n                            SAVE\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </mat-sidenav>\r\n\r\n    <mat-sidenav-content>\r\n        <div class=\"main-container margin-adjustment\">\r\n            <mat-card>\r\n                <div fxLayout=\"row\"\r\n                     fxLayoutAlign=\"start none\"\r\n                     class=\"search\">\r\n                    <mat-form-field>\r\n                        <input matInput\r\n                               fxFlex=\"45%\"\r\n                               [formControl]=\"contractLabelCtrl\"\r\n                               placeholder=\"Contract N°\"\r\n                               autocomplete=\"off\"\r\n                               (keydown.enter)=\"onQuickSearchButtonClicked()\"\r\n                               #message>\r\n                    </mat-form-field>\r\n                    <atlas-masterdata-user-preferences-input fxFlex=\"45%\"\r\n                                                             isEditable=\"true\"\r\n                                                             [fieldControl]=\"counterPartyCtrl\"\r\n                                                             [options]=\"filteredCounterPartyList\"\r\n                                                             label=\"Counter Party\"\r\n                                                             (keydown.enter)=\"onQuickSearchButtonClicked()\"\r\n                                                             displayProperty=\"counterpartyCode\"\r\n                                                             [selectProperties]=\"['counterpartyCode', 'description']\"\r\n                                                             lightBoxTitle=\"Results for Counterparty\"\r\n                                                             gridId=\"counterpartiesGrid\"\r\n                                                             [dataLoader]=\"counterpartyDataLoader\">\r\n                    </atlas-masterdata-user-preferences-input>\r\n                    <button mat-raised-button\r\n                            (click)=\"onQuickSearchButtonClicked()\"\r\n                            class=\"heroGradient\">\r\n                        <mat-icon aria-label=\"Search\"\r\n                                  class=\"search-icon\">search</mat-icon>\r\n                    </button>\r\n                </div>\r\n            </mat-card>\r\n            <atlas-list-and-search class=\"default-height\"\r\n                                   *ifAuthorized=\"'Trades.Physicals',company:this.company\"\r\n                                   [gridCode]=\"gridCode\"\r\n                                   [gridTitle]=\"'Physical Trades'\"\r\n                                   (rowClicked)=\"onTradeRowClicked($event)\"\r\n                                   (quickNavigate)=\"onQuickNavigate($event)\"\r\n                                   [additionalFilters]=\"additionalFilters\"\r\n                                   [company]=\"company\"\r\n                                   [dataVersionId]=\"dataVersionId\"\r\n                                   [dataLoader]=\"dataLoader\"\r\n                                   [gridContextualMenuActions]=\"gridContextualMenuActions\"\r\n                                   [exportAdapter]=\"exportAdapter\"\r\n                                   (menuActionClicked)=\"onMenuActionClicked($event)\"\r\n                                   #listAndSearchComponent>\r\n            </atlas-list-and-search>\r\n        </div>\r\n        <atlas-floating-action-button [fabTitle]=\"fabTitle\"\r\n                              [fabType]=\"fabType\"\r\n                              [fabActions]=\"fabMenuActions\"\r\n                              [isParentLoaded]=\"isLoaded\"\r\n                              (fabActionClicked)=\"onFabActionClicked($event)\">\r\n        </atlas-floating-action-button>\r\n    </mat-sidenav-content>\r\n</mat-sidenav-container>"

/***/ }),

/***/ "./Client/app/trading/components/trades/trades.component.ts":
/*!******************************************************************!*\
  !*** ./Client/app/trading/components/trades/trades.component.ts ***!
  \******************************************************************/
/*! exports provided: TradesComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradesComponent", function() { return TradesComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../core/services/authorization.service */ "./Client/app/core/services/authorization.service.ts");
/* harmony import */ var _shared_components_favourites_list_display_favourites_list_display_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../shared/components/favourites-list-display/favourites-list-display.component */ "./Client/app/shared/components/favourites-list-display/favourites-list-display.component.ts");
/* harmony import */ var _shared_components_floating_action_button_floating_action_button_type_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../shared/components/floating-action-button/floating-action-button-type.enum */ "./Client/app/shared/components/floating-action-button/floating-action-button-type.enum.ts");
/* harmony import */ var _shared_entities_list_and_search_list_and_search_filter_entity__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../shared/entities/list-and-search/list-and-search-filter.entity */ "./Client/app/shared/entities/list-and-search/list-and-search-filter.entity.ts");
/* harmony import */ var _shared_services_list_and_search_export_list_and_search_export_adapter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../shared/services/list-and-search/export/list-and-search-export-adapter */ "./Client/app/shared/services/list-and-search/export/list-and-search-export-adapter.ts");
/* harmony import */ var _shared_services_list_and_search_trade_data_loader__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../shared/services/list-and-search/trade-data-loader */ "./Client/app/shared/services/list-and-search/trade-data-loader.ts");
/* harmony import */ var _shared_services_security_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../shared/services/security.service */ "./Client/app/shared/services/security.service.ts");
/* harmony import */ var _dialog_boxes_snapshot_selection_snapshot_selection_dialog_box_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../dialog-boxes/snapshot-selection/snapshot-selection-dialog-box.component */ "./Client/app/trading/dialog-boxes/snapshot-selection/snapshot-selection-dialog-box.component.ts");
/* harmony import */ var _entities_section_reference__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../entities/section-reference */ "./Client/app/trading/entities/section-reference.ts");
/* harmony import */ var _services_trade_actions_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../services/trade-actions.service */ "./Client/app/trading/services/trade-actions.service.ts");
/* harmony import */ var _shared_components_list_and_search_list_and_search_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./../../../shared/components/list-and-search/list-and-search.component */ "./Client/app/shared/components/list-and-search/list-and-search.component.ts");
/* harmony import */ var _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./../../../shared/entities/atlas-form-control */ "./Client/app/shared/entities/atlas-form-control.ts");
/* harmony import */ var _shared_entities_masterdata_entity__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./../../../shared/entities/masterdata.entity */ "./Client/app/shared/entities/masterdata.entity.ts");
/* harmony import */ var _shared_enums_list_and_search_filter_type_enum__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./../../../shared/enums/list-and-search-filter-type.enum */ "./Client/app/shared/enums/list-and-search-filter-type.enum.ts");
/* harmony import */ var _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./../../../shared/enums/permission-level.enum */ "./Client/app/shared/enums/permission-level.enum.ts");
/* harmony import */ var _shared_services_masterdata_counterparty_data_loader__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./../../../shared/services/masterdata/counterparty-data-loader */ "./Client/app/shared/services/masterdata/counterparty-data-loader.ts");
/* harmony import */ var _shared_services_util_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./../../../shared/services/util.service */ "./Client/app/shared/services/util.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





















var TradesComponent = /** @class */ (function () {
    function TradesComponent(securityService, route, router, dialog, tradeActionsService, dataLoader, authorizationService, utilService, counterpartyDataLoader, exportAdapter) {
        this.securityService = securityService;
        this.route = route;
        this.router = router;
        this.dialog = dialog;
        this.tradeActionsService = tradeActionsService;
        this.dataLoader = dataLoader;
        this.authorizationService = authorizationService;
        this.utilService = utilService;
        this.counterpartyDataLoader = counterpartyDataLoader;
        this.exportAdapter = exportAdapter;
        this.sideNavOpened = false;
        this.gridCode = 'tradeList';
        this.contractLabelCtrl = new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"]();
        this.additionalFilters = [];
        this.counterPartyCtrl = new _shared_entities_atlas_form_control__WEBPACK_IMPORTED_MODULE_15__["AtlasFormControl"]('TradeCounterParty');
        this.masterdata = new _shared_entities_masterdata_entity__WEBPACK_IMPORTED_MODULE_16__["MasterData"]();
        this.menuActions = {
            image: 'image',
            saveAsFavourite: 'saveAsFavourite',
        };
        this.imagePrivilege = {
            profileId: null,
            privilegeName: 'ImageCreation',
            permission: _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_18__["PermissionLevels"].ReadWrite,
            privilegeParentLevelOne: 'Trades',
            privilegeParentLevelTwo: 'Physicals',
        };
        this.hasTradeCreationPrivilege = false;
        this.createTradeActionPrivilege = {
            profileId: null,
            privilegeName: 'CreateTrade',
            permission: _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_18__["PermissionLevels"].ReadWrite,
            privilegeParentLevelOne: 'Trades',
            privilegeParentLevelTwo: 'Physicals',
        };
        this.hasAmendSnapshotPrivilege = false;
        this.amendSnapshotActionPrivilege = {
            profileId: null,
            privilegeName: 'AmendSnapshot',
            permission: _shared_enums_permission_level_enum__WEBPACK_IMPORTED_MODULE_18__["PermissionLevels"].ReadWrite,
            privilegeParentLevelOne: 'Trades',
            privilegeParentLevelTwo: 'Physicals',
        };
        // FAB
        this.fabMenuActions = [];
        this.fabType = _shared_components_floating_action_button_floating_action_button_type_enum__WEBPACK_IMPORTED_MODULE_6__["FABType"].ExtendedMenu;
        this.fabTitle = 'TRADE ACTIONS';
        this.isLoaded = false;
        this.isLoading = true;
    }
    TradesComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.securityService.isSecurityReady().subscribe(function () {
            _this.init();
        });
    };
    TradesComponent.prototype.init = function () {
        var _this = this;
        this.company = this.route.snapshot.paramMap.get('company');
        this.dataVersionId = this.route.snapshot.paramMap.get('dataVersionId') ?
            Number(this.route.snapshot.paramMap.get('dataVersionId')) : null;
        this.masterdata = this.route.snapshot.data.masterdata;
        this.filteredCounterPartyList = this.masterdata.counterparties;
        this.counterPartyCtrl.valueChanges.subscribe(function (input) {
            _this.filterCounterParty(input);
        });
        this.checkUserPrivileges();
        if (!this.dataVersionId) {
            this.initMenuAction();
        }
        this.initFABActions();
    };
    TradesComponent.prototype.filterCounterParty = function (input) {
        this.filteredCounterPartyList = this.utilService.filterListforAutocomplete(input, this.masterdata.counterparties, ['counterpartyCode', 'description']);
        if (this.counterPartyCtrl.valid || !this.counterPartyCtrl.value) {
            this.onQuickSearchButtonClicked();
        }
    };
    TradesComponent.prototype.checkUserPrivileges = function () {
        var createTradePrivilegeLevel = this.authorizationService.getPermissionLevel(this.company, this.createTradeActionPrivilege.privilegeName, this.createTradeActionPrivilege.privilegeParentLevelOne, this.createTradeActionPrivilege.privilegeParentLevelTwo);
        this.hasTradeCreationPrivilege = (createTradePrivilegeLevel >= this.createTradeActionPrivilege.permission);
        var amendSnapshotPrivilegeLevel = this.authorizationService.getPermissionLevel(this.company, this.amendSnapshotActionPrivilege.privilegeName, this.amendSnapshotActionPrivilege.privilegeParentLevelOne, this.amendSnapshotActionPrivilege.privilegeParentLevelTwo);
        this.hasAmendSnapshotPrivilege = (amendSnapshotPrivilegeLevel >= this.amendSnapshotActionPrivilege.permission);
    };
    TradesComponent.prototype.unloadNotification = function ($event) {
        if (this.contractLabelCtrl.dirty) {
            $event.returnValue = true;
        }
    };
    TradesComponent.prototype.initMenuAction = function () {
        this.gridContextualMenuActions = [
            {
                icon: 'add',
                text: 'Image',
                action: this.menuActions.image,
                disabled: !this.checkIfUserHasRequiredPrivileges(this.imagePrivilege),
            },
            {
                icon: 'favorite_border ',
                text: 'Save As Favourite',
                action: this.menuActions.saveAsFavourite,
                disabled: !this.checkIfUserHasRequiredPrivileges(this.imagePrivilege),
            },
        ];
        if (this.listAndSearchComponent) {
            this.listAndSearchComponent.gridContextualMenuActions = this.gridContextualMenuActions;
            this.listAndSearchComponent.addMenuAction();
        }
    };
    TradesComponent.prototype.checkIfUserHasRequiredPrivileges = function (userCompanyPrivilege) {
        if (this.authorizationService.isUserAllowedForCompany(this.company)) {
            var userPermissionLevel = this.authorizationService.getPermissionLevel(this.company, userCompanyPrivilege.privilegeName, userCompanyPrivilege.privilegeParentLevelOne, userCompanyPrivilege.privilegeParentLevelTwo);
            if (userPermissionLevel >= userCompanyPrivilege.permission) {
                return true;
            }
        }
        return false;
    };
    TradesComponent.prototype.onQuickSearchButtonClicked = function () {
        this.additionalFilters = [];
        var searchCounterParty;
        if (this.counterPartyCtrl.value) {
            searchCounterParty = this.counterPartyCtrl.value.counterpartyCode;
            if (!searchCounterParty) {
                searchCounterParty = this.counterPartyCtrl.value;
            }
        }
        var contractLabelField = this.listAndSearchComponent.columnConfiguration
            .find(function (column) { return column.fieldName === 'ContractLabel'; });
        var counterpartyCodeField = this.listAndSearchComponent.columnConfiguration
            .find(function (column) { return column.fieldName === 'Counterparty'; });
        if (!this.listAndSearchComponent) {
            return;
        }
        else {
            if (this.contractLabelCtrl.value && contractLabelField) {
                var filter = new _shared_entities_list_and_search_list_and_search_filter_entity__WEBPACK_IMPORTED_MODULE_7__["ListAndSearchFilter"]();
                filter.fieldId = contractLabelField.fieldId;
                filter.fieldName = contractLabelField.fieldName;
                filter.predicate = {
                    filterType: _shared_enums_list_and_search_filter_type_enum__WEBPACK_IMPORTED_MODULE_17__["ListAndSearchFilterType"].Text,
                    operator: 'eq',
                    value1: this.contractLabelCtrl.value + '%',
                };
                filter.isActive = true;
                this.additionalFilters = [filter];
            }
        }
        if (this.counterPartyCtrl.value && counterpartyCodeField) {
            var filterCounterParty = new _shared_entities_list_and_search_list_and_search_filter_entity__WEBPACK_IMPORTED_MODULE_7__["ListAndSearchFilter"]();
            filterCounterParty.fieldId = counterpartyCodeField.fieldId;
            filterCounterParty.fieldName = counterpartyCodeField.fieldName;
            filterCounterParty.predicate = {
                filterType: _shared_enums_list_and_search_filter_type_enum__WEBPACK_IMPORTED_MODULE_17__["ListAndSearchFilterType"].Text,
                operator: 'eq',
                value1: searchCounterParty + '%',
            };
            filterCounterParty.isActive = true;
            this.additionalFilters.push(filterCounterParty);
        }
        this.listAndSearchComponent.additionalFilters = this.additionalFilters;
        this.listAndSearchComponent.loadData(true);
    };
    TradesComponent.prototype.onTradeRowClicked = function (event) {
        if (this.dataVersionId) {
            this.tradeActionsService.displaySectionInSnapshotSubject
                .next(new _entities_section_reference__WEBPACK_IMPORTED_MODULE_12__["SectionReference"](event.data.sectionId, this.dataVersionId));
        }
        else {
            this.tradeActionsService.displaySectionSubject.next(event.data.sectionId);
        }
    };
    TradesComponent.prototype.onQuickNavigate = function (event) {
        if (!this.dataVersionId) {
            this.tradeActionsService.displaySectionSubject.next(event.sectionId);
        }
    };
    TradesComponent.prototype.onTradeCaptureButtonClicked = function () {
        if (this.dataVersionId) {
            this.router.navigate([this.company + '/trades/snapshot/' + this.dataVersionId + '/capture']);
        }
        else {
            this.router.navigate([this.company + '/trades/capture']);
        }
    };
    TradesComponent.prototype.onMenuActionClicked = function (data) {
        if (!this.dataVersionId) {
            var action = data.action;
            var rowData = data.rowData;
            switch (action) {
                case this.menuActions.image:
                    this.tradeActionsService.tradeEditImageSubject.next(rowData.sectionId);
                    break;
                case this.menuActions.saveAsFavourite:
                    this.tradeActionsService.tradeSaveAsFavouriteEditSubject.next(rowData.sectionId);
                    break;
                default: // throw Action not recognized exception
                    break;
            }
        }
    };
    TradesComponent.prototype.onDiscardButtonClick = function () {
        this.sideNavOpened = false;
    };
    TradesComponent.prototype.onSideNavSaveButtonClick = function () {
        // yet to implement code;
    };
    TradesComponent.prototype.initFABActions = function () {
        this.fabMenuActions = [];
        var actionCreateTrade = {
            icon: 'add',
            text: 'Create Trade',
            action: 'createTrade',
            disabled: false,
            index: 0,
        };
        var actionAmendSnapshot = {
            icon: 'camera_alt',
            text: 'Amend Snapshot',
            action: 'amendSnapshot',
            disabled: false,
            index: 1,
        };
        var actionGroupFunction = {
            icon: 'gamepad',
            text: 'Group Functions',
            action: 'groupFunctions',
            disabled: false,
            index: 2,
        };
        var actionFavoriteTrade = {
            icon: 'star_rate',
            text: 'Favourites Trade',
            action: 'favoriteTrade',
            disabled: false,
            index: 3,
        };
        if (!this.dataVersionId && this.hasAmendSnapshotPrivilege) {
            this.fabMenuActions.push(actionAmendSnapshot);
        }
        if (this.hasTradeCreationPrivilege) {
            this.fabMenuActions.push(actionCreateTrade);
            this.fabMenuActions.push(actionGroupFunction);
        }
        this.fabMenuActions.push(actionFavoriteTrade);
        this.isLoaded = true;
    };
    TradesComponent.prototype.onFabActionClicked = function (action) {
        switch (action) {
            case 'createTrade': {
                this.onNewTradeMatrixButtonClicked();
                break;
            }
            case 'amendSnapshot': {
                this.onAmendSnapshotButtonClicked();
                break;
            }
            case 'groupFunctions': {
                this.onGroupFunctionsButtonClicked();
                break;
            }
            case 'favoriteTrade': {
                this.onFavouritesListButtonClicked();
                break;
            }
        }
    };
    TradesComponent.prototype.onNewTradeMatrixButtonClicked = function () {
        if (this.dataVersionId) {
            this.tradeActionsService.newTradeInSnapshotSubject.next(this.dataVersionId);
        }
        else {
            this.tradeActionsService.newTradeSubject.next();
        }
    };
    TradesComponent.prototype.onAmendSnapshotButtonClicked = function () {
        var _this = this;
        var snapshotSelectionDialog = this.dialog.open(_dialog_boxes_snapshot_selection_snapshot_selection_dialog_box_component__WEBPACK_IMPORTED_MODULE_11__["SnapshotSelectionDialogBoxComponent"], {
            width: '40%',
        });
        snapshotSelectionDialog.afterClosed().subscribe(function (answer) {
            if (answer) {
                _this.router.navigate([_this.company + '/trades/snapshot/' + answer]);
            }
        });
    };
    TradesComponent.prototype.onGroupFunctionsButtonClicked = function () {
        this.tradeActionsService.tradeGroupFunctionsSubject.next();
    };
    TradesComponent.prototype.onFavouritesListButtonClicked = function () {
        this.sideNavOpened = true;
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])(_angular_material__WEBPACK_IMPORTED_MODULE_2__["MatMenuTrigger"]),
        __metadata("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatMenuTrigger"])
    ], TradesComponent.prototype, "columnMenuTrigger", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('listAndSearchComponent'),
        __metadata("design:type", _shared_components_list_and_search_list_and_search_component__WEBPACK_IMPORTED_MODULE_14__["ListAndSearchComponent"])
    ], TradesComponent.prototype, "listAndSearchComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('favouritesListDisplayComponent'),
        __metadata("design:type", _shared_components_favourites_list_display_favourites_list_display_component__WEBPACK_IMPORTED_MODULE_5__["FavouritesListDisplayComponent"])
    ], TradesComponent.prototype, "favouritesListDisplayComponent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"])('window:beforeunload', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], TradesComponent.prototype, "unloadNotification", null);
    TradesComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-trades',
            template: __webpack_require__(/*! ./trades.component.html */ "./Client/app/trading/components/trades/trades.component.html"),
            styles: [__webpack_require__(/*! ./trades.component.css */ "./Client/app/trading/components/trades/trades.component.css")],
            providers: [
                _shared_services_list_and_search_trade_data_loader__WEBPACK_IMPORTED_MODULE_9__["TradeDataLoader"],
                _shared_services_masterdata_counterparty_data_loader__WEBPACK_IMPORTED_MODULE_19__["CounterPartyDataLoader"],
            ],
        }),
        __metadata("design:paramtypes", [_shared_services_security_service__WEBPACK_IMPORTED_MODULE_10__["SecurityService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["ActivatedRoute"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
            _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialog"],
            _services_trade_actions_service__WEBPACK_IMPORTED_MODULE_13__["TradeActionsService"],
            _shared_services_list_and_search_trade_data_loader__WEBPACK_IMPORTED_MODULE_9__["TradeDataLoader"],
            _core_services_authorization_service__WEBPACK_IMPORTED_MODULE_4__["AuthorizationService"],
            _shared_services_util_service__WEBPACK_IMPORTED_MODULE_20__["UtilService"],
            _shared_services_masterdata_counterparty_data_loader__WEBPACK_IMPORTED_MODULE_19__["CounterPartyDataLoader"],
            _shared_services_list_and_search_export_list_and_search_export_adapter__WEBPACK_IMPORTED_MODULE_8__["ListAndSearchExportAdapter"]])
    ], TradesComponent);
    return TradesComponent;
}());



/***/ }),

/***/ "./Client/app/trading/dialog-boxes/blocker-warning-message/blocker-warning-message.component.html":
/*!********************************************************************************************************!*\
  !*** ./Client/app/trading/dialog-boxes/blocker-warning-message/blocker-warning-message.component.html ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<mat-dialog-content>\r\n    <div fxLayout=\"row\"\r\n         fxLayoutAlign=\"none center\"\r\n         fxLayoutWrap\r\n         fxLayoutGap=\"10px\">\r\n        <mat-dialog-actions *ngIf=\"isBlockerDisplayed\">\r\n            <span class=\"fill-space\"></span>\r\n            <p>{{dialogData.messageBlocker}}</p>\r\n            <div>\r\n                <button mat-button\r\n                        (click)='onBlockerButtonClicked(false)'>No</button>\r\n                <button mat-button\r\n                        (click)='onBlockerButtonClicked(true)'>Yes</button>\r\n            </div>\r\n        </mat-dialog-actions>\r\n    </div>\r\n</mat-dialog-content>\r\n<mat-dialog-actions *ngIf=\"isWarningDisplayed\">\r\n    <span class=\"fill-space\"></span>\r\n    <p>{{warningMessagedDisplayed}}</p>\r\n    <div *ngIf=\"!userClickedOnYes && isBlockerDisplayed\">\r\n        <button mat-button\r\n                (click)=\"onWarningButtonClicked(actions.ok)\">Ok</button>\r\n        <button mat-button\r\n                (click)=\"onWarningButtonClicked(actions.discard)\">Discard</button>\r\n    </div>\r\n    <div *ngIf=\"userClickedOnYes || !isBlockerDisplayed\">\r\n        <button mat-button\r\n                (click)=\"onWarningButtonClicked(actions.discard)\">Discard</button>\r\n        <button mat-button\r\n                (click)=\"onWarningButtonClicked(actions.no)\">No</button>\r\n        <button mat-button\r\n                (click)=\"onWarningButtonClicked(actions.yes)\">Yes</button>\r\n    </div>\r\n</mat-dialog-actions>"

/***/ }),

/***/ "./Client/app/trading/dialog-boxes/blocker-warning-message/blocker-warning-message.component.scss":
/*!********************************************************************************************************!*\
  !*** ./Client/app/trading/dialog-boxes/blocker-warning-message/blocker-warning-message.component.scss ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".mat-dialog-content {\n  overflow: inherit; }\n"

/***/ }),

/***/ "./Client/app/trading/dialog-boxes/blocker-warning-message/blocker-warning-message.component.ts":
/*!******************************************************************************************************!*\
  !*** ./Client/app/trading/dialog-boxes/blocker-warning-message/blocker-warning-message.component.ts ***!
  \******************************************************************************************************/
/*! exports provided: BlockerWarningMessageComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockerWarningMessageComponent", function() { return BlockerWarningMessageComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};


var BlockerWarningMessageComponent = /** @class */ (function () {
    function BlockerWarningMessageComponent(thisDialogRef, data) {
        this.thisDialogRef = thisDialogRef;
        this.data = data;
        this.isWarningDisplayed = false;
        this.isBlockerDisplayed = false;
        this.userClickedOnYes = false;
        this.userClickedOnNo = false;
        this.actions = {
            ok: 'ok',
            yes: 'yes',
            no: 'no',
            discard: 'discard',
        };
        this.dialogData = data;
    }
    BlockerWarningMessageComponent.prototype.ngOnInit = function () {
        if (this.dialogData.messageBlocker) {
            this.isBlockerDisplayed = true;
        }
        else {
            this.isWarningDisplayed = true;
            this.warningMessagedDisplayed = this.dialogData.messageWarning;
        }
    };
    BlockerWarningMessageComponent.prototype.onBlockerButtonClicked = function (yesClicked) {
        this.userClickedOnYes = yesClicked;
        if (this.dialogData.messageWarning) {
            this.isWarningDisplayed = true;
            this.warningMessagedDisplayed = this.userClickedOnYes ? this.dialogData.messageWarning : this.dialogData.dyanamicMessageWarning;
        }
        else {
            if (this.userClickedOnYes) {
                this.thisDialogRef.close({ blockerMessageAnswer: 'yes', warningMessageAnswer: null });
            }
            else {
                this.thisDialogRef.close({ blockerMessageAnswer: 'no', warningMessageAnswer: null });
            }
        }
    };
    BlockerWarningMessageComponent.prototype.onWarningButtonClicked = function (action) {
        this.selectedAction = action;
        if (!this.isBlockerDisplayed) {
            this.thisDialogRef.close({ blockerMessageAnswer: null, warningMessageAnswer: action });
        }
        else {
            this.thisDialogRef.close({
                blockerMessageAnswer: this.userClickedOnYes ? this.actions.yes : this.actions.no,
                warningMessageAnswer: action,
            });
        }
    };
    BlockerWarningMessageComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-blocker-warning-message',
            template: __webpack_require__(/*! ./blocker-warning-message.component.html */ "./Client/app/trading/dialog-boxes/blocker-warning-message/blocker-warning-message.component.html"),
            styles: [__webpack_require__(/*! ./blocker-warning-message.component.scss */ "./Client/app/trading/dialog-boxes/blocker-warning-message/blocker-warning-message.component.scss")],
        }),
        __param(1, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_1__["MAT_DIALOG_DATA"])),
        __metadata("design:paramtypes", [_angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialogRef"], Object])
    ], BlockerWarningMessageComponent);
    return BlockerWarningMessageComponent;
}());



/***/ }),

/***/ "./Client/app/trading/dialog-boxes/bulk-approval-dialog/bulk-approval-dialog.component.html":
/*!**************************************************************************************************!*\
  !*** ./Client/app/trading/dialog-boxes/bulk-approval-dialog/bulk-approval-dialog.component.html ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h1>Bulk Approval\r\n    <button mat-icon-button\r\n            mat-dialog-close\r\n            class=\"close-dialog-btn\">\r\n        <mat-icon aria-label=\"Closing button\">clear</mat-icon>\r\n    </button>\r\n</h1>\r\n\r\n<mat-dialog-content class=\"mat-dialog-content\">\r\n    <div fxLayout=\"row\"\r\n         fxLayoutAlign=\"start center\"\r\n         fxLayoutGap=\"150px\">\r\n        <div *ngIf=\" lockedTrades.length> 0 || interCoList.length > 0\">\r\n            <h6 class=\"blocking\">Blocking message [Interco contracts/Lock rule]</h6>\r\n            <div *ngFor=\"let trade of lockedTrades\">\r\n                <h6>Trade : {{trade.lockMessage}} </h6>\r\n            </div>\r\n            <div *ngFor=\"let trade of interCoList\">\r\n                <h6>Trade : {{trade.contractLabel}} is interCo </h6>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div fxLayout=\"row\"\r\n         fxLayoutAlign=\"start center\"\r\n         fxLayoutGap=\"150px\">\r\n        <div *ngIf=\"(selectedTrade.length > 0) else noTrades\">\r\n            <h6 class=\"approved\">These trades will be approved</h6>\r\n            <div *ngFor=\"let trade of selectedTrade\">\r\n                <h6>Trade : {{trade.contractLabel}}</h6>\r\n            </div>\r\n        </div>\r\n\r\n        <ng-template #noTrades>\r\n            <div>\r\n                <h6> No Trades are there for approval</h6>\r\n            </div>\r\n        </ng-template>\r\n    </div>\r\n</mat-dialog-content>\r\n\r\n<div fxLayout=\"row\"\r\n     fxLayoutAlign=\"space-between center\">\r\n    <div fxLayout=\"column\"\r\n         fxLayoutAlign=\"start start\">\r\n        <button mat-button\r\n                (click)=\"onDiscardButtonClick()\">\r\n            DISCARD\r\n        </button>\r\n    </div>\r\n    <div fxLayout=\"column\"\r\n         fxLayoutAlign=\"start end\">\r\n        <div fxLayout=\"row\"\r\n             fxLayoutAlign=\"end start\">\r\n            <button mat-button\r\n                    (click)=\"onSaveButtonClicked()\"\r\n                    [disabled]=\"!isApprovalEnabled\">\r\n                Approve\r\n            </button>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./Client/app/trading/dialog-boxes/bulk-approval-dialog/bulk-approval-dialog.component.scss":
/*!**************************************************************************************************!*\
  !*** ./Client/app/trading/dialog-boxes/bulk-approval-dialog/bulk-approval-dialog.component.scss ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "@charset \"UTF-8\";\n.blocking {\n  color: #FF0000; }\n.approved {\n  color: #008000; }\nh6 {\n  margin: 5px !important; }\n.mat-dialog-content {\n  height:  350px;\n  width:  750px; }\n"

/***/ }),

/***/ "./Client/app/trading/dialog-boxes/bulk-approval-dialog/bulk-approval-dialog.component.ts":
/*!************************************************************************************************!*\
  !*** ./Client/app/trading/dialog-boxes/bulk-approval-dialog/bulk-approval-dialog.component.ts ***!
  \************************************************************************************************/
/*! exports provided: BulkApprovalDialogComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BulkApprovalDialogComponent", function() { return BulkApprovalDialogComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};





var BulkApprovalDialogComponent = /** @class */ (function () {
    function BulkApprovalDialogComponent(router, bulkApprovalDialogRef, snackbarService, data, tradingService) {
        this.router = router;
        this.bulkApprovalDialogRef = bulkApprovalDialogRef;
        this.snackbarService = snackbarService;
        this.data = data;
        this.tradingService = tradingService;
        this.selectedTrade = [];
        this.lockedTrades = [];
        this.interCoList = [];
        this.selectedSectionIDs = [];
        this.bulkApprovalDialogData = data;
    }
    BulkApprovalDialogComponent.prototype.ngOnInit = function () {
        this.selectedTrade = this.bulkApprovalDialogData.tradeSelectedList;
        this.lockedTrades = this.bulkApprovalDialogData.lockedTrades;
        this.interCoList = this.bulkApprovalDialogData.interCoList;
        if (this.selectedTrade.length > 0) {
            this.isApprovalEnabled = true;
        }
    };
    BulkApprovalDialogComponent.prototype.onSaveButtonClicked = function () {
        var _this = this;
        this.selectedTrade.forEach(function (element) {
            _this.selectedSectionIDs.push(element.sectionId);
        });
        this.tradingService.bulkApproveSave(this.selectedSectionIDs)
            .subscribe(function () {
            _this.snackbarService.informationSnackBar('Selected trades are approved');
            _this.bulkApprovalDialogRef.close(true);
            _this.router.navigate(['/' + _this.bulkApprovalDialogData.company +
                    '/trades/groupfunctions']);
        }, function (error) {
            _this.snackbarService.throwErrorSnackBar('Oops! An error ocurred');
        }, function () {
        });
    };
    BulkApprovalDialogComponent.prototype.onDiscardButtonClick = function () {
        this.bulkApprovalDialogRef.close(false);
    };
    BulkApprovalDialogComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-bulk-approval-dialog',
            template: __webpack_require__(/*! ./bulk-approval-dialog.component.html */ "./Client/app/trading/dialog-boxes/bulk-approval-dialog/bulk-approval-dialog.component.html"),
            styles: [__webpack_require__(/*! ./bulk-approval-dialog.component.scss */ "./Client/app/trading/dialog-boxes/bulk-approval-dialog/bulk-approval-dialog.component.scss")]
        }),
        __param(3, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_1__["MAT_DIALOG_DATA"])),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
            _angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialogRef"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_4__["SnackbarService"], Object, _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_2__["TradingService"]])
    ], BulkApprovalDialogComponent);
    return BulkApprovalDialogComponent;
}());



/***/ }),

/***/ "./Client/app/trading/dialog-boxes/snapshot-selection/snapshot-selection-dialog-box.component.html":
/*!*********************************************************************************************************!*\
  !*** ./Client/app/trading/dialog-boxes/snapshot-selection/snapshot-selection-dialog-box.component.html ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h1 mat-dialog-title>Amend Snapshot</h1>\r\n<mat-dialog-content>\r\n    <div fxLayout=\"row\"\r\n         fxLayoutAlign=\"center center\"\r\n         fxLayoutWrap\r\n         *ngIf=\"isLoading\"\r\n         class=\"loading\">\r\n        <mat-spinner color=\"accent\"></mat-spinner>\r\n    </div>\r\n    <div fxLayout=\"column\"\r\n         *ngIf=\"!isLoading\">\r\n        <mat-form-field>\r\n            <input matInput\r\n                   placeholder=\"Which frozen database do you want to update?\"\r\n                   [formControl]=\"snapshotCtrl\"\r\n                   [matAutocomplete]=\"snapshots\">\r\n            <mat-autocomplete #snapshots=\"matAutocomplete\"\r\n                              [panelWidth]=\"panelSize\"\r\n                              [displayWith]=\"getSnapshotDate.bind(this)\">\r\n                <mat-option *ngFor=\"let snapshot of filteredSnapshots\"\r\n                            [value]=\"snapshot\">\r\n                    {{ getSnapshotDate(snapshot) }}\r\n                </mat-option>\r\n            </mat-autocomplete>\r\n            <mat-error *ngIf=\"snapshotCtrl.hasError('inDropdownList')\">\r\n                This freeze does not exists\r\n            </mat-error>\r\n        </mat-form-field>\r\n        <mat-divider></mat-divider>\r\n    </div>\r\n</mat-dialog-content>\r\n<mat-dialog-actions>\r\n\r\n    <button mat-button\r\n            (click)=\"onCancelButtonClicked()\">Cancel</button>\r\n    <span class=\"fill-space\"></span>\r\n    <button mat-button\r\n            (click)=\"onConfirmButtonClicked()\">Confirm</button>\r\n\r\n</mat-dialog-actions>"

/***/ }),

/***/ "./Client/app/trading/dialog-boxes/snapshot-selection/snapshot-selection-dialog-box.component.scss":
/*!*********************************************************************************************************!*\
  !*** ./Client/app/trading/dialog-boxes/snapshot-selection/snapshot-selection-dialog-box.component.scss ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".loading {\n  min-height: 150px; }\n\nbutton {\n  margin: 0; }\n"

/***/ }),

/***/ "./Client/app/trading/dialog-boxes/snapshot-selection/snapshot-selection-dialog-box.component.ts":
/*!*******************************************************************************************************!*\
  !*** ./Client/app/trading/dialog-boxes/snapshot-selection/snapshot-selection-dialog-box.component.ts ***!
  \*******************************************************************************************************/
/*! exports provided: SnapshotSelectionDialogBoxComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SnapshotSelectionDialogBoxComponent", function() { return SnapshotSelectionDialogBoxComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _shared_enums_freeze_type_enum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../../shared/enums/freeze-type.enum */ "./Client/app/shared/enums/freeze-type.enum.ts");
/* harmony import */ var _shared_services_http_services_freeze_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../../../shared/services/http-services/freeze.service */ "./Client/app/shared/services/http-services/freeze.service.ts");
/* harmony import */ var _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../../../shared/services/snackbar.service */ "./Client/app/shared/services/snackbar.service.ts");
/* harmony import */ var _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../../../shared/services/ui.service */ "./Client/app/shared/services/ui.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var SnapshotSelectionDialogBoxComponent = /** @class */ (function () {
    function SnapshotSelectionDialogBoxComponent(thisDialogRef, freezeService, uiService, snackbarService) {
        this.thisDialogRef = thisDialogRef;
        this.freezeService = freezeService;
        this.uiService = uiService;
        this.snackbarService = snackbarService;
        this.snapshotCtrl = new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"]();
        this.filteredSnapshots = [];
        this.isLoading = true;
    }
    SnapshotSelectionDialogBoxComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.freezeService.getFreezeList().subscribe(function (result) {
            _this.snapshots = result.value;
            _this.filteredSnapshots = _this.snapshots;
            _this.isLoading = false;
        });
        this.snapshotCtrl.valueChanges.subscribe(function (input) {
            _this.filteredSnapshots = (typeof input === 'string' || !input) ? _this.filterListforAutocomplete(input, _this.snapshots) : _this.snapshots;
        });
        this.snapshotCtrl.setValidators(this.inDropdownListValidator());
    };
    SnapshotSelectionDialogBoxComponent.prototype.filterListforAutocomplete = function (input, list) {
        var _this = this;
        var filteredList = list;
        if (input) {
            filteredList = list.filter(function (item) {
                return _this.getSnapshotDate(item).toLowerCase().startsWith(input.toLowerCase());
            });
        }
        return filteredList;
    };
    SnapshotSelectionDialogBoxComponent.prototype.inDropdownListValidator = function () {
        var _this = this;
        return function (control) {
            if (control.value) {
                var selectedSnapshot_1 = typeof control.value === 'string' ? _this.snapshots.find(function (snapshot) {
                    return _this.getSnapshotDate(snapshot).toLowerCase() === control.value.toLowerCase();
                }) : control.value;
                if (selectedSnapshot_1 && selectedSnapshot_1.dataVersionId
                    && _this.snapshots.find(function (snapshot) { return snapshot.dataVersionId === selectedSnapshot_1.dataVersionId; })) {
                    return;
                }
            }
            return { inDropdownList: true };
        };
    };
    SnapshotSelectionDialogBoxComponent.prototype.onConfirmButtonClicked = function () {
        if (this.snapshotCtrl.value && this.snapshotCtrl.valid) {
            var selectedSnapshot = this.snapshotCtrl.value;
            this.thisDialogRef.close(selectedSnapshot.dataVersionId);
        }
        else {
            this.snackbarService.throwErrorSnackBar('Please select a valid snapshot');
        }
    };
    SnapshotSelectionDialogBoxComponent.prototype.onCancelButtonClicked = function () {
        this.thisDialogRef.close();
    };
    SnapshotSelectionDialogBoxComponent.prototype.getSnapshotDate = function (snapshot) {
        if (!snapshot) {
            return '';
        }
        return (snapshot.dataVersionTypeId === _shared_enums_freeze_type_enum__WEBPACK_IMPORTED_MODULE_3__["FreezeType"].Monthly) ?
            this.uiService.monthFormatter({ value: snapshot.freezeDate }) :
            this.uiService.dateFormatter({ value: snapshot.freezeDate });
    };
    SnapshotSelectionDialogBoxComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-snapshot-selection-dialog-box',
            template: __webpack_require__(/*! ./snapshot-selection-dialog-box.component.html */ "./Client/app/trading/dialog-boxes/snapshot-selection/snapshot-selection-dialog-box.component.html"),
            styles: [__webpack_require__(/*! ./snapshot-selection-dialog-box.component.scss */ "./Client/app/trading/dialog-boxes/snapshot-selection/snapshot-selection-dialog-box.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialogRef"],
            _shared_services_http_services_freeze_service__WEBPACK_IMPORTED_MODULE_4__["FreezeService"],
            _shared_services_ui_service__WEBPACK_IMPORTED_MODULE_6__["UiService"],
            _shared_services_snackbar_service__WEBPACK_IMPORTED_MODULE_5__["SnackbarService"]])
    ], SnapshotSelectionDialogBoxComponent);
    return SnapshotSelectionDialogBoxComponent;
}());



/***/ }),

/***/ "./Client/app/trading/dialog-boxes/trade-deallocation/trade-deallocation-dialog-component.component.html":
/*!***************************************************************************************************************!*\
  !*** ./Client/app/trading/dialog-boxes/trade-deallocation/trade-deallocation-dialog-component.component.html ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h2 mat-dialog-title>\r\n    Deallocation\r\n</h2>\r\n<div mat-dialog-content>\r\n    <p> You are about to deallocate your trade. Do you wish to re-instate pre-allocation traffic details ?</p>\r\n</div>\r\n<mat-dialog-actions>\r\n    <button mat-button\r\n            (click)=\"onDiscardButtonClicked()\">\r\n        discard\r\n    </button>\r\n    <div class=\"fill-space\"></div>\r\n    <!-- The mat-dialog-close directive optionally accepts a value as a result for the dialog. -->\r\n    <button mat-button\r\n            (click)=\"onReinstateButtonClicked()\">\r\n        Re-instate traffic details\r\n    </button>\r\n    <button mat-button\r\n            (click)=\"onKeepButtonClicked()\">\r\n        Keep trafic details\r\n    </button>\r\n</mat-dialog-actions>\r\n"

/***/ }),

/***/ "./Client/app/trading/dialog-boxes/trade-deallocation/trade-deallocation-dialog-component.component.scss":
/*!***************************************************************************************************************!*\
  !*** ./Client/app/trading/dialog-boxes/trade-deallocation/trade-deallocation-dialog-component.component.scss ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".mat-dialog-actions button {\n  margin-top: 0; }\n\nh2 {\n  margin-bottom: 0; }\n"

/***/ }),

/***/ "./Client/app/trading/dialog-boxes/trade-deallocation/trade-deallocation-dialog-component.component.ts":
/*!*************************************************************************************************************!*\
  !*** ./Client/app/trading/dialog-boxes/trade-deallocation/trade-deallocation-dialog-component.component.ts ***!
  \*************************************************************************************************************/
/*! exports provided: TradeDeallocationDialogComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeDeallocationDialogComponent", function() { return TradeDeallocationDialogComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var TradeDeallocationDialogComponent = /** @class */ (function () {
    function TradeDeallocationDialogComponent(dialogRef) {
        this.dialogRef = dialogRef;
    }
    TradeDeallocationDialogComponent.prototype.onDiscardButtonClicked = function () {
        this.dialogRef.close();
    };
    TradeDeallocationDialogComponent.prototype.onReinstateButtonClicked = function () {
        this.dialogRef.close(true);
    };
    TradeDeallocationDialogComponent.prototype.onKeepButtonClicked = function () {
        this.dialogRef.close(false);
    };
    TradeDeallocationDialogComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'atlas-trade-deallocation-dialog-component',
            template: __webpack_require__(/*! ./trade-deallocation-dialog-component.component.html */ "./Client/app/trading/dialog-boxes/trade-deallocation/trade-deallocation-dialog-component.component.html"),
            styles: [__webpack_require__(/*! ./trade-deallocation-dialog-component.component.scss */ "./Client/app/trading/dialog-boxes/trade-deallocation/trade-deallocation-dialog-component.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_material__WEBPACK_IMPORTED_MODULE_1__["MatDialogRef"]])
    ], TradeDeallocationDialogComponent);
    return TradeDeallocationDialogComponent;
}());



/***/ }),

/***/ "./Client/app/trading/entities/allocation-warning.ts":
/*!***********************************************************!*\
  !*** ./Client/app/trading/entities/allocation-warning.ts ***!
  \***********************************************************/
/*! exports provided: AllocationWarning */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AllocationWarning", function() { return AllocationWarning; });
var AllocationWarning = /** @class */ (function () {
    function AllocationWarning() {
    }
    return AllocationWarning;
}());



/***/ }),

/***/ "./Client/app/trading/entities/cancel-trade.entity.ts":
/*!************************************************************!*\
  !*** ./Client/app/trading/entities/cancel-trade.entity.ts ***!
  \************************************************************/
/*! exports provided: CancelTrade */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CancelTrade", function() { return CancelTrade; });
var CancelTrade = /** @class */ (function () {
    function CancelTrade() {
    }
    return CancelTrade;
}());



/***/ }),

/***/ "./Client/app/trading/entities/physical-fixed-priced-contract.entity.ts":
/*!******************************************************************************!*\
  !*** ./Client/app/trading/entities/physical-fixed-priced-contract.entity.ts ***!
  \******************************************************************************/
/*! exports provided: PhysicalFixedPricedContract */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PhysicalFixedPricedContract", function() { return PhysicalFixedPricedContract; });
var PhysicalFixedPricedContract = /** @class */ (function () {
    function PhysicalFixedPricedContract() {
        this.costs = [];
        this.invoices = [];
        this.intercoCosts = [];
    }
    return PhysicalFixedPricedContract;
}());



/***/ }),

/***/ "./Client/app/trading/entities/section-tab-index.ts":
/*!**********************************************************!*\
  !*** ./Client/app/trading/entities/section-tab-index.ts ***!
  \**********************************************************/
/*! exports provided: SectionTabIndex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SectionTabIndex", function() { return SectionTabIndex; });
var SectionTabIndex = /** @class */ (function () {
    function SectionTabIndex(sectionId, tabIndex) {
        if (tabIndex === void 0) { tabIndex = 0; }
        this.sectionId = sectionId;
        this.tabIndex = tabIndex;
    }
    return SectionTabIndex;
}());



/***/ }),

/***/ "./Client/app/trading/entities/trade-image.entity.ts":
/*!***********************************************************!*\
  !*** ./Client/app/trading/entities/trade-image.entity.ts ***!
  \***********************************************************/
/*! exports provided: TradeImage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeImage", function() { return TradeImage; });
var TradeImage = /** @class */ (function () {
    function TradeImage() {
    }
    return TradeImage;
}());



/***/ }),

/***/ "./Client/app/trading/entities/trade-merge-message.entity.ts":
/*!*******************************************************************!*\
  !*** ./Client/app/trading/entities/trade-merge-message.entity.ts ***!
  \*******************************************************************/
/*! exports provided: TradeMergeMessage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeMergeMessage", function() { return TradeMergeMessage; });
var TradeMergeMessage = /** @class */ (function () {
    function TradeMergeMessage() {
    }
    return TradeMergeMessage;
}());



/***/ }),

/***/ "./Client/app/trading/entities/tradeFavoriteDetail.entity.ts":
/*!*******************************************************************!*\
  !*** ./Client/app/trading/entities/tradeFavoriteDetail.entity.ts ***!
  \*******************************************************************/
/*! exports provided: TradeFavoriteDetail */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeFavoriteDetail", function() { return TradeFavoriteDetail; });
var TradeFavoriteDetail = /** @class */ (function () {
    function TradeFavoriteDetail() {
    }
    return TradeFavoriteDetail;
}());



/***/ }),

/***/ "./Client/app/trading/fno-trade-details.resolver.ts":
/*!**********************************************************!*\
  !*** ./Client/app/trading/fno-trade-details.resolver.ts ***!
  \**********************************************************/
/*! exports provided: FnoTradeDetailsResolver */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FnoTradeDetailsResolver", function() { return FnoTradeDetailsResolver; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _shared_enums_pricing_method_enum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/enums/pricing-method.enum */ "./Client/app/shared/enums/pricing-method.enum.ts");
/* harmony import */ var _shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/services/http-services/trading.service */ "./Client/app/shared/services/http-services/trading.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var FnoTradeDetailsResolver = /** @class */ (function () {
    function FnoTradeDetailsResolver(tradingService) {
        this.tradingService = tradingService;
    }
    FnoTradeDetailsResolver.prototype.resolve = function (route, state) {
        var sectionId = Number(route.params.sectionId);
        return this.tradingService.getSection(sectionId, _shared_enums_pricing_method_enum__WEBPACK_IMPORTED_MODULE_1__["PricingMethods"].FnO);
    };
    FnoTradeDetailsResolver = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [_shared_services_http_services_trading_service__WEBPACK_IMPORTED_MODULE_2__["TradingService"]])
    ], FnoTradeDetailsResolver);
    return FnoTradeDetailsResolver;
}());



/***/ }),

/***/ "./Client/app/trading/pipes/quantity.pipe.ts":
/*!***************************************************!*\
  !*** ./Client/app/trading/pipes/quantity.pipe.ts ***!
  \***************************************************/
/*! exports provided: QuantityPipe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuantityPipe", function() { return QuantityPipe; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var QuantityPipe = /** @class */ (function () {
    function QuantityPipe() {
    }
    QuantityPipe.prototype.transform = function (value, args) {
        if (value) {
            return new Intl.NumberFormat('en-US', { minimumFractionDigits: 3, maximumFractionDigits: 3 }).format(value);
        }
        return '';
    };
    QuantityPipe = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"])({
            name: 'quantity',
        })
    ], QuantityPipe);
    return QuantityPipe;
}());



/***/ }),

/***/ "./Client/app/trading/services/form-field-handler.service.ts":
/*!*******************************************************************!*\
  !*** ./Client/app/trading/services/form-field-handler.service.ts ***!
  \*******************************************************************/
/*! exports provided: getCropYearValue, formatCropYearToString */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCropYearValue", function() { return getCropYearValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatCropYearToString", function() { return formatCropYearToString; });
/// input has to be of format YYYY or YYYY/YYYY
function getCropYearValue(cropYearInputString) {
    var res = [];
    var values = cropYearInputString.toString().split('/');
    values.forEach(function (val) {
        res.push(+val);
    });
    return { from: res[0], to: (res.length > 1) ? res[1] : null };
}
/// return is of format YYYY or YYYY/YYYY
function formatCropYearToString(cropYearFrom, cropYearTo) {
    if (cropYearTo === void 0) { cropYearTo = null; }
    var res = String(cropYearFrom);
    if (cropYearTo) {
        res += '/' + String(cropYearTo);
    }
    return res;
}


/***/ }),

/***/ "./Client/app/trading/services/trade-data.service.ts":
/*!***********************************************************!*\
  !*** ./Client/app/trading/services/trade-data.service.ts ***!
  \***********************************************************/
/*! exports provided: TradeDataService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradeDataService", function() { return TradeDataService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shared/services/http-services/execution.service */ "./Client/app/shared/services/http-services/execution.service.ts");
/* harmony import */ var _entities_section_reference__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../entities/section-reference */ "./Client/app/trading/entities/section-reference.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var TradeDataService = /** @class */ (function () {
    function TradeDataService(executionService) {
        this.executionService = executionService;
        this.sectionReferenceSubject = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"](null);
        this.sectionReference$ = this.sectionReferenceSubject.asObservable();
    }
    TradeDataService.prototype.setSectionData = function (sectionId, dataVersionId) {
        if (this.isParameterChanged(sectionId, dataVersionId)) {
            this.sectionId = sectionId;
            this.dataVersionId = dataVersionId;
            this.resetStreams();
        }
        this.sectionReferenceSubject.next(new _entities_section_reference__WEBPACK_IMPORTED_MODULE_4__["SectionReference"](sectionId, dataVersionId));
    };
    TradeDataService.prototype.getTrafficDetails = function () {
        var _this = this;
        if (!this.trafficDetails$) {
            this.trafficDetails$ = this.sectionReference$
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["filter"])(function (data) { return data !== null; }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["mergeMap"])(function (sectionReference) {
                return _this.executionService.GetSectionTrafficDetails(sectionReference.sectionId, sectionReference.dataVersionId);
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["shareReplay"])(1));
        }
        return this.trafficDetails$;
    };
    TradeDataService.prototype.getAllocationDetails = function () {
        var _this = this;
        if (!this.allocationDetails$) {
            this.allocationDetails$ = this.sectionReference$
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["filter"])(function (data) { return data !== null; }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["mergeMap"])(function (sectionReference) {
                return _this.executionService.getAllocationBySectionId(sectionReference.sectionId, sectionReference.dataVersionId);
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["shareReplay"])(1));
        }
        return this.allocationDetails$;
    };
    TradeDataService.prototype.getInvoiceMarkingDetails = function () {
        var _this = this;
        if (!this.invoiceMarkingDetails$) {
            this.invoiceMarkingDetails$ = this.sectionReference$
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["filter"])(function (data) { return data !== null; }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["mergeMap"])(function (sectionReference) {
                return _this.executionService.getInvoiceMarkingDetailsByCompanyAndSectionId(sectionReference.sectionId, sectionReference.dataVersionId);
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["shareReplay"])(1));
        }
        return this.invoiceMarkingDetails$;
    };
    TradeDataService.prototype.resetStreams = function () {
        this.trafficDetails$ = null;
        this.allocationDetails$ = null;
        this.invoiceMarkingDetails$ = null;
    };
    TradeDataService.prototype.isParameterChanged = function (sectionId, dataVersionId) {
        return (this.sectionId !== sectionId) || (this.dataVersionId !== dataVersionId);
    };
    TradeDataService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [_shared_services_http_services_execution_service__WEBPACK_IMPORTED_MODULE_3__["ExecutionService"]])
    ], TradeDataService);
    return TradeDataService;
}());



/***/ }),

/***/ "./Client/app/trading/trading.module.ts":
/*!**********************************************!*\
  !*** ./Client/app/trading/trading.module.ts ***!
  \**********************************************/
/*! exports provided: TradingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradingModule", function() { return TradingModule; });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material */ "./node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var ag_grid_angular__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ag-grid-angular */ "./node_modules/ag-grid-angular/main.js");
/* harmony import */ var ag_grid_angular__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(ag_grid_angular__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var angular2_text_mask__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! angular2-text-mask */ "./node_modules/angular2-text-mask/dist/angular2TextMask.js");
/* harmony import */ var angular2_text_mask__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(angular2_text_mask__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _shared_material_module__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../shared/material.module */ "./Client/app/shared/material.module.ts");
/* harmony import */ var _shared_services_customDateAdapter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../shared/services/customDateAdapter */ "./Client/app/shared/services/customDateAdapter.ts");
/* harmony import */ var _shared_shared_module__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../shared/shared.module */ "./Client/app/shared/shared.module.ts");
/* harmony import */ var _components_contract_physical_capture_cancel_trade_dialog_cancel_trade_dialog_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/contract-physical-capture/cancel-trade-dialog/cancel-trade-dialog.component */ "./Client/app/trading/components/contract-physical-capture/cancel-trade-dialog/cancel-trade-dialog.component.ts");
/* harmony import */ var _components_contract_physical_capture_costs_tab_add_cost_confirmation_dialog_add_cost_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/contract-physical-capture/costs-tab/add-cost-confirmation-dialog/add-cost-confirmation-dialog.component */ "./Client/app/trading/components/contract-physical-capture/costs-tab/add-cost-confirmation-dialog/add-cost-confirmation-dialog.component.ts");
/* harmony import */ var _components_contract_physical_capture_costs_tab_cost_invoice_marking_dialog_cost_invoice_marking_dialog_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/contract-physical-capture/costs-tab/cost-invoice-marking-dialog/cost-invoice-marking-dialog.component */ "./Client/app/trading/components/contract-physical-capture/costs-tab/cost-invoice-marking-dialog/cost-invoice-marking-dialog.component.ts");
/* harmony import */ var _components_contract_physical_capture_costs_tab_cost_matrix_dialog_cost_matrix_dialog_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./components/contract-physical-capture/costs-tab/cost-matrix-dialog/cost-matrix-dialog.component */ "./Client/app/trading/components/contract-physical-capture/costs-tab/cost-matrix-dialog/cost-matrix-dialog.component.ts");
/* harmony import */ var _components_contract_physical_capture_costs_tab_costs_to_adjust_components_children_costs_children_costs_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./components/contract-physical-capture/costs-tab/costs-to-adjust/components/children-costs/children-costs.component */ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/children-costs/children-costs.component.ts");
/* harmony import */ var _components_contract_physical_capture_costs_tab_costs_to_adjust_components_override_costs_dialog_override_costs_dialog_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./components/contract-physical-capture/costs-tab/costs-to-adjust/components/override-costs-dialog/override-costs-dialog.component */ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/override-costs-dialog/override-costs-dialog.component.ts");
/* harmony import */ var _components_contract_physical_capture_costs_tab_costs_to_adjust_components_parent_costs_parent_costs_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./components/contract-physical-capture/costs-tab/costs-to-adjust/components/parent-costs/parent-costs.component */ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/components/parent-costs/parent-costs.component.ts");
/* harmony import */ var _components_contract_physical_capture_costs_tab_costs_to_adjust_costs_to_adjust_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./components/contract-physical-capture/costs-tab/costs-to-adjust/costs-to-adjust.component */ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/costs-to-adjust.component.ts");
/* harmony import */ var _components_contract_physical_capture_costs_tab_physical_contract_capture_form_costs_tab_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./components/contract-physical-capture/costs-tab/physical-contract-capture-form-costs-tab.component */ "./Client/app/trading/components/contract-physical-capture/costs-tab/physical-contract-capture-form-costs-tab.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_adjust_weight_form_component_adjust_weight_form_component_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/adjust-weight-form-component/adjust-weight-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/adjust-weight-form-component/adjust-weight-form-component.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_allocation_form_component_allocation_form_component_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/allocation-form-component/allocation-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/allocation-form-component/allocation-form-component.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_allocation_info_form_component_allocation_info_form_component_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/allocation-info-form-component/allocation-info-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/allocation-info-form-component/allocation-info-form-component.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_amendment_audit_form_component_amendment_audit_form_component_component__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/amendment-audit-form-component/amendment-audit-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/amendment-audit-form-component/amendment-audit-form-component.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_bl_info_form_component_bl_info_form_component_component__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/bl-info-form-component/bl-info-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/bl-info-form-component/bl-info-form-component.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_cash_against_invoice_form_component_cash_against_invoice_form_component_component__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/cash-against-invoice-form-component/cash-against-invoice-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/cash-against-invoice-form-component/cash-against-invoice-form-component.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_charter_form_component_charter_form_component_component__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/charter-form-component/charter-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/charter-form-component/charter-form-component.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_commodity_form_component_commodity_form_component_component__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/commodity-form-component/commodity-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/commodity-form-component/commodity-form-component.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_counterparty_form_component_counterparty_form_component_component__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/counterparty-form-component/counterparty-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/counterparty-form-component/counterparty-form-component.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_current_trade_form_component_current_trade_form_component_component__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/current-trade-form-component/current-trade-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/current-trade-form-component/current-trade-form-component.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_document_status_form_component_document_status_form_component_component__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/document-status-form-component/document-status-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/document-status-form-component/document-status-form-component.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_header_form_component_header_form_component_component__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/header-form-component/header-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/header-form-component/header-form-component.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_invoicing_form_component_invoicing_form_component_component__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/invoicing-form-component/invoicing-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/invoicing-form-component/invoicing-form-component.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_location_form_component_location_form_component_component__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/location-form-component/location-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/location-form-component/location-form-component.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_memo_form_component_memo_form_component_component__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/memo-form-component/memo-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/memo-form-component/memo-form-component.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_price_form_component_price_form_component_component__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/price-form-component/price-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/price-form-component/price-form-component.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_quantity_form_component_quantity_form_component_component__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/quantity-form-component/quantity-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/quantity-form-component/quantity-form-component.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_shipment_info_form_component_shipment_info_form_component_component__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/shipment-info-form-component/shipment-info-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/shipment-info-form-component/shipment-info-form-component.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_shipment_period_form_shipment_period_form_component__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/shipment-period-form/shipment-period-form.component */ "./Client/app/trading/components/contract-physical-capture/form-components/shipment-period-form/shipment-period-form.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_terms_form_component_terms_form_component_component__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/terms-form-component/terms-form-component.component */ "./Client/app/trading/components/contract-physical-capture/form-components/terms-form-component/terms-form-component.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_trade_merge_cost_impact_warning_dialog_cost_impact_warning_dialog_component__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/trade-merge/cost-impact-warning-dialog/cost-impact-warning-dialog.component */ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/cost-impact-warning-dialog/cost-impact-warning-dialog.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_trade_merge_merge_options_merge_options_component__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/trade-merge/merge-options/merge-options.component */ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-options/merge-options.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_trade_merge_merge_validations_merge_validations_component__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/trade-merge/merge-validations/merge-validations.component */ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/merge-validations/merge-validations.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_trade_merge_trade_merge_component__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/trade-merge/trade-merge.component */ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trade-merge.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_trade_merge_trades_list_trades_list_component__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/trade-merge/trades-list/trades-list.component */ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trades-list/trades-list.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_tranche_split_grid_tranche_split_grid_component__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/tranche-split-grid/tranche-split-grid.component */ "./Client/app/trading/components/contract-physical-capture/form-components/tranche-split-grid/tranche-split-grid.component.ts");
/* harmony import */ var _components_contract_physical_capture_interco_trade_dialog_interco_trade_dialog_component__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./components/contract-physical-capture/interco-trade-dialog/interco-trade-dialog.component */ "./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/interco-trade-dialog.component.ts");
/* harmony import */ var _components_contract_physical_capture_interco_trade_dialog_intero_state_banner_intero_state_banner_component__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./components/contract-physical-capture/interco-trade-dialog/intero-state-banner/intero-state-banner.component */ "./Client/app/trading/components/contract-physical-capture/interco-trade-dialog/intero-state-banner/intero-state-banner.component.ts");
/* harmony import */ var _components_contract_physical_capture_invoice_marking_tab_components_detailed_view_detailed_view_component__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./components/contract-physical-capture/invoice-marking-tab/components/detailed-view/detailed-view.component */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/detailed-view/detailed-view.component.ts");
/* harmony import */ var _components_contract_physical_capture_invoice_marking_tab_components_invoice_status_invoice_status_component__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./components/contract-physical-capture/invoice-marking-tab/components/invoice-status/invoice-status.component */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-status/invoice-status.component.ts");
/* harmony import */ var _components_contract_physical_capture_invoice_marking_tab_components_invoice_totals_invoice_totals_component__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./components/contract-physical-capture/invoice-marking-tab/components/invoice-totals/invoice-totals.component */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-totals/invoice-totals.component.ts");
/* harmony import */ var _components_contract_physical_capture_invoice_marking_tab_components_invoice_view_mode_invoice_view_mode_component__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./components/contract-physical-capture/invoice-marking-tab/components/invoice-view-mode/invoice-view-mode.component */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/invoice-view-mode/invoice-view-mode.component.ts");
/* harmony import */ var _components_contract_physical_capture_invoice_marking_tab_components_top_card_top_card_component__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./components/contract-physical-capture/invoice-marking-tab/components/top-card/top-card.component */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/components/top-card/top-card.component.ts");
/* harmony import */ var _components_contract_physical_capture_invoice_marking_tab_physical_contract_capture_form_invoice_marking_tab_component__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./components/contract-physical-capture/invoice-marking-tab/physical-contract-capture-form-invoice-marking-tab.component */ "./Client/app/trading/components/contract-physical-capture/invoice-marking-tab/physical-contract-capture-form-invoice-marking-tab.component.ts");
/* harmony import */ var _components_contract_physical_capture_main_tab_physical_contract_capture_form_main_tab_component__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./components/contract-physical-capture/main-tab/physical-contract-capture-form-main-tab.component */ "./Client/app/trading/components/contract-physical-capture/main-tab/physical-contract-capture-form-main-tab.component.ts");
/* harmony import */ var _components_contract_physical_capture_save_as_favourite_dialog_save_as_favourite_dialog_component__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./components/contract-physical-capture/save-as-favourite-dialog/save-as-favourite-dialog.component */ "./Client/app/trading/components/contract-physical-capture/save-as-favourite-dialog/save-as-favourite-dialog.component.ts");
/* harmony import */ var _components_contract_physical_capture_section_tab_new_tranche_split_ag_grid_new_tranche_split_ag_grid_component__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./components/contract-physical-capture/section-tab/new-tranche-split-ag-grid/new-tranche-split-ag-grid.component */ "./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-ag-grid/new-tranche-split-ag-grid.component.ts");
/* harmony import */ var _components_contract_physical_capture_section_tab_new_tranche_split_footer_new_tranche_split_footer_component__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./components/contract-physical-capture/section-tab/new-tranche-split-footer/new-tranche-split-footer.component */ "./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-footer/new-tranche-split-footer.component.ts");
/* harmony import */ var _components_contract_physical_capture_section_tab_new_tranche_split_header_new_tranche_split_header_component__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./components/contract-physical-capture/section-tab/new-tranche-split-header/new-tranche-split-header.component */ "./Client/app/trading/components/contract-physical-capture/section-tab/new-tranche-split-header/new-tranche-split-header.component.ts");
/* harmony import */ var _components_contract_physical_capture_section_tab_physical_contract_capture_form_section_tab_component__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./components/contract-physical-capture/section-tab/physical-contract-capture-form-section-tab.component */ "./Client/app/trading/components/contract-physical-capture/section-tab/physical-contract-capture-form-section-tab.component.ts");
/* harmony import */ var _components_contract_physical_capture_status_tab_physical_contract_capture_form_status_tab_component__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./components/contract-physical-capture/status-tab/physical-contract-capture-form-status-tab.component */ "./Client/app/trading/components/contract-physical-capture/status-tab/physical-contract-capture-form-status-tab.component.ts");
/* harmony import */ var _components_contract_physical_capture_trade_capture_page_component__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./components/contract-physical-capture/trade-capture-page.component */ "./Client/app/trading/components/contract-physical-capture/trade-capture-page.component.ts");
/* harmony import */ var _components_contract_physical_capture_trade_image_dialog_trade_image_dialog_component__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./components/contract-physical-capture/trade-image-dialog/trade-image-dialog.component */ "./Client/app/trading/components/contract-physical-capture/trade-image-dialog/trade-image-dialog.component.ts");
/* harmony import */ var _components_contract_physical_capture_trade_management_menu_bar_trade_management_menu_bar_component__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./components/contract-physical-capture/trade-management-menu-bar/trade-management-menu-bar.component */ "./Client/app/trading/components/contract-physical-capture/trade-management-menu-bar/trade-management-menu-bar.component.ts");
/* harmony import */ var _components_contract_physical_capture_traffic_tab_physical_contract_capture_form_traffic_tab_component__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./components/contract-physical-capture/traffic-tab/physical-contract-capture-form-traffic-tab.component */ "./Client/app/trading/components/contract-physical-capture/traffic-tab/physical-contract-capture-form-traffic-tab.component.ts");
/* harmony import */ var _components_costmatrices_components_costmatrix_create_costmatrix_create_component__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./components/costmatrices/components/costmatrix-create/costmatrix-create.component */ "./Client/app/trading/components/costmatrices/components/costmatrix-create/costmatrix-create.component.ts");
/* harmony import */ var _components_costmatrices_components_costmatrix_list_costmatrix_list_component__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./components/costmatrices/components/costmatrix-list/costmatrix-list.component */ "./Client/app/trading/components/costmatrices/components/costmatrix-list/costmatrix-list.component.ts");
/* harmony import */ var _components_costmatrices_costmatrices_component__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./components/costmatrices/costmatrices.component */ "./Client/app/trading/components/costmatrices/costmatrices.component.ts");
/* harmony import */ var _components_costmatrices_costmatrix_menu_bar_costmatrix_menu_bar_component__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./components/costmatrices/costmatrix-menu-bar/costmatrix-menu-bar.component */ "./Client/app/trading/components/costmatrices/costmatrix-menu-bar/costmatrix-menu-bar.component.ts");
/* harmony import */ var _components_fx_deals_capture_fx_deals_capture_component__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./components/fx-deals/capture/fx-deals-capture.component */ "./Client/app/trading/components/fx-deals/capture/fx-deals-capture.component.ts");
/* harmony import */ var _components_fx_deals_form_components_bank_form_component_bank_form_component__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./components/fx-deals/form-components/bank-form-component/bank-form.component */ "./Client/app/trading/components/fx-deals/form-components/bank-form-component/bank-form.component.ts");
/* harmony import */ var _components_fx_deals_form_components_deal_form_comonent_deal_form_component__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./components/fx-deals/form-components/deal-form-comonent/deal-form.component */ "./Client/app/trading/components/fx-deals/form-components/deal-form-comonent/deal-form.component.ts");
/* harmony import */ var _components_fx_deals_form_components_deal_terms_component_deal_terms_form_component__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./components/fx-deals/form-components/deal-terms-component/deal-terms-form.component */ "./Client/app/trading/components/fx-deals/form-components/deal-terms-component/deal-terms-form.component.ts");
/* harmony import */ var _components_fx_deals_form_components_header_form_component_fxdeal_header_form_component__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./components/fx-deals/form-components/header-form-component/fxdeal-header-form.component */ "./Client/app/trading/components/fx-deals/form-components/header-form-component/fxdeal-header-form.component.ts");
/* harmony import */ var _components_fx_deals_form_components_internal_memo_form_component_internal_memo_form_component__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./components/fx-deals/form-components/internal-memo-form-component/internal-memo-form.component */ "./Client/app/trading/components/fx-deals/form-components/internal-memo-form-component/internal-memo-form.component.ts");
/* harmony import */ var _components_fx_deals_form_components_rate_entry_form_component_rate_entry_form_component__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./components/fx-deals/form-components/rate-entry-form-component/rate-entry-form.component */ "./Client/app/trading/components/fx-deals/form-components/rate-entry-form-component/rate-entry-form.component.ts");
/* harmony import */ var _components_fx_deals_form_components_settlement_documents_component_settlement_documents_component__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./components/fx-deals/form-components/settlement-documents-component/settlement-documents.component */ "./Client/app/trading/components/fx-deals/form-components/settlement-documents-component/settlement-documents.component.ts");
/* harmony import */ var _components_fx_deals_fx_deals_component__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./components/fx-deals/fx-deals.component */ "./Client/app/trading/components/fx-deals/fx-deals.component.ts");
/* harmony import */ var _components_group_amendments_bulk_allocation_bulk_allocation_component__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./components/group-amendments/bulk-allocation/bulk-allocation.component */ "./Client/app/trading/components/group-amendments/bulk-allocation/bulk-allocation.component.ts");
/* harmony import */ var _components_group_amendments_bulk_approval_bulk_approval_component__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./components/group-amendments/bulk-approval/bulk-approval.component */ "./Client/app/trading/components/group-amendments/bulk-approval/bulk-approval.component.ts");
/* harmony import */ var _components_group_amendments_bulk_closure_bulk_closure_component__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./components/group-amendments/bulk-closure/bulk-closure.component */ "./Client/app/trading/components/group-amendments/bulk-closure/bulk-closure.component.ts");
/* harmony import */ var _components_group_amendments_bulk_deallocation_bulk_deallocation_component__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./components/group-amendments/bulk-deallocation/bulk-deallocation.component */ "./Client/app/trading/components/group-amendments/bulk-deallocation/bulk-deallocation.component.ts");
/* harmony import */ var _components_group_amendments_bulk_edition_bulk_edition_component__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./components/group-amendments/bulk-edition/bulk-edition.component */ "./Client/app/trading/components/group-amendments/bulk-edition/bulk-edition.component.ts");
/* harmony import */ var _components_group_amendments_bulk_update_costs_bulk_update_costs_component__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./components/group-amendments/bulk-update-costs/bulk-update-costs.component */ "./Client/app/trading/components/group-amendments/bulk-update-costs/bulk-update-costs.component.ts");
/* harmony import */ var _components_group_amendments_group_amendments_component__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./components/group-amendments/group-amendments.component */ "./Client/app/trading/components/group-amendments/group-amendments.component.ts");
/* harmony import */ var _components_group_functions_group_function_contracts_group_function_contracts_component__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./components/group-functions/group-function-contracts/group-function-contracts.component */ "./Client/app/trading/components/group-functions/group-function-contracts/group-function-contracts.component.ts");
/* harmony import */ var _components_group_functions_group_function_warning_group_function_warning_component__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./components/group-functions/group-function-warning/group-function-warning.component */ "./Client/app/trading/components/group-functions/group-function-warning/group-function-warning.component.ts");
/* harmony import */ var _components_group_functions_group_functions_component__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./components/group-functions/group-functions.component */ "./Client/app/trading/components/group-functions/group-functions.component.ts");
/* harmony import */ var _components_group_functions_trade_bulk_allocation_allocation_grids_allocation_grids_component__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./components/group-functions/trade-bulk-allocation/allocation-grids/allocation-grids.component */ "./Client/app/trading/components/group-functions/trade-bulk-allocation/allocation-grids/allocation-grids.component.ts");
/* harmony import */ var _components_group_functions_trade_bulk_allocation_trade_bulk_allocation_component__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./components/group-functions/trade-bulk-allocation/trade-bulk-allocation.component */ "./Client/app/trading/components/group-functions/trade-bulk-allocation/trade-bulk-allocation.component.ts");
/* harmony import */ var _components_group_functions_trade_bulk_approval_trade_bulk_approval_component__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./components/group-functions/trade-bulk-approval/trade-bulk-approval.component */ "./Client/app/trading/components/group-functions/trade-bulk-approval/trade-bulk-approval.component.ts");
/* harmony import */ var _components_group_functions_trade_bulk_closure_ag_grid_pop_up_ag_grid_pop_up_component__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./components/group-functions/trade-bulk-closure/ag-grid-pop-up/ag-grid-pop-up.component */ "./Client/app/trading/components/group-functions/trade-bulk-closure/ag-grid-pop-up/ag-grid-pop-up.component.ts");
/* harmony import */ var _components_group_functions_trade_bulk_closure_bulk_closure_matrix_bulk_closure_matrix_component__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./components/group-functions/trade-bulk-closure/bulk-closure-matrix/bulk-closure-matrix.component */ "./Client/app/trading/components/group-functions/trade-bulk-closure/bulk-closure-matrix/bulk-closure-matrix.component.ts");
/* harmony import */ var _components_group_functions_trade_bulk_closure_dialog_pop_up_dialog_component_component__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./components/group-functions/trade-bulk-closure/dialog/pop-up-dialog-component.component */ "./Client/app/trading/components/group-functions/trade-bulk-closure/dialog/pop-up-dialog-component.component.ts");
/* harmony import */ var _components_group_functions_trade_bulk_closure_summary_summary_closure_matrix_component__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./components/group-functions/trade-bulk-closure/summary/summary-closure-matrix.component */ "./Client/app/trading/components/group-functions/trade-bulk-closure/summary/summary-closure-matrix.component.ts");
/* harmony import */ var _components_group_functions_trade_bulk_closure_trade_bulk_closure_component__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ./components/group-functions/trade-bulk-closure/trade-bulk-closure.component */ "./Client/app/trading/components/group-functions/trade-bulk-closure/trade-bulk-closure.component.ts");
/* harmony import */ var _components_group_functions_trade_bulk_deallocation_section_dialog_section_dialog_component__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ./components/group-functions/trade-bulk-deallocation/section-dialog/section-dialog.component */ "./Client/app/trading/components/group-functions/trade-bulk-deallocation/section-dialog/section-dialog.component.ts");
/* harmony import */ var _components_group_functions_trade_bulk_deallocation_trade_bulk_deallocation_component__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ./components/group-functions/trade-bulk-deallocation/trade-bulk-deallocation.component */ "./Client/app/trading/components/group-functions/trade-bulk-deallocation/trade-bulk-deallocation.component.ts");
/* harmony import */ var _components_group_functions_trade_bulk_edit_edition_matrix_edition_matrix_component__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ./components/group-functions/trade-bulk-edit/edition-matrix/edition-matrix.component */ "./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/edition-matrix.component.ts");
/* harmony import */ var _components_group_functions_trade_bulk_edit_edition_matrix_master_row_apply_master_row_apply_component__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ./components/group-functions/trade-bulk-edit/edition-matrix/master-row-apply/master-row-apply.component */ "./Client/app/trading/components/group-functions/trade-bulk-edit/edition-matrix/master-row-apply/master-row-apply.component.ts");
/* harmony import */ var _components_group_functions_trade_bulk_edit_trade_bulk_edit_component__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(/*! ./components/group-functions/trade-bulk-edit/trade-bulk-edit.component */ "./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-edit.component.ts");
/* harmony import */ var _components_group_functions_trade_bulk_edit_trade_bulk_fields_trade_bulk_fields_component__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(/*! ./components/group-functions/trade-bulk-edit/trade-bulk-fields/trade-bulk-fields.component */ "./Client/app/trading/components/group-functions/trade-bulk-edit/trade-bulk-fields/trade-bulk-fields.component.ts");
/* harmony import */ var _components_group_functions_trade_cost_bulk_update_cost_bulk_update_summary_cost_bulk_update_summary_component__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(/*! ./components/group-functions/trade-cost-bulk-update/cost-bulk-update-summary/cost-bulk-update-summary.component */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/cost-bulk-update-summary/cost-bulk-update-summary.component.ts");
/* harmony import */ var _components_group_functions_trade_cost_bulk_update_select_contracts_select_contracts_component__WEBPACK_IMPORTED_MODULE_102__ = __webpack_require__(/*! ./components/group-functions/trade-cost-bulk-update/select-contracts/select-contracts.component */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/select-contracts/select-contracts.component.ts");
/* harmony import */ var _components_group_functions_trade_cost_bulk_update_trade_cost_bulk_update_component__WEBPACK_IMPORTED_MODULE_103__ = __webpack_require__(/*! ./components/group-functions/trade-cost-bulk-update/trade-cost-bulk-update.component */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/trade-cost-bulk-update.component.ts");
/* harmony import */ var _components_group_functions_trade_cost_bulk_update_update_costs_components_add_costs_add_costs_component__WEBPACK_IMPORTED_MODULE_104__ = __webpack_require__(/*! ./components/group-functions/trade-cost-bulk-update/update-costs/components/add-costs/add-costs.component */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/add-costs/add-costs.component.ts");
/* harmony import */ var _components_group_functions_trade_cost_bulk_update_update_costs_components_edit_costs_dialog_edit_costs_dialog_component__WEBPACK_IMPORTED_MODULE_105__ = __webpack_require__(/*! ./components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs-dialog/edit-costs-dialog.component */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs-dialog/edit-costs-dialog.component.ts");
/* harmony import */ var _components_group_functions_trade_cost_bulk_update_update_costs_components_edit_costs_edit_costs_component__WEBPACK_IMPORTED_MODULE_106__ = __webpack_require__(/*! ./components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs/edit-costs.component */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/components/edit-costs/edit-costs.component.ts");
/* harmony import */ var _components_group_functions_trade_cost_bulk_update_update_costs_update_costs_component__WEBPACK_IMPORTED_MODULE_107__ = __webpack_require__(/*! ./components/group-functions/trade-cost-bulk-update/update-costs/update-costs.component */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/update-costs/update-costs.component.ts");
/* harmony import */ var _components_section_new_section_new_component__WEBPACK_IMPORTED_MODULE_108__ = __webpack_require__(/*! ./components/section-new/section-new.component */ "./Client/app/trading/components/section-new/section-new.component.ts");
/* harmony import */ var _components_trade_allocation_allocation_form_components_allocation_table_form_component_allocation_table_form_component_component__WEBPACK_IMPORTED_MODULE_109__ = __webpack_require__(/*! ./components/trade-allocation/allocation-form-components/allocation-table-form-component/allocation-table-form-component.component */ "./Client/app/trading/components/trade-allocation/allocation-form-components/allocation-table-form-component/allocation-table-form-component.component.ts");
/* harmony import */ var _components_trade_allocation_allocation_form_components_header_allocation_form_component_header_allocation_form_component_component__WEBPACK_IMPORTED_MODULE_110__ = __webpack_require__(/*! ./components/trade-allocation/allocation-form-components/header-allocation-form-component/header-allocation-form-component.component */ "./Client/app/trading/components/trade-allocation/allocation-form-components/header-allocation-form-component/header-allocation-form-component.component.ts");
/* harmony import */ var _components_trade_allocation_allocation_form_components_search_allocation_form_component_search_allocation_form_component_component__WEBPACK_IMPORTED_MODULE_111__ = __webpack_require__(/*! ./components/trade-allocation/allocation-form-components/search-allocation-form-component/search-allocation-form-component.component */ "./Client/app/trading/components/trade-allocation/allocation-form-components/search-allocation-form-component/search-allocation-form-component.component.ts");
/* harmony import */ var _components_trade_allocation_allocation_form_components_shipping_allocation_form_component_shipping_allocation_form_component_component__WEBPACK_IMPORTED_MODULE_112__ = __webpack_require__(/*! ./components/trade-allocation/allocation-form-components/shipping-allocation-form-component/shipping-allocation-form-component.component */ "./Client/app/trading/components/trade-allocation/allocation-form-components/shipping-allocation-form-component/shipping-allocation-form-component.component.ts");
/* harmony import */ var _components_trade_allocation_allocation_form_components_warning_allocation_form_component_warning_allocation_form_component_component__WEBPACK_IMPORTED_MODULE_113__ = __webpack_require__(/*! ./components/trade-allocation/allocation-form-components/warning-allocation-form-component/warning-allocation-form-component.component */ "./Client/app/trading/components/trade-allocation/allocation-form-components/warning-allocation-form-component/warning-allocation-form-component.component.ts");
/* harmony import */ var _components_trade_allocation_trade_allocation_component__WEBPACK_IMPORTED_MODULE_114__ = __webpack_require__(/*! ./components/trade-allocation/trade-allocation.component */ "./Client/app/trading/components/trade-allocation/trade-allocation.component.ts");
/* harmony import */ var _components_trade_cost_report_trade_cost_report_component__WEBPACK_IMPORTED_MODULE_115__ = __webpack_require__(/*! ./components/trade-cost-report/trade-cost-report.component */ "./Client/app/trading/components/trade-cost-report/trade-cost-report.component.ts");
/* harmony import */ var _components_trade_pnl_report_trade_pnl_report_component__WEBPACK_IMPORTED_MODULE_116__ = __webpack_require__(/*! ./components/trade-pnl-report/trade-pnl-report.component */ "./Client/app/trading/components/trade-pnl-report/trade-pnl-report.component.ts");
/* harmony import */ var _components_trades_tab_trades_tab_component__WEBPACK_IMPORTED_MODULE_117__ = __webpack_require__(/*! ./components/trades-tab/trades-tab.component */ "./Client/app/trading/components/trades-tab/trades-tab.component.ts");
/* harmony import */ var _components_trades_trades_component__WEBPACK_IMPORTED_MODULE_118__ = __webpack_require__(/*! ./components/trades/trades.component */ "./Client/app/trading/components/trades/trades.component.ts");
/* harmony import */ var _dialog_boxes_blocker_warning_message_blocker_warning_message_component__WEBPACK_IMPORTED_MODULE_119__ = __webpack_require__(/*! ./dialog-boxes/blocker-warning-message/blocker-warning-message.component */ "./Client/app/trading/dialog-boxes/blocker-warning-message/blocker-warning-message.component.ts");
/* harmony import */ var _dialog_boxes_bulk_approval_dialog_bulk_approval_dialog_component__WEBPACK_IMPORTED_MODULE_120__ = __webpack_require__(/*! ./dialog-boxes/bulk-approval-dialog/bulk-approval-dialog.component */ "./Client/app/trading/dialog-boxes/bulk-approval-dialog/bulk-approval-dialog.component.ts");
/* harmony import */ var _dialog_boxes_snapshot_selection_snapshot_selection_dialog_box_component__WEBPACK_IMPORTED_MODULE_121__ = __webpack_require__(/*! ./dialog-boxes/snapshot-selection/snapshot-selection-dialog-box.component */ "./Client/app/trading/dialog-boxes/snapshot-selection/snapshot-selection-dialog-box.component.ts");
/* harmony import */ var _dialog_boxes_trade_deallocation_trade_deallocation_dialog_component_component__WEBPACK_IMPORTED_MODULE_122__ = __webpack_require__(/*! ./dialog-boxes/trade-deallocation/trade-deallocation-dialog-component.component */ "./Client/app/trading/dialog-boxes/trade-deallocation/trade-deallocation-dialog-component.component.ts");
/* harmony import */ var _fno_trade_details_resolver__WEBPACK_IMPORTED_MODULE_123__ = __webpack_require__(/*! ./fno-trade-details.resolver */ "./Client/app/trading/fno-trade-details.resolver.ts");
/* harmony import */ var _pipes_quantity_pipe__WEBPACK_IMPORTED_MODULE_124__ = __webpack_require__(/*! ./pipes/quantity.pipe */ "./Client/app/trading/pipes/quantity.pipe.ts");
/* harmony import */ var _trading_route__WEBPACK_IMPORTED_MODULE_125__ = __webpack_require__(/*! ./trading.route */ "./Client/app/trading/trading.route.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};






























































































































var TradingModule = /** @class */ (function () {
    function TradingModule() {
    }
    TradingModule = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
            imports: [
                _angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"],
                _shared_material_module__WEBPACK_IMPORTED_MODULE_7__["MaterialModule"],
                _trading_route__WEBPACK_IMPORTED_MODULE_125__["TradingRoutingModule"],
                ag_grid_angular__WEBPACK_IMPORTED_MODULE_5__["AgGridModule"].withComponents([]),
                _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_2__["ReactiveFormsModule"],
                _angular_router__WEBPACK_IMPORTED_MODULE_4__["RouterModule"],
                _shared_shared_module__WEBPACK_IMPORTED_MODULE_9__["SharedModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatCardModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatButtonModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatDialogModule"],
                angular2_text_mask__WEBPACK_IMPORTED_MODULE_6__["TextMaskModule"],
            ],
            declarations: [
                _components_trades_trades_component__WEBPACK_IMPORTED_MODULE_118__["TradesComponent"],
                _components_section_new_section_new_component__WEBPACK_IMPORTED_MODULE_108__["SectionNewComponent"],
                _components_contract_physical_capture_trade_capture_page_component__WEBPACK_IMPORTED_MODULE_60__["TradeCapturePageComponent"],
                _components_contract_physical_capture_main_tab_physical_contract_capture_form_main_tab_component__WEBPACK_IMPORTED_MODULE_53__["PhysicalContractCaptureFormMainTabComponent"],
                _components_contract_physical_capture_form_components_shipment_period_form_shipment_period_form_component__WEBPACK_IMPORTED_MODULE_37__["ShipmentPeriodFormComponent"],
                _components_contract_physical_capture_form_components_quantity_form_component_quantity_form_component_component__WEBPACK_IMPORTED_MODULE_35__["QuantityFormComponent"],
                _components_contract_physical_capture_form_components_location_form_component_location_form_component_component__WEBPACK_IMPORTED_MODULE_32__["LocationFormComponent"],
                _components_contract_physical_capture_form_components_price_form_component_price_form_component_component__WEBPACK_IMPORTED_MODULE_34__["PriceFormComponent"],
                _components_contract_physical_capture_form_components_header_form_component_header_form_component_component__WEBPACK_IMPORTED_MODULE_30__["HeaderFormComponent"],
                _components_contract_physical_capture_form_components_counterparty_form_component_counterparty_form_component_component__WEBPACK_IMPORTED_MODULE_27__["CounterpartyFormComponent"],
                _components_contract_physical_capture_form_components_commodity_form_component_commodity_form_component_component__WEBPACK_IMPORTED_MODULE_26__["CommodityFormComponent"],
                _components_contract_physical_capture_form_components_memo_form_component_memo_form_component_component__WEBPACK_IMPORTED_MODULE_33__["MemoFormComponent"],
                _components_contract_physical_capture_form_components_terms_form_component_terms_form_component_component__WEBPACK_IMPORTED_MODULE_38__["TermsFormComponent"],
                _components_contract_physical_capture_traffic_tab_physical_contract_capture_form_traffic_tab_component__WEBPACK_IMPORTED_MODULE_63__["PhysicalContractCaptureFormTrafficTabComponent"],
                _components_contract_physical_capture_form_components_bl_info_form_component_bl_info_form_component_component__WEBPACK_IMPORTED_MODULE_23__["BlInfoFormComponent"],
                _components_contract_physical_capture_form_components_adjust_weight_form_component_adjust_weight_form_component_component__WEBPACK_IMPORTED_MODULE_19__["AdjustWeightFormComponent"],
                _components_contract_physical_capture_form_components_shipment_info_form_component_shipment_info_form_component_component__WEBPACK_IMPORTED_MODULE_36__["ShipmentInfoFormComponent"],
                _components_contract_physical_capture_form_components_current_trade_form_component_current_trade_form_component_component__WEBPACK_IMPORTED_MODULE_28__["CurrentTradeFormComponent"],
                _components_contract_physical_capture_form_components_allocation_form_component_allocation_form_component_component__WEBPACK_IMPORTED_MODULE_20__["AllocationFormComponent"],
                _components_contract_physical_capture_status_tab_physical_contract_capture_form_status_tab_component__WEBPACK_IMPORTED_MODULE_59__["PhysicalContractCaptureFormStatusTabComponent"],
                _components_contract_physical_capture_form_components_allocation_info_form_component_allocation_info_form_component_component__WEBPACK_IMPORTED_MODULE_21__["AllocationInfoFormComponentComponent"],
                _components_contract_physical_capture_form_components_amendment_audit_form_component_amendment_audit_form_component_component__WEBPACK_IMPORTED_MODULE_22__["AmendmentAuditFormComponentComponent"],
                _components_contract_physical_capture_form_components_cash_against_invoice_form_component_cash_against_invoice_form_component_component__WEBPACK_IMPORTED_MODULE_24__["CashAgainstInvoiceFormComponentComponent"],
                _components_contract_physical_capture_form_components_charter_form_component_charter_form_component_component__WEBPACK_IMPORTED_MODULE_25__["CharterFormComponentComponent"],
                _components_contract_physical_capture_form_components_document_status_form_component_document_status_form_component_component__WEBPACK_IMPORTED_MODULE_29__["DocumentStatusFormComponentComponent"],
                _components_contract_physical_capture_form_components_invoicing_form_component_invoicing_form_component_component__WEBPACK_IMPORTED_MODULE_31__["InvoicingFormComponentComponent"],
                _dialog_boxes_trade_deallocation_trade_deallocation_dialog_component_component__WEBPACK_IMPORTED_MODULE_122__["TradeDeallocationDialogComponent"],
                _components_contract_physical_capture_section_tab_physical_contract_capture_form_section_tab_component__WEBPACK_IMPORTED_MODULE_58__["PhysicalContractCaptureFormSectionTabComponent"],
                _components_trade_allocation_trade_allocation_component__WEBPACK_IMPORTED_MODULE_114__["TradeAllocationComponent"],
                _components_trade_allocation_allocation_form_components_header_allocation_form_component_header_allocation_form_component_component__WEBPACK_IMPORTED_MODULE_110__["HeaderAllocationFormComponent"],
                _components_trade_allocation_allocation_form_components_search_allocation_form_component_search_allocation_form_component_component__WEBPACK_IMPORTED_MODULE_111__["SearchAllocationFormComponent"],
                _components_trade_allocation_allocation_form_components_warning_allocation_form_component_warning_allocation_form_component_component__WEBPACK_IMPORTED_MODULE_113__["WarningAllocationFormComponent"],
                _components_trade_allocation_allocation_form_components_shipping_allocation_form_component_shipping_allocation_form_component_component__WEBPACK_IMPORTED_MODULE_112__["ShippingAllocationFormComponent"],
                _components_trade_allocation_allocation_form_components_allocation_table_form_component_allocation_table_form_component_component__WEBPACK_IMPORTED_MODULE_109__["AllocationTableFormComponent"],
                _components_contract_physical_capture_section_tab_new_tranche_split_ag_grid_new_tranche_split_ag_grid_component__WEBPACK_IMPORTED_MODULE_55__["NewTrancheSplitAgGridComponent"],
                _components_contract_physical_capture_section_tab_new_tranche_split_footer_new_tranche_split_footer_component__WEBPACK_IMPORTED_MODULE_56__["NewTrancheSplitFooterComponent"],
                _components_contract_physical_capture_section_tab_new_tranche_split_header_new_tranche_split_header_component__WEBPACK_IMPORTED_MODULE_57__["NewTrancheSplitHeaderComponent"],
                _components_contract_physical_capture_form_components_tranche_split_grid_tranche_split_grid_component__WEBPACK_IMPORTED_MODULE_44__["TrancheSplitGridComponent"],
                _components_contract_physical_capture_costs_tab_physical_contract_capture_form_costs_tab_component__WEBPACK_IMPORTED_MODULE_18__["PhysicalContractCaptureFormCostsTabComponent"],
                _components_contract_physical_capture_invoice_marking_tab_physical_contract_capture_form_invoice_marking_tab_component__WEBPACK_IMPORTED_MODULE_52__["PhysicalContractCaptureFormInvoiceMarkingTabComponent"],
                _components_contract_physical_capture_invoice_marking_tab_components_invoice_totals_invoice_totals_component__WEBPACK_IMPORTED_MODULE_49__["InvoiceTotalsComponent"],
                _components_contract_physical_capture_invoice_marking_tab_components_invoice_status_invoice_status_component__WEBPACK_IMPORTED_MODULE_48__["InvoiceStatusComponent"],
                _components_contract_physical_capture_invoice_marking_tab_components_detailed_view_detailed_view_component__WEBPACK_IMPORTED_MODULE_47__["DetailedViewComponent"],
                _components_contract_physical_capture_trade_management_menu_bar_trade_management_menu_bar_component__WEBPACK_IMPORTED_MODULE_62__["TradeManagementMenuBarComponent"],
                _components_contract_physical_capture_invoice_marking_tab_components_invoice_view_mode_invoice_view_mode_component__WEBPACK_IMPORTED_MODULE_50__["InvoiceViewModeComponent"],
                _components_contract_physical_capture_invoice_marking_tab_components_top_card_top_card_component__WEBPACK_IMPORTED_MODULE_51__["TopCardComponent"],
                _components_contract_physical_capture_costs_tab_cost_invoice_marking_dialog_cost_invoice_marking_dialog_component__WEBPACK_IMPORTED_MODULE_12__["CostInvoiceMarkingDialogComponent"],
                _components_contract_physical_capture_trade_image_dialog_trade_image_dialog_component__WEBPACK_IMPORTED_MODULE_61__["TradeImageDialogComponent"],
                _components_trades_tab_trades_tab_component__WEBPACK_IMPORTED_MODULE_117__["TradesTabComponent"],
                _components_costmatrices_costmatrices_component__WEBPACK_IMPORTED_MODULE_66__["CostmatricesComponent"],
                _components_costmatrices_components_costmatrix_create_costmatrix_create_component__WEBPACK_IMPORTED_MODULE_64__["CostmatrixCreateComponent"],
                _components_costmatrices_components_costmatrix_list_costmatrix_list_component__WEBPACK_IMPORTED_MODULE_65__["CostmatrixListComponent"],
                _components_contract_physical_capture_costs_tab_cost_matrix_dialog_cost_matrix_dialog_component__WEBPACK_IMPORTED_MODULE_13__["CostMatrixDialogComponent"],
                _dialog_boxes_snapshot_selection_snapshot_selection_dialog_box_component__WEBPACK_IMPORTED_MODULE_121__["SnapshotSelectionDialogBoxComponent"],
                _components_trade_pnl_report_trade_pnl_report_component__WEBPACK_IMPORTED_MODULE_116__["TradePnlReportComponent"],
                _components_contract_physical_capture_costs_tab_add_cost_confirmation_dialog_add_cost_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["AddCostConfirmationDialogComponent"],
                _components_trade_cost_report_trade_cost_report_component__WEBPACK_IMPORTED_MODULE_115__["TradeCostReportComponent"],
                _dialog_boxes_blocker_warning_message_blocker_warning_message_component__WEBPACK_IMPORTED_MODULE_119__["BlockerWarningMessageComponent"],
                _components_costmatrices_costmatrix_menu_bar_costmatrix_menu_bar_component__WEBPACK_IMPORTED_MODULE_67__["CostmatrixMenuBarComponent"],
                _components_group_functions_group_functions_component__WEBPACK_IMPORTED_MODULE_86__["GroupFunctionsComponent"],
                _components_group_functions_group_function_contracts_group_function_contracts_component__WEBPACK_IMPORTED_MODULE_84__["GroupFunctionContractsComponent"],
                _components_group_amendments_group_amendments_component__WEBPACK_IMPORTED_MODULE_83__["GroupAmendmentsComponent"],
                _components_group_amendments_bulk_edition_bulk_edition_component__WEBPACK_IMPORTED_MODULE_81__["BulkEditionComponent"],
                _components_group_amendments_bulk_approval_bulk_approval_component__WEBPACK_IMPORTED_MODULE_78__["BulkApprovalComponent"],
                _components_group_functions_trade_bulk_edit_trade_bulk_edit_component__WEBPACK_IMPORTED_MODULE_99__["TradeBulkEditComponent"],
                _components_group_functions_trade_bulk_approval_trade_bulk_approval_component__WEBPACK_IMPORTED_MODULE_89__["TradeBulkApprovalComponent"],
                _components_group_functions_group_function_warning_group_function_warning_component__WEBPACK_IMPORTED_MODULE_85__["GroupFunctionWarningComponent"],
                _components_contract_physical_capture_save_as_favourite_dialog_save_as_favourite_dialog_component__WEBPACK_IMPORTED_MODULE_54__["SaveAsFavouriteDialogComponent"],
                _dialog_boxes_bulk_approval_dialog_bulk_approval_dialog_component__WEBPACK_IMPORTED_MODULE_120__["BulkApprovalDialogComponent"],
                _components_group_functions_trade_bulk_edit_edition_matrix_edition_matrix_component__WEBPACK_IMPORTED_MODULE_97__["EditionMatrixComponent"],
                _components_group_functions_trade_bulk_edit_trade_bulk_fields_trade_bulk_fields_component__WEBPACK_IMPORTED_MODULE_100__["TradeBulkFieldsComponent"],
                _components_contract_physical_capture_interco_trade_dialog_interco_trade_dialog_component__WEBPACK_IMPORTED_MODULE_45__["IntercoTradeDialogComponent"],
                _components_contract_physical_capture_interco_trade_dialog_intero_state_banner_intero_state_banner_component__WEBPACK_IMPORTED_MODULE_46__["InteroStateBannerComponent"],
                _pipes_quantity_pipe__WEBPACK_IMPORTED_MODULE_124__["QuantityPipe"],
                _components_group_amendments_bulk_update_costs_bulk_update_costs_component__WEBPACK_IMPORTED_MODULE_82__["BulkUpdateCostsComponent"],
                _components_group_functions_trade_cost_bulk_update_trade_cost_bulk_update_component__WEBPACK_IMPORTED_MODULE_103__["TradeCostBulkUpdateComponent"],
                _components_group_functions_trade_cost_bulk_update_select_contracts_select_contracts_component__WEBPACK_IMPORTED_MODULE_102__["SelectContractsComponent"],
                _components_group_functions_trade_cost_bulk_update_update_costs_components_add_costs_add_costs_component__WEBPACK_IMPORTED_MODULE_104__["AddCostsComponent"],
                _components_group_functions_trade_cost_bulk_update_update_costs_update_costs_component__WEBPACK_IMPORTED_MODULE_107__["UpdateCostsComponent"],
                _components_group_functions_trade_cost_bulk_update_update_costs_components_edit_costs_edit_costs_component__WEBPACK_IMPORTED_MODULE_106__["EditCostsComponent"],
                _components_group_functions_trade_cost_bulk_update_update_costs_components_edit_costs_dialog_edit_costs_dialog_component__WEBPACK_IMPORTED_MODULE_105__["EditCostsDialogComponent"],
                _components_group_functions_trade_bulk_edit_edition_matrix_master_row_apply_master_row_apply_component__WEBPACK_IMPORTED_MODULE_98__["MasterRowApplyComponent"],
                _components_group_amendments_bulk_closure_bulk_closure_component__WEBPACK_IMPORTED_MODULE_79__["BulkClosureComponent"],
                _components_group_functions_trade_bulk_closure_trade_bulk_closure_component__WEBPACK_IMPORTED_MODULE_94__["TradeBulkClosureComponent"],
                _components_group_functions_trade_bulk_closure_bulk_closure_matrix_bulk_closure_matrix_component__WEBPACK_IMPORTED_MODULE_91__["BulkClosureMatrixComponent"],
                _components_group_functions_trade_bulk_closure_summary_summary_closure_matrix_component__WEBPACK_IMPORTED_MODULE_93__["SummaryClosureMatrixComponent"],
                _components_group_functions_trade_bulk_closure_ag_grid_pop_up_ag_grid_pop_up_component__WEBPACK_IMPORTED_MODULE_90__["AgGridPopUpComponent"],
                _components_group_functions_trade_bulk_closure_dialog_pop_up_dialog_component_component__WEBPACK_IMPORTED_MODULE_92__["PopUpDialogComponentComponent"],
                _components_group_functions_trade_cost_bulk_update_cost_bulk_update_summary_cost_bulk_update_summary_component__WEBPACK_IMPORTED_MODULE_101__["CostBulkUpdateSummaryComponent"],
                _components_contract_physical_capture_costs_tab_costs_to_adjust_components_parent_costs_parent_costs_component__WEBPACK_IMPORTED_MODULE_16__["ParentCostsComponent"],
                _components_contract_physical_capture_costs_tab_costs_to_adjust_components_children_costs_children_costs_component__WEBPACK_IMPORTED_MODULE_14__["ChildrenCostsComponent"],
                _components_contract_physical_capture_cancel_trade_dialog_cancel_trade_dialog_component__WEBPACK_IMPORTED_MODULE_10__["CancelTradeDialogComponent"],
                _components_group_amendments_bulk_allocation_bulk_allocation_component__WEBPACK_IMPORTED_MODULE_77__["BulkAllocationComponent"],
                _components_group_functions_trade_bulk_allocation_trade_bulk_allocation_component__WEBPACK_IMPORTED_MODULE_88__["TradeBulkAllocationComponent"],
                _components_group_functions_trade_bulk_allocation_allocation_grids_allocation_grids_component__WEBPACK_IMPORTED_MODULE_87__["AllocationGridsComponent"],
                _components_contract_physical_capture_costs_tab_costs_to_adjust_costs_to_adjust_component__WEBPACK_IMPORTED_MODULE_17__["CostsToAdjustComponent"],
                _components_fx_deals_fx_deals_component__WEBPACK_IMPORTED_MODULE_76__["FxDealsComponent"],
                _components_contract_physical_capture_costs_tab_costs_to_adjust_components_override_costs_dialog_override_costs_dialog_component__WEBPACK_IMPORTED_MODULE_15__["OverrideCostsDialogComponent"],
                _components_group_amendments_bulk_deallocation_bulk_deallocation_component__WEBPACK_IMPORTED_MODULE_80__["BulkDeallocationComponent"],
                _components_group_functions_trade_bulk_deallocation_trade_bulk_deallocation_component__WEBPACK_IMPORTED_MODULE_96__["TradeBulkDeallocationComponent"],
                _components_group_functions_trade_bulk_deallocation_section_dialog_section_dialog_component__WEBPACK_IMPORTED_MODULE_95__["BulkDeAllocationSectionDialogComponent"],
                _components_fx_deals_capture_fx_deals_capture_component__WEBPACK_IMPORTED_MODULE_68__["FxDealsCaptureComponent"],
                _components_fx_deals_form_components_header_form_component_fxdeal_header_form_component__WEBPACK_IMPORTED_MODULE_72__["FxDealHeaderFormComponent"],
                _components_fx_deals_form_components_deal_terms_component_deal_terms_form_component__WEBPACK_IMPORTED_MODULE_71__["DealTermsFormComponent"],
                _components_fx_deals_form_components_bank_form_component_bank_form_component__WEBPACK_IMPORTED_MODULE_69__["BankFormComponent"],
                _components_fx_deals_form_components_deal_form_comonent_deal_form_component__WEBPACK_IMPORTED_MODULE_70__["DealFormComponent"],
                _components_fx_deals_form_components_rate_entry_form_component_rate_entry_form_component__WEBPACK_IMPORTED_MODULE_74__["RateEntryComponent"],
                _components_fx_deals_form_components_internal_memo_form_component_internal_memo_form_component__WEBPACK_IMPORTED_MODULE_73__["InternalMemoFormComponent"],
                _components_contract_physical_capture_form_components_trade_merge_trade_merge_component__WEBPACK_IMPORTED_MODULE_42__["TradeMergeComponent"],
                _components_contract_physical_capture_form_components_trade_merge_trades_list_trades_list_component__WEBPACK_IMPORTED_MODULE_43__["TradesListComponent"],
                _components_contract_physical_capture_form_components_trade_merge_merge_options_merge_options_component__WEBPACK_IMPORTED_MODULE_40__["MergeOptionsComponent"],
                _components_contract_physical_capture_form_components_trade_merge_merge_validations_merge_validations_component__WEBPACK_IMPORTED_MODULE_41__["MergeValidationsComponent"],
                _components_fx_deals_form_components_settlement_documents_component_settlement_documents_component__WEBPACK_IMPORTED_MODULE_75__["SettlementDocumentsComponent"],
                _components_contract_physical_capture_form_components_trade_merge_cost_impact_warning_dialog_cost_impact_warning_dialog_component__WEBPACK_IMPORTED_MODULE_39__["CostImpactWarningDialogComponent"],
            ],
            providers: [_shared_services_customDateAdapter__WEBPACK_IMPORTED_MODULE_8__["CustomDateAdapter"],
                { provide: _angular_material__WEBPACK_IMPORTED_MODULE_3__["MAT_DATE_LOCALE"], useValue: 'en' },
                { provide: _angular_material__WEBPACK_IMPORTED_MODULE_3__["DateAdapter"], useClass: _shared_services_customDateAdapter__WEBPACK_IMPORTED_MODULE_8__["CustomDateAdapter"] },
                { provide: _angular_material__WEBPACK_IMPORTED_MODULE_3__["MAT_DATE_FORMATS"], useValue: _shared_shared_module__WEBPACK_IMPORTED_MODULE_9__["ATLAS_DATE_FORMATS"] },
                _fno_trade_details_resolver__WEBPACK_IMPORTED_MODULE_123__["FnoTradeDetailsResolver"],
                _angular_common__WEBPACK_IMPORTED_MODULE_0__["CurrencyPipe"],
            ],
            schemas: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["CUSTOM_ELEMENTS_SCHEMA"]],
            entryComponents: [
                _components_section_new_section_new_component__WEBPACK_IMPORTED_MODULE_108__["SectionNewComponent"],
                _dialog_boxes_trade_deallocation_trade_deallocation_dialog_component_component__WEBPACK_IMPORTED_MODULE_122__["TradeDeallocationDialogComponent"],
                _components_contract_physical_capture_costs_tab_cost_invoice_marking_dialog_cost_invoice_marking_dialog_component__WEBPACK_IMPORTED_MODULE_12__["CostInvoiceMarkingDialogComponent"],
                _components_contract_physical_capture_trade_image_dialog_trade_image_dialog_component__WEBPACK_IMPORTED_MODULE_61__["TradeImageDialogComponent"],
                _components_contract_physical_capture_costs_tab_cost_matrix_dialog_cost_matrix_dialog_component__WEBPACK_IMPORTED_MODULE_13__["CostMatrixDialogComponent"], _components_contract_physical_capture_costs_tab_add_cost_confirmation_dialog_add_cost_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_11__["AddCostConfirmationDialogComponent"],
                _dialog_boxes_snapshot_selection_snapshot_selection_dialog_box_component__WEBPACK_IMPORTED_MODULE_121__["SnapshotSelectionDialogBoxComponent"],
                _components_trade_pnl_report_trade_pnl_report_component__WEBPACK_IMPORTED_MODULE_116__["TradePnlReportComponent"],
                _components_trade_cost_report_trade_cost_report_component__WEBPACK_IMPORTED_MODULE_115__["TradeCostReportComponent"],
                _dialog_boxes_blocker_warning_message_blocker_warning_message_component__WEBPACK_IMPORTED_MODULE_119__["BlockerWarningMessageComponent"],
                _components_contract_physical_capture_save_as_favourite_dialog_save_as_favourite_dialog_component__WEBPACK_IMPORTED_MODULE_54__["SaveAsFavouriteDialogComponent"],
                _dialog_boxes_bulk_approval_dialog_bulk_approval_dialog_component__WEBPACK_IMPORTED_MODULE_120__["BulkApprovalDialogComponent"],
                _components_contract_physical_capture_interco_trade_dialog_interco_trade_dialog_component__WEBPACK_IMPORTED_MODULE_45__["IntercoTradeDialogComponent"],
                _components_group_functions_trade_cost_bulk_update_update_costs_components_edit_costs_dialog_edit_costs_dialog_component__WEBPACK_IMPORTED_MODULE_105__["EditCostsDialogComponent"],
                _components_group_functions_trade_bulk_edit_edition_matrix_master_row_apply_master_row_apply_component__WEBPACK_IMPORTED_MODULE_98__["MasterRowApplyComponent"],
                _components_group_functions_trade_cost_bulk_update_update_costs_components_edit_costs_dialog_edit_costs_dialog_component__WEBPACK_IMPORTED_MODULE_105__["EditCostsDialogComponent"],
                _components_group_functions_trade_bulk_closure_ag_grid_pop_up_ag_grid_pop_up_component__WEBPACK_IMPORTED_MODULE_90__["AgGridPopUpComponent"],
                _components_contract_physical_capture_interco_trade_dialog_interco_trade_dialog_component__WEBPACK_IMPORTED_MODULE_45__["IntercoTradeDialogComponent"],
                _components_group_functions_trade_bulk_closure_dialog_pop_up_dialog_component_component__WEBPACK_IMPORTED_MODULE_92__["PopUpDialogComponentComponent"],
                _components_contract_physical_capture_cancel_trade_dialog_cancel_trade_dialog_component__WEBPACK_IMPORTED_MODULE_10__["CancelTradeDialogComponent"],
                _components_contract_physical_capture_costs_tab_costs_to_adjust_components_override_costs_dialog_override_costs_dialog_component__WEBPACK_IMPORTED_MODULE_15__["OverrideCostsDialogComponent"],
                _components_group_functions_trade_bulk_deallocation_section_dialog_section_dialog_component__WEBPACK_IMPORTED_MODULE_95__["BulkDeAllocationSectionDialogComponent"],
                _components_contract_physical_capture_form_components_trade_merge_cost_impact_warning_dialog_cost_impact_warning_dialog_component__WEBPACK_IMPORTED_MODULE_39__["CostImpactWarningDialogComponent"]
            ],
        })
    ], TradingModule);
    return TradingModule;
}());



/***/ }),

/***/ "./Client/app/trading/trading.route.ts":
/*!*********************************************!*\
  !*** ./Client/app/trading/trading.route.ts ***!
  \*********************************************/
/*! exports provided: routes, TradingRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "routes", function() { return routes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TradingRoutingModule", function() { return TradingRoutingModule; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/entities/masterdata-props.entity */ "./Client/app/shared/entities/masterdata-props.entity.ts");
/* harmony import */ var _shared_guards_can_deactivate_guard_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/guards/can-deactivate-guard.service */ "./Client/app/shared/guards/can-deactivate-guard.service.ts");
/* harmony import */ var _shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/guards/security.guard */ "./Client/app/shared/guards/security.guard.ts");
/* harmony import */ var _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/resolvers/company-date.resolver */ "./Client/app/shared/resolvers/company-date.resolver.ts");
/* harmony import */ var _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shared/resolvers/form-configuration.resolver */ "./Client/app/shared/resolvers/form-configuration.resolver.ts");
/* harmony import */ var _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../shared/resolvers/masterdata.resolver */ "./Client/app/shared/resolvers/masterdata.resolver.ts");
/* harmony import */ var _components_contract_physical_capture_costs_tab_costs_to_adjust_costs_to_adjust_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/contract-physical-capture/costs-tab/costs-to-adjust/costs-to-adjust.component */ "./Client/app/trading/components/contract-physical-capture/costs-tab/costs-to-adjust/costs-to-adjust.component.ts");
/* harmony import */ var _components_contract_physical_capture_form_components_trade_merge_trade_merge_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/contract-physical-capture/form-components/trade-merge/trade-merge.component */ "./Client/app/trading/components/contract-physical-capture/form-components/trade-merge/trade-merge.component.ts");
/* harmony import */ var _components_contract_physical_capture_trade_capture_page_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/contract-physical-capture/trade-capture-page.component */ "./Client/app/trading/components/contract-physical-capture/trade-capture-page.component.ts");
/* harmony import */ var _components_costmatrices_components_costmatrix_create_costmatrix_create_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/costmatrices/components/costmatrix-create/costmatrix-create.component */ "./Client/app/trading/components/costmatrices/components/costmatrix-create/costmatrix-create.component.ts");
/* harmony import */ var _components_fx_deals_capture_fx_deals_capture_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/fx-deals/capture/fx-deals-capture.component */ "./Client/app/trading/components/fx-deals/capture/fx-deals-capture.component.ts");
/* harmony import */ var _components_group_amendments_group_amendments_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./components/group-amendments/group-amendments.component */ "./Client/app/trading/components/group-amendments/group-amendments.component.ts");
/* harmony import */ var _components_group_functions_group_functions_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./components/group-functions/group-functions.component */ "./Client/app/trading/components/group-functions/group-functions.component.ts");
/* harmony import */ var _components_group_functions_trade_cost_bulk_update_trade_cost_bulk_update_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./components/group-functions/trade-cost-bulk-update/trade-cost-bulk-update.component */ "./Client/app/trading/components/group-functions/trade-cost-bulk-update/trade-cost-bulk-update.component.ts");
/* harmony import */ var _components_trade_allocation_trade_allocation_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./components/trade-allocation/trade-allocation.component */ "./Client/app/trading/components/trade-allocation/trade-allocation.component.ts");
/* harmony import */ var _components_trades_tab_trades_tab_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./components/trades-tab/trades-tab.component */ "./Client/app/trading/components/trades-tab/trades-tab.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


















var routes = [
    {
        path: '',
        component: _components_trades_tab_trades_tab_component__WEBPACK_IMPORTED_MODULE_17__["TradesTabComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        data: {
            isSnapshot: false,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].ContractTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].ContractTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PaymentTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Ports,
            ],
        },
        resolve: {
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
        },
    },
    {
        path: 'snapshot/:dataVersionId',
        component: _components_trades_tab_trades_tab_component__WEBPACK_IMPORTED_MODULE_17__["TradesTabComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        data: {
            title: 'Snapshot', isHomePage: false, privilegeLevel1Name: null,
            isSnapshot: true,
            authorizations: [
                {
                    privilegeName: 'AmendSnapshot',
                    permission: 2,
                    parentLevelOne: 'Trades',
                    parentLevelTwo: 'Physicals',
                },
            ],
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].ContractTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].ContractTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PaymentTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Ports,
            ],
        },
        resolve: {
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
        },
    },
    {
        path: 'allocateTrade/:sectionId',
        component: _components_trade_allocation_trade_allocation_component__WEBPACK_IMPORTED_MODULE_16__["TradeAllocationComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        canDeactivate: [_shared_guards_can_deactivate_guard_service__WEBPACK_IMPORTED_MODULE_3__["CanDeactivateGuard"]],
        data: {
            formId: 'TradeAllocation',
            animation: 'tradeAllocation',
            title: 'Trade Allocation', isHomePage: false, privilegeLevel1Name: null,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Commodities,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].WeightUnits,
            ],
            authorizations: [
                {
                    privilegeName: 'AllocateDeallocate',
                    permission: 2,
                    parentLevelOne: 'Trades',
                    parentLevelTwo: 'Physicals',
                },
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'snapshot/:dataVersionId/allocateTrade/:sectionId',
        component: _components_trade_allocation_trade_allocation_component__WEBPACK_IMPORTED_MODULE_16__["TradeAllocationComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        data: {
            formId: 'TradeAllocation',
            animation: 'tradeAllocation',
            title: 'Trade Allocation', isHomePage: false, privilegeLevel1Name: null,
            isSnapshot: true,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Commodities,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].WeightUnits,
            ],
            authorizations: [
                {
                    privilegeName: 'AllocateDeallocate',
                    permission: 2,
                    parentLevelOne: 'Trades',
                    parentLevelTwo: 'Physicals',
                },
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'capture',
        component: _components_contract_physical_capture_trade_capture_page_component__WEBPACK_IMPORTED_MODULE_10__["TradeCapturePageComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        canDeactivate: [_shared_guards_can_deactivate_guard_service__WEBPACK_IMPORTED_MODULE_3__["CanDeactivateGuard"]],
        data: {
            animation: 'tradeNew',
            title: 'Trade Capture',
            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Arbitrations,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Commodities,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].ContractTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Departments,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].BusinessSectors,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PaymentTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PeriodTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PositionMonthTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Ports,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PriceUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].WeightUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].CostTypes,
            ],
            authorizations: [
                {
                    privilegeName: 'CreateTrade',
                    permission: 2,
                    parentLevelOne: 'Trades',
                    parentLevelTwo: 'Physicals',
                },
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'snapshot/:dataVersionId/capture',
        component: _components_contract_physical_capture_trade_capture_page_component__WEBPACK_IMPORTED_MODULE_10__["TradeCapturePageComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        canDeactivate: [_shared_guards_can_deactivate_guard_service__WEBPACK_IMPORTED_MODULE_3__["CanDeactivateGuard"]],
        data: {
            animation: 'tradeNew',
            title: 'Trade Capture for Snapshot',
            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,
            isSnapshot: true,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Arbitrations,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Commodities,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].ContractTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Departments,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].BusinessSectors,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PaymentTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PeriodTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PositionMonthTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Ports,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PriceUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].WeightUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].CostTypes,
            ],
            authorizations: [
                {
                    privilegeName: 'CreateTrade',
                    permission: 2,
                    parentLevelOne: 'Trades',
                    parentLevelTwo: 'Physicals',
                },
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
        },
    },
    {
        path: 'display/:sectionId',
        component: _components_contract_physical_capture_trade_capture_page_component__WEBPACK_IMPORTED_MODULE_10__["TradeCapturePageComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        data: {
            animation: 'tradeDisplay',
            title: 'Display Trade',
            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Arbitrations,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Commodities,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].ContractTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Departments,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].BusinessSectors,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PaymentTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PeriodTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Ports,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PriceUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].WeightUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Vessels,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].CostTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].InvoiceStatus,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].InvoiceTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Vats,
            ],
            authorizations: [
                {
                    privilegeName: 'Physicals',
                    permission: 1,
                    parentLevelOne: 'Trades',
                },
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'transferCosts/:sectionId',
        component: _components_contract_physical_capture_costs_tab_costs_to_adjust_costs_to_adjust_component__WEBPACK_IMPORTED_MODULE_8__["CostsToAdjustComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        data: {
            animation: 'transferCosts',
            title: 'Transfer',
            formId: 'TransferCosts', isHomePage: false, privilegeLevel1Name: null,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Arbitrations,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Commodities,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].ContractTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Departments,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].BusinessSectors,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PaymentTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PeriodTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Ports,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PriceUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].WeightUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Vessels,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].CostTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].InvoiceStatus,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].InvoiceTypes,
            ],
            authorizations: [
                {
                    privilegeName: 'Physicals',
                    permission: 1,
                    parentLevelOne: 'Trades',
                },
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'tradeMerge/:currentSection.sectionId',
        component: _components_contract_physical_capture_form_components_trade_merge_trade_merge_component__WEBPACK_IMPORTED_MODULE_9__["TradeMergeComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        data: {
            animation: 'tradeMerge',
            title: 'Merge',
            formId: 'tradeMerge', isHomePage: false, privilegeLevel1Name: null,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Arbitrations,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Commodities,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].ContractTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Departments,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].BusinessSectors,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PaymentTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PeriodTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Ports,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PriceUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].WeightUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Vessels,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].CostTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].InvoiceStatus,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].InvoiceTypes,
            ],
            authorizations: [
                {
                    privilegeName: 'Physicals',
                    permission: 1,
                    parentLevelOne: 'Trades',
                },
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'snapshot/:dataVersionId/display/:sectionId',
        component: _components_contract_physical_capture_trade_capture_page_component__WEBPACK_IMPORTED_MODULE_10__["TradeCapturePageComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        data: {
            animation: 'tradeDisplay',
            title: 'Display Trade for Snapshot',
            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,
            isSnapshot: true,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Arbitrations,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Commodities,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].ContractTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Departments,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].BusinessSectors,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PaymentTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PeriodTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Ports,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PriceUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].WeightUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Vessels,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].CostTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].InvoiceStatus,
            ],
            authorizations: [
                {
                    privilegeName: 'Physicals',
                    permission: 1,
                    parentLevelOne: 'Trades',
                },
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
        },
    },
    {
        path: 'edit/:sectionId',
        component: _components_contract_physical_capture_trade_capture_page_component__WEBPACK_IMPORTED_MODULE_10__["TradeCapturePageComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        canDeactivate: [_shared_guards_can_deactivate_guard_service__WEBPACK_IMPORTED_MODULE_3__["CanDeactivateGuard"]],
        data: {
            animation: 'tradeEdit',
            title: 'Trade Edition',
            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,
            isEdit: true,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Arbitrations,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Commodities,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].ContractTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Departments,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].BusinessSectors,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PaymentTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PeriodTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PositionMonthTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Ports,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PriceUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].WeightUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Vessels,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].CostTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].InvoiceTypes,
            ],
            authorizations: [
                {
                    privilegeName: 'Physicals',
                    permission: 2,
                    parentLevelOne: 'Trades',
                },
            ],
            tabIndex: 0,
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'snapshot/:dataVersionId/edit/:sectionId',
        component: _components_contract_physical_capture_trade_capture_page_component__WEBPACK_IMPORTED_MODULE_10__["TradeCapturePageComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        canDeactivate: [_shared_guards_can_deactivate_guard_service__WEBPACK_IMPORTED_MODULE_3__["CanDeactivateGuard"]],
        data: {
            animation: 'tradeEdit',
            title: 'Trade Edition for Snapshot',
            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,
            isEdit: true,
            isSnapshot: true,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Arbitrations,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Commodities,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].ContractTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Departments,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].BusinessSectors,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PaymentTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PeriodTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PositionMonthTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Ports,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PriceUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].WeightUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Vessels,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].CostTypes,
            ],
            authorizations: [
                {
                    privilegeName: 'Physicals',
                    permission: 2,
                    parentLevelOne: 'Trades',
                },
            ],
            tabIndex: 0,
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'edit/:sectionId/:tabIndex',
        component: _components_contract_physical_capture_trade_capture_page_component__WEBPACK_IMPORTED_MODULE_10__["TradeCapturePageComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        canDeactivate: [_shared_guards_can_deactivate_guard_service__WEBPACK_IMPORTED_MODULE_3__["CanDeactivateGuard"]],
        data: {
            animation: 'tradeEdit',
            title: 'Trade Edition',
            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,
            isEdit: true,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Arbitrations,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Commodities,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].ContractTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Departments,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].BusinessSectors,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PaymentTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PeriodTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PositionMonthTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Ports,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PriceUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].WeightUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Vessels,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].CostTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].InvoiceTypes,
            ],
            authorizations: [
                {
                    privilegeName: 'Physicals',
                    permission: 2,
                    parentLevelOne: 'Trades',
                },
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'snapshot/:dataVersionId/edit/:sectionId/:tabIndex',
        component: _components_contract_physical_capture_trade_capture_page_component__WEBPACK_IMPORTED_MODULE_10__["TradeCapturePageComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        canDeactivate: [_shared_guards_can_deactivate_guard_service__WEBPACK_IMPORTED_MODULE_3__["CanDeactivateGuard"]],
        data: {
            animation: 'tradeEdit',
            title: 'Trade Edition',
            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,
            isEdit: true,
            isSnapshot: true,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Arbitrations,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Commodities,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].ContractTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Departments,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].BusinessSectors,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PaymentTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PeriodTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PositionMonthTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Ports,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PriceUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].WeightUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Vessels,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].CostTypes,
            ],
            authorizations: [
                {
                    privilegeName: 'Physicals',
                    permission: 2,
                    parentLevelOne: 'Trades',
                },
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'image/:sectionId',
        component: _components_contract_physical_capture_trade_capture_page_component__WEBPACK_IMPORTED_MODULE_10__["TradeCapturePageComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        canDeactivate: [_shared_guards_can_deactivate_guard_service__WEBPACK_IMPORTED_MODULE_3__["CanDeactivateGuard"]],
        data: {
            animation: 'tradeEdit&Image',
            title: 'Trade Creation',
            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Arbitrations,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Commodities,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].ContractTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Departments,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].BusinessSectors,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PaymentTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PeriodTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PositionMonthTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Ports,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PriceUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].WeightUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Vessels,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].CostTypes,
            ],
            isImage: true,
            authorizations: [
                {
                    privilegeName: 'Physicals',
                    permission: 2,
                    parentLevelOne: 'Trades',
                },
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'edit/:pricingMethod/:sectionId',
        component: _components_contract_physical_capture_trade_capture_page_component__WEBPACK_IMPORTED_MODULE_10__["TradeCapturePageComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        canDeactivate: [_shared_guards_can_deactivate_guard_service__WEBPACK_IMPORTED_MODULE_3__["CanDeactivateGuard"]],
        data: {
            animation: 'tradeNew',
            title: 'Trade Edition',
            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Arbitrations,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Commodities,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].ContractTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Departments,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].BusinessSectors,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PaymentTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PeriodTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Ports,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PriceUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].WeightUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Vessels,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].CostTypes,
            ],
            authorizations: [
                {
                    privilegeName: 'CreateTrade',
                    permission: 2,
                    parentLevelOne: 'Trades',
                    parentLevelTwo: 'Physicals',
                },
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'bulkActions/costs/:bulkActionTypeId/:charterId',
        component: _components_group_functions_trade_cost_bulk_update_trade_cost_bulk_update_component__WEBPACK_IMPORTED_MODULE_15__["TradeCostBulkUpdateComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        canDeactivate: [_shared_guards_can_deactivate_guard_service__WEBPACK_IMPORTED_MODULE_3__["CanDeactivateGuard"]],
        data: {
            animation: 'bulkActions',
            title: 'Bulk Actions',
            isHomePage: false,
            privilegeLevel1Name: null,
            formId: 'GroupFunctions',
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].WeightUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Commodities,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].ContractTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Ports,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Arbitrations,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PriceUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PaymentTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Ports,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].BusinessSectors,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Vessels,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PositionMonthTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Departments,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PeriodTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].CostTypes,
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'costmatrix/create',
        component: _components_costmatrices_components_costmatrix_create_costmatrix_create_component__WEBPACK_IMPORTED_MODULE_11__["CostmatrixCreateComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        canDeactivate: [_shared_guards_can_deactivate_guard_service__WEBPACK_IMPORTED_MODULE_3__["CanDeactivateGuard"]],
        data: {
            animation: 'costmatrixNew',
            title: 'Cost Matrix Creation',
            formId: 'CostmatrixCreate', isHomePage: false, privilegeLevel1Name: null,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].CostTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PriceUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].RateTypes,
            ],
            authorizations: [
                {
                    privilegeName: 'CostMatrices',
                    permission: 2,
                    parentLevelOne: 'Trades',
                    parentLevelTwo: null,
                },
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'costmatrix/display/:costmatrixId',
        component: _components_costmatrices_components_costmatrix_create_costmatrix_create_component__WEBPACK_IMPORTED_MODULE_11__["CostmatrixCreateComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        data: {
            animation: 'CostmatrixEdit',
            title: 'Cost Matrix',
            formId: 'CostmatrixEdit', isHomePage: false, icon: '',
            isDisplay: true,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].CostTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PriceUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].RateTypes,
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'costmatrix/edit/:costmatrixId',
        component: _components_costmatrices_components_costmatrix_create_costmatrix_create_component__WEBPACK_IMPORTED_MODULE_11__["CostmatrixCreateComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        canDeactivate: [_shared_guards_can_deactivate_guard_service__WEBPACK_IMPORTED_MODULE_3__["CanDeactivateGuard"]],
        data: {
            animation: 'costmatrixEdit',
            title: 'Cost Matrix Edition',
            formId: 'CostmatrixEdit', isHomePage: false, icon: '',
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].CostTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PriceUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].RateTypes,
            ],
            authorizations: [
                {
                    privilegeName: 'CostMatrices',
                    permission: 2,
                    parentLevelOne: 'Trades',
                    parentLevelTwo: null,
                },
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'costmatrix/image/:originalCostMatrixId',
        component: _components_costmatrices_components_costmatrix_create_costmatrix_create_component__WEBPACK_IMPORTED_MODULE_11__["CostmatrixCreateComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        data: {
            animation: 'costmatrixImage',
            title: 'Image Cost Matrix',
            formId: 'CostmatrixCreate', isHomePage: false, privilegeLevel1Name: null,
            isImage: true,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].CostTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PriceUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].RateTypes,
            ],
            authorizations: [
                {
                    privilegeName: 'CostMatrices',
                    permission: 2,
                    parentLevelOne: 'Trades',
                    parentLevelTwo: null,
                },
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'bulkActions/:bulkActionTypeId',
        component: _components_group_functions_group_functions_component__WEBPACK_IMPORTED_MODULE_14__["GroupFunctionsComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        canDeactivate: [_shared_guards_can_deactivate_guard_service__WEBPACK_IMPORTED_MODULE_3__["CanDeactivateGuard"]],
        data: {
            animation: 'bulkActions',
            title: 'Bulk Actions',
            isHomePage: false,
            privilegeLevel1Name: null,
            formId: 'GroupFunctions',
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].WeightUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Commodities,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].ContractTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Ports,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Arbitrations,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PriceUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PaymentTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Ports,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].BusinessSectors,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Vessels,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PositionMonthTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Departments,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PeriodTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].CostTypes,
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'groupfunctions',
        component: _components_group_amendments_group_amendments_component__WEBPACK_IMPORTED_MODULE_13__["GroupAmendmentsComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        canDeactivate: [_shared_guards_can_deactivate_guard_service__WEBPACK_IMPORTED_MODULE_3__["CanDeactivateGuard"]],
        data: {
            animation: 'groupFunctions',
            title: 'Group Functions',
            formId: 'GroupFunctions', isHomePage: false, privilegeLevel1Name: null,
            masterdataList: [],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'image/:sectionId/:multipleImage',
        component: _components_contract_physical_capture_trade_capture_page_component__WEBPACK_IMPORTED_MODULE_10__["TradeCapturePageComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        canDeactivate: [_shared_guards_can_deactivate_guard_service__WEBPACK_IMPORTED_MODULE_3__["CanDeactivateGuard"]],
        data: {
            animation: 'tradeEdit&Image',
            title: 'Trades Creation',
            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Arbitrations,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Commodities,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].ContractTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Departments,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].BusinessSectors,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PaymentTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PeriodTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PositionMonthTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Ports,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PriceUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].WeightUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Vessels,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].CostTypes,
            ],
            isImage: true,
            authorizations: [
                {
                    privilegeName: 'Physicals',
                    permission: 2,
                    parentLevelOne: 'Trades',
                },
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'display/:sectionId/:tabIndex',
        component: _components_contract_physical_capture_trade_capture_page_component__WEBPACK_IMPORTED_MODULE_10__["TradeCapturePageComponent"],
        canActivate: [_shared_guards_security_guard__WEBPACK_IMPORTED_MODULE_4__["SecurityGuard"]],
        data: {
            animation: 'tradeDisplay',
            title: 'Display Trade',
            formId: 'PhysicalTradeCapture', isHomePage: false, privilegeLevel1Name: null,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Arbitrations,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Commodities,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].ContractTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Departments,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].BusinessSectors,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PaymentTerms,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PeriodTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Ports,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].PriceUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].WeightUnits,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Vessels,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].CostTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].InvoiceStatus,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].InvoiceTypes,
            ],
            authorizations: [
                {
                    privilegeName: 'Physicals',
                    permission: 1,
                    parentLevelOne: 'Trades',
                },
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'fxdeal/capture',
        component: _components_fx_deals_capture_fx_deals_capture_component__WEBPACK_IMPORTED_MODULE_12__["FxDealsCaptureComponent"],
        data: {
            title: 'Fx Deal Capture',
            formId: 'FxDealCapture', isHomePage: false, privilegeLevel1Name: null,
            isCreate: true,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Companies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Departments,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].FxTradeTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].NominalAccounts,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Traders,
            ],
            authorizations: [
                {
                    privilegeName: 'CreateEditFxDeal',
                    permission: 2,
                    parentLevelOne: 'Trades',
                    parentLevelTwo: 'FXDeals',
                },
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'fxdeal/display/:fxDealId',
        component: _components_fx_deals_capture_fx_deals_capture_component__WEBPACK_IMPORTED_MODULE_12__["FxDealsCaptureComponent"],
        data: {
            title: 'Display Fx Deal',
            formId: 'FxDealCapture', isHomePage: false, privilegeLevel1Name: null,
            isView: true,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Companies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Departments,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].FxTradeTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].NominalAccounts,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Traders,
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
    {
        path: 'fxdeal/edit/:fxDealId',
        component: _components_fx_deals_capture_fx_deals_capture_component__WEBPACK_IMPORTED_MODULE_12__["FxDealsCaptureComponent"],
        data: {
            title: 'Fx Deal Edition',
            formId: 'FxDealCapture', isHomePage: false, privilegeLevel1Name: null,
            isEdit: true,
            masterdataList: [
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Companies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Counterparties,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Currencies,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Departments,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].FxTradeTypes,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].NominalAccounts,
                _shared_entities_masterdata_props_entity__WEBPACK_IMPORTED_MODULE_2__["MasterDataProps"].Traders,
            ],
            authorizations: [
                {
                    privilegeName: 'CreateEditFxDeal',
                    permission: 2,
                    parentLevelOne: 'Trades',
                    parentLevelTwo: 'FXDeals',
                },
            ],
        },
        resolve: {
            masterdata: _shared_resolvers_masterdata_resolver__WEBPACK_IMPORTED_MODULE_7__["MasterDataResolver"],
            formConfiguration: _shared_resolvers_form_configuration_resolver__WEBPACK_IMPORTED_MODULE_6__["FormConfigurationResolver"],
            companyDate: _shared_resolvers_company_date_resolver__WEBPACK_IMPORTED_MODULE_5__["CompanyDateResolver"],
        },
    },
];
var TradingRoutingModule = /** @class */ (function () {
    function TradingRoutingModule() {
    }
    TradingRoutingModule = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"])({
            imports: [_angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"].forChild(routes)],
            exports: [_angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"]],
            providers: [],
        })
    ], TradingRoutingModule);
    return TradingRoutingModule;
}());



/***/ }),

/***/ "./Client/app/trading/validators/contract-reference-async-validator.validator.ts":
/*!***************************************************************************************!*\
  !*** ./Client/app/trading/validators/contract-reference-async-validator.validator.ts ***!
  \***************************************************************************************/
/*! exports provided: ContractReferenceAsyncValidator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContractReferenceAsyncValidator", function() { return ContractReferenceAsyncValidator; });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");


var ContractReferenceAsyncValidator = /** @class */ (function () {
    function ContractReferenceAsyncValidator() {
    }
    ContractReferenceAsyncValidator.createValidator = function (tradingService, dataVersionId) {
        return function (control) {
            if (control.value) {
                return tradingService.checkContractReferenceExists(control.value, dataVersionId).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (res) {
                    return res ? { notUnique: true } : null;
                }));
            }
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_0__["of"])(null);
        };
    };
    return ContractReferenceAsyncValidator;
}());



/***/ }),

/***/ "./Client/app/trading/validators/costmatrix-name-async-validator.validator.ts":
/*!************************************************************************************!*\
  !*** ./Client/app/trading/validators/costmatrix-name-async-validator.validator.ts ***!
  \************************************************************************************/
/*! exports provided: CostMatrixNameAsyncValidator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CostMatrixNameAsyncValidator", function() { return CostMatrixNameAsyncValidator; });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");


var CostMatrixNameAsyncValidator = /** @class */ (function () {
    function CostMatrixNameAsyncValidator() {
    }
    CostMatrixNameAsyncValidator.createValidator = function (tradingService) {
        return function (control) {
            if (control.value) {
                return tradingService.checkCostMatrixNameExists(control.value).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (res) {
                    return res ? { notUnique: true } : null;
                }));
            }
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_0__["of"])(null);
        };
    };
    return CostMatrixNameAsyncValidator;
}());



/***/ })

}]);
//# sourceMappingURL=trading-trading-module.js.map