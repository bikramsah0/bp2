{"version":3,"sources":["webpack:///./Client/app/execution/services/execution-actions.service.ts","webpack:///./Client/app/shared/entities/trade-configuration-entity.ts","webpack:///./Client/app/shared/entities/trade-status.entity.ts","webpack:///./Client/app/shared/enums/foreign-exchange-rate-viewmode.enum.ts","webpack:///./Client/app/shared/enums/interface-status.enum.ts","webpack:///./Client/app/shared/enums/interface-type.enum.ts","webpack:///./Client/app/shared/services/Interface/dto/update-interface-status-command.ts","webpack:///./Client/app/shared/services/configuration/dtos/company-configuration-record.ts","webpack:///./Client/app/shared/services/http-services/accounting-interface.service.ts","webpack:///./Client/app/shared/services/list-and-search/fxDeal-data-loader.ts","webpack:///./Client/app/shared/services/masterdata/department-data-loader.ts","webpack:///./Client/app/shared/services/trading/bank-broker-contextual-data-loader.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { CompanyManagerService } from '../../core/services/company-manager.service';\r\nimport { CashRecord } from '../../shared/services/execution/dtos/cash-record';\r\nimport { ListAndSearchFilter } from '../../shared/entities/list-and-search/list-and-search-filter.entity';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\n\r\nexport class ExecutionActionsService {\r\n\r\n    public editCashSubject = new Subject();\r\n    public displayCashSubject = new Subject();\r\n    public charterGroupFunctionsSubject = new Subject();\r\n    public EditCriteriaRetainFilter: ListAndSearchFilter[];\r\n\r\n    constructor(\r\n        private companyManager: CompanyManagerService,\r\n        private router: Router) {\r\n\r\n        this.editCashSubject.subscribe((value: CashRecord) => {\r\n            this.router.navigate(\r\n                ['/' + this.companyManager.getCurrentCompanyId() + '/execution/cash/edit/'\r\n                    + value.costDirectionId + '/', value.cashId],\r\n            );\r\n        });\r\n\r\n        this.displayCashSubject.subscribe((value: CashRecord) => {\r\n            this.router.navigate(\r\n                ['/' + this.companyManager.getCurrentCompanyId() + '/execution/cash/display/'\r\n                    + value.costDirectionId + '/', value.cashId],\r\n            );\r\n        });\r\n\r\n        this.charterGroupFunctionsSubject.subscribe(() => {\r\n            this.router.navigate([this.companyManager.getCurrentCompanyId() + '/execution/charter/groupfunctions']);\r\n        });\r\n\r\n    }\r\n\r\n}\r\n","export class TradeConfiguration {\r\n    tradeSetupId: number;\r\n    companyId: string;\r\n    businessSectorNominalTradingOperation: boolean;\r\n    businessSectorNominalPostingPurpose: boolean;\r\n    weightUnitId: number;\r\n}\r\n","export class TradeStatus {\r\n    // tslint:disable-next-line:max-line-length\r\n    // this class is used to have matching values with the Trade Cost /Movement Ssrs Report. which is using a stored proc [Report].[TradeStatus]\r\n    private static list: TradeStatus[];\r\n    private static readonly open = new TradeStatus(1, 'Open');\r\n    private static readonly closed = new TradeStatus(2, 'Closed');\r\n    private static readonly realized = new TradeStatus(3, 'Executed');\r\n    private static readonly unrealized = new TradeStatus(4, 'Non-Executed');\r\n    private static readonly zeroTonnage = new TradeStatus(5, 'Zero Tonnages');\r\n    private static readonly cancelled = new TradeStatus(5, 'Cancelled');\r\n\r\n    value: number;\r\n    name: string;\r\n\r\n    constructor(value: number, name: string) {\r\n        this.value = value;\r\n        this.name = name;\r\n    }\r\n\r\n    public static getStatusList(): TradeStatus[] {\r\n        if (!this.list) {\r\n            this.list =\r\n                [\r\n                    this.open,\r\n                    this.closed,\r\n                    this.realized,\r\n                    this.unrealized,\r\n                    this.zeroTonnage,\r\n                    this.cancelled,\r\n                ];\r\n        }\r\n        return this.list;\r\n    }\r\n\r\n    public static getStatusStringList(): string[] {\r\n        if (!this.list) {\r\n            this.list =\r\n                [\r\n                    this.open,\r\n                    this.closed,\r\n                    this.realized,\r\n                    this.unrealized,\r\n                    this.zeroTonnage,\r\n                    this.cancelled,\r\n                ];\r\n        }\r\n        return this.list.map((item) => item.name);\r\n    }\r\n}\r\n","export enum ForeignExchangeRateViewMode {\r\n    Spot = 'Spot',\r\n    Daily = 'Daily',\r\n    Monthly = 'Monthly'\r\n}\r\n","export enum InterfaceStatus {\r\n    ReadyToTransmit = 1,\r\n    StandBy = 2,\r\n    TransmitError = 3,\r\n    Interfaced = 4,\r\n    Error = 5,\r\n    Rejected = 6,\r\n    Signed = 7,\r\n    Completed = 8,\r\n    InterfaceReady = 9,\r\n    NotPosted = 10,\r\n    NotInterfaced = 11,\r\n}\r\n","export enum InterfaceType {\r\n    AccountingInterface = 1,\r\n    PaymentRequestInterface = 2,\r\n}\r\n","import { UpdateInterfaceError } from '../../../../shared/services/Interface/dto/update-interface-error';\r\n\r\nexport class UpdateInterfaceStatusCommand {\r\n    accountingInterfaceError: UpdateInterfaceError[] = [];\r\n    accountingInterfaceStatus: string;\r\n}\r\n","import { InvoiceSetupResult } from '../../../dtos/invoice-setup-result';\r\nimport { AccountingFieldSetup } from '../../../entities/accounting-field-setup.entity';\r\nimport { AccountingParameter } from '../../../entities/accounting-parameter.entity';\r\nimport { AllocationSetUp } from '../../../entities/allocation-set-up-entity';\r\nimport { Company } from '../../../entities/company.entity';\r\nimport { DefaultAccountingSetup } from '../../../entities/default-accounting-setup.entity';\r\nimport { InterfaceSetup } from '../../../entities/interface-setup.entity';\r\nimport { MandatoryTradeApprovalImageSetup } from '../../../entities/mandatory-trade-fields';\r\nimport { RetentionPolicy } from '../../../entities/retention-policy.entity';\r\nimport { TradeConfiguration } from '../../../entities/trade-configuration-entity';\r\nimport { TradeParameter } from '../../../entities/trade-parameter.entity';\r\nimport { IntercoNoIntercoEmails } from './interco-no-interco-emails';\r\n\r\nexport class CompanyConfigurationRecord {\r\n    companyId: number;\r\n    companySetup: Company;\r\n    invoiceSetup: InvoiceSetupResult;\r\n    interfaceSetup: InterfaceSetup[];\r\n    allocationSetUp: AllocationSetUp[];\r\n    mandatoryTradeApprovalImageSetup: MandatoryTradeApprovalImageSetup[];\r\n    tradeConfiguration: TradeConfiguration;\r\n    interCoNoInterCoEmailSetup: IntercoNoIntercoEmails[];\r\n    mainAccountingSetup: AccountingFieldSetup[];\r\n    accountingParameters: AccountingParameter[];\r\n    tradeParameters: TradeParameter[];\r\n    defaultAccountingSetup: DefaultAccountingSetup;\r\n    retentionPolicy: RetentionPolicy;\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { CompanyManagerService } from '../../../core/services/company-manager.service';\r\nimport { HttpRequestOptions } from '../../entities/http-services/http-request-options.entity';\r\nimport { ApiCollection } from '../common/models';\r\nimport { AccountingInterfaceError } from '../Interface/dto/accounting-interface-error';\r\nimport { UpdateInterfaceError } from '../Interface/dto/update-interface-error';\r\nimport { UpdateInterfaceStatusCommand } from '../Interface/dto/update-interface-status-command';\r\nimport { HttpBaseService } from './http-base.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AccountingInterfaceService extends HttpBaseService {\r\n    private readonly accountingInterfaceControllerUrl = 'accountinginterface';\r\n    constructor(\r\n        http: HttpClient,\r\n        private companyManager: CompanyManagerService) {\r\n        super(http);\r\n    }\r\n\r\n    listErrorsForErrorManagement(): Observable<ApiCollection<AccountingInterfaceError>> {\r\n        const company: string = this.companyManager.getCurrentCompanyId();\r\n        const options: HttpRequestOptions = new HttpRequestOptions();\r\n\r\n        return this.get<ApiCollection<AccountingInterfaceError>>(\r\n            `${environment.accountingInterfaceServiceLink}/${encodeURIComponent(String(company))}`\r\n            + `/${this.accountingInterfaceControllerUrl}/listerrorsforerrormanagement`,\r\n            options);\r\n    }\r\n\r\n    // Update interface status\r\n    updateAccountingErrorStatus(interfaceError: UpdateInterfaceError[], interfaceStatus: string): Observable<AccountingInterfaceError> {\r\n        const company: string = this.companyManager.getCurrentCompanyId();\r\n        const command = this.mapToUpdateInterfaceStatusCommand(interfaceError, interfaceStatus);\r\n        return this.post<AccountingInterfaceError>(\r\n            `${environment.accountingInterfaceServiceLink}/${encodeURIComponent(String(company))}`\r\n            + `/${this.accountingInterfaceControllerUrl}/updatestatusofaccountingerror`,\r\n            command);\r\n    }\r\n\r\n    private mapToUpdateInterfaceStatusCommand(interfaceError: UpdateInterfaceError[],\r\n        interfaceStatus: string): UpdateInterfaceStatusCommand {\r\n        const command = new UpdateInterfaceStatusCommand();\r\n        command.accountingInterfaceError = interfaceError;\r\n        command.accountingInterfaceStatus = interfaceStatus;\r\n        return command;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ListAndSearchFilterDto } from '../../dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { DataLoader } from '../../entities/list-and-search/list-and-search-data-loader.entity';\r\nimport { ListAndSearchFilter } from '../../entities/list-and-search/list-and-search-filter.entity';\r\nimport { ListAndSearchRequest } from '../../entities/list-and-search/list-and-search-request.entity';\r\nimport { TradingService } from '../http-services/trading.service';\r\nimport { FxDealSearchResult } from './../../dtos/fxDeal-search-result';\r\nimport { ApiPaginatedCollection } from '../common/models';\r\n\r\n@Injectable()\r\nexport class FxDealDataLoader implements DataLoader {\r\n\r\n    constructor(private tradingService: TradingService) { }\r\n\r\n    getData(filters: ListAndSearchFilter[],\r\n        dataVersionId?: number,\r\n        offset?: number,\r\n        limit?: number): Observable<ApiPaginatedCollection<any>> {\r\n\r\n        const filtersForColumns: ListAndSearchFilterDto[] = filters.map((filter) => {\r\n            return new ListAndSearchFilterDto(filter);\r\n        });\r\n\r\n        const request: ListAndSearchRequest = {\r\n            clauses: { clauses: filtersForColumns },\r\n            offset,\r\n            limit,\r\n            dataVersionId,\r\n        };\r\n\r\n        const list = this.tradingService.fxDealSearch(request)\r\n            .pipe(\r\n                map((data) => {\r\n                    return data;\r\n                }),\r\n            );\r\n\r\n        return list;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { MasterDataLoader } from '../../entities/data-loader';\r\nimport { Department } from '../../entities/department.entity';\r\nimport { PagingOptions } from '../../entities/http-services/paging-options';\r\nimport { ApiPaginatedCollection } from '../common/models';\r\nimport { MasterdataService } from '../http-services/masterdata.service';\r\n\r\n@Injectable()\r\nexport class DepartmentDataLoader implements MasterDataLoader {\r\n    constructor(private masterDataService: MasterdataService) { }\r\n\r\n    getData(searchTerm: string,\r\n        pagingOptions: PagingOptions): Observable<Department[]> {\r\n\r\n        const list = this.masterDataService.getDepartments(searchTerm, pagingOptions)\r\n            .pipe(\r\n                map((data) => {\r\n                    return data.value;\r\n                }),\r\n            );\r\n\r\n        return list;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ListAndSearchFilterDto } from '../../dtos/list-and-search/list-and-search-filter-dto.dto';\r\nimport { ListAndSearchRequest } from '../../entities/list-and-search/list-and-search-request.entity';\r\nimport { TradingService } from '../http-services/trading.service';\r\nimport { MasterDataLoader } from '../../entities/data-loader';\r\nimport { Counterparty } from '../../entities/counterparty.entity';\r\n\r\n@Injectable()\r\nexport class BankBrokerContextualDataLoader implements MasterDataLoader {\r\n\r\n    constructor(private tradingService: TradingService) { }\r\n\r\n    getData(): Observable<Counterparty[]> {\r\n        const filtersForColumns: ListAndSearchFilterDto[] = [];\r\n        const request: ListAndSearchRequest = {\r\n            clauses: { clauses: filtersForColumns },\r\n        };\r\n        const list = this.tradingService.bankBrokerContextualSearch(request)\r\n            .pipe(\r\n                map((data) => {\r\n                    return data.value;\r\n                }),\r\n            );\r\n        return list;\r\n    }\r\n}\r\n"],"sourceRoot":""}